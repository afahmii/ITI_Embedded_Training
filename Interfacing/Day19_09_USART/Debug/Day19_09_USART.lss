
Day19_09_USART.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000f02  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  00000f02  00000f96  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000008  00800068  00800068  00000f9e  2**0
                  ALLOC
  3 .stab         00001764  00000000  00000000  00000fa0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000013f6  00000000  00000000  00002704  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 c2 02 	jmp	0x584	; 0x584 <__vector_13>
  38:	0c 94 7d 02 	jmp	0x4fa	; 0x4fa <__vector_14>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 e0       	ldi	r30, 0x02	; 2
  68:	ff e0       	ldi	r31, 0x0F	; 15
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a8 36       	cpi	r26, 0x68	; 104
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a8 e6       	ldi	r26, 0x68	; 104
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 37       	cpi	r26, 0x70	; 112
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 41 07 	call	0xe82	; 0xe82 <main>
  8a:	0c 94 7f 07 	jmp	0xefe	; 0xefe <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <UART_Vidinit>:

st_uart_int UART_INT = {RX_Status,
						TX_Status,
						UDR_Status};

void UART_Vidinit(st_uart_init * PtrUART){
  92:	df 93       	push	r29
  94:	cf 93       	push	r28
  96:	00 d0       	rcall	.+0      	; 0x98 <UART_Vidinit+0x6>
  98:	0f 92       	push	r0
  9a:	cd b7       	in	r28, 0x3d	; 61
  9c:	de b7       	in	r29, 0x3e	; 62
  9e:	9b 83       	std	Y+3, r25	; 0x03
  a0:	8a 83       	std	Y+2, r24	; 0x02

	u8 Local_u8temp;

	/*	Select Mode of Operation - UCSRC*/
	/*==================================*/
	if(PtrUART->STM_UART_MODE == UART_Async){
  a2:	ea 81       	ldd	r30, Y+2	; 0x02
  a4:	fb 81       	ldd	r31, Y+3	; 0x03
  a6:	80 81       	ld	r24, Z
  a8:	88 23       	and	r24, r24
  aa:	21 f4       	brne	.+8      	; 0xb4 <UART_Vidinit+0x22>
		CLR_Bit(Local_u8temp,UCSRC_UMSEL); /*Clear Bit*/
  ac:	89 81       	ldd	r24, Y+1	; 0x01
  ae:	8f 7b       	andi	r24, 0xBF	; 191
  b0:	89 83       	std	Y+1, r24	; 0x01
  b2:	08 c0       	rjmp	.+16     	; 0xc4 <UART_Vidinit+0x32>
	}
	else if(PtrUART->STM_UART_MODE == USART_Sync){
  b4:	ea 81       	ldd	r30, Y+2	; 0x02
  b6:	fb 81       	ldd	r31, Y+3	; 0x03
  b8:	80 81       	ld	r24, Z
  ba:	81 30       	cpi	r24, 0x01	; 1
  bc:	19 f4       	brne	.+6      	; 0xc4 <UART_Vidinit+0x32>
		Set_Bit(Local_u8temp,UCSRC_UMSEL); /*Set Bit*/
  be:	89 81       	ldd	r24, Y+1	; 0x01
  c0:	80 64       	ori	r24, 0x40	; 64
  c2:	89 83       	std	Y+1, r24	; 0x01
	}
	/*		Set Parity - UCSRC			*/
	/*==================================*/
	if(PtrUART->STM_UART_Parity == UART_ParityDisable){
  c4:	ea 81       	ldd	r30, Y+2	; 0x02
  c6:	fb 81       	ldd	r31, Y+3	; 0x03
  c8:	81 81       	ldd	r24, Z+1	; 0x01
  ca:	88 23       	and	r24, r24
  cc:	39 f4       	brne	.+14     	; 0xdc <UART_Vidinit+0x4a>
		CLR_Bit(Local_u8temp,UCSRC_UPM0);
  ce:	89 81       	ldd	r24, Y+1	; 0x01
  d0:	8f 7e       	andi	r24, 0xEF	; 239
  d2:	89 83       	std	Y+1, r24	; 0x01
		CLR_Bit(Local_u8temp,UCSRC_UPM1);	/*Clear Bits*/
  d4:	89 81       	ldd	r24, Y+1	; 0x01
  d6:	8f 7d       	andi	r24, 0xDF	; 223
  d8:	89 83       	std	Y+1, r24	; 0x01
  da:	17 c0       	rjmp	.+46     	; 0x10a <UART_Vidinit+0x78>
	}
	else if(PtrUART->STM_UART_Parity == UART_PartiyEven){
  dc:	ea 81       	ldd	r30, Y+2	; 0x02
  de:	fb 81       	ldd	r31, Y+3	; 0x03
  e0:	81 81       	ldd	r24, Z+1	; 0x01
  e2:	82 30       	cpi	r24, 0x02	; 2
  e4:	39 f4       	brne	.+14     	; 0xf4 <UART_Vidinit+0x62>
		CLR_Bit(Local_u8temp,UCSRC_UPM0);
  e6:	89 81       	ldd	r24, Y+1	; 0x01
  e8:	8f 7e       	andi	r24, 0xEF	; 239
  ea:	89 83       	std	Y+1, r24	; 0x01
		Set_Bit(Local_u8temp,UCSRC_UPM1);
  ec:	89 81       	ldd	r24, Y+1	; 0x01
  ee:	80 62       	ori	r24, 0x20	; 32
  f0:	89 83       	std	Y+1, r24	; 0x01
  f2:	0b c0       	rjmp	.+22     	; 0x10a <UART_Vidinit+0x78>
	}
	else if(PtrUART->STM_UART_Parity == UART_PartiyOdd){
  f4:	ea 81       	ldd	r30, Y+2	; 0x02
  f6:	fb 81       	ldd	r31, Y+3	; 0x03
  f8:	81 81       	ldd	r24, Z+1	; 0x01
  fa:	83 30       	cpi	r24, 0x03	; 3
  fc:	31 f4       	brne	.+12     	; 0x10a <UART_Vidinit+0x78>
		Set_Bit(Local_u8temp,UCSRC_UPM0);
  fe:	89 81       	ldd	r24, Y+1	; 0x01
 100:	80 61       	ori	r24, 0x10	; 16
 102:	89 83       	std	Y+1, r24	; 0x01
		Set_Bit(Local_u8temp,UCSRC_UPM1);
 104:	89 81       	ldd	r24, Y+1	; 0x01
 106:	80 62       	ori	r24, 0x20	; 32
 108:	89 83       	std	Y+1, r24	; 0x01
	}
	/*	Set No of Stop Bits - UCSRC		*/
	/*==================================*/
	if(PtrUART->STM_UART_StopBit == UART_OneStopBit){
 10a:	ea 81       	ldd	r30, Y+2	; 0x02
 10c:	fb 81       	ldd	r31, Y+3	; 0x03
 10e:	82 81       	ldd	r24, Z+2	; 0x02
 110:	88 23       	and	r24, r24
 112:	21 f4       	brne	.+8      	; 0x11c <UART_Vidinit+0x8a>
		CLR_Bit(Local_u8temp,UCSRC_USBS);
 114:	89 81       	ldd	r24, Y+1	; 0x01
 116:	87 7f       	andi	r24, 0xF7	; 247
 118:	89 83       	std	Y+1, r24	; 0x01
 11a:	08 c0       	rjmp	.+16     	; 0x12c <UART_Vidinit+0x9a>
	}
	else if(PtrUART->STM_UART_StopBit == UART_TwoStopBits){
 11c:	ea 81       	ldd	r30, Y+2	; 0x02
 11e:	fb 81       	ldd	r31, Y+3	; 0x03
 120:	82 81       	ldd	r24, Z+2	; 0x02
 122:	81 30       	cpi	r24, 0x01	; 1
 124:	19 f4       	brne	.+6      	; 0x12c <UART_Vidinit+0x9a>
		Set_Bit(Local_u8temp,UCSRC_USBS);
 126:	89 81       	ldd	r24, Y+1	; 0x01
 128:	88 60       	ori	r24, 0x08	; 8
 12a:	89 83       	std	Y+1, r24	; 0x01
	}
	/*Character Size (5~9) - UCSRC/UCSRB*/
	/*==================================*/
	if(PtrUART->STM_UART_DataBits == UART_Data_5Bit){
 12c:	ea 81       	ldd	r30, Y+2	; 0x02
 12e:	fb 81       	ldd	r31, Y+3	; 0x03
 130:	83 81       	ldd	r24, Z+3	; 0x03
 132:	88 23       	and	r24, r24
 134:	71 f4       	brne	.+28     	; 0x152 <UART_Vidinit+0xc0>
		CLR_Bit(Local_u8temp,UCSRC_UCSZ0);
 136:	89 81       	ldd	r24, Y+1	; 0x01
 138:	8d 7f       	andi	r24, 0xFD	; 253
 13a:	89 83       	std	Y+1, r24	; 0x01
		CLR_Bit(Local_u8temp,UCSRC_UCSZ1);
 13c:	89 81       	ldd	r24, Y+1	; 0x01
 13e:	8b 7f       	andi	r24, 0xFB	; 251
 140:	89 83       	std	Y+1, r24	; 0x01
		CLR_Bit(UCSRB,UCSRB_UCSZ2);
 142:	aa e2       	ldi	r26, 0x2A	; 42
 144:	b0 e0       	ldi	r27, 0x00	; 0
 146:	ea e2       	ldi	r30, 0x2A	; 42
 148:	f0 e0       	ldi	r31, 0x00	; 0
 14a:	80 81       	ld	r24, Z
 14c:	8b 7f       	andi	r24, 0xFB	; 251
 14e:	8c 93       	st	X, r24
 150:	4b c0       	rjmp	.+150    	; 0x1e8 <UART_Vidinit+0x156>
	}
	else if(PtrUART->STM_UART_DataBits == UART_Data_6Bit){
 152:	ea 81       	ldd	r30, Y+2	; 0x02
 154:	fb 81       	ldd	r31, Y+3	; 0x03
 156:	83 81       	ldd	r24, Z+3	; 0x03
 158:	81 30       	cpi	r24, 0x01	; 1
 15a:	71 f4       	brne	.+28     	; 0x178 <UART_Vidinit+0xe6>
		Set_Bit(Local_u8temp,UCSRC_UCSZ0);
 15c:	89 81       	ldd	r24, Y+1	; 0x01
 15e:	82 60       	ori	r24, 0x02	; 2
 160:	89 83       	std	Y+1, r24	; 0x01
		CLR_Bit(Local_u8temp,UCSRC_UCSZ1);
 162:	89 81       	ldd	r24, Y+1	; 0x01
 164:	8b 7f       	andi	r24, 0xFB	; 251
 166:	89 83       	std	Y+1, r24	; 0x01
		CLR_Bit(UCSRB,UCSRB_UCSZ2);
 168:	aa e2       	ldi	r26, 0x2A	; 42
 16a:	b0 e0       	ldi	r27, 0x00	; 0
 16c:	ea e2       	ldi	r30, 0x2A	; 42
 16e:	f0 e0       	ldi	r31, 0x00	; 0
 170:	80 81       	ld	r24, Z
 172:	8b 7f       	andi	r24, 0xFB	; 251
 174:	8c 93       	st	X, r24
 176:	38 c0       	rjmp	.+112    	; 0x1e8 <UART_Vidinit+0x156>
	}
	else if(PtrUART->STM_UART_DataBits == UART_Data_7Bit){
 178:	ea 81       	ldd	r30, Y+2	; 0x02
 17a:	fb 81       	ldd	r31, Y+3	; 0x03
 17c:	83 81       	ldd	r24, Z+3	; 0x03
 17e:	82 30       	cpi	r24, 0x02	; 2
 180:	71 f4       	brne	.+28     	; 0x19e <UART_Vidinit+0x10c>
		CLR_Bit(Local_u8temp,UCSRC_UCSZ0);
 182:	89 81       	ldd	r24, Y+1	; 0x01
 184:	8d 7f       	andi	r24, 0xFD	; 253
 186:	89 83       	std	Y+1, r24	; 0x01
		Set_Bit(Local_u8temp,UCSRC_UCSZ1);
 188:	89 81       	ldd	r24, Y+1	; 0x01
 18a:	84 60       	ori	r24, 0x04	; 4
 18c:	89 83       	std	Y+1, r24	; 0x01
		CLR_Bit(UCSRB,UCSRB_UCSZ2);
 18e:	aa e2       	ldi	r26, 0x2A	; 42
 190:	b0 e0       	ldi	r27, 0x00	; 0
 192:	ea e2       	ldi	r30, 0x2A	; 42
 194:	f0 e0       	ldi	r31, 0x00	; 0
 196:	80 81       	ld	r24, Z
 198:	8b 7f       	andi	r24, 0xFB	; 251
 19a:	8c 93       	st	X, r24
 19c:	25 c0       	rjmp	.+74     	; 0x1e8 <UART_Vidinit+0x156>
	}
	else if(PtrUART->STM_UART_DataBits == UART_Data_8Bit){
 19e:	ea 81       	ldd	r30, Y+2	; 0x02
 1a0:	fb 81       	ldd	r31, Y+3	; 0x03
 1a2:	83 81       	ldd	r24, Z+3	; 0x03
 1a4:	83 30       	cpi	r24, 0x03	; 3
 1a6:	71 f4       	brne	.+28     	; 0x1c4 <UART_Vidinit+0x132>
		Set_Bit(Local_u8temp,UCSRC_UCSZ0);
 1a8:	89 81       	ldd	r24, Y+1	; 0x01
 1aa:	82 60       	ori	r24, 0x02	; 2
 1ac:	89 83       	std	Y+1, r24	; 0x01
		Set_Bit(Local_u8temp,UCSRC_UCSZ1);
 1ae:	89 81       	ldd	r24, Y+1	; 0x01
 1b0:	84 60       	ori	r24, 0x04	; 4
 1b2:	89 83       	std	Y+1, r24	; 0x01
		CLR_Bit(UCSRB,UCSRB_UCSZ2);
 1b4:	aa e2       	ldi	r26, 0x2A	; 42
 1b6:	b0 e0       	ldi	r27, 0x00	; 0
 1b8:	ea e2       	ldi	r30, 0x2A	; 42
 1ba:	f0 e0       	ldi	r31, 0x00	; 0
 1bc:	80 81       	ld	r24, Z
 1be:	8b 7f       	andi	r24, 0xFB	; 251
 1c0:	8c 93       	st	X, r24
 1c2:	12 c0       	rjmp	.+36     	; 0x1e8 <UART_Vidinit+0x156>
	}
	else if(PtrUART->STM_UART_DataBits == UART_Data_9Bit){
 1c4:	ea 81       	ldd	r30, Y+2	; 0x02
 1c6:	fb 81       	ldd	r31, Y+3	; 0x03
 1c8:	83 81       	ldd	r24, Z+3	; 0x03
 1ca:	87 30       	cpi	r24, 0x07	; 7
 1cc:	69 f4       	brne	.+26     	; 0x1e8 <UART_Vidinit+0x156>
		Set_Bit(Local_u8temp,UCSRC_UCSZ0);
 1ce:	89 81       	ldd	r24, Y+1	; 0x01
 1d0:	82 60       	ori	r24, 0x02	; 2
 1d2:	89 83       	std	Y+1, r24	; 0x01
		Set_Bit(Local_u8temp,UCSRC_UCSZ1);
 1d4:	89 81       	ldd	r24, Y+1	; 0x01
 1d6:	84 60       	ori	r24, 0x04	; 4
 1d8:	89 83       	std	Y+1, r24	; 0x01
		Set_Bit(UCSRB,UCSRB_UCSZ2);
 1da:	aa e2       	ldi	r26, 0x2A	; 42
 1dc:	b0 e0       	ldi	r27, 0x00	; 0
 1de:	ea e2       	ldi	r30, 0x2A	; 42
 1e0:	f0 e0       	ldi	r31, 0x00	; 0
 1e2:	80 81       	ld	r24, Z
 1e4:	84 60       	ori	r24, 0x04	; 4
 1e6:	8c 93       	st	X, r24
	}

	/*		Clock Polarity- UCSRC		*/
	/*==================================*/
	if(PtrUART->STM_UART_CLKPolarity == UART_Sampling_RX_Falling){
 1e8:	ea 81       	ldd	r30, Y+2	; 0x02
 1ea:	fb 81       	ldd	r31, Y+3	; 0x03
 1ec:	84 81       	ldd	r24, Z+4	; 0x04
 1ee:	88 23       	and	r24, r24
 1f0:	21 f4       	brne	.+8      	; 0x1fa <UART_Vidinit+0x168>
		CLR_Bit(Local_u8temp,UCSRC_UCPOL);
 1f2:	89 81       	ldd	r24, Y+1	; 0x01
 1f4:	8e 7f       	andi	r24, 0xFE	; 254
 1f6:	89 83       	std	Y+1, r24	; 0x01
 1f8:	08 c0       	rjmp	.+16     	; 0x20a <UART_Vidinit+0x178>
	}
	else if(PtrUART->STM_UART_CLKPolarity == UART_Sampling_RX_Rising){
 1fa:	ea 81       	ldd	r30, Y+2	; 0x02
 1fc:	fb 81       	ldd	r31, Y+3	; 0x03
 1fe:	84 81       	ldd	r24, Z+4	; 0x04
 200:	81 30       	cpi	r24, 0x01	; 1
 202:	19 f4       	brne	.+6      	; 0x20a <UART_Vidinit+0x178>
		Set_Bit(Local_u8temp,UCSRC_UCPOL);
 204:	89 81       	ldd	r24, Y+1	; 0x01
 206:	81 60       	ori	r24, 0x01	; 1
 208:	89 83       	std	Y+1, r24	; 0x01
	}
	/*		Access UCSRC Register		*/
	/*==================================*/
	Set_Bit(Local_u8temp,UCSRC_URSEL); 	/*Set URSEL Bit to 1 in Local_u8temp*/
 20a:	89 81       	ldd	r24, Y+1	; 0x01
 20c:	80 68       	ori	r24, 0x80	; 128
 20e:	89 83       	std	Y+1, r24	; 0x01
	UCSRC = Local_u8temp ;				/*Store all Local_u8temp Bits values into UCSRC*/
 210:	e0 e4       	ldi	r30, 0x40	; 64
 212:	f0 e0       	ldi	r31, 0x00	; 0
 214:	89 81       	ldd	r24, Y+1	; 0x01
 216:	80 83       	st	Z, r24

	/*Enable/Disable Double Transmission Speed*/
	/*==================================*/
	if(PtrUART->STM_UART_DoubleSpeed == UART_DoubleSpeedDisabled){
 218:	ea 81       	ldd	r30, Y+2	; 0x02
 21a:	fb 81       	ldd	r31, Y+3	; 0x03
 21c:	85 81       	ldd	r24, Z+5	; 0x05
 21e:	88 23       	and	r24, r24
 220:	41 f4       	brne	.+16     	; 0x232 <UART_Vidinit+0x1a0>
		CLR_Bit(UCSRA,UCSRA_U2X);
 222:	ab e2       	ldi	r26, 0x2B	; 43
 224:	b0 e0       	ldi	r27, 0x00	; 0
 226:	eb e2       	ldi	r30, 0x2B	; 43
 228:	f0 e0       	ldi	r31, 0x00	; 0
 22a:	80 81       	ld	r24, Z
 22c:	8d 7f       	andi	r24, 0xFD	; 253
 22e:	8c 93       	st	X, r24
 230:	0c c0       	rjmp	.+24     	; 0x24a <UART_Vidinit+0x1b8>
	}
	else if(PtrUART->STM_UART_DoubleSpeed == UART_DoubleSpeedEnabled){
 232:	ea 81       	ldd	r30, Y+2	; 0x02
 234:	fb 81       	ldd	r31, Y+3	; 0x03
 236:	85 81       	ldd	r24, Z+5	; 0x05
 238:	81 30       	cpi	r24, 0x01	; 1
 23a:	39 f4       	brne	.+14     	; 0x24a <UART_Vidinit+0x1b8>
		Set_Bit(UCSRA,UCSRA_U2X);
 23c:	ab e2       	ldi	r26, 0x2B	; 43
 23e:	b0 e0       	ldi	r27, 0x00	; 0
 240:	eb e2       	ldi	r30, 0x2B	; 43
 242:	f0 e0       	ldi	r31, 0x00	; 0
 244:	80 81       	ld	r24, Z
 246:	82 60       	ori	r24, 0x02	; 2
 248:	8c 93       	st	X, r24
	}

	/*Enable/Disable Double Processing Mode*/
	/*==================================*/
	if(PtrUART->STM_UART_MultiProcessing == UART_MultiProcessingDisabled){
 24a:	ea 81       	ldd	r30, Y+2	; 0x02
 24c:	fb 81       	ldd	r31, Y+3	; 0x03
 24e:	86 81       	ldd	r24, Z+6	; 0x06
 250:	88 23       	and	r24, r24
 252:	41 f4       	brne	.+16     	; 0x264 <UART_Vidinit+0x1d2>
		CLR_Bit(UCSRA,UCSRA_MPCM);
 254:	ab e2       	ldi	r26, 0x2B	; 43
 256:	b0 e0       	ldi	r27, 0x00	; 0
 258:	eb e2       	ldi	r30, 0x2B	; 43
 25a:	f0 e0       	ldi	r31, 0x00	; 0
 25c:	80 81       	ld	r24, Z
 25e:	8e 7f       	andi	r24, 0xFE	; 254
 260:	8c 93       	st	X, r24
 262:	0c c0       	rjmp	.+24     	; 0x27c <UART_Vidinit+0x1ea>
	}
	else if(PtrUART->STM_UART_MultiProcessing == UART_MultiProcessingEnabled){
 264:	ea 81       	ldd	r30, Y+2	; 0x02
 266:	fb 81       	ldd	r31, Y+3	; 0x03
 268:	86 81       	ldd	r24, Z+6	; 0x06
 26a:	81 30       	cpi	r24, 0x01	; 1
 26c:	39 f4       	brne	.+14     	; 0x27c <UART_Vidinit+0x1ea>
		Set_Bit(UCSRA,UCSRA_MPCM);
 26e:	ab e2       	ldi	r26, 0x2B	; 43
 270:	b0 e0       	ldi	r27, 0x00	; 0
 272:	eb e2       	ldi	r30, 0x2B	; 43
 274:	f0 e0       	ldi	r31, 0x00	; 0
 276:	80 81       	ld	r24, Z
 278:	81 60       	ori	r24, 0x01	; 1
 27a:	8c 93       	st	X, r24
	}
	/*			Set BAUD Rate			*/
	/*==================================*/
	UBRRL = PtrUART->STM_UART_BAUDRAte; /*9600*/
 27c:	e9 e2       	ldi	r30, 0x29	; 41
 27e:	f0 e0       	ldi	r31, 0x00	; 0
 280:	aa 81       	ldd	r26, Y+2	; 0x02
 282:	bb 81       	ldd	r27, Y+3	; 0x03
 284:	17 96       	adiw	r26, 0x07	; 7
 286:	8c 91       	ld	r24, X
 288:	17 97       	sbiw	r26, 0x07	; 7
 28a:	80 83       	st	Z, r24

}/*End of UART_INIT Function*/
 28c:	0f 90       	pop	r0
 28e:	0f 90       	pop	r0
 290:	0f 90       	pop	r0
 292:	cf 91       	pop	r28
 294:	df 91       	pop	r29
 296:	08 95       	ret

00000298 <UART_VidReceiverEnable>:



void UART_VidReceiverEnable(void){
 298:	df 93       	push	r29
 29a:	cf 93       	push	r28
 29c:	cd b7       	in	r28, 0x3d	; 61
 29e:	de b7       	in	r29, 0x3e	; 62
	UCSRB |= (1<<UCSRB_RXEN);
 2a0:	aa e2       	ldi	r26, 0x2A	; 42
 2a2:	b0 e0       	ldi	r27, 0x00	; 0
 2a4:	ea e2       	ldi	r30, 0x2A	; 42
 2a6:	f0 e0       	ldi	r31, 0x00	; 0
 2a8:	80 81       	ld	r24, Z
 2aa:	80 61       	ori	r24, 0x10	; 16
 2ac:	8c 93       	st	X, r24
}
 2ae:	cf 91       	pop	r28
 2b0:	df 91       	pop	r29
 2b2:	08 95       	ret

000002b4 <UART_VidReceiverDisable>:
void UART_VidReceiverDisable(void){
 2b4:	df 93       	push	r29
 2b6:	cf 93       	push	r28
 2b8:	cd b7       	in	r28, 0x3d	; 61
 2ba:	de b7       	in	r29, 0x3e	; 62
	UCSRB &= ~(1<<UCSRB_RXEN);
 2bc:	aa e2       	ldi	r26, 0x2A	; 42
 2be:	b0 e0       	ldi	r27, 0x00	; 0
 2c0:	ea e2       	ldi	r30, 0x2A	; 42
 2c2:	f0 e0       	ldi	r31, 0x00	; 0
 2c4:	80 81       	ld	r24, Z
 2c6:	8f 7e       	andi	r24, 0xEF	; 239
 2c8:	8c 93       	st	X, r24
}
 2ca:	cf 91       	pop	r28
 2cc:	df 91       	pop	r29
 2ce:	08 95       	ret

000002d0 <UART_VidTransmitterEnable>:
void UART_VidTransmitterEnable(void){
 2d0:	df 93       	push	r29
 2d2:	cf 93       	push	r28
 2d4:	cd b7       	in	r28, 0x3d	; 61
 2d6:	de b7       	in	r29, 0x3e	; 62
	UCSRB |= (1<<UCSRB_TXEN);
 2d8:	aa e2       	ldi	r26, 0x2A	; 42
 2da:	b0 e0       	ldi	r27, 0x00	; 0
 2dc:	ea e2       	ldi	r30, 0x2A	; 42
 2de:	f0 e0       	ldi	r31, 0x00	; 0
 2e0:	80 81       	ld	r24, Z
 2e2:	88 60       	ori	r24, 0x08	; 8
 2e4:	8c 93       	st	X, r24
}
 2e6:	cf 91       	pop	r28
 2e8:	df 91       	pop	r29
 2ea:	08 95       	ret

000002ec <UART_VidTransmitterDisable>:
void UART_VidTransmitterDisable(void){
 2ec:	df 93       	push	r29
 2ee:	cf 93       	push	r28
 2f0:	cd b7       	in	r28, 0x3d	; 61
 2f2:	de b7       	in	r29, 0x3e	; 62
	UCSRB &= ~(1<<UCSRB_TXEN);
 2f4:	aa e2       	ldi	r26, 0x2A	; 42
 2f6:	b0 e0       	ldi	r27, 0x00	; 0
 2f8:	ea e2       	ldi	r30, 0x2A	; 42
 2fa:	f0 e0       	ldi	r31, 0x00	; 0
 2fc:	80 81       	ld	r24, Z
 2fe:	87 7f       	andi	r24, 0xF7	; 247
 300:	8c 93       	st	X, r24
}
 302:	cf 91       	pop	r28
 304:	df 91       	pop	r29
 306:	08 95       	ret

00000308 <UART_VidInterruptInit>:
void UART_VidInterruptInit(st_uart_int * PtrUART){
 308:	df 93       	push	r29
 30a:	cf 93       	push	r28
 30c:	00 d0       	rcall	.+0      	; 0x30e <UART_VidInterruptInit+0x6>
 30e:	cd b7       	in	r28, 0x3d	; 61
 310:	de b7       	in	r29, 0x3e	; 62
 312:	9a 83       	std	Y+2, r25	; 0x02
 314:	89 83       	std	Y+1, r24	; 0x01

	/*Enable/Disable RX Complete interrupt*/
	if(PtrUART->STM_RX_Status == UART_RX_Complete_INT_Disabled){
 316:	e9 81       	ldd	r30, Y+1	; 0x01
 318:	fa 81       	ldd	r31, Y+2	; 0x02
 31a:	80 81       	ld	r24, Z
 31c:	88 23       	and	r24, r24
 31e:	41 f4       	brne	.+16     	; 0x330 <UART_VidInterruptInit+0x28>
		CLR_Bit(UCSRB,UCSRB_RXCIE);
 320:	aa e2       	ldi	r26, 0x2A	; 42
 322:	b0 e0       	ldi	r27, 0x00	; 0
 324:	ea e2       	ldi	r30, 0x2A	; 42
 326:	f0 e0       	ldi	r31, 0x00	; 0
 328:	80 81       	ld	r24, Z
 32a:	8f 77       	andi	r24, 0x7F	; 127
 32c:	8c 93       	st	X, r24
 32e:	0c c0       	rjmp	.+24     	; 0x348 <UART_VidInterruptInit+0x40>
	}
	else if(PtrUART->STM_RX_Status == UART_RX_Complete_INT_Enabled){
 330:	e9 81       	ldd	r30, Y+1	; 0x01
 332:	fa 81       	ldd	r31, Y+2	; 0x02
 334:	80 81       	ld	r24, Z
 336:	81 30       	cpi	r24, 0x01	; 1
 338:	39 f4       	brne	.+14     	; 0x348 <UART_VidInterruptInit+0x40>
		Set_Bit(UCSRB,UCSRB_RXCIE);
 33a:	aa e2       	ldi	r26, 0x2A	; 42
 33c:	b0 e0       	ldi	r27, 0x00	; 0
 33e:	ea e2       	ldi	r30, 0x2A	; 42
 340:	f0 e0       	ldi	r31, 0x00	; 0
 342:	80 81       	ld	r24, Z
 344:	80 68       	ori	r24, 0x80	; 128
 346:	8c 93       	st	X, r24
	}
	/*Enable/Disable TX Complete Interrupt*/
	if(PtrUART->STM_TX_Status == UART_TX_Complete_INT_Disabled){
 348:	e9 81       	ldd	r30, Y+1	; 0x01
 34a:	fa 81       	ldd	r31, Y+2	; 0x02
 34c:	81 81       	ldd	r24, Z+1	; 0x01
 34e:	88 23       	and	r24, r24
 350:	41 f4       	brne	.+16     	; 0x362 <UART_VidInterruptInit+0x5a>
		CLR_Bit(UCSRB,UCSRB_TXCIE);
 352:	aa e2       	ldi	r26, 0x2A	; 42
 354:	b0 e0       	ldi	r27, 0x00	; 0
 356:	ea e2       	ldi	r30, 0x2A	; 42
 358:	f0 e0       	ldi	r31, 0x00	; 0
 35a:	80 81       	ld	r24, Z
 35c:	8f 7b       	andi	r24, 0xBF	; 191
 35e:	8c 93       	st	X, r24
 360:	0c c0       	rjmp	.+24     	; 0x37a <UART_VidInterruptInit+0x72>
	}
	else if(PtrUART->STM_TX_Status == UART_TX_Complete_INT_Enabled){
 362:	e9 81       	ldd	r30, Y+1	; 0x01
 364:	fa 81       	ldd	r31, Y+2	; 0x02
 366:	81 81       	ldd	r24, Z+1	; 0x01
 368:	81 30       	cpi	r24, 0x01	; 1
 36a:	39 f4       	brne	.+14     	; 0x37a <UART_VidInterruptInit+0x72>
		Set_Bit(UCSRB,UCSRB_TXCIE);
 36c:	aa e2       	ldi	r26, 0x2A	; 42
 36e:	b0 e0       	ldi	r27, 0x00	; 0
 370:	ea e2       	ldi	r30, 0x2A	; 42
 372:	f0 e0       	ldi	r31, 0x00	; 0
 374:	80 81       	ld	r24, Z
 376:	80 64       	ori	r24, 0x40	; 64
 378:	8c 93       	st	X, r24
	}
	/*Enable/Disable Data Register Empty Interrupt*/
	if(PtrUART->STM_UDR_Status == UART_Data_Reg_Empty_INT_Disabled){
 37a:	e9 81       	ldd	r30, Y+1	; 0x01
 37c:	fa 81       	ldd	r31, Y+2	; 0x02
 37e:	82 81       	ldd	r24, Z+2	; 0x02
 380:	88 23       	and	r24, r24
 382:	41 f4       	brne	.+16     	; 0x394 <UART_VidInterruptInit+0x8c>
		CLR_Bit(UCSRB,UCSRB_UDRIE);
 384:	aa e2       	ldi	r26, 0x2A	; 42
 386:	b0 e0       	ldi	r27, 0x00	; 0
 388:	ea e2       	ldi	r30, 0x2A	; 42
 38a:	f0 e0       	ldi	r31, 0x00	; 0
 38c:	80 81       	ld	r24, Z
 38e:	8f 7d       	andi	r24, 0xDF	; 223
 390:	8c 93       	st	X, r24
 392:	0c c0       	rjmp	.+24     	; 0x3ac <UART_VidInterruptInit+0xa4>
	}
	else if(PtrUART->STM_UDR_Status == UART_Data_Reg_Empty_INT_Disabled){
 394:	e9 81       	ldd	r30, Y+1	; 0x01
 396:	fa 81       	ldd	r31, Y+2	; 0x02
 398:	82 81       	ldd	r24, Z+2	; 0x02
 39a:	88 23       	and	r24, r24
 39c:	39 f4       	brne	.+14     	; 0x3ac <UART_VidInterruptInit+0xa4>
		Set_Bit(UCSRB,UCSRB_UDRIE);
 39e:	aa e2       	ldi	r26, 0x2A	; 42
 3a0:	b0 e0       	ldi	r27, 0x00	; 0
 3a2:	ea e2       	ldi	r30, 0x2A	; 42
 3a4:	f0 e0       	ldi	r31, 0x00	; 0
 3a6:	80 81       	ld	r24, Z
 3a8:	80 62       	ori	r24, 0x20	; 32
 3aa:	8c 93       	st	X, r24
	}
}
 3ac:	0f 90       	pop	r0
 3ae:	0f 90       	pop	r0
 3b0:	cf 91       	pop	r28
 3b2:	df 91       	pop	r29
 3b4:	08 95       	ret

000003b6 <UART_VidTransmit>:

void UART_VidTransmit(u8 Copy_u8Data){
 3b6:	df 93       	push	r29
 3b8:	cf 93       	push	r28
 3ba:	0f 92       	push	r0
 3bc:	cd b7       	in	r28, 0x3d	; 61
 3be:	de b7       	in	r29, 0x3e	; 62
 3c0:	89 83       	std	Y+1, r24	; 0x01
	while(Get_Bit(UCSRA,UCSRA_UDRE) == 0);	/*Wait till register is empty*/
 3c2:	eb e2       	ldi	r30, 0x2B	; 43
 3c4:	f0 e0       	ldi	r31, 0x00	; 0
 3c6:	80 81       	ld	r24, Z
 3c8:	82 95       	swap	r24
 3ca:	86 95       	lsr	r24
 3cc:	87 70       	andi	r24, 0x07	; 7
 3ce:	88 2f       	mov	r24, r24
 3d0:	90 e0       	ldi	r25, 0x00	; 0
 3d2:	81 70       	andi	r24, 0x01	; 1
 3d4:	90 70       	andi	r25, 0x00	; 0
 3d6:	00 97       	sbiw	r24, 0x00	; 0
 3d8:	a1 f3       	breq	.-24     	; 0x3c2 <UART_VidTransmit+0xc>
	UDR = Copy_u8Data;						/*Send Data*/
 3da:	ec e2       	ldi	r30, 0x2C	; 44
 3dc:	f0 e0       	ldi	r31, 0x00	; 0
 3de:	89 81       	ldd	r24, Y+1	; 0x01
 3e0:	80 83       	st	Z, r24
}
 3e2:	0f 90       	pop	r0
 3e4:	cf 91       	pop	r28
 3e6:	df 91       	pop	r29
 3e8:	08 95       	ret

000003ea <UART_u8Receive>:

u8 UART_u8Receive(void){
 3ea:	df 93       	push	r29
 3ec:	cf 93       	push	r28
 3ee:	cd b7       	in	r28, 0x3d	; 61
 3f0:	de b7       	in	r29, 0x3e	; 62
	while(!Get_Bit(UCSRA,UCSRA_RXC)); 	/*Wait till data is Received*/
 3f2:	eb e2       	ldi	r30, 0x2B	; 43
 3f4:	f0 e0       	ldi	r31, 0x00	; 0
 3f6:	80 81       	ld	r24, Z
 3f8:	88 23       	and	r24, r24
 3fa:	dc f7       	brge	.-10     	; 0x3f2 <UART_u8Receive+0x8>
	return UDR;							/*Read Data*/
 3fc:	ec e2       	ldi	r30, 0x2C	; 44
 3fe:	f0 e0       	ldi	r31, 0x00	; 0
 400:	80 81       	ld	r24, Z
}
 402:	cf 91       	pop	r28
 404:	df 91       	pop	r29
 406:	08 95       	ret

00000408 <UART_VidSendString>:
void UART_VidSendString(u8 * Copy_PStr){
 408:	df 93       	push	r29
 40a:	cf 93       	push	r28
 40c:	00 d0       	rcall	.+0      	; 0x40e <UART_VidSendString+0x6>
 40e:	0f 92       	push	r0
 410:	cd b7       	in	r28, 0x3d	; 61
 412:	de b7       	in	r29, 0x3e	; 62
 414:	9b 83       	std	Y+3, r25	; 0x03
 416:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_counter = 0;
 418:	19 82       	std	Y+1, r1	; 0x01
 41a:	0e c0       	rjmp	.+28     	; 0x438 <UART_VidSendString+0x30>
	while(Copy_PStr[Local_counter] != NULL){
		UART_VidTransmit(Copy_PStr[Local_counter]);
 41c:	89 81       	ldd	r24, Y+1	; 0x01
 41e:	28 2f       	mov	r18, r24
 420:	30 e0       	ldi	r19, 0x00	; 0
 422:	8a 81       	ldd	r24, Y+2	; 0x02
 424:	9b 81       	ldd	r25, Y+3	; 0x03
 426:	fc 01       	movw	r30, r24
 428:	e2 0f       	add	r30, r18
 42a:	f3 1f       	adc	r31, r19
 42c:	80 81       	ld	r24, Z
 42e:	0e 94 db 01 	call	0x3b6	; 0x3b6 <UART_VidTransmit>
		Local_counter++;
 432:	89 81       	ldd	r24, Y+1	; 0x01
 434:	8f 5f       	subi	r24, 0xFF	; 255
 436:	89 83       	std	Y+1, r24	; 0x01
	while(!Get_Bit(UCSRA,UCSRA_RXC)); 	/*Wait till data is Received*/
	return UDR;							/*Read Data*/
}
void UART_VidSendString(u8 * Copy_PStr){
	u8 Local_counter = 0;
	while(Copy_PStr[Local_counter] != NULL){
 438:	89 81       	ldd	r24, Y+1	; 0x01
 43a:	28 2f       	mov	r18, r24
 43c:	30 e0       	ldi	r19, 0x00	; 0
 43e:	8a 81       	ldd	r24, Y+2	; 0x02
 440:	9b 81       	ldd	r25, Y+3	; 0x03
 442:	fc 01       	movw	r30, r24
 444:	e2 0f       	add	r30, r18
 446:	f3 1f       	adc	r31, r19
 448:	80 81       	ld	r24, Z
 44a:	88 23       	and	r24, r24
 44c:	39 f7       	brne	.-50     	; 0x41c <UART_VidSendString+0x14>
		UART_VidTransmit(Copy_PStr[Local_counter]);
		Local_counter++;
	}
}
 44e:	0f 90       	pop	r0
 450:	0f 90       	pop	r0
 452:	0f 90       	pop	r0
 454:	cf 91       	pop	r28
 456:	df 91       	pop	r29
 458:	08 95       	ret

0000045a <UART_VidRecString>:
void UART_VidRecString(u8 * Copy_PStr, u8 Copy_u8ArrLength){
 45a:	0f 93       	push	r16
 45c:	1f 93       	push	r17
 45e:	df 93       	push	r29
 460:	cf 93       	push	r28
 462:	00 d0       	rcall	.+0      	; 0x464 <UART_VidRecString+0xa>
 464:	00 d0       	rcall	.+0      	; 0x466 <UART_VidRecString+0xc>
 466:	cd b7       	in	r28, 0x3d	; 61
 468:	de b7       	in	r29, 0x3e	; 62
 46a:	9b 83       	std	Y+3, r25	; 0x03
 46c:	8a 83       	std	Y+2, r24	; 0x02
 46e:	6c 83       	std	Y+4, r22	; 0x04
	u8 Local_counter = 0;
 470:	19 82       	std	Y+1, r1	; 0x01
	for(Local_counter = 0 ; Local_counter<=Copy_u8ArrLength ; Local_counter++){
 472:	19 82       	std	Y+1, r1	; 0x01
 474:	1a c0       	rjmp	.+52     	; 0x4aa <UART_VidRecString+0x50>
		Copy_PStr[Local_counter] = UART_u8Receive();
 476:	89 81       	ldd	r24, Y+1	; 0x01
 478:	28 2f       	mov	r18, r24
 47a:	30 e0       	ldi	r19, 0x00	; 0
 47c:	8a 81       	ldd	r24, Y+2	; 0x02
 47e:	9b 81       	ldd	r25, Y+3	; 0x03
 480:	8c 01       	movw	r16, r24
 482:	02 0f       	add	r16, r18
 484:	13 1f       	adc	r17, r19
 486:	0e 94 f5 01 	call	0x3ea	; 0x3ea <UART_u8Receive>
 48a:	f8 01       	movw	r30, r16
 48c:	80 83       	st	Z, r24
		if(Copy_PStr[Local_counter] == '\r')
 48e:	89 81       	ldd	r24, Y+1	; 0x01
 490:	28 2f       	mov	r18, r24
 492:	30 e0       	ldi	r19, 0x00	; 0
 494:	8a 81       	ldd	r24, Y+2	; 0x02
 496:	9b 81       	ldd	r25, Y+3	; 0x03
 498:	fc 01       	movw	r30, r24
 49a:	e2 0f       	add	r30, r18
 49c:	f3 1f       	adc	r31, r19
 49e:	80 81       	ld	r24, Z
 4a0:	8d 30       	cpi	r24, 0x0D	; 13
 4a2:	39 f0       	breq	.+14     	; 0x4b2 <UART_VidRecString+0x58>
		Local_counter++;
	}
}
void UART_VidRecString(u8 * Copy_PStr, u8 Copy_u8ArrLength){
	u8 Local_counter = 0;
	for(Local_counter = 0 ; Local_counter<=Copy_u8ArrLength ; Local_counter++){
 4a4:	89 81       	ldd	r24, Y+1	; 0x01
 4a6:	8f 5f       	subi	r24, 0xFF	; 255
 4a8:	89 83       	std	Y+1, r24	; 0x01
 4aa:	99 81       	ldd	r25, Y+1	; 0x01
 4ac:	8c 81       	ldd	r24, Y+4	; 0x04
 4ae:	89 17       	cp	r24, r25
 4b0:	10 f7       	brcc	.-60     	; 0x476 <UART_VidRecString+0x1c>
		Copy_PStr[Local_counter] = UART_u8Receive();
		if(Copy_PStr[Local_counter] == '\r')
			break;
	}
	Copy_PStr[Local_counter] = NULL;
 4b2:	89 81       	ldd	r24, Y+1	; 0x01
 4b4:	28 2f       	mov	r18, r24
 4b6:	30 e0       	ldi	r19, 0x00	; 0
 4b8:	8a 81       	ldd	r24, Y+2	; 0x02
 4ba:	9b 81       	ldd	r25, Y+3	; 0x03
 4bc:	fc 01       	movw	r30, r24
 4be:	e2 0f       	add	r30, r18
 4c0:	f3 1f       	adc	r31, r19
 4c2:	10 82       	st	Z, r1
}
 4c4:	0f 90       	pop	r0
 4c6:	0f 90       	pop	r0
 4c8:	0f 90       	pop	r0
 4ca:	0f 90       	pop	r0
 4cc:	cf 91       	pop	r28
 4ce:	df 91       	pop	r29
 4d0:	1f 91       	pop	r17
 4d2:	0f 91       	pop	r16
 4d4:	08 95       	ret

000004d6 <UART_DataRegEmpty_CallBack>:



void (* UART_DataRegEmpty_Func)(void) = NULL;

void UART_DataRegEmpty_CallBack (void(*func)(void)){
 4d6:	df 93       	push	r29
 4d8:	cf 93       	push	r28
 4da:	00 d0       	rcall	.+0      	; 0x4dc <UART_DataRegEmpty_CallBack+0x6>
 4dc:	cd b7       	in	r28, 0x3d	; 61
 4de:	de b7       	in	r29, 0x3e	; 62
 4e0:	9a 83       	std	Y+2, r25	; 0x02
 4e2:	89 83       	std	Y+1, r24	; 0x01
	UART_DataRegEmpty_Func = func ;
 4e4:	89 81       	ldd	r24, Y+1	; 0x01
 4e6:	9a 81       	ldd	r25, Y+2	; 0x02
 4e8:	90 93 6c 00 	sts	0x006C, r25
 4ec:	80 93 6b 00 	sts	0x006B, r24
}
 4f0:	0f 90       	pop	r0
 4f2:	0f 90       	pop	r0
 4f4:	cf 91       	pop	r28
 4f6:	df 91       	pop	r29
 4f8:	08 95       	ret

000004fa <__vector_14>:

void __vector_14 (void) __attribute__((signal)) ;
void __vector_14 (void){
 4fa:	1f 92       	push	r1
 4fc:	0f 92       	push	r0
 4fe:	0f b6       	in	r0, 0x3f	; 63
 500:	0f 92       	push	r0
 502:	11 24       	eor	r1, r1
 504:	2f 93       	push	r18
 506:	3f 93       	push	r19
 508:	4f 93       	push	r20
 50a:	5f 93       	push	r21
 50c:	6f 93       	push	r22
 50e:	7f 93       	push	r23
 510:	8f 93       	push	r24
 512:	9f 93       	push	r25
 514:	af 93       	push	r26
 516:	bf 93       	push	r27
 518:	ef 93       	push	r30
 51a:	ff 93       	push	r31
 51c:	df 93       	push	r29
 51e:	cf 93       	push	r28
 520:	cd b7       	in	r28, 0x3d	; 61
 522:	de b7       	in	r29, 0x3e	; 62
	if(UART_DataRegEmpty_Func != NULL)
 524:	80 91 6b 00 	lds	r24, 0x006B
 528:	90 91 6c 00 	lds	r25, 0x006C
 52c:	00 97       	sbiw	r24, 0x00	; 0
 52e:	29 f0       	breq	.+10     	; 0x53a <__vector_14+0x40>
		UART_DataRegEmpty_Func();
 530:	e0 91 6b 00 	lds	r30, 0x006B
 534:	f0 91 6c 00 	lds	r31, 0x006C
 538:	09 95       	icall
}
 53a:	cf 91       	pop	r28
 53c:	df 91       	pop	r29
 53e:	ff 91       	pop	r31
 540:	ef 91       	pop	r30
 542:	bf 91       	pop	r27
 544:	af 91       	pop	r26
 546:	9f 91       	pop	r25
 548:	8f 91       	pop	r24
 54a:	7f 91       	pop	r23
 54c:	6f 91       	pop	r22
 54e:	5f 91       	pop	r21
 550:	4f 91       	pop	r20
 552:	3f 91       	pop	r19
 554:	2f 91       	pop	r18
 556:	0f 90       	pop	r0
 558:	0f be       	out	0x3f, r0	; 63
 55a:	0f 90       	pop	r0
 55c:	1f 90       	pop	r1
 55e:	18 95       	reti

00000560 <RXComplete_CallBack>:


void (* RXComplete_Func)(void) = NULL; /*ptr*/

void RXComplete_CallBack (void(*func)(void)){ /*fun agr is ptr*/
 560:	df 93       	push	r29
 562:	cf 93       	push	r28
 564:	00 d0       	rcall	.+0      	; 0x566 <RXComplete_CallBack+0x6>
 566:	cd b7       	in	r28, 0x3d	; 61
 568:	de b7       	in	r29, 0x3e	; 62
 56a:	9a 83       	std	Y+2, r25	; 0x02
 56c:	89 83       	std	Y+1, r24	; 0x01
	RXComplete_Func = func ;
 56e:	89 81       	ldd	r24, Y+1	; 0x01
 570:	9a 81       	ldd	r25, Y+2	; 0x02
 572:	90 93 6e 00 	sts	0x006E, r25
 576:	80 93 6d 00 	sts	0x006D, r24
}
 57a:	0f 90       	pop	r0
 57c:	0f 90       	pop	r0
 57e:	cf 91       	pop	r28
 580:	df 91       	pop	r29
 582:	08 95       	ret

00000584 <__vector_13>:

void __vector_13 (void) __attribute__((signal)) ;
void __vector_13 (void){
 584:	1f 92       	push	r1
 586:	0f 92       	push	r0
 588:	0f b6       	in	r0, 0x3f	; 63
 58a:	0f 92       	push	r0
 58c:	11 24       	eor	r1, r1
 58e:	2f 93       	push	r18
 590:	3f 93       	push	r19
 592:	4f 93       	push	r20
 594:	5f 93       	push	r21
 596:	6f 93       	push	r22
 598:	7f 93       	push	r23
 59a:	8f 93       	push	r24
 59c:	9f 93       	push	r25
 59e:	af 93       	push	r26
 5a0:	bf 93       	push	r27
 5a2:	ef 93       	push	r30
 5a4:	ff 93       	push	r31
 5a6:	df 93       	push	r29
 5a8:	cf 93       	push	r28
 5aa:	cd b7       	in	r28, 0x3d	; 61
 5ac:	de b7       	in	r29, 0x3e	; 62
	if(RXComplete_Func != NULL)
 5ae:	80 91 6d 00 	lds	r24, 0x006D
 5b2:	90 91 6e 00 	lds	r25, 0x006E
 5b6:	00 97       	sbiw	r24, 0x00	; 0
 5b8:	29 f0       	breq	.+10     	; 0x5c4 <__vector_13+0x40>
		RXComplete_Func();
 5ba:	e0 91 6d 00 	lds	r30, 0x006D
 5be:	f0 91 6e 00 	lds	r31, 0x006E
 5c2:	09 95       	icall
}
 5c4:	cf 91       	pop	r28
 5c6:	df 91       	pop	r29
 5c8:	ff 91       	pop	r31
 5ca:	ef 91       	pop	r30
 5cc:	bf 91       	pop	r27
 5ce:	af 91       	pop	r26
 5d0:	9f 91       	pop	r25
 5d2:	8f 91       	pop	r24
 5d4:	7f 91       	pop	r23
 5d6:	6f 91       	pop	r22
 5d8:	5f 91       	pop	r21
 5da:	4f 91       	pop	r20
 5dc:	3f 91       	pop	r19
 5de:	2f 91       	pop	r18
 5e0:	0f 90       	pop	r0
 5e2:	0f be       	out	0x3f, r0	; 63
 5e4:	0f 90       	pop	r0
 5e6:	1f 90       	pop	r1
 5e8:	18 95       	reti

000005ea <GIE_VidEnable>:
#include "GIE_Interface.h"
#include "GIE_Private.h"

/*GIE Enable*/

void GIE_VidEnable(void){
 5ea:	df 93       	push	r29
 5ec:	cf 93       	push	r28
 5ee:	cd b7       	in	r28, 0x3d	; 61
 5f0:	de b7       	in	r29, 0x3e	; 62
	Set_Bit(SREG,SREG_I_BIT);
 5f2:	af e5       	ldi	r26, 0x5F	; 95
 5f4:	b0 e0       	ldi	r27, 0x00	; 0
 5f6:	ef e5       	ldi	r30, 0x5F	; 95
 5f8:	f0 e0       	ldi	r31, 0x00	; 0
 5fa:	80 81       	ld	r24, Z
 5fc:	80 68       	ori	r24, 0x80	; 128
 5fe:	8c 93       	st	X, r24
}
 600:	cf 91       	pop	r28
 602:	df 91       	pop	r29
 604:	08 95       	ret

00000606 <GIE_VidDisable>:

/*GIE Disable*/

void GIE_VidDisable(void){
 606:	df 93       	push	r29
 608:	cf 93       	push	r28
 60a:	cd b7       	in	r28, 0x3d	; 61
 60c:	de b7       	in	r29, 0x3e	; 62
	CLR_Bit(SREG,SREG_I_BIT);
 60e:	af e5       	ldi	r26, 0x5F	; 95
 610:	b0 e0       	ldi	r27, 0x00	; 0
 612:	ef e5       	ldi	r30, 0x5F	; 95
 614:	f0 e0       	ldi	r31, 0x00	; 0
 616:	80 81       	ld	r24, Z
 618:	8f 77       	andi	r24, 0x7F	; 127
 61a:	8c 93       	st	X, r24
}
 61c:	cf 91       	pop	r28
 61e:	df 91       	pop	r29
 620:	08 95       	ret

00000622 <DIO_VidSetPinValue>:
/*-------------------------------------------------------------------------------------------------------------------------*/
								/**************************set pin*****************************/
/*-------------------------------------------------------------------------------------------------------------------------*/


void DIO_VidSetPinValue(u8 Copy_u8Port, u8 Copy_u8PinNumber, u8 Copy_u8State ){
 622:	df 93       	push	r29
 624:	cf 93       	push	r28
 626:	cd b7       	in	r28, 0x3d	; 61
 628:	de b7       	in	r29, 0x3e	; 62
 62a:	27 97       	sbiw	r28, 0x07	; 7
 62c:	0f b6       	in	r0, 0x3f	; 63
 62e:	f8 94       	cli
 630:	de bf       	out	0x3e, r29	; 62
 632:	0f be       	out	0x3f, r0	; 63
 634:	cd bf       	out	0x3d, r28	; 61
 636:	89 83       	std	Y+1, r24	; 0x01
 638:	6a 83       	std	Y+2, r22	; 0x02
 63a:	4b 83       	std	Y+3, r20	; 0x03

	/****************** set pin as input***********************/
	if(Copy_u8State == low){
 63c:	8b 81       	ldd	r24, Y+3	; 0x03
 63e:	88 23       	and	r24, r24
 640:	09 f0       	breq	.+2      	; 0x644 <DIO_VidSetPinValue+0x22>
 642:	75 c0       	rjmp	.+234    	; 0x72e <DIO_VidSetPinValue+0x10c>
		switch (Copy_u8Port) {
 644:	89 81       	ldd	r24, Y+1	; 0x01
 646:	28 2f       	mov	r18, r24
 648:	30 e0       	ldi	r19, 0x00	; 0
 64a:	3f 83       	std	Y+7, r19	; 0x07
 64c:	2e 83       	std	Y+6, r18	; 0x06
 64e:	8e 81       	ldd	r24, Y+6	; 0x06
 650:	9f 81       	ldd	r25, Y+7	; 0x07
 652:	83 30       	cpi	r24, 0x03	; 3
 654:	91 05       	cpc	r25, r1
 656:	61 f1       	breq	.+88     	; 0x6b0 <DIO_VidSetPinValue+0x8e>
 658:	2e 81       	ldd	r18, Y+6	; 0x06
 65a:	3f 81       	ldd	r19, Y+7	; 0x07
 65c:	24 30       	cpi	r18, 0x04	; 4
 65e:	31 05       	cpc	r19, r1
 660:	34 f4       	brge	.+12     	; 0x66e <DIO_VidSetPinValue+0x4c>
 662:	8e 81       	ldd	r24, Y+6	; 0x06
 664:	9f 81       	ldd	r25, Y+7	; 0x07
 666:	82 30       	cpi	r24, 0x02	; 2
 668:	91 05       	cpc	r25, r1
 66a:	69 f0       	breq	.+26     	; 0x686 <DIO_VidSetPinValue+0x64>
 66c:	d3 c0       	rjmp	.+422    	; 0x814 <DIO_VidSetPinValue+0x1f2>
 66e:	2e 81       	ldd	r18, Y+6	; 0x06
 670:	3f 81       	ldd	r19, Y+7	; 0x07
 672:	24 30       	cpi	r18, 0x04	; 4
 674:	31 05       	cpc	r19, r1
 676:	89 f1       	breq	.+98     	; 0x6da <DIO_VidSetPinValue+0xb8>
 678:	8e 81       	ldd	r24, Y+6	; 0x06
 67a:	9f 81       	ldd	r25, Y+7	; 0x07
 67c:	85 30       	cpi	r24, 0x05	; 5
 67e:	91 05       	cpc	r25, r1
 680:	09 f4       	brne	.+2      	; 0x684 <DIO_VidSetPinValue+0x62>
 682:	40 c0       	rjmp	.+128    	; 0x704 <DIO_VidSetPinValue+0xe2>
 684:	c7 c0       	rjmp	.+398    	; 0x814 <DIO_VidSetPinValue+0x1f2>
			case (Port_A) : CLR_Bit(PORTA,Copy_u8PinNumber);break;
 686:	ab e3       	ldi	r26, 0x3B	; 59
 688:	b0 e0       	ldi	r27, 0x00	; 0
 68a:	eb e3       	ldi	r30, 0x3B	; 59
 68c:	f0 e0       	ldi	r31, 0x00	; 0
 68e:	80 81       	ld	r24, Z
 690:	48 2f       	mov	r20, r24
 692:	8a 81       	ldd	r24, Y+2	; 0x02
 694:	28 2f       	mov	r18, r24
 696:	30 e0       	ldi	r19, 0x00	; 0
 698:	81 e0       	ldi	r24, 0x01	; 1
 69a:	90 e0       	ldi	r25, 0x00	; 0
 69c:	02 2e       	mov	r0, r18
 69e:	02 c0       	rjmp	.+4      	; 0x6a4 <DIO_VidSetPinValue+0x82>
 6a0:	88 0f       	add	r24, r24
 6a2:	99 1f       	adc	r25, r25
 6a4:	0a 94       	dec	r0
 6a6:	e2 f7       	brpl	.-8      	; 0x6a0 <DIO_VidSetPinValue+0x7e>
 6a8:	80 95       	com	r24
 6aa:	84 23       	and	r24, r20
 6ac:	8c 93       	st	X, r24
 6ae:	b2 c0       	rjmp	.+356    	; 0x814 <DIO_VidSetPinValue+0x1f2>
			case (Port_B) : CLR_Bit(PORTB,Copy_u8PinNumber);break;
 6b0:	a8 e3       	ldi	r26, 0x38	; 56
 6b2:	b0 e0       	ldi	r27, 0x00	; 0
 6b4:	e8 e3       	ldi	r30, 0x38	; 56
 6b6:	f0 e0       	ldi	r31, 0x00	; 0
 6b8:	80 81       	ld	r24, Z
 6ba:	48 2f       	mov	r20, r24
 6bc:	8a 81       	ldd	r24, Y+2	; 0x02
 6be:	28 2f       	mov	r18, r24
 6c0:	30 e0       	ldi	r19, 0x00	; 0
 6c2:	81 e0       	ldi	r24, 0x01	; 1
 6c4:	90 e0       	ldi	r25, 0x00	; 0
 6c6:	02 2e       	mov	r0, r18
 6c8:	02 c0       	rjmp	.+4      	; 0x6ce <DIO_VidSetPinValue+0xac>
 6ca:	88 0f       	add	r24, r24
 6cc:	99 1f       	adc	r25, r25
 6ce:	0a 94       	dec	r0
 6d0:	e2 f7       	brpl	.-8      	; 0x6ca <DIO_VidSetPinValue+0xa8>
 6d2:	80 95       	com	r24
 6d4:	84 23       	and	r24, r20
 6d6:	8c 93       	st	X, r24
 6d8:	9d c0       	rjmp	.+314    	; 0x814 <DIO_VidSetPinValue+0x1f2>
			case (Port_C) : CLR_Bit(PORTC,Copy_u8PinNumber);break;
 6da:	a5 e3       	ldi	r26, 0x35	; 53
 6dc:	b0 e0       	ldi	r27, 0x00	; 0
 6de:	e5 e3       	ldi	r30, 0x35	; 53
 6e0:	f0 e0       	ldi	r31, 0x00	; 0
 6e2:	80 81       	ld	r24, Z
 6e4:	48 2f       	mov	r20, r24
 6e6:	8a 81       	ldd	r24, Y+2	; 0x02
 6e8:	28 2f       	mov	r18, r24
 6ea:	30 e0       	ldi	r19, 0x00	; 0
 6ec:	81 e0       	ldi	r24, 0x01	; 1
 6ee:	90 e0       	ldi	r25, 0x00	; 0
 6f0:	02 2e       	mov	r0, r18
 6f2:	02 c0       	rjmp	.+4      	; 0x6f8 <DIO_VidSetPinValue+0xd6>
 6f4:	88 0f       	add	r24, r24
 6f6:	99 1f       	adc	r25, r25
 6f8:	0a 94       	dec	r0
 6fa:	e2 f7       	brpl	.-8      	; 0x6f4 <DIO_VidSetPinValue+0xd2>
 6fc:	80 95       	com	r24
 6fe:	84 23       	and	r24, r20
 700:	8c 93       	st	X, r24
 702:	88 c0       	rjmp	.+272    	; 0x814 <DIO_VidSetPinValue+0x1f2>
			case (Port_D) : CLR_Bit(PORTD,Copy_u8PinNumber);break;
 704:	a2 e3       	ldi	r26, 0x32	; 50
 706:	b0 e0       	ldi	r27, 0x00	; 0
 708:	e2 e3       	ldi	r30, 0x32	; 50
 70a:	f0 e0       	ldi	r31, 0x00	; 0
 70c:	80 81       	ld	r24, Z
 70e:	48 2f       	mov	r20, r24
 710:	8a 81       	ldd	r24, Y+2	; 0x02
 712:	28 2f       	mov	r18, r24
 714:	30 e0       	ldi	r19, 0x00	; 0
 716:	81 e0       	ldi	r24, 0x01	; 1
 718:	90 e0       	ldi	r25, 0x00	; 0
 71a:	02 2e       	mov	r0, r18
 71c:	02 c0       	rjmp	.+4      	; 0x722 <DIO_VidSetPinValue+0x100>
 71e:	88 0f       	add	r24, r24
 720:	99 1f       	adc	r25, r25
 722:	0a 94       	dec	r0
 724:	e2 f7       	brpl	.-8      	; 0x71e <DIO_VidSetPinValue+0xfc>
 726:	80 95       	com	r24
 728:	84 23       	and	r24, r20
 72a:	8c 93       	st	X, r24
 72c:	73 c0       	rjmp	.+230    	; 0x814 <DIO_VidSetPinValue+0x1f2>
		}
	}
	/****************** set pin as output***********************/
	else if(Copy_u8State == high){
 72e:	8b 81       	ldd	r24, Y+3	; 0x03
 730:	81 30       	cpi	r24, 0x01	; 1
 732:	09 f0       	breq	.+2      	; 0x736 <DIO_VidSetPinValue+0x114>
 734:	6f c0       	rjmp	.+222    	; 0x814 <DIO_VidSetPinValue+0x1f2>
		switch (Copy_u8Port) {
 736:	89 81       	ldd	r24, Y+1	; 0x01
 738:	28 2f       	mov	r18, r24
 73a:	30 e0       	ldi	r19, 0x00	; 0
 73c:	3d 83       	std	Y+5, r19	; 0x05
 73e:	2c 83       	std	Y+4, r18	; 0x04
 740:	8c 81       	ldd	r24, Y+4	; 0x04
 742:	9d 81       	ldd	r25, Y+5	; 0x05
 744:	83 30       	cpi	r24, 0x03	; 3
 746:	91 05       	cpc	r25, r1
 748:	51 f1       	breq	.+84     	; 0x79e <DIO_VidSetPinValue+0x17c>
 74a:	2c 81       	ldd	r18, Y+4	; 0x04
 74c:	3d 81       	ldd	r19, Y+5	; 0x05
 74e:	24 30       	cpi	r18, 0x04	; 4
 750:	31 05       	cpc	r19, r1
 752:	34 f4       	brge	.+12     	; 0x760 <DIO_VidSetPinValue+0x13e>
 754:	8c 81       	ldd	r24, Y+4	; 0x04
 756:	9d 81       	ldd	r25, Y+5	; 0x05
 758:	82 30       	cpi	r24, 0x02	; 2
 75a:	91 05       	cpc	r25, r1
 75c:	61 f0       	breq	.+24     	; 0x776 <DIO_VidSetPinValue+0x154>
 75e:	5a c0       	rjmp	.+180    	; 0x814 <DIO_VidSetPinValue+0x1f2>
 760:	2c 81       	ldd	r18, Y+4	; 0x04
 762:	3d 81       	ldd	r19, Y+5	; 0x05
 764:	24 30       	cpi	r18, 0x04	; 4
 766:	31 05       	cpc	r19, r1
 768:	71 f1       	breq	.+92     	; 0x7c6 <DIO_VidSetPinValue+0x1a4>
 76a:	8c 81       	ldd	r24, Y+4	; 0x04
 76c:	9d 81       	ldd	r25, Y+5	; 0x05
 76e:	85 30       	cpi	r24, 0x05	; 5
 770:	91 05       	cpc	r25, r1
 772:	e9 f1       	breq	.+122    	; 0x7ee <DIO_VidSetPinValue+0x1cc>
 774:	4f c0       	rjmp	.+158    	; 0x814 <DIO_VidSetPinValue+0x1f2>
			case (Port_A) : Set_Bit(PORTA,Copy_u8PinNumber);break;
 776:	ab e3       	ldi	r26, 0x3B	; 59
 778:	b0 e0       	ldi	r27, 0x00	; 0
 77a:	eb e3       	ldi	r30, 0x3B	; 59
 77c:	f0 e0       	ldi	r31, 0x00	; 0
 77e:	80 81       	ld	r24, Z
 780:	48 2f       	mov	r20, r24
 782:	8a 81       	ldd	r24, Y+2	; 0x02
 784:	28 2f       	mov	r18, r24
 786:	30 e0       	ldi	r19, 0x00	; 0
 788:	81 e0       	ldi	r24, 0x01	; 1
 78a:	90 e0       	ldi	r25, 0x00	; 0
 78c:	02 2e       	mov	r0, r18
 78e:	02 c0       	rjmp	.+4      	; 0x794 <DIO_VidSetPinValue+0x172>
 790:	88 0f       	add	r24, r24
 792:	99 1f       	adc	r25, r25
 794:	0a 94       	dec	r0
 796:	e2 f7       	brpl	.-8      	; 0x790 <DIO_VidSetPinValue+0x16e>
 798:	84 2b       	or	r24, r20
 79a:	8c 93       	st	X, r24
 79c:	3b c0       	rjmp	.+118    	; 0x814 <DIO_VidSetPinValue+0x1f2>
			case (Port_B) : Set_Bit(PORTB,Copy_u8PinNumber);break;
 79e:	a8 e3       	ldi	r26, 0x38	; 56
 7a0:	b0 e0       	ldi	r27, 0x00	; 0
 7a2:	e8 e3       	ldi	r30, 0x38	; 56
 7a4:	f0 e0       	ldi	r31, 0x00	; 0
 7a6:	80 81       	ld	r24, Z
 7a8:	48 2f       	mov	r20, r24
 7aa:	8a 81       	ldd	r24, Y+2	; 0x02
 7ac:	28 2f       	mov	r18, r24
 7ae:	30 e0       	ldi	r19, 0x00	; 0
 7b0:	81 e0       	ldi	r24, 0x01	; 1
 7b2:	90 e0       	ldi	r25, 0x00	; 0
 7b4:	02 2e       	mov	r0, r18
 7b6:	02 c0       	rjmp	.+4      	; 0x7bc <DIO_VidSetPinValue+0x19a>
 7b8:	88 0f       	add	r24, r24
 7ba:	99 1f       	adc	r25, r25
 7bc:	0a 94       	dec	r0
 7be:	e2 f7       	brpl	.-8      	; 0x7b8 <DIO_VidSetPinValue+0x196>
 7c0:	84 2b       	or	r24, r20
 7c2:	8c 93       	st	X, r24
 7c4:	27 c0       	rjmp	.+78     	; 0x814 <DIO_VidSetPinValue+0x1f2>
			case (Port_C) : Set_Bit(PORTC,Copy_u8PinNumber);break;
 7c6:	a5 e3       	ldi	r26, 0x35	; 53
 7c8:	b0 e0       	ldi	r27, 0x00	; 0
 7ca:	e5 e3       	ldi	r30, 0x35	; 53
 7cc:	f0 e0       	ldi	r31, 0x00	; 0
 7ce:	80 81       	ld	r24, Z
 7d0:	48 2f       	mov	r20, r24
 7d2:	8a 81       	ldd	r24, Y+2	; 0x02
 7d4:	28 2f       	mov	r18, r24
 7d6:	30 e0       	ldi	r19, 0x00	; 0
 7d8:	81 e0       	ldi	r24, 0x01	; 1
 7da:	90 e0       	ldi	r25, 0x00	; 0
 7dc:	02 2e       	mov	r0, r18
 7de:	02 c0       	rjmp	.+4      	; 0x7e4 <DIO_VidSetPinValue+0x1c2>
 7e0:	88 0f       	add	r24, r24
 7e2:	99 1f       	adc	r25, r25
 7e4:	0a 94       	dec	r0
 7e6:	e2 f7       	brpl	.-8      	; 0x7e0 <DIO_VidSetPinValue+0x1be>
 7e8:	84 2b       	or	r24, r20
 7ea:	8c 93       	st	X, r24
 7ec:	13 c0       	rjmp	.+38     	; 0x814 <DIO_VidSetPinValue+0x1f2>
			case (Port_D) : Set_Bit(PORTD,Copy_u8PinNumber);break;
 7ee:	a2 e3       	ldi	r26, 0x32	; 50
 7f0:	b0 e0       	ldi	r27, 0x00	; 0
 7f2:	e2 e3       	ldi	r30, 0x32	; 50
 7f4:	f0 e0       	ldi	r31, 0x00	; 0
 7f6:	80 81       	ld	r24, Z
 7f8:	48 2f       	mov	r20, r24
 7fa:	8a 81       	ldd	r24, Y+2	; 0x02
 7fc:	28 2f       	mov	r18, r24
 7fe:	30 e0       	ldi	r19, 0x00	; 0
 800:	81 e0       	ldi	r24, 0x01	; 1
 802:	90 e0       	ldi	r25, 0x00	; 0
 804:	02 2e       	mov	r0, r18
 806:	02 c0       	rjmp	.+4      	; 0x80c <DIO_VidSetPinValue+0x1ea>
 808:	88 0f       	add	r24, r24
 80a:	99 1f       	adc	r25, r25
 80c:	0a 94       	dec	r0
 80e:	e2 f7       	brpl	.-8      	; 0x808 <DIO_VidSetPinValue+0x1e6>
 810:	84 2b       	or	r24, r20
 812:	8c 93       	st	X, r24
		}
	}
}
 814:	27 96       	adiw	r28, 0x07	; 7
 816:	0f b6       	in	r0, 0x3f	; 63
 818:	f8 94       	cli
 81a:	de bf       	out	0x3e, r29	; 62
 81c:	0f be       	out	0x3f, r0	; 63
 81e:	cd bf       	out	0x3d, r28	; 61
 820:	cf 91       	pop	r28
 822:	df 91       	pop	r29
 824:	08 95       	ret

00000826 <DIO_VidSetPinDirection>:

void DIO_VidSetPinDirection(u8 Copy_u8Port, u8 Copy_u8PinNumber,u8 Copy_u8PinDirection)
{
 826:	df 93       	push	r29
 828:	cf 93       	push	r28
 82a:	cd b7       	in	r28, 0x3d	; 61
 82c:	de b7       	in	r29, 0x3e	; 62
 82e:	27 97       	sbiw	r28, 0x07	; 7
 830:	0f b6       	in	r0, 0x3f	; 63
 832:	f8 94       	cli
 834:	de bf       	out	0x3e, r29	; 62
 836:	0f be       	out	0x3f, r0	; 63
 838:	cd bf       	out	0x3d, r28	; 61
 83a:	89 83       	std	Y+1, r24	; 0x01
 83c:	6a 83       	std	Y+2, r22	; 0x02
 83e:	4b 83       	std	Y+3, r20	; 0x03
	/****************** set pin as input***********************/
	if(Copy_u8PinDirection == input){
 840:	8b 81       	ldd	r24, Y+3	; 0x03
 842:	88 23       	and	r24, r24
 844:	09 f0       	breq	.+2      	; 0x848 <DIO_VidSetPinDirection+0x22>
 846:	75 c0       	rjmp	.+234    	; 0x932 <__stack+0xd3>
		switch (Copy_u8Port) {
 848:	89 81       	ldd	r24, Y+1	; 0x01
 84a:	28 2f       	mov	r18, r24
 84c:	30 e0       	ldi	r19, 0x00	; 0
 84e:	3f 83       	std	Y+7, r19	; 0x07
 850:	2e 83       	std	Y+6, r18	; 0x06
 852:	8e 81       	ldd	r24, Y+6	; 0x06
 854:	9f 81       	ldd	r25, Y+7	; 0x07
 856:	83 30       	cpi	r24, 0x03	; 3
 858:	91 05       	cpc	r25, r1
 85a:	61 f1       	breq	.+88     	; 0x8b4 <__stack+0x55>
 85c:	2e 81       	ldd	r18, Y+6	; 0x06
 85e:	3f 81       	ldd	r19, Y+7	; 0x07
 860:	24 30       	cpi	r18, 0x04	; 4
 862:	31 05       	cpc	r19, r1
 864:	34 f4       	brge	.+12     	; 0x872 <__stack+0x13>
 866:	8e 81       	ldd	r24, Y+6	; 0x06
 868:	9f 81       	ldd	r25, Y+7	; 0x07
 86a:	82 30       	cpi	r24, 0x02	; 2
 86c:	91 05       	cpc	r25, r1
 86e:	69 f0       	breq	.+26     	; 0x88a <__stack+0x2b>
 870:	d3 c0       	rjmp	.+422    	; 0xa18 <__stack+0x1b9>
 872:	2e 81       	ldd	r18, Y+6	; 0x06
 874:	3f 81       	ldd	r19, Y+7	; 0x07
 876:	24 30       	cpi	r18, 0x04	; 4
 878:	31 05       	cpc	r19, r1
 87a:	89 f1       	breq	.+98     	; 0x8de <__stack+0x7f>
 87c:	8e 81       	ldd	r24, Y+6	; 0x06
 87e:	9f 81       	ldd	r25, Y+7	; 0x07
 880:	85 30       	cpi	r24, 0x05	; 5
 882:	91 05       	cpc	r25, r1
 884:	09 f4       	brne	.+2      	; 0x888 <__stack+0x29>
 886:	40 c0       	rjmp	.+128    	; 0x908 <__stack+0xa9>
 888:	c7 c0       	rjmp	.+398    	; 0xa18 <__stack+0x1b9>
			case (Port_A) : CLR_Bit(DDRA,Copy_u8PinNumber);break;
 88a:	aa e3       	ldi	r26, 0x3A	; 58
 88c:	b0 e0       	ldi	r27, 0x00	; 0
 88e:	ea e3       	ldi	r30, 0x3A	; 58
 890:	f0 e0       	ldi	r31, 0x00	; 0
 892:	80 81       	ld	r24, Z
 894:	48 2f       	mov	r20, r24
 896:	8a 81       	ldd	r24, Y+2	; 0x02
 898:	28 2f       	mov	r18, r24
 89a:	30 e0       	ldi	r19, 0x00	; 0
 89c:	81 e0       	ldi	r24, 0x01	; 1
 89e:	90 e0       	ldi	r25, 0x00	; 0
 8a0:	02 2e       	mov	r0, r18
 8a2:	02 c0       	rjmp	.+4      	; 0x8a8 <__stack+0x49>
 8a4:	88 0f       	add	r24, r24
 8a6:	99 1f       	adc	r25, r25
 8a8:	0a 94       	dec	r0
 8aa:	e2 f7       	brpl	.-8      	; 0x8a4 <__stack+0x45>
 8ac:	80 95       	com	r24
 8ae:	84 23       	and	r24, r20
 8b0:	8c 93       	st	X, r24
 8b2:	b2 c0       	rjmp	.+356    	; 0xa18 <__stack+0x1b9>
			case (Port_B) : CLR_Bit(DDRB,Copy_u8PinNumber);break;
 8b4:	a7 e3       	ldi	r26, 0x37	; 55
 8b6:	b0 e0       	ldi	r27, 0x00	; 0
 8b8:	e7 e3       	ldi	r30, 0x37	; 55
 8ba:	f0 e0       	ldi	r31, 0x00	; 0
 8bc:	80 81       	ld	r24, Z
 8be:	48 2f       	mov	r20, r24
 8c0:	8a 81       	ldd	r24, Y+2	; 0x02
 8c2:	28 2f       	mov	r18, r24
 8c4:	30 e0       	ldi	r19, 0x00	; 0
 8c6:	81 e0       	ldi	r24, 0x01	; 1
 8c8:	90 e0       	ldi	r25, 0x00	; 0
 8ca:	02 2e       	mov	r0, r18
 8cc:	02 c0       	rjmp	.+4      	; 0x8d2 <__stack+0x73>
 8ce:	88 0f       	add	r24, r24
 8d0:	99 1f       	adc	r25, r25
 8d2:	0a 94       	dec	r0
 8d4:	e2 f7       	brpl	.-8      	; 0x8ce <__stack+0x6f>
 8d6:	80 95       	com	r24
 8d8:	84 23       	and	r24, r20
 8da:	8c 93       	st	X, r24
 8dc:	9d c0       	rjmp	.+314    	; 0xa18 <__stack+0x1b9>
			case (Port_C) : CLR_Bit(DDRC,Copy_u8PinNumber);break;
 8de:	a4 e3       	ldi	r26, 0x34	; 52
 8e0:	b0 e0       	ldi	r27, 0x00	; 0
 8e2:	e4 e3       	ldi	r30, 0x34	; 52
 8e4:	f0 e0       	ldi	r31, 0x00	; 0
 8e6:	80 81       	ld	r24, Z
 8e8:	48 2f       	mov	r20, r24
 8ea:	8a 81       	ldd	r24, Y+2	; 0x02
 8ec:	28 2f       	mov	r18, r24
 8ee:	30 e0       	ldi	r19, 0x00	; 0
 8f0:	81 e0       	ldi	r24, 0x01	; 1
 8f2:	90 e0       	ldi	r25, 0x00	; 0
 8f4:	02 2e       	mov	r0, r18
 8f6:	02 c0       	rjmp	.+4      	; 0x8fc <__stack+0x9d>
 8f8:	88 0f       	add	r24, r24
 8fa:	99 1f       	adc	r25, r25
 8fc:	0a 94       	dec	r0
 8fe:	e2 f7       	brpl	.-8      	; 0x8f8 <__stack+0x99>
 900:	80 95       	com	r24
 902:	84 23       	and	r24, r20
 904:	8c 93       	st	X, r24
 906:	88 c0       	rjmp	.+272    	; 0xa18 <__stack+0x1b9>
			case (Port_D) : CLR_Bit(DDRD,Copy_u8PinNumber);break;
 908:	a1 e3       	ldi	r26, 0x31	; 49
 90a:	b0 e0       	ldi	r27, 0x00	; 0
 90c:	e1 e3       	ldi	r30, 0x31	; 49
 90e:	f0 e0       	ldi	r31, 0x00	; 0
 910:	80 81       	ld	r24, Z
 912:	48 2f       	mov	r20, r24
 914:	8a 81       	ldd	r24, Y+2	; 0x02
 916:	28 2f       	mov	r18, r24
 918:	30 e0       	ldi	r19, 0x00	; 0
 91a:	81 e0       	ldi	r24, 0x01	; 1
 91c:	90 e0       	ldi	r25, 0x00	; 0
 91e:	02 2e       	mov	r0, r18
 920:	02 c0       	rjmp	.+4      	; 0x926 <__stack+0xc7>
 922:	88 0f       	add	r24, r24
 924:	99 1f       	adc	r25, r25
 926:	0a 94       	dec	r0
 928:	e2 f7       	brpl	.-8      	; 0x922 <__stack+0xc3>
 92a:	80 95       	com	r24
 92c:	84 23       	and	r24, r20
 92e:	8c 93       	st	X, r24
 930:	73 c0       	rjmp	.+230    	; 0xa18 <__stack+0x1b9>
		}
	}
	/****************** set pin as output***********************/
	else if(Copy_u8PinDirection == output){
 932:	8b 81       	ldd	r24, Y+3	; 0x03
 934:	81 30       	cpi	r24, 0x01	; 1
 936:	09 f0       	breq	.+2      	; 0x93a <__stack+0xdb>
 938:	6f c0       	rjmp	.+222    	; 0xa18 <__stack+0x1b9>
		switch (Copy_u8Port) {
 93a:	89 81       	ldd	r24, Y+1	; 0x01
 93c:	28 2f       	mov	r18, r24
 93e:	30 e0       	ldi	r19, 0x00	; 0
 940:	3d 83       	std	Y+5, r19	; 0x05
 942:	2c 83       	std	Y+4, r18	; 0x04
 944:	8c 81       	ldd	r24, Y+4	; 0x04
 946:	9d 81       	ldd	r25, Y+5	; 0x05
 948:	83 30       	cpi	r24, 0x03	; 3
 94a:	91 05       	cpc	r25, r1
 94c:	51 f1       	breq	.+84     	; 0x9a2 <__stack+0x143>
 94e:	2c 81       	ldd	r18, Y+4	; 0x04
 950:	3d 81       	ldd	r19, Y+5	; 0x05
 952:	24 30       	cpi	r18, 0x04	; 4
 954:	31 05       	cpc	r19, r1
 956:	34 f4       	brge	.+12     	; 0x964 <__stack+0x105>
 958:	8c 81       	ldd	r24, Y+4	; 0x04
 95a:	9d 81       	ldd	r25, Y+5	; 0x05
 95c:	82 30       	cpi	r24, 0x02	; 2
 95e:	91 05       	cpc	r25, r1
 960:	61 f0       	breq	.+24     	; 0x97a <__stack+0x11b>
 962:	5a c0       	rjmp	.+180    	; 0xa18 <__stack+0x1b9>
 964:	2c 81       	ldd	r18, Y+4	; 0x04
 966:	3d 81       	ldd	r19, Y+5	; 0x05
 968:	24 30       	cpi	r18, 0x04	; 4
 96a:	31 05       	cpc	r19, r1
 96c:	71 f1       	breq	.+92     	; 0x9ca <__stack+0x16b>
 96e:	8c 81       	ldd	r24, Y+4	; 0x04
 970:	9d 81       	ldd	r25, Y+5	; 0x05
 972:	85 30       	cpi	r24, 0x05	; 5
 974:	91 05       	cpc	r25, r1
 976:	e9 f1       	breq	.+122    	; 0x9f2 <__stack+0x193>
 978:	4f c0       	rjmp	.+158    	; 0xa18 <__stack+0x1b9>
			case (Port_A) : Set_Bit(DDRA,Copy_u8PinNumber);break;
 97a:	aa e3       	ldi	r26, 0x3A	; 58
 97c:	b0 e0       	ldi	r27, 0x00	; 0
 97e:	ea e3       	ldi	r30, 0x3A	; 58
 980:	f0 e0       	ldi	r31, 0x00	; 0
 982:	80 81       	ld	r24, Z
 984:	48 2f       	mov	r20, r24
 986:	8a 81       	ldd	r24, Y+2	; 0x02
 988:	28 2f       	mov	r18, r24
 98a:	30 e0       	ldi	r19, 0x00	; 0
 98c:	81 e0       	ldi	r24, 0x01	; 1
 98e:	90 e0       	ldi	r25, 0x00	; 0
 990:	02 2e       	mov	r0, r18
 992:	02 c0       	rjmp	.+4      	; 0x998 <__stack+0x139>
 994:	88 0f       	add	r24, r24
 996:	99 1f       	adc	r25, r25
 998:	0a 94       	dec	r0
 99a:	e2 f7       	brpl	.-8      	; 0x994 <__stack+0x135>
 99c:	84 2b       	or	r24, r20
 99e:	8c 93       	st	X, r24
 9a0:	3b c0       	rjmp	.+118    	; 0xa18 <__stack+0x1b9>
			case (Port_B) : Set_Bit(DDRB,Copy_u8PinNumber);break;
 9a2:	a7 e3       	ldi	r26, 0x37	; 55
 9a4:	b0 e0       	ldi	r27, 0x00	; 0
 9a6:	e7 e3       	ldi	r30, 0x37	; 55
 9a8:	f0 e0       	ldi	r31, 0x00	; 0
 9aa:	80 81       	ld	r24, Z
 9ac:	48 2f       	mov	r20, r24
 9ae:	8a 81       	ldd	r24, Y+2	; 0x02
 9b0:	28 2f       	mov	r18, r24
 9b2:	30 e0       	ldi	r19, 0x00	; 0
 9b4:	81 e0       	ldi	r24, 0x01	; 1
 9b6:	90 e0       	ldi	r25, 0x00	; 0
 9b8:	02 2e       	mov	r0, r18
 9ba:	02 c0       	rjmp	.+4      	; 0x9c0 <__stack+0x161>
 9bc:	88 0f       	add	r24, r24
 9be:	99 1f       	adc	r25, r25
 9c0:	0a 94       	dec	r0
 9c2:	e2 f7       	brpl	.-8      	; 0x9bc <__stack+0x15d>
 9c4:	84 2b       	or	r24, r20
 9c6:	8c 93       	st	X, r24
 9c8:	27 c0       	rjmp	.+78     	; 0xa18 <__stack+0x1b9>
			case (Port_C) : Set_Bit(DDRC,Copy_u8PinNumber);break;
 9ca:	a4 e3       	ldi	r26, 0x34	; 52
 9cc:	b0 e0       	ldi	r27, 0x00	; 0
 9ce:	e4 e3       	ldi	r30, 0x34	; 52
 9d0:	f0 e0       	ldi	r31, 0x00	; 0
 9d2:	80 81       	ld	r24, Z
 9d4:	48 2f       	mov	r20, r24
 9d6:	8a 81       	ldd	r24, Y+2	; 0x02
 9d8:	28 2f       	mov	r18, r24
 9da:	30 e0       	ldi	r19, 0x00	; 0
 9dc:	81 e0       	ldi	r24, 0x01	; 1
 9de:	90 e0       	ldi	r25, 0x00	; 0
 9e0:	02 2e       	mov	r0, r18
 9e2:	02 c0       	rjmp	.+4      	; 0x9e8 <__stack+0x189>
 9e4:	88 0f       	add	r24, r24
 9e6:	99 1f       	adc	r25, r25
 9e8:	0a 94       	dec	r0
 9ea:	e2 f7       	brpl	.-8      	; 0x9e4 <__stack+0x185>
 9ec:	84 2b       	or	r24, r20
 9ee:	8c 93       	st	X, r24
 9f0:	13 c0       	rjmp	.+38     	; 0xa18 <__stack+0x1b9>
			case (Port_D) : Set_Bit(DDRD,Copy_u8PinNumber);break;
 9f2:	a1 e3       	ldi	r26, 0x31	; 49
 9f4:	b0 e0       	ldi	r27, 0x00	; 0
 9f6:	e1 e3       	ldi	r30, 0x31	; 49
 9f8:	f0 e0       	ldi	r31, 0x00	; 0
 9fa:	80 81       	ld	r24, Z
 9fc:	48 2f       	mov	r20, r24
 9fe:	8a 81       	ldd	r24, Y+2	; 0x02
 a00:	28 2f       	mov	r18, r24
 a02:	30 e0       	ldi	r19, 0x00	; 0
 a04:	81 e0       	ldi	r24, 0x01	; 1
 a06:	90 e0       	ldi	r25, 0x00	; 0
 a08:	02 2e       	mov	r0, r18
 a0a:	02 c0       	rjmp	.+4      	; 0xa10 <__stack+0x1b1>
 a0c:	88 0f       	add	r24, r24
 a0e:	99 1f       	adc	r25, r25
 a10:	0a 94       	dec	r0
 a12:	e2 f7       	brpl	.-8      	; 0xa0c <__stack+0x1ad>
 a14:	84 2b       	or	r24, r20
 a16:	8c 93       	st	X, r24
		}
	}
}
 a18:	27 96       	adiw	r28, 0x07	; 7
 a1a:	0f b6       	in	r0, 0x3f	; 63
 a1c:	f8 94       	cli
 a1e:	de bf       	out	0x3e, r29	; 62
 a20:	0f be       	out	0x3f, r0	; 63
 a22:	cd bf       	out	0x3d, r28	; 61
 a24:	cf 91       	pop	r28
 a26:	df 91       	pop	r29
 a28:	08 95       	ret

00000a2a <DIO_VidGetPinValue>:


void DIO_VidGetPinValue(u8 Copy_u8Port, u8 Copy_u8PinNumber, u8* Copy_Pu8PinValue)
{
 a2a:	df 93       	push	r29
 a2c:	cf 93       	push	r28
 a2e:	00 d0       	rcall	.+0      	; 0xa30 <DIO_VidGetPinValue+0x6>
 a30:	00 d0       	rcall	.+0      	; 0xa32 <DIO_VidGetPinValue+0x8>
 a32:	00 d0       	rcall	.+0      	; 0xa34 <DIO_VidGetPinValue+0xa>
 a34:	cd b7       	in	r28, 0x3d	; 61
 a36:	de b7       	in	r29, 0x3e	; 62
 a38:	89 83       	std	Y+1, r24	; 0x01
 a3a:	6a 83       	std	Y+2, r22	; 0x02
 a3c:	5c 83       	std	Y+4, r21	; 0x04
 a3e:	4b 83       	std	Y+3, r20	; 0x03
	/****************** set pin as input***********************/
		switch (Copy_u8Port) {
 a40:	89 81       	ldd	r24, Y+1	; 0x01
 a42:	28 2f       	mov	r18, r24
 a44:	30 e0       	ldi	r19, 0x00	; 0
 a46:	3e 83       	std	Y+6, r19	; 0x06
 a48:	2d 83       	std	Y+5, r18	; 0x05
 a4a:	4d 81       	ldd	r20, Y+5	; 0x05
 a4c:	5e 81       	ldd	r21, Y+6	; 0x06
 a4e:	43 30       	cpi	r20, 0x03	; 3
 a50:	51 05       	cpc	r21, r1
 a52:	59 f1       	breq	.+86     	; 0xaaa <DIO_VidGetPinValue+0x80>
 a54:	8d 81       	ldd	r24, Y+5	; 0x05
 a56:	9e 81       	ldd	r25, Y+6	; 0x06
 a58:	84 30       	cpi	r24, 0x04	; 4
 a5a:	91 05       	cpc	r25, r1
 a5c:	34 f4       	brge	.+12     	; 0xa6a <DIO_VidGetPinValue+0x40>
 a5e:	2d 81       	ldd	r18, Y+5	; 0x05
 a60:	3e 81       	ldd	r19, Y+6	; 0x06
 a62:	22 30       	cpi	r18, 0x02	; 2
 a64:	31 05       	cpc	r19, r1
 a66:	69 f0       	breq	.+26     	; 0xa82 <DIO_VidGetPinValue+0x58>
 a68:	5b c0       	rjmp	.+182    	; 0xb20 <DIO_VidGetPinValue+0xf6>
 a6a:	4d 81       	ldd	r20, Y+5	; 0x05
 a6c:	5e 81       	ldd	r21, Y+6	; 0x06
 a6e:	44 30       	cpi	r20, 0x04	; 4
 a70:	51 05       	cpc	r21, r1
 a72:	79 f1       	breq	.+94     	; 0xad2 <DIO_VidGetPinValue+0xa8>
 a74:	8d 81       	ldd	r24, Y+5	; 0x05
 a76:	9e 81       	ldd	r25, Y+6	; 0x06
 a78:	85 30       	cpi	r24, 0x05	; 5
 a7a:	91 05       	cpc	r25, r1
 a7c:	09 f4       	brne	.+2      	; 0xa80 <DIO_VidGetPinValue+0x56>
 a7e:	3d c0       	rjmp	.+122    	; 0xafa <DIO_VidGetPinValue+0xd0>
 a80:	4f c0       	rjmp	.+158    	; 0xb20 <DIO_VidGetPinValue+0xf6>
			case (Port_A) : *Copy_Pu8PinValue = Get_Bit(PINA,Copy_u8PinNumber);break;
 a82:	e9 e3       	ldi	r30, 0x39	; 57
 a84:	f0 e0       	ldi	r31, 0x00	; 0
 a86:	80 81       	ld	r24, Z
 a88:	28 2f       	mov	r18, r24
 a8a:	30 e0       	ldi	r19, 0x00	; 0
 a8c:	8a 81       	ldd	r24, Y+2	; 0x02
 a8e:	88 2f       	mov	r24, r24
 a90:	90 e0       	ldi	r25, 0x00	; 0
 a92:	a9 01       	movw	r20, r18
 a94:	02 c0       	rjmp	.+4      	; 0xa9a <DIO_VidGetPinValue+0x70>
 a96:	55 95       	asr	r21
 a98:	47 95       	ror	r20
 a9a:	8a 95       	dec	r24
 a9c:	e2 f7       	brpl	.-8      	; 0xa96 <DIO_VidGetPinValue+0x6c>
 a9e:	ca 01       	movw	r24, r20
 aa0:	81 70       	andi	r24, 0x01	; 1
 aa2:	eb 81       	ldd	r30, Y+3	; 0x03
 aa4:	fc 81       	ldd	r31, Y+4	; 0x04
 aa6:	80 83       	st	Z, r24
 aa8:	3b c0       	rjmp	.+118    	; 0xb20 <DIO_VidGetPinValue+0xf6>
			case (Port_B) : *Copy_Pu8PinValue = Get_Bit(PINB,Copy_u8PinNumber);break;
 aaa:	e6 e3       	ldi	r30, 0x36	; 54
 aac:	f0 e0       	ldi	r31, 0x00	; 0
 aae:	80 81       	ld	r24, Z
 ab0:	28 2f       	mov	r18, r24
 ab2:	30 e0       	ldi	r19, 0x00	; 0
 ab4:	8a 81       	ldd	r24, Y+2	; 0x02
 ab6:	88 2f       	mov	r24, r24
 ab8:	90 e0       	ldi	r25, 0x00	; 0
 aba:	a9 01       	movw	r20, r18
 abc:	02 c0       	rjmp	.+4      	; 0xac2 <DIO_VidGetPinValue+0x98>
 abe:	55 95       	asr	r21
 ac0:	47 95       	ror	r20
 ac2:	8a 95       	dec	r24
 ac4:	e2 f7       	brpl	.-8      	; 0xabe <DIO_VidGetPinValue+0x94>
 ac6:	ca 01       	movw	r24, r20
 ac8:	81 70       	andi	r24, 0x01	; 1
 aca:	eb 81       	ldd	r30, Y+3	; 0x03
 acc:	fc 81       	ldd	r31, Y+4	; 0x04
 ace:	80 83       	st	Z, r24
 ad0:	27 c0       	rjmp	.+78     	; 0xb20 <DIO_VidGetPinValue+0xf6>
			case (Port_C) : *Copy_Pu8PinValue = Get_Bit(PINC,Copy_u8PinNumber);break;
 ad2:	e3 e3       	ldi	r30, 0x33	; 51
 ad4:	f0 e0       	ldi	r31, 0x00	; 0
 ad6:	80 81       	ld	r24, Z
 ad8:	28 2f       	mov	r18, r24
 ada:	30 e0       	ldi	r19, 0x00	; 0
 adc:	8a 81       	ldd	r24, Y+2	; 0x02
 ade:	88 2f       	mov	r24, r24
 ae0:	90 e0       	ldi	r25, 0x00	; 0
 ae2:	a9 01       	movw	r20, r18
 ae4:	02 c0       	rjmp	.+4      	; 0xaea <DIO_VidGetPinValue+0xc0>
 ae6:	55 95       	asr	r21
 ae8:	47 95       	ror	r20
 aea:	8a 95       	dec	r24
 aec:	e2 f7       	brpl	.-8      	; 0xae6 <DIO_VidGetPinValue+0xbc>
 aee:	ca 01       	movw	r24, r20
 af0:	81 70       	andi	r24, 0x01	; 1
 af2:	eb 81       	ldd	r30, Y+3	; 0x03
 af4:	fc 81       	ldd	r31, Y+4	; 0x04
 af6:	80 83       	st	Z, r24
 af8:	13 c0       	rjmp	.+38     	; 0xb20 <DIO_VidGetPinValue+0xf6>
			case (Port_D) : *Copy_Pu8PinValue = Get_Bit(PIND,Copy_u8PinNumber);break;
 afa:	e0 e3       	ldi	r30, 0x30	; 48
 afc:	f0 e0       	ldi	r31, 0x00	; 0
 afe:	80 81       	ld	r24, Z
 b00:	28 2f       	mov	r18, r24
 b02:	30 e0       	ldi	r19, 0x00	; 0
 b04:	8a 81       	ldd	r24, Y+2	; 0x02
 b06:	88 2f       	mov	r24, r24
 b08:	90 e0       	ldi	r25, 0x00	; 0
 b0a:	a9 01       	movw	r20, r18
 b0c:	02 c0       	rjmp	.+4      	; 0xb12 <DIO_VidGetPinValue+0xe8>
 b0e:	55 95       	asr	r21
 b10:	47 95       	ror	r20
 b12:	8a 95       	dec	r24
 b14:	e2 f7       	brpl	.-8      	; 0xb0e <DIO_VidGetPinValue+0xe4>
 b16:	ca 01       	movw	r24, r20
 b18:	81 70       	andi	r24, 0x01	; 1
 b1a:	eb 81       	ldd	r30, Y+3	; 0x03
 b1c:	fc 81       	ldd	r31, Y+4	; 0x04
 b1e:	80 83       	st	Z, r24
		}
}
 b20:	26 96       	adiw	r28, 0x06	; 6
 b22:	0f b6       	in	r0, 0x3f	; 63
 b24:	f8 94       	cli
 b26:	de bf       	out	0x3e, r29	; 62
 b28:	0f be       	out	0x3f, r0	; 63
 b2a:	cd bf       	out	0x3d, r28	; 61
 b2c:	cf 91       	pop	r28
 b2e:	df 91       	pop	r29
 b30:	08 95       	ret

00000b32 <DIO_VidSetPortVal>:
/*---------------------------------------------------------------------------------------------------------------------------------*/
									/************************set port************************/
/*---------------------------------------------------------------------------------------------------------------------------------*/


void DIO_VidSetPortVal(u8 Copy_u8Port, u8 Copy_u8Val){
 b32:	df 93       	push	r29
 b34:	cf 93       	push	r28
 b36:	00 d0       	rcall	.+0      	; 0xb38 <DIO_VidSetPortVal+0x6>
 b38:	00 d0       	rcall	.+0      	; 0xb3a <DIO_VidSetPortVal+0x8>
 b3a:	cd b7       	in	r28, 0x3d	; 61
 b3c:	de b7       	in	r29, 0x3e	; 62
 b3e:	89 83       	std	Y+1, r24	; 0x01
 b40:	6a 83       	std	Y+2, r22	; 0x02

		switch (Copy_u8Port) {
 b42:	89 81       	ldd	r24, Y+1	; 0x01
 b44:	28 2f       	mov	r18, r24
 b46:	30 e0       	ldi	r19, 0x00	; 0
 b48:	3c 83       	std	Y+4, r19	; 0x04
 b4a:	2b 83       	std	Y+3, r18	; 0x03
 b4c:	8b 81       	ldd	r24, Y+3	; 0x03
 b4e:	9c 81       	ldd	r25, Y+4	; 0x04
 b50:	83 30       	cpi	r24, 0x03	; 3
 b52:	91 05       	cpc	r25, r1
 b54:	d9 f0       	breq	.+54     	; 0xb8c <DIO_VidSetPortVal+0x5a>
 b56:	2b 81       	ldd	r18, Y+3	; 0x03
 b58:	3c 81       	ldd	r19, Y+4	; 0x04
 b5a:	24 30       	cpi	r18, 0x04	; 4
 b5c:	31 05       	cpc	r19, r1
 b5e:	34 f4       	brge	.+12     	; 0xb6c <DIO_VidSetPortVal+0x3a>
 b60:	8b 81       	ldd	r24, Y+3	; 0x03
 b62:	9c 81       	ldd	r25, Y+4	; 0x04
 b64:	82 30       	cpi	r24, 0x02	; 2
 b66:	91 05       	cpc	r25, r1
 b68:	61 f0       	breq	.+24     	; 0xb82 <DIO_VidSetPortVal+0x50>
 b6a:	1e c0       	rjmp	.+60     	; 0xba8 <DIO_VidSetPortVal+0x76>
 b6c:	2b 81       	ldd	r18, Y+3	; 0x03
 b6e:	3c 81       	ldd	r19, Y+4	; 0x04
 b70:	24 30       	cpi	r18, 0x04	; 4
 b72:	31 05       	cpc	r19, r1
 b74:	81 f0       	breq	.+32     	; 0xb96 <DIO_VidSetPortVal+0x64>
 b76:	8b 81       	ldd	r24, Y+3	; 0x03
 b78:	9c 81       	ldd	r25, Y+4	; 0x04
 b7a:	85 30       	cpi	r24, 0x05	; 5
 b7c:	91 05       	cpc	r25, r1
 b7e:	81 f0       	breq	.+32     	; 0xba0 <DIO_VidSetPortVal+0x6e>
 b80:	13 c0       	rjmp	.+38     	; 0xba8 <DIO_VidSetPortVal+0x76>
			case (Port_A) : PORTA = Copy_u8Val;break;
 b82:	eb e3       	ldi	r30, 0x3B	; 59
 b84:	f0 e0       	ldi	r31, 0x00	; 0
 b86:	8a 81       	ldd	r24, Y+2	; 0x02
 b88:	80 83       	st	Z, r24
 b8a:	0e c0       	rjmp	.+28     	; 0xba8 <DIO_VidSetPortVal+0x76>
			case (Port_B) : PORTB = Copy_u8Val;break;
 b8c:	e8 e3       	ldi	r30, 0x38	; 56
 b8e:	f0 e0       	ldi	r31, 0x00	; 0
 b90:	8a 81       	ldd	r24, Y+2	; 0x02
 b92:	80 83       	st	Z, r24
 b94:	09 c0       	rjmp	.+18     	; 0xba8 <DIO_VidSetPortVal+0x76>
			case (Port_C) : PORTC = Copy_u8Val;break;
 b96:	e5 e3       	ldi	r30, 0x35	; 53
 b98:	f0 e0       	ldi	r31, 0x00	; 0
 b9a:	8a 81       	ldd	r24, Y+2	; 0x02
 b9c:	80 83       	st	Z, r24
 b9e:	04 c0       	rjmp	.+8      	; 0xba8 <DIO_VidSetPortVal+0x76>
			case (Port_D) : PORTD = Copy_u8Val;break;
 ba0:	e2 e3       	ldi	r30, 0x32	; 50
 ba2:	f0 e0       	ldi	r31, 0x00	; 0
 ba4:	8a 81       	ldd	r24, Y+2	; 0x02
 ba6:	80 83       	st	Z, r24
		}
}
 ba8:	0f 90       	pop	r0
 baa:	0f 90       	pop	r0
 bac:	0f 90       	pop	r0
 bae:	0f 90       	pop	r0
 bb0:	cf 91       	pop	r28
 bb2:	df 91       	pop	r29
 bb4:	08 95       	ret

00000bb6 <DIO_VidSetPortDirection>:



void DIO_VidSetPortDirection(u8 Copy_u8Port, u8 Copy_u8Direction)
{
 bb6:	df 93       	push	r29
 bb8:	cf 93       	push	r28
 bba:	00 d0       	rcall	.+0      	; 0xbbc <DIO_VidSetPortDirection+0x6>
 bbc:	00 d0       	rcall	.+0      	; 0xbbe <DIO_VidSetPortDirection+0x8>
 bbe:	00 d0       	rcall	.+0      	; 0xbc0 <DIO_VidSetPortDirection+0xa>
 bc0:	cd b7       	in	r28, 0x3d	; 61
 bc2:	de b7       	in	r29, 0x3e	; 62
 bc4:	89 83       	std	Y+1, r24	; 0x01
 bc6:	6a 83       	std	Y+2, r22	; 0x02
	/****************** set Port as input***********************/
	if(Copy_u8Direction == input){
 bc8:	8a 81       	ldd	r24, Y+2	; 0x02
 bca:	88 23       	and	r24, r24
 bcc:	81 f5       	brne	.+96     	; 0xc2e <DIO_VidSetPortDirection+0x78>
		switch (Copy_u8Port) {
 bce:	89 81       	ldd	r24, Y+1	; 0x01
 bd0:	28 2f       	mov	r18, r24
 bd2:	30 e0       	ldi	r19, 0x00	; 0
 bd4:	3e 83       	std	Y+6, r19	; 0x06
 bd6:	2d 83       	std	Y+5, r18	; 0x05
 bd8:	8d 81       	ldd	r24, Y+5	; 0x05
 bda:	9e 81       	ldd	r25, Y+6	; 0x06
 bdc:	83 30       	cpi	r24, 0x03	; 3
 bde:	91 05       	cpc	r25, r1
 be0:	d1 f0       	breq	.+52     	; 0xc16 <DIO_VidSetPortDirection+0x60>
 be2:	2d 81       	ldd	r18, Y+5	; 0x05
 be4:	3e 81       	ldd	r19, Y+6	; 0x06
 be6:	24 30       	cpi	r18, 0x04	; 4
 be8:	31 05       	cpc	r19, r1
 bea:	34 f4       	brge	.+12     	; 0xbf8 <DIO_VidSetPortDirection+0x42>
 bec:	8d 81       	ldd	r24, Y+5	; 0x05
 bee:	9e 81       	ldd	r25, Y+6	; 0x06
 bf0:	82 30       	cpi	r24, 0x02	; 2
 bf2:	91 05       	cpc	r25, r1
 bf4:	61 f0       	breq	.+24     	; 0xc0e <DIO_VidSetPortDirection+0x58>
 bf6:	51 c0       	rjmp	.+162    	; 0xc9a <DIO_VidSetPortDirection+0xe4>
 bf8:	2d 81       	ldd	r18, Y+5	; 0x05
 bfa:	3e 81       	ldd	r19, Y+6	; 0x06
 bfc:	24 30       	cpi	r18, 0x04	; 4
 bfe:	31 05       	cpc	r19, r1
 c00:	71 f0       	breq	.+28     	; 0xc1e <DIO_VidSetPortDirection+0x68>
 c02:	8d 81       	ldd	r24, Y+5	; 0x05
 c04:	9e 81       	ldd	r25, Y+6	; 0x06
 c06:	85 30       	cpi	r24, 0x05	; 5
 c08:	91 05       	cpc	r25, r1
 c0a:	69 f0       	breq	.+26     	; 0xc26 <DIO_VidSetPortDirection+0x70>
 c0c:	46 c0       	rjmp	.+140    	; 0xc9a <DIO_VidSetPortDirection+0xe4>
			case (Port_A) : DDRA = 0x00 ;break;
 c0e:	ea e3       	ldi	r30, 0x3A	; 58
 c10:	f0 e0       	ldi	r31, 0x00	; 0
 c12:	10 82       	st	Z, r1
 c14:	42 c0       	rjmp	.+132    	; 0xc9a <DIO_VidSetPortDirection+0xe4>
			case (Port_B) : DDRB = 0x00 ;break;
 c16:	e7 e3       	ldi	r30, 0x37	; 55
 c18:	f0 e0       	ldi	r31, 0x00	; 0
 c1a:	10 82       	st	Z, r1
 c1c:	3e c0       	rjmp	.+124    	; 0xc9a <DIO_VidSetPortDirection+0xe4>
			case (Port_C) : DDRC = 0x00 ;break;
 c1e:	e4 e3       	ldi	r30, 0x34	; 52
 c20:	f0 e0       	ldi	r31, 0x00	; 0
 c22:	10 82       	st	Z, r1
 c24:	3a c0       	rjmp	.+116    	; 0xc9a <DIO_VidSetPortDirection+0xe4>
			case (Port_D) : DDRD = 0x00 ;break;
 c26:	e1 e3       	ldi	r30, 0x31	; 49
 c28:	f0 e0       	ldi	r31, 0x00	; 0
 c2a:	10 82       	st	Z, r1
 c2c:	36 c0       	rjmp	.+108    	; 0xc9a <DIO_VidSetPortDirection+0xe4>
		}
	}

	/****************** set Port as output***********************/
	else if(Copy_u8Direction == output){
 c2e:	8a 81       	ldd	r24, Y+2	; 0x02
 c30:	81 30       	cpi	r24, 0x01	; 1
 c32:	99 f5       	brne	.+102    	; 0xc9a <DIO_VidSetPortDirection+0xe4>
		switch (Copy_u8Port) {
 c34:	89 81       	ldd	r24, Y+1	; 0x01
 c36:	28 2f       	mov	r18, r24
 c38:	30 e0       	ldi	r19, 0x00	; 0
 c3a:	3c 83       	std	Y+4, r19	; 0x04
 c3c:	2b 83       	std	Y+3, r18	; 0x03
 c3e:	8b 81       	ldd	r24, Y+3	; 0x03
 c40:	9c 81       	ldd	r25, Y+4	; 0x04
 c42:	83 30       	cpi	r24, 0x03	; 3
 c44:	91 05       	cpc	r25, r1
 c46:	d9 f0       	breq	.+54     	; 0xc7e <DIO_VidSetPortDirection+0xc8>
 c48:	2b 81       	ldd	r18, Y+3	; 0x03
 c4a:	3c 81       	ldd	r19, Y+4	; 0x04
 c4c:	24 30       	cpi	r18, 0x04	; 4
 c4e:	31 05       	cpc	r19, r1
 c50:	34 f4       	brge	.+12     	; 0xc5e <DIO_VidSetPortDirection+0xa8>
 c52:	8b 81       	ldd	r24, Y+3	; 0x03
 c54:	9c 81       	ldd	r25, Y+4	; 0x04
 c56:	82 30       	cpi	r24, 0x02	; 2
 c58:	91 05       	cpc	r25, r1
 c5a:	61 f0       	breq	.+24     	; 0xc74 <DIO_VidSetPortDirection+0xbe>
 c5c:	1e c0       	rjmp	.+60     	; 0xc9a <DIO_VidSetPortDirection+0xe4>
 c5e:	2b 81       	ldd	r18, Y+3	; 0x03
 c60:	3c 81       	ldd	r19, Y+4	; 0x04
 c62:	24 30       	cpi	r18, 0x04	; 4
 c64:	31 05       	cpc	r19, r1
 c66:	81 f0       	breq	.+32     	; 0xc88 <DIO_VidSetPortDirection+0xd2>
 c68:	8b 81       	ldd	r24, Y+3	; 0x03
 c6a:	9c 81       	ldd	r25, Y+4	; 0x04
 c6c:	85 30       	cpi	r24, 0x05	; 5
 c6e:	91 05       	cpc	r25, r1
 c70:	81 f0       	breq	.+32     	; 0xc92 <DIO_VidSetPortDirection+0xdc>
 c72:	13 c0       	rjmp	.+38     	; 0xc9a <DIO_VidSetPortDirection+0xe4>
			case (Port_A) : DDRA = 0xff ;break;
 c74:	ea e3       	ldi	r30, 0x3A	; 58
 c76:	f0 e0       	ldi	r31, 0x00	; 0
 c78:	8f ef       	ldi	r24, 0xFF	; 255
 c7a:	80 83       	st	Z, r24
 c7c:	0e c0       	rjmp	.+28     	; 0xc9a <DIO_VidSetPortDirection+0xe4>
			case (Port_B) : DDRB = 0xff ;break;
 c7e:	e7 e3       	ldi	r30, 0x37	; 55
 c80:	f0 e0       	ldi	r31, 0x00	; 0
 c82:	8f ef       	ldi	r24, 0xFF	; 255
 c84:	80 83       	st	Z, r24
 c86:	09 c0       	rjmp	.+18     	; 0xc9a <DIO_VidSetPortDirection+0xe4>
			case (Port_C) : DDRC = 0xff ;break;
 c88:	e4 e3       	ldi	r30, 0x34	; 52
 c8a:	f0 e0       	ldi	r31, 0x00	; 0
 c8c:	8f ef       	ldi	r24, 0xFF	; 255
 c8e:	80 83       	st	Z, r24
 c90:	04 c0       	rjmp	.+8      	; 0xc9a <DIO_VidSetPortDirection+0xe4>
			case (Port_D) : DDRD = 0xff ;break;
 c92:	e1 e3       	ldi	r30, 0x31	; 49
 c94:	f0 e0       	ldi	r31, 0x00	; 0
 c96:	8f ef       	ldi	r24, 0xFF	; 255
 c98:	80 83       	st	Z, r24
		}
	}
}
 c9a:	26 96       	adiw	r28, 0x06	; 6
 c9c:	0f b6       	in	r0, 0x3f	; 63
 c9e:	f8 94       	cli
 ca0:	de bf       	out	0x3e, r29	; 62
 ca2:	0f be       	out	0x3f, r0	; 63
 ca4:	cd bf       	out	0x3d, r28	; 61
 ca6:	cf 91       	pop	r28
 ca8:	df 91       	pop	r29
 caa:	08 95       	ret

00000cac <DIO_VidGetPortValue>:

void DIO_VidGetPortValue(u8 Copy_u8Port, u8* Copy_Pu8Value)
{
 cac:	df 93       	push	r29
 cae:	cf 93       	push	r28
 cb0:	00 d0       	rcall	.+0      	; 0xcb2 <DIO_VidGetPortValue+0x6>
 cb2:	00 d0       	rcall	.+0      	; 0xcb4 <DIO_VidGetPortValue+0x8>
 cb4:	0f 92       	push	r0
 cb6:	cd b7       	in	r28, 0x3d	; 61
 cb8:	de b7       	in	r29, 0x3e	; 62
 cba:	89 83       	std	Y+1, r24	; 0x01
 cbc:	7b 83       	std	Y+3, r23	; 0x03
 cbe:	6a 83       	std	Y+2, r22	; 0x02
	switch (Copy_u8Port) {
 cc0:	89 81       	ldd	r24, Y+1	; 0x01
 cc2:	28 2f       	mov	r18, r24
 cc4:	30 e0       	ldi	r19, 0x00	; 0
 cc6:	3d 83       	std	Y+5, r19	; 0x05
 cc8:	2c 83       	std	Y+4, r18	; 0x04
 cca:	8c 81       	ldd	r24, Y+4	; 0x04
 ccc:	9d 81       	ldd	r25, Y+5	; 0x05
 cce:	83 30       	cpi	r24, 0x03	; 3
 cd0:	91 05       	cpc	r25, r1
 cd2:	e9 f0       	breq	.+58     	; 0xd0e <DIO_VidGetPortValue+0x62>
 cd4:	2c 81       	ldd	r18, Y+4	; 0x04
 cd6:	3d 81       	ldd	r19, Y+5	; 0x05
 cd8:	24 30       	cpi	r18, 0x04	; 4
 cda:	31 05       	cpc	r19, r1
 cdc:	34 f4       	brge	.+12     	; 0xcea <DIO_VidGetPortValue+0x3e>
 cde:	8c 81       	ldd	r24, Y+4	; 0x04
 ce0:	9d 81       	ldd	r25, Y+5	; 0x05
 ce2:	82 30       	cpi	r24, 0x02	; 2
 ce4:	91 05       	cpc	r25, r1
 ce6:	61 f0       	breq	.+24     	; 0xd00 <DIO_VidGetPortValue+0x54>
 ce8:	26 c0       	rjmp	.+76     	; 0xd36 <DIO_VidGetPortValue+0x8a>
 cea:	2c 81       	ldd	r18, Y+4	; 0x04
 cec:	3d 81       	ldd	r19, Y+5	; 0x05
 cee:	24 30       	cpi	r18, 0x04	; 4
 cf0:	31 05       	cpc	r19, r1
 cf2:	a1 f0       	breq	.+40     	; 0xd1c <DIO_VidGetPortValue+0x70>
 cf4:	8c 81       	ldd	r24, Y+4	; 0x04
 cf6:	9d 81       	ldd	r25, Y+5	; 0x05
 cf8:	85 30       	cpi	r24, 0x05	; 5
 cfa:	91 05       	cpc	r25, r1
 cfc:	b1 f0       	breq	.+44     	; 0xd2a <DIO_VidGetPortValue+0x7e>
 cfe:	1b c0       	rjmp	.+54     	; 0xd36 <DIO_VidGetPortValue+0x8a>
		case (Port_A) : *Copy_Pu8Value = PINA; break;
 d00:	e9 e3       	ldi	r30, 0x39	; 57
 d02:	f0 e0       	ldi	r31, 0x00	; 0
 d04:	80 81       	ld	r24, Z
 d06:	ea 81       	ldd	r30, Y+2	; 0x02
 d08:	fb 81       	ldd	r31, Y+3	; 0x03
 d0a:	80 83       	st	Z, r24
 d0c:	14 c0       	rjmp	.+40     	; 0xd36 <DIO_VidGetPortValue+0x8a>
		case (Port_B) : *Copy_Pu8Value = PINB; break;
 d0e:	e6 e3       	ldi	r30, 0x36	; 54
 d10:	f0 e0       	ldi	r31, 0x00	; 0
 d12:	80 81       	ld	r24, Z
 d14:	ea 81       	ldd	r30, Y+2	; 0x02
 d16:	fb 81       	ldd	r31, Y+3	; 0x03
 d18:	80 83       	st	Z, r24
 d1a:	0d c0       	rjmp	.+26     	; 0xd36 <DIO_VidGetPortValue+0x8a>
		case (Port_C) : *Copy_Pu8Value = PINC; break;
 d1c:	e3 e3       	ldi	r30, 0x33	; 51
 d1e:	f0 e0       	ldi	r31, 0x00	; 0
 d20:	80 81       	ld	r24, Z
 d22:	ea 81       	ldd	r30, Y+2	; 0x02
 d24:	fb 81       	ldd	r31, Y+3	; 0x03
 d26:	80 83       	st	Z, r24
 d28:	06 c0       	rjmp	.+12     	; 0xd36 <DIO_VidGetPortValue+0x8a>
		case (Port_D) : *Copy_Pu8Value = PIND; break;
 d2a:	e0 e3       	ldi	r30, 0x30	; 48
 d2c:	f0 e0       	ldi	r31, 0x00	; 0
 d2e:	80 81       	ld	r24, Z
 d30:	ea 81       	ldd	r30, Y+2	; 0x02
 d32:	fb 81       	ldd	r31, Y+3	; 0x03
 d34:	80 83       	st	Z, r24
	}
}
 d36:	0f 90       	pop	r0
 d38:	0f 90       	pop	r0
 d3a:	0f 90       	pop	r0
 d3c:	0f 90       	pop	r0
 d3e:	0f 90       	pop	r0
 d40:	cf 91       	pop	r28
 d42:	df 91       	pop	r29
 d44:	08 95       	ret

00000d46 <ADC_VidInit>:
#include "ADC_Config.h"
#include "ADC_Interface.h"
#include "ADC_Private.h"

/*For Fixed options*/
void ADC_VidInit(){
 d46:	df 93       	push	r29
 d48:	cf 93       	push	r28
 d4a:	cd b7       	in	r28, 0x3d	; 61
 d4c:	de b7       	in	r29, 0x3e	; 62
	/*Reference Selection Bit*/
	/*AVCC Reference*/
	Set_Bit(ADMUX,ADMUX_REFS0);
 d4e:	a7 e2       	ldi	r26, 0x27	; 39
 d50:	b0 e0       	ldi	r27, 0x00	; 0
 d52:	e7 e2       	ldi	r30, 0x27	; 39
 d54:	f0 e0       	ldi	r31, 0x00	; 0
 d56:	80 81       	ld	r24, Z
 d58:	80 64       	ori	r24, 0x40	; 64
 d5a:	8c 93       	st	X, r24
	CLR_Bit(ADMUX,ADMUX_REFS1);
 d5c:	a7 e2       	ldi	r26, 0x27	; 39
 d5e:	b0 e0       	ldi	r27, 0x00	; 0
 d60:	e7 e2       	ldi	r30, 0x27	; 39
 d62:	f0 e0       	ldi	r31, 0x00	; 0
 d64:	80 81       	ld	r24, Z
 d66:	8f 77       	andi	r24, 0x7F	; 127
 d68:	8c 93       	st	X, r24

	/*ADLAR to read 8-Bits data as if it's 8-bits only*/
	Set_Bit(ADMUX,ADMUX_ADLAR);
 d6a:	a7 e2       	ldi	r26, 0x27	; 39
 d6c:	b0 e0       	ldi	r27, 0x00	; 0
 d6e:	e7 e2       	ldi	r30, 0x27	; 39
 d70:	f0 e0       	ldi	r31, 0x00	; 0
 d72:	80 81       	ld	r24, Z
 d74:	80 62       	ori	r24, 0x20	; 32
 d76:	8c 93       	st	X, r24

	/*Prescaler 128*/
	Set_Bit(ADCSRA,ADCSRA_ADPS0);
 d78:	a6 e2       	ldi	r26, 0x26	; 38
 d7a:	b0 e0       	ldi	r27, 0x00	; 0
 d7c:	e6 e2       	ldi	r30, 0x26	; 38
 d7e:	f0 e0       	ldi	r31, 0x00	; 0
 d80:	80 81       	ld	r24, Z
 d82:	81 60       	ori	r24, 0x01	; 1
 d84:	8c 93       	st	X, r24
	Set_Bit(ADCSRA,ADCSRA_ADPS1);
 d86:	a6 e2       	ldi	r26, 0x26	; 38
 d88:	b0 e0       	ldi	r27, 0x00	; 0
 d8a:	e6 e2       	ldi	r30, 0x26	; 38
 d8c:	f0 e0       	ldi	r31, 0x00	; 0
 d8e:	80 81       	ld	r24, Z
 d90:	82 60       	ori	r24, 0x02	; 2
 d92:	8c 93       	st	X, r24
	Set_Bit(ADCSRA,ADCSRA_ADPS2);
 d94:	a6 e2       	ldi	r26, 0x26	; 38
 d96:	b0 e0       	ldi	r27, 0x00	; 0
 d98:	e6 e2       	ldi	r30, 0x26	; 38
 d9a:	f0 e0       	ldi	r31, 0x00	; 0
 d9c:	80 81       	ld	r24, Z
 d9e:	84 60       	ori	r24, 0x04	; 4
 da0:	8c 93       	st	X, r24

	/*Enable Module*/
	Set_Bit(ADCSRA,ADCSRA_ADEN);
 da2:	a6 e2       	ldi	r26, 0x26	; 38
 da4:	b0 e0       	ldi	r27, 0x00	; 0
 da6:	e6 e2       	ldi	r30, 0x26	; 38
 da8:	f0 e0       	ldi	r31, 0x00	; 0
 daa:	80 81       	ld	r24, Z
 dac:	80 68       	ori	r24, 0x80	; 128
 dae:	8c 93       	st	X, r24
}
 db0:	cf 91       	pop	r28
 db2:	df 91       	pop	r29
 db4:	08 95       	ret

00000db6 <ADC_u8ReadChannel>:

u8 ADC_u8ReadChannel(u8 Copy_u8Channel){
 db6:	df 93       	push	r29
 db8:	cf 93       	push	r28
 dba:	0f 92       	push	r0
 dbc:	cd b7       	in	r28, 0x3d	; 61
 dbe:	de b7       	in	r29, 0x3e	; 62
 dc0:	89 83       	std	Y+1, r24	; 0x01
	/*choose Channel*/
	/*CLR first 5 Bits*/
	ADMUX &= 0b11100000;
 dc2:	a7 e2       	ldi	r26, 0x27	; 39
 dc4:	b0 e0       	ldi	r27, 0x00	; 0
 dc6:	e7 e2       	ldi	r30, 0x27	; 39
 dc8:	f0 e0       	ldi	r31, 0x00	; 0
 dca:	80 81       	ld	r24, Z
 dcc:	80 7e       	andi	r24, 0xE0	; 224
 dce:	8c 93       	st	X, r24
	/*Select Channel to read from - ADC0 to ADC7*/
	ADMUX |= Copy_u8Channel;
 dd0:	a7 e2       	ldi	r26, 0x27	; 39
 dd2:	b0 e0       	ldi	r27, 0x00	; 0
 dd4:	e7 e2       	ldi	r30, 0x27	; 39
 dd6:	f0 e0       	ldi	r31, 0x00	; 0
 dd8:	90 81       	ld	r25, Z
 dda:	89 81       	ldd	r24, Y+1	; 0x01
 ddc:	89 2b       	or	r24, r25
 dde:	8c 93       	st	X, r24

	/*Start Conversion*/
	Set_Bit(ADCSRA,ADCSRA_ADSC);
 de0:	a6 e2       	ldi	r26, 0x26	; 38
 de2:	b0 e0       	ldi	r27, 0x00	; 0
 de4:	e6 e2       	ldi	r30, 0x26	; 38
 de6:	f0 e0       	ldi	r31, 0x00	; 0
 de8:	80 81       	ld	r24, Z
 dea:	80 64       	ori	r24, 0x40	; 64
 dec:	8c 93       	st	X, r24

	/* Wait Till Conversion is Over*/
	while(!Get_Bit(ADCSRA,ADCSRA_ADIF));
 dee:	e6 e2       	ldi	r30, 0x26	; 38
 df0:	f0 e0       	ldi	r31, 0x00	; 0
 df2:	80 81       	ld	r24, Z
 df4:	82 95       	swap	r24
 df6:	8f 70       	andi	r24, 0x0F	; 15
 df8:	88 2f       	mov	r24, r24
 dfa:	90 e0       	ldi	r25, 0x00	; 0
 dfc:	81 70       	andi	r24, 0x01	; 1
 dfe:	90 70       	andi	r25, 0x00	; 0
 e00:	00 97       	sbiw	r24, 0x00	; 0
 e02:	a9 f3       	breq	.-22     	; 0xdee <ADC_u8ReadChannel+0x38>

	/*Clear Flag by setting logical 1*/
	Set_Bit(ADCSRA,ADCSRA_ADIF);
 e04:	a6 e2       	ldi	r26, 0x26	; 38
 e06:	b0 e0       	ldi	r27, 0x00	; 0
 e08:	e6 e2       	ldi	r30, 0x26	; 38
 e0a:	f0 e0       	ldi	r31, 0x00	; 0
 e0c:	80 81       	ld	r24, Z
 e0e:	80 61       	ori	r24, 0x10	; 16
 e10:	8c 93       	st	X, r24

	/*Return the value*/
	return ADCH;
 e12:	e5 e2       	ldi	r30, 0x25	; 37
 e14:	f0 e0       	ldi	r31, 0x00	; 0
 e16:	80 81       	ld	r24, Z
}
 e18:	0f 90       	pop	r0
 e1a:	cf 91       	pop	r28
 e1c:	df 91       	pop	r29
 e1e:	08 95       	ret

00000e20 <ADC_f32LCDVoltConv>:
u16 ADC_f32LCDVoltConv(u8 Copy_Reading){
 e20:	df 93       	push	r29
 e22:	cf 93       	push	r28
 e24:	00 d0       	rcall	.+0      	; 0xe26 <ADC_f32LCDVoltConv+0x6>
 e26:	0f 92       	push	r0
 e28:	cd b7       	in	r28, 0x3d	; 61
 e2a:	de b7       	in	r29, 0x3e	; 62
 e2c:	8b 83       	std	Y+3, r24	; 0x03
	u16 newreading = (Copy_Reading*(5000/256UL));
 e2e:	8b 81       	ldd	r24, Y+3	; 0x03
 e30:	88 2f       	mov	r24, r24
 e32:	90 e0       	ldi	r25, 0x00	; 0
 e34:	a0 e0       	ldi	r26, 0x00	; 0
 e36:	b0 e0       	ldi	r27, 0x00	; 0
 e38:	23 e1       	ldi	r18, 0x13	; 19
 e3a:	30 e0       	ldi	r19, 0x00	; 0
 e3c:	40 e0       	ldi	r20, 0x00	; 0
 e3e:	50 e0       	ldi	r21, 0x00	; 0
 e40:	bc 01       	movw	r22, r24
 e42:	cd 01       	movw	r24, r26
 e44:	0e 94 60 07 	call	0xec0	; 0xec0 <__mulsi3>
 e48:	dc 01       	movw	r26, r24
 e4a:	cb 01       	movw	r24, r22
 e4c:	9a 83       	std	Y+2, r25	; 0x02
 e4e:	89 83       	std	Y+1, r24	; 0x01
	return newreading;
 e50:	89 81       	ldd	r24, Y+1	; 0x01
 e52:	9a 81       	ldd	r25, Y+2	; 0x02

}
 e54:	0f 90       	pop	r0
 e56:	0f 90       	pop	r0
 e58:	0f 90       	pop	r0
 e5a:	cf 91       	pop	r28
 e5c:	df 91       	pop	r29
 e5e:	08 95       	ret

00000e60 <UART_INTRead_TASK>:

#elif Code_Select == 4
/*						ADC INT	Receive					*/
extern st_uart_init UART_INIT;
extern st_uart_int UART_INT;
void UART_INTRead_TASK(void){
 e60:	df 93       	push	r29
 e62:	cf 93       	push	r28
 e64:	cd b7       	in	r28, 0x3d	; 61
 e66:	de b7       	in	r29, 0x3e	; 62
	if(UDR == 'a'){
 e68:	ec e2       	ldi	r30, 0x2C	; 44
 e6a:	f0 e0       	ldi	r31, 0x00	; 0
 e6c:	80 81       	ld	r24, Z
 e6e:	81 36       	cpi	r24, 0x61	; 97
 e70:	29 f4       	brne	.+10     	; 0xe7c <UART_INTRead_TASK+0x1c>
		DIO_VidSetPinValue(Port_A,Pin_2,high);
 e72:	82 e0       	ldi	r24, 0x02	; 2
 e74:	62 e0       	ldi	r22, 0x02	; 2
 e76:	41 e0       	ldi	r20, 0x01	; 1
 e78:	0e 94 11 03 	call	0x622	; 0x622 <DIO_VidSetPinValue>
	}
}
 e7c:	cf 91       	pop	r28
 e7e:	df 91       	pop	r29
 e80:	08 95       	ret

00000e82 <main>:
void main(void){
 e82:	df 93       	push	r29
 e84:	cf 93       	push	r28
 e86:	cd b7       	in	r28, 0x3d	; 61
 e88:	de b7       	in	r29, 0x3e	; 62
	DIO_VidSetPinDirection(Port_A,Pin_2,output);
 e8a:	82 e0       	ldi	r24, 0x02	; 2
 e8c:	62 e0       	ldi	r22, 0x02	; 2
 e8e:	41 e0       	ldi	r20, 0x01	; 1
 e90:	0e 94 13 04 	call	0x826	; 0x826 <DIO_VidSetPinDirection>
	RXComplete_CallBack(UART_INTRead_TASK);
 e94:	80 e3       	ldi	r24, 0x30	; 48
 e96:	97 e0       	ldi	r25, 0x07	; 7
 e98:	0e 94 b0 02 	call	0x560	; 0x560 <RXComplete_CallBack>
	UART_VidTransmitterEnable();		/*Enable TX*/
 e9c:	0e 94 68 01 	call	0x2d0	; 0x2d0 <UART_VidTransmitterEnable>
	UART_VidReceiverEnable();			/*Enable RX*/
 ea0:	0e 94 4c 01 	call	0x298	; 0x298 <UART_VidReceiverEnable>
	UART_Vidinit(&UART_INIT);			/*UART INIT*/
 ea4:	80 e6       	ldi	r24, 0x60	; 96
 ea6:	90 e0       	ldi	r25, 0x00	; 0
 ea8:	0e 94 49 00 	call	0x92	; 0x92 <UART_Vidinit>
	GIE_VidEnable();
 eac:	0e 94 f5 02 	call	0x5ea	; 0x5ea <GIE_VidEnable>
	UART_INT.STM_RX_Status = UART_RX_Complete_INT_Enabled;
 eb0:	81 e0       	ldi	r24, 0x01	; 1
 eb2:	80 93 68 00 	sts	0x0068, r24
	UART_VidInterruptInit(&UART_INT);
 eb6:	88 e6       	ldi	r24, 0x68	; 104
 eb8:	90 e0       	ldi	r25, 0x00	; 0
 eba:	0e 94 84 01 	call	0x308	; 0x308 <UART_VidInterruptInit>
 ebe:	ff cf       	rjmp	.-2      	; 0xebe <main+0x3c>

00000ec0 <__mulsi3>:
 ec0:	62 9f       	mul	r22, r18
 ec2:	d0 01       	movw	r26, r0
 ec4:	73 9f       	mul	r23, r19
 ec6:	f0 01       	movw	r30, r0
 ec8:	82 9f       	mul	r24, r18
 eca:	e0 0d       	add	r30, r0
 ecc:	f1 1d       	adc	r31, r1
 ece:	64 9f       	mul	r22, r20
 ed0:	e0 0d       	add	r30, r0
 ed2:	f1 1d       	adc	r31, r1
 ed4:	92 9f       	mul	r25, r18
 ed6:	f0 0d       	add	r31, r0
 ed8:	83 9f       	mul	r24, r19
 eda:	f0 0d       	add	r31, r0
 edc:	74 9f       	mul	r23, r20
 ede:	f0 0d       	add	r31, r0
 ee0:	65 9f       	mul	r22, r21
 ee2:	f0 0d       	add	r31, r0
 ee4:	99 27       	eor	r25, r25
 ee6:	72 9f       	mul	r23, r18
 ee8:	b0 0d       	add	r27, r0
 eea:	e1 1d       	adc	r30, r1
 eec:	f9 1f       	adc	r31, r25
 eee:	63 9f       	mul	r22, r19
 ef0:	b0 0d       	add	r27, r0
 ef2:	e1 1d       	adc	r30, r1
 ef4:	f9 1f       	adc	r31, r25
 ef6:	bd 01       	movw	r22, r26
 ef8:	cf 01       	movw	r24, r30
 efa:	11 24       	eor	r1, r1
 efc:	08 95       	ret

00000efe <_exit>:
 efe:	f8 94       	cli

00000f00 <__stop_program>:
 f00:	ff cf       	rjmp	.-2      	; 0xf00 <__stop_program>
