
Day17_Day18_08_TIMER1_Servo_ADC_ICU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002e78  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000034  00800060  00002e78  00002f0c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000f  00800094  00800094  00002f40  2**0
                  ALLOC
  3 .stab         000025f8  00000000  00000000  00002f40  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000020a1  00000000  00000000  00005538  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  000075d9  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00007719  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00007889  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  000094d2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000a3bd  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000b16c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000b2cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000b559  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000bd27  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 28 0a 	jmp	0x1450	; 0x1450 <__vector_6>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 71 0a 	jmp	0x14e2	; 0x14e2 <__vector_10>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 e7       	ldi	r30, 0x78	; 120
      68:	fe e2       	ldi	r31, 0x2E	; 46
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 39       	cpi	r26, 0x94	; 148
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a4 e9       	ldi	r26, 0x94	; 148
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a3 3a       	cpi	r26, 0xA3	; 163
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 92 12 	call	0x2524	; 0x2524 <main>
      8a:	0c 94 3a 17 	jmp	0x2e74	; 0x2e74 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 31 14 	jmp	0x2862	; 0x2862 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	aa e7       	ldi	r26, 0x7A	; 122
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 4d 14 	jmp	0x289a	; 0x289a <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 3d 14 	jmp	0x287a	; 0x287a <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 59 14 	jmp	0x28b2	; 0x28b2 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 3d 14 	jmp	0x287a	; 0x287a <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 59 14 	jmp	0x28b2	; 0x28b2 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 31 14 	jmp	0x2862	; 0x2862 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8a e7       	ldi	r24, 0x7A	; 122
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 4d 14 	jmp	0x289a	; 0x289a <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 3d 14 	jmp	0x287a	; 0x287a <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 59 14 	jmp	0x28b2	; 0x28b2 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 3d 14 	jmp	0x287a	; 0x287a <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 59 14 	jmp	0x28b2	; 0x28b2 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 3d 14 	jmp	0x287a	; 0x287a <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 59 14 	jmp	0x28b2	; 0x28b2 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 41 14 	jmp	0x2882	; 0x2882 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 5d 14 	jmp	0x28ba	; 0x28ba <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <TIMER0_VidInit>:
st_TIMER1_INIT 		   timer1_init 		   = {TIMER1_MODE,TIMER1_INTERRUPT_TYPE,TIMER1_INTERRUPT_STATUS,TIMER1_PRESCALER};
st_TIMER1_CompareMatch timer1_comparematch = {TIMER1_COMPARE_MATCH_UNIT,TIMER1_COMPARE_MATCH_OUTPUT_MODE};
st_TIMER1_CompareValue timer1_compareval   = {TIMER1_COMPARE_MATCH_UNIT,TIMER1_COMPARE_MATCH_VALUE};
st_TIMER1_DutyCycle	   timer1_dutycycle    = {TIMER1_COMPARE_MATCH_UNIT,TIMER1_Duty_Cycle};

void TIMER0_VidInit(st_TIMER0* TIMER0){
     b46:	0f 93       	push	r16
     b48:	1f 93       	push	r17
     b4a:	df 93       	push	r29
     b4c:	cf 93       	push	r28
     b4e:	00 d0       	rcall	.+0      	; 0xb50 <TIMER0_VidInit+0xa>
     b50:	cd b7       	in	r28, 0x3d	; 61
     b52:	de b7       	in	r29, 0x3e	; 62
     b54:	9a 83       	std	Y+2, r25	; 0x02
     b56:	89 83       	std	Y+1, r24	; 0x01

	/*			Mode Select	w/Interrupt		*/
	/*					CTC					*/
	if(TIMER0->Timer_Mode == TIMER0_CTC){
     b58:	e9 81       	ldd	r30, Y+1	; 0x01
     b5a:	fa 81       	ldd	r31, Y+2	; 0x02
     b5c:	80 81       	ld	r24, Z
     b5e:	81 30       	cpi	r24, 0x01	; 1
     b60:	49 f5       	brne	.+82     	; 0xbb4 <TIMER0_VidInit+0x6e>
		CLR_Bit(TCCR0,TCCR0_WGM00);
     b62:	a3 e5       	ldi	r26, 0x53	; 83
     b64:	b0 e0       	ldi	r27, 0x00	; 0
     b66:	e3 e5       	ldi	r30, 0x53	; 83
     b68:	f0 e0       	ldi	r31, 0x00	; 0
     b6a:	80 81       	ld	r24, Z
     b6c:	8f 7b       	andi	r24, 0xBF	; 191
     b6e:	8c 93       	st	X, r24
		Set_Bit(TCCR0,TCCR0_WGM01);
     b70:	a3 e5       	ldi	r26, 0x53	; 83
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	e3 e5       	ldi	r30, 0x53	; 83
     b76:	f0 e0       	ldi	r31, 0x00	; 0
     b78:	80 81       	ld	r24, Z
     b7a:	88 60       	ori	r24, 0x08	; 8
     b7c:	8c 93       	st	X, r24
		if(TIMER0->Interrupt_status == Enable){
     b7e:	e9 81       	ldd	r30, Y+1	; 0x01
     b80:	fa 81       	ldd	r31, Y+2	; 0x02
     b82:	81 81       	ldd	r24, Z+1	; 0x01
     b84:	81 30       	cpi	r24, 0x01	; 1
     b86:	41 f4       	brne	.+16     	; 0xb98 <TIMER0_VidInit+0x52>
			TIMSK |= (1<<TIMSK_OCIE0);
     b88:	a9 e5       	ldi	r26, 0x59	; 89
     b8a:	b0 e0       	ldi	r27, 0x00	; 0
     b8c:	e9 e5       	ldi	r30, 0x59	; 89
     b8e:	f0 e0       	ldi	r31, 0x00	; 0
     b90:	80 81       	ld	r24, Z
     b92:	82 60       	ori	r24, 0x02	; 2
     b94:	8c 93       	st	X, r24
     b96:	95 c0       	rjmp	.+298    	; 0xcc2 <TIMER0_VidInit+0x17c>
		}
		else if (TIMER0->Interrupt_status == Disable){
     b98:	e9 81       	ldd	r30, Y+1	; 0x01
     b9a:	fa 81       	ldd	r31, Y+2	; 0x02
     b9c:	81 81       	ldd	r24, Z+1	; 0x01
     b9e:	88 23       	and	r24, r24
     ba0:	09 f0       	breq	.+2      	; 0xba4 <TIMER0_VidInit+0x5e>
     ba2:	8f c0       	rjmp	.+286    	; 0xcc2 <TIMER0_VidInit+0x17c>
			TIMSK &= (~(1<<TIMSK_OCIE0));
     ba4:	a9 e5       	ldi	r26, 0x59	; 89
     ba6:	b0 e0       	ldi	r27, 0x00	; 0
     ba8:	e9 e5       	ldi	r30, 0x59	; 89
     baa:	f0 e0       	ldi	r31, 0x00	; 0
     bac:	80 81       	ld	r24, Z
     bae:	8d 7f       	andi	r24, 0xFD	; 253
     bb0:	8c 93       	st	X, r24
     bb2:	87 c0       	rjmp	.+270    	; 0xcc2 <TIMER0_VidInit+0x17c>
		}
	}
	/*					PWM					*/
	else if (TIMER0->Timer_Mode == TIMER0_PWM){
     bb4:	e9 81       	ldd	r30, Y+1	; 0x01
     bb6:	fa 81       	ldd	r31, Y+2	; 0x02
     bb8:	80 81       	ld	r24, Z
     bba:	82 30       	cpi	r24, 0x02	; 2
     bbc:	49 f5       	brne	.+82     	; 0xc10 <TIMER0_VidInit+0xca>
		Set_Bit(TCCR0,TCCR0_WGM00);
     bbe:	a3 e5       	ldi	r26, 0x53	; 83
     bc0:	b0 e0       	ldi	r27, 0x00	; 0
     bc2:	e3 e5       	ldi	r30, 0x53	; 83
     bc4:	f0 e0       	ldi	r31, 0x00	; 0
     bc6:	80 81       	ld	r24, Z
     bc8:	80 64       	ori	r24, 0x40	; 64
     bca:	8c 93       	st	X, r24
		Set_Bit(TCCR0,TCCR0_WGM01);
     bcc:	a3 e5       	ldi	r26, 0x53	; 83
     bce:	b0 e0       	ldi	r27, 0x00	; 0
     bd0:	e3 e5       	ldi	r30, 0x53	; 83
     bd2:	f0 e0       	ldi	r31, 0x00	; 0
     bd4:	80 81       	ld	r24, Z
     bd6:	88 60       	ori	r24, 0x08	; 8
     bd8:	8c 93       	st	X, r24
		if(TIMER0->Interrupt_status == Enable){
     bda:	e9 81       	ldd	r30, Y+1	; 0x01
     bdc:	fa 81       	ldd	r31, Y+2	; 0x02
     bde:	81 81       	ldd	r24, Z+1	; 0x01
     be0:	81 30       	cpi	r24, 0x01	; 1
     be2:	41 f4       	brne	.+16     	; 0xbf4 <TIMER0_VidInit+0xae>
			TIMSK |= (1<<TIMSK_OCIE0);
     be4:	a9 e5       	ldi	r26, 0x59	; 89
     be6:	b0 e0       	ldi	r27, 0x00	; 0
     be8:	e9 e5       	ldi	r30, 0x59	; 89
     bea:	f0 e0       	ldi	r31, 0x00	; 0
     bec:	80 81       	ld	r24, Z
     bee:	82 60       	ori	r24, 0x02	; 2
     bf0:	8c 93       	st	X, r24
     bf2:	67 c0       	rjmp	.+206    	; 0xcc2 <TIMER0_VidInit+0x17c>
		}
		else if (TIMER0->Interrupt_status == Disable){
     bf4:	e9 81       	ldd	r30, Y+1	; 0x01
     bf6:	fa 81       	ldd	r31, Y+2	; 0x02
     bf8:	81 81       	ldd	r24, Z+1	; 0x01
     bfa:	88 23       	and	r24, r24
     bfc:	09 f0       	breq	.+2      	; 0xc00 <TIMER0_VidInit+0xba>
     bfe:	61 c0       	rjmp	.+194    	; 0xcc2 <TIMER0_VidInit+0x17c>
			TIMSK &= (~(1<<TIMSK_OCIE0));
     c00:	a9 e5       	ldi	r26, 0x59	; 89
     c02:	b0 e0       	ldi	r27, 0x00	; 0
     c04:	e9 e5       	ldi	r30, 0x59	; 89
     c06:	f0 e0       	ldi	r31, 0x00	; 0
     c08:	80 81       	ld	r24, Z
     c0a:	8d 7f       	andi	r24, 0xFD	; 253
     c0c:	8c 93       	st	X, r24
     c0e:	59 c0       	rjmp	.+178    	; 0xcc2 <TIMER0_VidInit+0x17c>
		}
	}
	/*				PHASE CORRECT			*/
	else if(TIMER0->Timer_Mode == TIMER0_PHASECORRECT ){
     c10:	e9 81       	ldd	r30, Y+1	; 0x01
     c12:	fa 81       	ldd	r31, Y+2	; 0x02
     c14:	80 81       	ld	r24, Z
     c16:	83 30       	cpi	r24, 0x03	; 3
     c18:	41 f5       	brne	.+80     	; 0xc6a <TIMER0_VidInit+0x124>
		Set_Bit(TCCR0,TCCR0_WGM00);
     c1a:	a3 e5       	ldi	r26, 0x53	; 83
     c1c:	b0 e0       	ldi	r27, 0x00	; 0
     c1e:	e3 e5       	ldi	r30, 0x53	; 83
     c20:	f0 e0       	ldi	r31, 0x00	; 0
     c22:	80 81       	ld	r24, Z
     c24:	80 64       	ori	r24, 0x40	; 64
     c26:	8c 93       	st	X, r24
		CLR_Bit(TCCR0,TCCR0_WGM01);
     c28:	a3 e5       	ldi	r26, 0x53	; 83
     c2a:	b0 e0       	ldi	r27, 0x00	; 0
     c2c:	e3 e5       	ldi	r30, 0x53	; 83
     c2e:	f0 e0       	ldi	r31, 0x00	; 0
     c30:	80 81       	ld	r24, Z
     c32:	87 7f       	andi	r24, 0xF7	; 247
     c34:	8c 93       	st	X, r24
		if(TIMER0->Interrupt_status == Enable){
     c36:	e9 81       	ldd	r30, Y+1	; 0x01
     c38:	fa 81       	ldd	r31, Y+2	; 0x02
     c3a:	81 81       	ldd	r24, Z+1	; 0x01
     c3c:	81 30       	cpi	r24, 0x01	; 1
     c3e:	41 f4       	brne	.+16     	; 0xc50 <TIMER0_VidInit+0x10a>
			TIMSK |= (1<<TIMSK_OCIE0);
     c40:	a9 e5       	ldi	r26, 0x59	; 89
     c42:	b0 e0       	ldi	r27, 0x00	; 0
     c44:	e9 e5       	ldi	r30, 0x59	; 89
     c46:	f0 e0       	ldi	r31, 0x00	; 0
     c48:	80 81       	ld	r24, Z
     c4a:	82 60       	ori	r24, 0x02	; 2
     c4c:	8c 93       	st	X, r24
     c4e:	39 c0       	rjmp	.+114    	; 0xcc2 <TIMER0_VidInit+0x17c>
		}
		else if (TIMER0->Interrupt_status == Disable){
     c50:	e9 81       	ldd	r30, Y+1	; 0x01
     c52:	fa 81       	ldd	r31, Y+2	; 0x02
     c54:	81 81       	ldd	r24, Z+1	; 0x01
     c56:	88 23       	and	r24, r24
     c58:	a1 f5       	brne	.+104    	; 0xcc2 <TIMER0_VidInit+0x17c>
			TIMSK &= (~(1<<TIMSK_OCIE0));
     c5a:	a9 e5       	ldi	r26, 0x59	; 89
     c5c:	b0 e0       	ldi	r27, 0x00	; 0
     c5e:	e9 e5       	ldi	r30, 0x59	; 89
     c60:	f0 e0       	ldi	r31, 0x00	; 0
     c62:	80 81       	ld	r24, Z
     c64:	8d 7f       	andi	r24, 0xFD	; 253
     c66:	8c 93       	st	X, r24
     c68:	2c c0       	rjmp	.+88     	; 0xcc2 <TIMER0_VidInit+0x17c>
		}
	}
	/*				NORMAL MODE				*/
	else if(TIMER0->Timer_Mode == TIMER0_NORMAL){
     c6a:	e9 81       	ldd	r30, Y+1	; 0x01
     c6c:	fa 81       	ldd	r31, Y+2	; 0x02
     c6e:	80 81       	ld	r24, Z
     c70:	88 23       	and	r24, r24
     c72:	39 f5       	brne	.+78     	; 0xcc2 <TIMER0_VidInit+0x17c>
		CLR_Bit(TCCR0,TCCR0_WGM00);
     c74:	a3 e5       	ldi	r26, 0x53	; 83
     c76:	b0 e0       	ldi	r27, 0x00	; 0
     c78:	e3 e5       	ldi	r30, 0x53	; 83
     c7a:	f0 e0       	ldi	r31, 0x00	; 0
     c7c:	80 81       	ld	r24, Z
     c7e:	8f 7b       	andi	r24, 0xBF	; 191
     c80:	8c 93       	st	X, r24
		CLR_Bit(TCCR0,TCCR0_WGM01);
     c82:	a3 e5       	ldi	r26, 0x53	; 83
     c84:	b0 e0       	ldi	r27, 0x00	; 0
     c86:	e3 e5       	ldi	r30, 0x53	; 83
     c88:	f0 e0       	ldi	r31, 0x00	; 0
     c8a:	80 81       	ld	r24, Z
     c8c:	87 7f       	andi	r24, 0xF7	; 247
     c8e:	8c 93       	st	X, r24
		if(TIMER0->Interrupt_status == Enable){
     c90:	e9 81       	ldd	r30, Y+1	; 0x01
     c92:	fa 81       	ldd	r31, Y+2	; 0x02
     c94:	81 81       	ldd	r24, Z+1	; 0x01
     c96:	81 30       	cpi	r24, 0x01	; 1
     c98:	41 f4       	brne	.+16     	; 0xcaa <TIMER0_VidInit+0x164>
			TIMSK |= (1<<TIMSK_TOIE0);
     c9a:	a9 e5       	ldi	r26, 0x59	; 89
     c9c:	b0 e0       	ldi	r27, 0x00	; 0
     c9e:	e9 e5       	ldi	r30, 0x59	; 89
     ca0:	f0 e0       	ldi	r31, 0x00	; 0
     ca2:	80 81       	ld	r24, Z
     ca4:	81 60       	ori	r24, 0x01	; 1
     ca6:	8c 93       	st	X, r24
     ca8:	0c c0       	rjmp	.+24     	; 0xcc2 <TIMER0_VidInit+0x17c>
		}
		else if (TIMER0->Interrupt_status == Disable){
     caa:	e9 81       	ldd	r30, Y+1	; 0x01
     cac:	fa 81       	ldd	r31, Y+2	; 0x02
     cae:	81 81       	ldd	r24, Z+1	; 0x01
     cb0:	88 23       	and	r24, r24
     cb2:	39 f4       	brne	.+14     	; 0xcc2 <TIMER0_VidInit+0x17c>
			TIMSK &= (~(1<<TIMSK_TOIE0));
     cb4:	a9 e5       	ldi	r26, 0x59	; 89
     cb6:	b0 e0       	ldi	r27, 0x00	; 0
     cb8:	e9 e5       	ldi	r30, 0x59	; 89
     cba:	f0 e0       	ldi	r31, 0x00	; 0
     cbc:	80 81       	ld	r24, Z
     cbe:	8e 7f       	andi	r24, 0xFE	; 254
     cc0:	8c 93       	st	X, r24
	}
	/*======================================*/
	/*		Compare Match OUTPUT Mode "OC0"	*/
	/*				Duty Cycle				*/
	/*					CTC					*/
	if(TIMER0->Timer_Mode == TIMER0_CTC){
     cc2:	e9 81       	ldd	r30, Y+1	; 0x01
     cc4:	fa 81       	ldd	r31, Y+2	; 0x02
     cc6:	80 81       	ld	r24, Z
     cc8:	81 30       	cpi	r24, 0x01	; 1
     cca:	09 f5       	brne	.+66     	; 0xd0e <TIMER0_VidInit+0x1c8>
		TCCR0 &= ~(3<<TCCR0_COM00); 							/*Clear Bits*/
     ccc:	a3 e5       	ldi	r26, 0x53	; 83
     cce:	b0 e0       	ldi	r27, 0x00	; 0
     cd0:	e3 e5       	ldi	r30, 0x53	; 83
     cd2:	f0 e0       	ldi	r31, 0x00	; 0
     cd4:	80 81       	ld	r24, Z
     cd6:	8f 7c       	andi	r24, 0xCF	; 207
     cd8:	8c 93       	st	X, r24
		TCCR0 |= (TIMER0->CompareMatchOutputMode<<TCCR0_COM00);	/*Set Bits*/
     cda:	a3 e5       	ldi	r26, 0x53	; 83
     cdc:	b0 e0       	ldi	r27, 0x00	; 0
     cde:	e3 e5       	ldi	r30, 0x53	; 83
     ce0:	f0 e0       	ldi	r31, 0x00	; 0
     ce2:	80 81       	ld	r24, Z
     ce4:	28 2f       	mov	r18, r24
     ce6:	e9 81       	ldd	r30, Y+1	; 0x01
     ce8:	fa 81       	ldd	r31, Y+2	; 0x02
     cea:	82 81       	ldd	r24, Z+2	; 0x02
     cec:	88 2f       	mov	r24, r24
     cee:	90 e0       	ldi	r25, 0x00	; 0
     cf0:	82 95       	swap	r24
     cf2:	92 95       	swap	r25
     cf4:	90 7f       	andi	r25, 0xF0	; 240
     cf6:	98 27       	eor	r25, r24
     cf8:	80 7f       	andi	r24, 0xF0	; 240
     cfa:	98 27       	eor	r25, r24
     cfc:	82 2b       	or	r24, r18
     cfe:	8c 93       	st	X, r24
		OCR0 = TIMER0->CompareMatchValue;
     d00:	ac e5       	ldi	r26, 0x5C	; 92
     d02:	b0 e0       	ldi	r27, 0x00	; 0
     d04:	e9 81       	ldd	r30, Y+1	; 0x01
     d06:	fa 81       	ldd	r31, Y+2	; 0x02
     d08:	83 81       	ldd	r24, Z+3	; 0x03
     d0a:	8c 93       	st	X, r24
     d0c:	9e c0       	rjmp	.+316    	; 0xe4a <TIMER0_VidInit+0x304>
	}
	/*				PhaseCorrect			*/
	else if ( TIMER0->Timer_Mode == TIMER0_PHASECORRECT){
     d0e:	e9 81       	ldd	r30, Y+1	; 0x01
     d10:	fa 81       	ldd	r31, Y+2	; 0x02
     d12:	80 81       	ld	r24, Z
     d14:	83 30       	cpi	r24, 0x03	; 3
     d16:	09 f0       	breq	.+2      	; 0xd1a <TIMER0_VidInit+0x1d4>
     d18:	4a c0       	rjmp	.+148    	; 0xdae <TIMER0_VidInit+0x268>
		TCCR0 &= ~(3<<TCCR0_COM00); 							/*Clear Bits*/
     d1a:	a3 e5       	ldi	r26, 0x53	; 83
     d1c:	b0 e0       	ldi	r27, 0x00	; 0
     d1e:	e3 e5       	ldi	r30, 0x53	; 83
     d20:	f0 e0       	ldi	r31, 0x00	; 0
     d22:	80 81       	ld	r24, Z
     d24:	8f 7c       	andi	r24, 0xCF	; 207
     d26:	8c 93       	st	X, r24
		TCCR0 |= (TIMER0->CompareMatchOutputMode<<TCCR0_COM00);	/*Set Bits*/
     d28:	a3 e5       	ldi	r26, 0x53	; 83
     d2a:	b0 e0       	ldi	r27, 0x00	; 0
     d2c:	e3 e5       	ldi	r30, 0x53	; 83
     d2e:	f0 e0       	ldi	r31, 0x00	; 0
     d30:	80 81       	ld	r24, Z
     d32:	28 2f       	mov	r18, r24
     d34:	e9 81       	ldd	r30, Y+1	; 0x01
     d36:	fa 81       	ldd	r31, Y+2	; 0x02
     d38:	82 81       	ldd	r24, Z+2	; 0x02
     d3a:	88 2f       	mov	r24, r24
     d3c:	90 e0       	ldi	r25, 0x00	; 0
     d3e:	82 95       	swap	r24
     d40:	92 95       	swap	r25
     d42:	90 7f       	andi	r25, 0xF0	; 240
     d44:	98 27       	eor	r25, r24
     d46:	80 7f       	andi	r24, 0xF0	; 240
     d48:	98 27       	eor	r25, r24
     d4a:	82 2b       	or	r24, r18
     d4c:	8c 93       	st	X, r24
		if(TIMER0->CompareMatchOutputMode == TIMER0PC_Set_OC0_Upcounting){
     d4e:	e9 81       	ldd	r30, Y+1	; 0x01
     d50:	fa 81       	ldd	r31, Y+2	; 0x02
     d52:	82 81       	ldd	r24, Z+2	; 0x02
     d54:	83 30       	cpi	r24, 0x03	; 3
     d56:	99 f4       	brne	.+38     	; 0xd7e <TIMER0_VidInit+0x238>
			OCR0 = 256-((TIMER0->Duty_Cycle*256)/100);
     d58:	0c e5       	ldi	r16, 0x5C	; 92
     d5a:	10 e0       	ldi	r17, 0x00	; 0
     d5c:	e9 81       	ldd	r30, Y+1	; 0x01
     d5e:	fa 81       	ldd	r31, Y+2	; 0x02
     d60:	84 81       	ldd	r24, Z+4	; 0x04
     d62:	88 2f       	mov	r24, r24
     d64:	90 e0       	ldi	r25, 0x00	; 0
     d66:	98 2f       	mov	r25, r24
     d68:	88 27       	eor	r24, r24
     d6a:	24 e6       	ldi	r18, 0x64	; 100
     d6c:	30 e0       	ldi	r19, 0x00	; 0
     d6e:	b9 01       	movw	r22, r18
     d70:	0e 94 cd 13 	call	0x279a	; 0x279a <__divmodhi4>
     d74:	cb 01       	movw	r24, r22
     d76:	81 95       	neg	r24
     d78:	f8 01       	movw	r30, r16
     d7a:	80 83       	st	Z, r24
     d7c:	66 c0       	rjmp	.+204    	; 0xe4a <TIMER0_VidInit+0x304>
		}
		else if(TIMER0->CompareMatchOutputMode == TIMER0PC_Clear_OC0_Upcounting){
     d7e:	e9 81       	ldd	r30, Y+1	; 0x01
     d80:	fa 81       	ldd	r31, Y+2	; 0x02
     d82:	82 81       	ldd	r24, Z+2	; 0x02
     d84:	82 30       	cpi	r24, 0x02	; 2
     d86:	09 f0       	breq	.+2      	; 0xd8a <TIMER0_VidInit+0x244>
     d88:	60 c0       	rjmp	.+192    	; 0xe4a <TIMER0_VidInit+0x304>
			OCR0 = (256*TIMER0->Duty_Cycle)/100;
     d8a:	0c e5       	ldi	r16, 0x5C	; 92
     d8c:	10 e0       	ldi	r17, 0x00	; 0
     d8e:	e9 81       	ldd	r30, Y+1	; 0x01
     d90:	fa 81       	ldd	r31, Y+2	; 0x02
     d92:	84 81       	ldd	r24, Z+4	; 0x04
     d94:	88 2f       	mov	r24, r24
     d96:	90 e0       	ldi	r25, 0x00	; 0
     d98:	98 2f       	mov	r25, r24
     d9a:	88 27       	eor	r24, r24
     d9c:	24 e6       	ldi	r18, 0x64	; 100
     d9e:	30 e0       	ldi	r19, 0x00	; 0
     da0:	b9 01       	movw	r22, r18
     da2:	0e 94 cd 13 	call	0x279a	; 0x279a <__divmodhi4>
     da6:	cb 01       	movw	r24, r22
     da8:	f8 01       	movw	r30, r16
     daa:	80 83       	st	Z, r24
     dac:	4e c0       	rjmp	.+156    	; 0xe4a <TIMER0_VidInit+0x304>
		}
	}
	/*					PWM					*/
	else if ( TIMER0->Timer_Mode == TIMER0_PWM){
     dae:	e9 81       	ldd	r30, Y+1	; 0x01
     db0:	fa 81       	ldd	r31, Y+2	; 0x02
     db2:	80 81       	ld	r24, Z
     db4:	82 30       	cpi	r24, 0x02	; 2
     db6:	09 f0       	breq	.+2      	; 0xdba <TIMER0_VidInit+0x274>
     db8:	48 c0       	rjmp	.+144    	; 0xe4a <TIMER0_VidInit+0x304>
		TCCR0 &= ~(3<<TCCR0_COM00); 							/*Clear Bits*/
     dba:	a3 e5       	ldi	r26, 0x53	; 83
     dbc:	b0 e0       	ldi	r27, 0x00	; 0
     dbe:	e3 e5       	ldi	r30, 0x53	; 83
     dc0:	f0 e0       	ldi	r31, 0x00	; 0
     dc2:	80 81       	ld	r24, Z
     dc4:	8f 7c       	andi	r24, 0xCF	; 207
     dc6:	8c 93       	st	X, r24
		TCCR0 |= (TIMER0->CompareMatchOutputMode<<TCCR0_COM00);	/*Set Bits*/
     dc8:	a3 e5       	ldi	r26, 0x53	; 83
     dca:	b0 e0       	ldi	r27, 0x00	; 0
     dcc:	e3 e5       	ldi	r30, 0x53	; 83
     dce:	f0 e0       	ldi	r31, 0x00	; 0
     dd0:	80 81       	ld	r24, Z
     dd2:	28 2f       	mov	r18, r24
     dd4:	e9 81       	ldd	r30, Y+1	; 0x01
     dd6:	fa 81       	ldd	r31, Y+2	; 0x02
     dd8:	82 81       	ldd	r24, Z+2	; 0x02
     dda:	88 2f       	mov	r24, r24
     ddc:	90 e0       	ldi	r25, 0x00	; 0
     dde:	82 95       	swap	r24
     de0:	92 95       	swap	r25
     de2:	90 7f       	andi	r25, 0xF0	; 240
     de4:	98 27       	eor	r25, r24
     de6:	80 7f       	andi	r24, 0xF0	; 240
     de8:	98 27       	eor	r25, r24
     dea:	82 2b       	or	r24, r18
     dec:	8c 93       	st	X, r24
		if(TIMER0->CompareMatchOutputMode == TIMER0PWM_Clear_OC0_On_Compare_Match){
     dee:	e9 81       	ldd	r30, Y+1	; 0x01
     df0:	fa 81       	ldd	r31, Y+2	; 0x02
     df2:	82 81       	ldd	r24, Z+2	; 0x02
     df4:	82 30       	cpi	r24, 0x02	; 2
     df6:	91 f4       	brne	.+36     	; 0xe1c <TIMER0_VidInit+0x2d6>
			OCR0 = (256*TIMER0->Duty_Cycle)/100;
     df8:	0c e5       	ldi	r16, 0x5C	; 92
     dfa:	10 e0       	ldi	r17, 0x00	; 0
     dfc:	e9 81       	ldd	r30, Y+1	; 0x01
     dfe:	fa 81       	ldd	r31, Y+2	; 0x02
     e00:	84 81       	ldd	r24, Z+4	; 0x04
     e02:	88 2f       	mov	r24, r24
     e04:	90 e0       	ldi	r25, 0x00	; 0
     e06:	98 2f       	mov	r25, r24
     e08:	88 27       	eor	r24, r24
     e0a:	24 e6       	ldi	r18, 0x64	; 100
     e0c:	30 e0       	ldi	r19, 0x00	; 0
     e0e:	b9 01       	movw	r22, r18
     e10:	0e 94 cd 13 	call	0x279a	; 0x279a <__divmodhi4>
     e14:	cb 01       	movw	r24, r22
     e16:	f8 01       	movw	r30, r16
     e18:	80 83       	st	Z, r24
     e1a:	17 c0       	rjmp	.+46     	; 0xe4a <TIMER0_VidInit+0x304>
		}
		else if(TIMER0->CompareMatchOutputMode == TIMER0PWM_Set_OC0_On_Compare_Match){
     e1c:	e9 81       	ldd	r30, Y+1	; 0x01
     e1e:	fa 81       	ldd	r31, Y+2	; 0x02
     e20:	82 81       	ldd	r24, Z+2	; 0x02
     e22:	83 30       	cpi	r24, 0x03	; 3
     e24:	91 f4       	brne	.+36     	; 0xe4a <TIMER0_VidInit+0x304>
			OCR0 = 256-((TIMER0->Duty_Cycle*256)/100);
     e26:	0c e5       	ldi	r16, 0x5C	; 92
     e28:	10 e0       	ldi	r17, 0x00	; 0
     e2a:	e9 81       	ldd	r30, Y+1	; 0x01
     e2c:	fa 81       	ldd	r31, Y+2	; 0x02
     e2e:	84 81       	ldd	r24, Z+4	; 0x04
     e30:	88 2f       	mov	r24, r24
     e32:	90 e0       	ldi	r25, 0x00	; 0
     e34:	98 2f       	mov	r25, r24
     e36:	88 27       	eor	r24, r24
     e38:	24 e6       	ldi	r18, 0x64	; 100
     e3a:	30 e0       	ldi	r19, 0x00	; 0
     e3c:	b9 01       	movw	r22, r18
     e3e:	0e 94 cd 13 	call	0x279a	; 0x279a <__divmodhi4>
     e42:	cb 01       	movw	r24, r22
     e44:	81 95       	neg	r24
     e46:	f8 01       	movw	r30, r16
     e48:	80 83       	st	Z, r24
		}
	}
	/*======================================*/
	/*				Prescaling				*/
	TCCR0 &= ~(0b00000111);				/*Clear Bits*/
     e4a:	a3 e5       	ldi	r26, 0x53	; 83
     e4c:	b0 e0       	ldi	r27, 0x00	; 0
     e4e:	e3 e5       	ldi	r30, 0x53	; 83
     e50:	f0 e0       	ldi	r31, 0x00	; 0
     e52:	80 81       	ld	r24, Z
     e54:	88 7f       	andi	r24, 0xF8	; 248
     e56:	8c 93       	st	X, r24
	TCCR0 |= TIMER0->Prescaler;			/*Set Bits*/
     e58:	a3 e5       	ldi	r26, 0x53	; 83
     e5a:	b0 e0       	ldi	r27, 0x00	; 0
     e5c:	e3 e5       	ldi	r30, 0x53	; 83
     e5e:	f0 e0       	ldi	r31, 0x00	; 0
     e60:	90 81       	ld	r25, Z
     e62:	e9 81       	ldd	r30, Y+1	; 0x01
     e64:	fa 81       	ldd	r31, Y+2	; 0x02
     e66:	85 81       	ldd	r24, Z+5	; 0x05
     e68:	89 2b       	or	r24, r25
     e6a:	8c 93       	st	X, r24

}/*End of TIMER0_VidINIT Function*/
     e6c:	0f 90       	pop	r0
     e6e:	0f 90       	pop	r0
     e70:	cf 91       	pop	r28
     e72:	df 91       	pop	r29
     e74:	1f 91       	pop	r17
     e76:	0f 91       	pop	r16
     e78:	08 95       	ret

00000e7a <TIMER0_VidDutyCycleSelector_Normal>:
void TIMER0_VidDutyCycleSelector_Normal(u8 Copy_Local_Duty){
     e7a:	df 93       	push	r29
     e7c:	cf 93       	push	r28
     e7e:	0f 92       	push	r0
     e80:	cd b7       	in	r28, 0x3d	; 61
     e82:	de b7       	in	r29, 0x3e	; 62
     e84:	89 83       	std	Y+1, r24	; 0x01
	OCR0 = (256*Copy_Local_Duty)/100;
     e86:	ec e5       	ldi	r30, 0x5C	; 92
     e88:	f0 e0       	ldi	r31, 0x00	; 0
     e8a:	89 81       	ldd	r24, Y+1	; 0x01
     e8c:	88 2f       	mov	r24, r24
     e8e:	90 e0       	ldi	r25, 0x00	; 0
     e90:	98 2f       	mov	r25, r24
     e92:	88 27       	eor	r24, r24
     e94:	24 e6       	ldi	r18, 0x64	; 100
     e96:	30 e0       	ldi	r19, 0x00	; 0
     e98:	b9 01       	movw	r22, r18
     e9a:	0e 94 cd 13 	call	0x279a	; 0x279a <__divmodhi4>
     e9e:	cb 01       	movw	r24, r22
     ea0:	80 83       	st	Z, r24
}
     ea2:	0f 90       	pop	r0
     ea4:	cf 91       	pop	r28
     ea6:	df 91       	pop	r29
     ea8:	08 95       	ret

00000eaa <TIMER0_VidDutyCycleSelector_Reversed>:
void TIMER0_VidDutyCycleSelector_Reversed(u8 Copy_Local_Duty){
     eaa:	df 93       	push	r29
     eac:	cf 93       	push	r28
     eae:	0f 92       	push	r0
     eb0:	cd b7       	in	r28, 0x3d	; 61
     eb2:	de b7       	in	r29, 0x3e	; 62
     eb4:	89 83       	std	Y+1, r24	; 0x01
	OCR0 = 256-((Copy_Local_Duty*256)/100);
     eb6:	ec e5       	ldi	r30, 0x5C	; 92
     eb8:	f0 e0       	ldi	r31, 0x00	; 0
     eba:	89 81       	ldd	r24, Y+1	; 0x01
     ebc:	88 2f       	mov	r24, r24
     ebe:	90 e0       	ldi	r25, 0x00	; 0
     ec0:	98 2f       	mov	r25, r24
     ec2:	88 27       	eor	r24, r24
     ec4:	24 e6       	ldi	r18, 0x64	; 100
     ec6:	30 e0       	ldi	r19, 0x00	; 0
     ec8:	b9 01       	movw	r22, r18
     eca:	0e 94 cd 13 	call	0x279a	; 0x279a <__divmodhi4>
     ece:	cb 01       	movw	r24, r22
     ed0:	81 95       	neg	r24
     ed2:	80 83       	st	Z, r24
}
     ed4:	0f 90       	pop	r0
     ed6:	cf 91       	pop	r28
     ed8:	df 91       	pop	r29
     eda:	08 95       	ret

00000edc <TIMER0_VidStopTimer>:
void TIMER0_VidStopTimer(void){
     edc:	df 93       	push	r29
     ede:	cf 93       	push	r28
     ee0:	cd b7       	in	r28, 0x3d	; 61
     ee2:	de b7       	in	r29, 0x3e	; 62
	TCCR0 &= ~(0b00000111);				/*Clear Bits*/
     ee4:	a3 e5       	ldi	r26, 0x53	; 83
     ee6:	b0 e0       	ldi	r27, 0x00	; 0
     ee8:	e3 e5       	ldi	r30, 0x53	; 83
     eea:	f0 e0       	ldi	r31, 0x00	; 0
     eec:	80 81       	ld	r24, Z
     eee:	88 7f       	andi	r24, 0xF8	; 248
     ef0:	8c 93       	st	X, r24
}
     ef2:	cf 91       	pop	r28
     ef4:	df 91       	pop	r29
     ef6:	08 95       	ret

00000ef8 <TIMER1_VidInit>:
void TIMER1_VidInit(st_TIMER1_INIT* TIMER1){
     ef8:	df 93       	push	r29
     efa:	cf 93       	push	r28
     efc:	00 d0       	rcall	.+0      	; 0xefe <TIMER1_VidInit+0x6>
     efe:	cd b7       	in	r28, 0x3d	; 61
     f00:	de b7       	in	r29, 0x3e	; 62
     f02:	9a 83       	std	Y+2, r25	; 0x02
     f04:	89 83       	std	Y+1, r24	; 0x01


	/*======================================*/
	/*				Mode Select				*/
	/*======================================*/
	TCCR1A &= ~(0b00000011); /*Clear the first two bits in TCCR1A Register*/
     f06:	af e4       	ldi	r26, 0x4F	; 79
     f08:	b0 e0       	ldi	r27, 0x00	; 0
     f0a:	ef e4       	ldi	r30, 0x4F	; 79
     f0c:	f0 e0       	ldi	r31, 0x00	; 0
     f0e:	80 81       	ld	r24, Z
     f10:	8c 7f       	andi	r24, 0xFC	; 252
     f12:	8c 93       	st	X, r24
	/*Mask Bits no 2 and 3 in "Timer_Mode", then assign the results "bit 0 and 1" values to TCCR1A Register*/
	TCCR1A |= (TIMER1->Timer_Mode&0b11110011);
     f14:	af e4       	ldi	r26, 0x4F	; 79
     f16:	b0 e0       	ldi	r27, 0x00	; 0
     f18:	ef e4       	ldi	r30, 0x4F	; 79
     f1a:	f0 e0       	ldi	r31, 0x00	; 0
     f1c:	80 81       	ld	r24, Z
     f1e:	98 2f       	mov	r25, r24
     f20:	e9 81       	ldd	r30, Y+1	; 0x01
     f22:	fa 81       	ldd	r31, Y+2	; 0x02
     f24:	80 81       	ld	r24, Z
     f26:	83 7f       	andi	r24, 0xF3	; 243
     f28:	89 2b       	or	r24, r25
     f2a:	8c 93       	st	X, r24
	TCCR1B &= ~(0b00011000); /*Clear the 4th and 5th bits*/
     f2c:	ae e4       	ldi	r26, 0x4E	; 78
     f2e:	b0 e0       	ldi	r27, 0x00	; 0
     f30:	ee e4       	ldi	r30, 0x4E	; 78
     f32:	f0 e0       	ldi	r31, 0x00	; 0
     f34:	80 81       	ld	r24, Z
     f36:	87 7e       	andi	r24, 0xE7	; 231
     f38:	8c 93       	st	X, r24
	/*Mask the 1st and 2nd bits in "Timer_Mode", Shift the result by "WGM12" or "3", then assign the values in TCCR1B Register*/
	TCCR1B |= (((TIMER1->Timer_Mode&0b11111100)>>2)<<TCCR1B_WGM12);
     f3a:	ae e4       	ldi	r26, 0x4E	; 78
     f3c:	b0 e0       	ldi	r27, 0x00	; 0
     f3e:	ee e4       	ldi	r30, 0x4E	; 78
     f40:	f0 e0       	ldi	r31, 0x00	; 0
     f42:	80 81       	ld	r24, Z
     f44:	28 2f       	mov	r18, r24
     f46:	e9 81       	ldd	r30, Y+1	; 0x01
     f48:	fa 81       	ldd	r31, Y+2	; 0x02
     f4a:	80 81       	ld	r24, Z
     f4c:	86 95       	lsr	r24
     f4e:	86 95       	lsr	r24
     f50:	88 2f       	mov	r24, r24
     f52:	90 e0       	ldi	r25, 0x00	; 0
     f54:	90 70       	andi	r25, 0x00	; 0
     f56:	88 0f       	add	r24, r24
     f58:	99 1f       	adc	r25, r25
     f5a:	88 0f       	add	r24, r24
     f5c:	99 1f       	adc	r25, r25
     f5e:	88 0f       	add	r24, r24
     f60:	99 1f       	adc	r25, r25
     f62:	82 2b       	or	r24, r18
     f64:	8c 93       	st	X, r24

	/*======================================*/
	/*				INTERRUPT				*/
	/*======================================*/

	if(TIMER1->Interrupt_status == Output_Compare_A_INT){
     f66:	e9 81       	ldd	r30, Y+1	; 0x01
     f68:	fa 81       	ldd	r31, Y+2	; 0x02
     f6a:	82 81       	ldd	r24, Z+2	; 0x02
     f6c:	88 23       	and	r24, r24
     f6e:	d9 f4       	brne	.+54     	; 0xfa6 <TIMER1_VidInit+0xae>
		if(TIMER1->Interrupt_type == TIMER1_INT_Enable){
     f70:	e9 81       	ldd	r30, Y+1	; 0x01
     f72:	fa 81       	ldd	r31, Y+2	; 0x02
     f74:	81 81       	ldd	r24, Z+1	; 0x01
     f76:	81 30       	cpi	r24, 0x01	; 1
     f78:	41 f4       	brne	.+16     	; 0xf8a <TIMER1_VidInit+0x92>
			Set_Bit(TIMSK,TIMSK_OCIE1A);
     f7a:	a9 e5       	ldi	r26, 0x59	; 89
     f7c:	b0 e0       	ldi	r27, 0x00	; 0
     f7e:	e9 e5       	ldi	r30, 0x59	; 89
     f80:	f0 e0       	ldi	r31, 0x00	; 0
     f82:	80 81       	ld	r24, Z
     f84:	80 61       	ori	r24, 0x10	; 16
     f86:	8c 93       	st	X, r24
     f88:	79 c0       	rjmp	.+242    	; 0x107c <TIMER1_VidInit+0x184>
		}
		else if(TIMER1->Interrupt_type == TIMER1_INT_Disable){
     f8a:	e9 81       	ldd	r30, Y+1	; 0x01
     f8c:	fa 81       	ldd	r31, Y+2	; 0x02
     f8e:	81 81       	ldd	r24, Z+1	; 0x01
     f90:	88 23       	and	r24, r24
     f92:	09 f0       	breq	.+2      	; 0xf96 <TIMER1_VidInit+0x9e>
     f94:	73 c0       	rjmp	.+230    	; 0x107c <TIMER1_VidInit+0x184>
			CLR_Bit(TIMSK,TIMSK_OCIE1A);
     f96:	a9 e5       	ldi	r26, 0x59	; 89
     f98:	b0 e0       	ldi	r27, 0x00	; 0
     f9a:	e9 e5       	ldi	r30, 0x59	; 89
     f9c:	f0 e0       	ldi	r31, 0x00	; 0
     f9e:	80 81       	ld	r24, Z
     fa0:	8f 7e       	andi	r24, 0xEF	; 239
     fa2:	8c 93       	st	X, r24
     fa4:	6b c0       	rjmp	.+214    	; 0x107c <TIMER1_VidInit+0x184>
		}
	}
	else if(TIMER1->Interrupt_status == Output_Compare_B_INT){
     fa6:	e9 81       	ldd	r30, Y+1	; 0x01
     fa8:	fa 81       	ldd	r31, Y+2	; 0x02
     faa:	82 81       	ldd	r24, Z+2	; 0x02
     fac:	81 30       	cpi	r24, 0x01	; 1
     fae:	d9 f4       	brne	.+54     	; 0xfe6 <TIMER1_VidInit+0xee>
			if(TIMER1->Interrupt_type == TIMER1_INT_Enable){
     fb0:	e9 81       	ldd	r30, Y+1	; 0x01
     fb2:	fa 81       	ldd	r31, Y+2	; 0x02
     fb4:	81 81       	ldd	r24, Z+1	; 0x01
     fb6:	81 30       	cpi	r24, 0x01	; 1
     fb8:	41 f4       	brne	.+16     	; 0xfca <TIMER1_VidInit+0xd2>
				Set_Bit(TIMSK,TIMSK_OCIE1B);
     fba:	a9 e5       	ldi	r26, 0x59	; 89
     fbc:	b0 e0       	ldi	r27, 0x00	; 0
     fbe:	e9 e5       	ldi	r30, 0x59	; 89
     fc0:	f0 e0       	ldi	r31, 0x00	; 0
     fc2:	80 81       	ld	r24, Z
     fc4:	88 60       	ori	r24, 0x08	; 8
     fc6:	8c 93       	st	X, r24
     fc8:	59 c0       	rjmp	.+178    	; 0x107c <TIMER1_VidInit+0x184>
			}
			else if(TIMER1->Interrupt_type == TIMER1_INT_Disable){
     fca:	e9 81       	ldd	r30, Y+1	; 0x01
     fcc:	fa 81       	ldd	r31, Y+2	; 0x02
     fce:	81 81       	ldd	r24, Z+1	; 0x01
     fd0:	88 23       	and	r24, r24
     fd2:	09 f0       	breq	.+2      	; 0xfd6 <TIMER1_VidInit+0xde>
     fd4:	53 c0       	rjmp	.+166    	; 0x107c <TIMER1_VidInit+0x184>
				CLR_Bit(TIMSK,TIMSK_OCIE1B);
     fd6:	a9 e5       	ldi	r26, 0x59	; 89
     fd8:	b0 e0       	ldi	r27, 0x00	; 0
     fda:	e9 e5       	ldi	r30, 0x59	; 89
     fdc:	f0 e0       	ldi	r31, 0x00	; 0
     fde:	80 81       	ld	r24, Z
     fe0:	87 7f       	andi	r24, 0xF7	; 247
     fe2:	8c 93       	st	X, r24
     fe4:	4b c0       	rjmp	.+150    	; 0x107c <TIMER1_VidInit+0x184>
			}
		}
	else if(TIMER1->Interrupt_status == Both_Output_Compare_A_B_INT){
     fe6:	e9 81       	ldd	r30, Y+1	; 0x01
     fe8:	fa 81       	ldd	r31, Y+2	; 0x02
     fea:	82 81       	ldd	r24, Z+2	; 0x02
     fec:	82 30       	cpi	r24, 0x02	; 2
     fee:	41 f5       	brne	.+80     	; 0x1040 <TIMER1_VidInit+0x148>
			if(TIMER1->Interrupt_type == TIMER1_INT_Enable){
     ff0:	e9 81       	ldd	r30, Y+1	; 0x01
     ff2:	fa 81       	ldd	r31, Y+2	; 0x02
     ff4:	81 81       	ldd	r24, Z+1	; 0x01
     ff6:	81 30       	cpi	r24, 0x01	; 1
     ff8:	79 f4       	brne	.+30     	; 0x1018 <TIMER1_VidInit+0x120>
				Set_Bit(TIMSK,TIMSK_OCIE1A);
     ffa:	a9 e5       	ldi	r26, 0x59	; 89
     ffc:	b0 e0       	ldi	r27, 0x00	; 0
     ffe:	e9 e5       	ldi	r30, 0x59	; 89
    1000:	f0 e0       	ldi	r31, 0x00	; 0
    1002:	80 81       	ld	r24, Z
    1004:	80 61       	ori	r24, 0x10	; 16
    1006:	8c 93       	st	X, r24
				Set_Bit(TIMSK,TIMSK_OCIE1B);
    1008:	a9 e5       	ldi	r26, 0x59	; 89
    100a:	b0 e0       	ldi	r27, 0x00	; 0
    100c:	e9 e5       	ldi	r30, 0x59	; 89
    100e:	f0 e0       	ldi	r31, 0x00	; 0
    1010:	80 81       	ld	r24, Z
    1012:	88 60       	ori	r24, 0x08	; 8
    1014:	8c 93       	st	X, r24
    1016:	32 c0       	rjmp	.+100    	; 0x107c <TIMER1_VidInit+0x184>
			}
			else if(TIMER1->Interrupt_type == TIMER1_INT_Disable){
    1018:	e9 81       	ldd	r30, Y+1	; 0x01
    101a:	fa 81       	ldd	r31, Y+2	; 0x02
    101c:	81 81       	ldd	r24, Z+1	; 0x01
    101e:	88 23       	and	r24, r24
    1020:	69 f5       	brne	.+90     	; 0x107c <TIMER1_VidInit+0x184>
				CLR_Bit(TIMSK,TIMSK_OCIE1A);
    1022:	a9 e5       	ldi	r26, 0x59	; 89
    1024:	b0 e0       	ldi	r27, 0x00	; 0
    1026:	e9 e5       	ldi	r30, 0x59	; 89
    1028:	f0 e0       	ldi	r31, 0x00	; 0
    102a:	80 81       	ld	r24, Z
    102c:	8f 7e       	andi	r24, 0xEF	; 239
    102e:	8c 93       	st	X, r24
				CLR_Bit(TIMSK,TIMSK_OCIE1B);
    1030:	a9 e5       	ldi	r26, 0x59	; 89
    1032:	b0 e0       	ldi	r27, 0x00	; 0
    1034:	e9 e5       	ldi	r30, 0x59	; 89
    1036:	f0 e0       	ldi	r31, 0x00	; 0
    1038:	80 81       	ld	r24, Z
    103a:	87 7f       	andi	r24, 0xF7	; 247
    103c:	8c 93       	st	X, r24
    103e:	1e c0       	rjmp	.+60     	; 0x107c <TIMER1_VidInit+0x184>
			}
		}
	else if(TIMER1->Interrupt_status == Over_FLOW_INT){
    1040:	e9 81       	ldd	r30, Y+1	; 0x01
    1042:	fa 81       	ldd	r31, Y+2	; 0x02
    1044:	82 81       	ldd	r24, Z+2	; 0x02
    1046:	83 30       	cpi	r24, 0x03	; 3
    1048:	c9 f4       	brne	.+50     	; 0x107c <TIMER1_VidInit+0x184>
			if(TIMER1->Interrupt_type == TIMER1_INT_Enable){
    104a:	e9 81       	ldd	r30, Y+1	; 0x01
    104c:	fa 81       	ldd	r31, Y+2	; 0x02
    104e:	81 81       	ldd	r24, Z+1	; 0x01
    1050:	81 30       	cpi	r24, 0x01	; 1
    1052:	41 f4       	brne	.+16     	; 0x1064 <TIMER1_VidInit+0x16c>
				Set_Bit(TIMSK,TIMSK_TOIE1);
    1054:	a9 e5       	ldi	r26, 0x59	; 89
    1056:	b0 e0       	ldi	r27, 0x00	; 0
    1058:	e9 e5       	ldi	r30, 0x59	; 89
    105a:	f0 e0       	ldi	r31, 0x00	; 0
    105c:	80 81       	ld	r24, Z
    105e:	84 60       	ori	r24, 0x04	; 4
    1060:	8c 93       	st	X, r24
    1062:	0c c0       	rjmp	.+24     	; 0x107c <TIMER1_VidInit+0x184>
			}
			else if(TIMER1->Interrupt_type == TIMER1_INT_Disable){
    1064:	e9 81       	ldd	r30, Y+1	; 0x01
    1066:	fa 81       	ldd	r31, Y+2	; 0x02
    1068:	81 81       	ldd	r24, Z+1	; 0x01
    106a:	88 23       	and	r24, r24
    106c:	39 f4       	brne	.+14     	; 0x107c <TIMER1_VidInit+0x184>
				CLR_Bit(TIMSK,TIMSK_TOIE1);
    106e:	a9 e5       	ldi	r26, 0x59	; 89
    1070:	b0 e0       	ldi	r27, 0x00	; 0
    1072:	e9 e5       	ldi	r30, 0x59	; 89
    1074:	f0 e0       	ldi	r31, 0x00	; 0
    1076:	80 81       	ld	r24, Z
    1078:	8b 7f       	andi	r24, 0xFB	; 251
    107a:	8c 93       	st	X, r24
		}

	/*======================================*/
	/*				Prescaling				*/
	/*======================================*/
	TCCR1B &= ~(0b00000111);				/*Clear Bits*/
    107c:	ae e4       	ldi	r26, 0x4E	; 78
    107e:	b0 e0       	ldi	r27, 0x00	; 0
    1080:	ee e4       	ldi	r30, 0x4E	; 78
    1082:	f0 e0       	ldi	r31, 0x00	; 0
    1084:	80 81       	ld	r24, Z
    1086:	88 7f       	andi	r24, 0xF8	; 248
    1088:	8c 93       	st	X, r24
	TCCR1B |= TIMER1->Prescaler;			/*Set Bits*/
    108a:	ae e4       	ldi	r26, 0x4E	; 78
    108c:	b0 e0       	ldi	r27, 0x00	; 0
    108e:	ee e4       	ldi	r30, 0x4E	; 78
    1090:	f0 e0       	ldi	r31, 0x00	; 0
    1092:	90 81       	ld	r25, Z
    1094:	e9 81       	ldd	r30, Y+1	; 0x01
    1096:	fa 81       	ldd	r31, Y+2	; 0x02
    1098:	83 81       	ldd	r24, Z+3	; 0x03
    109a:	89 2b       	or	r24, r25
    109c:	8c 93       	st	X, r24
}
    109e:	0f 90       	pop	r0
    10a0:	0f 90       	pop	r0
    10a2:	cf 91       	pop	r28
    10a4:	df 91       	pop	r29
    10a6:	08 95       	ret

000010a8 <TIMER1_VidSetCompareMatchOutputMode>:
void TIMER1_VidSetCompareMatchOutputMode(st_TIMER1_CompareMatch * TIMER1){
    10a8:	df 93       	push	r29
    10aa:	cf 93       	push	r28
    10ac:	00 d0       	rcall	.+0      	; 0x10ae <TIMER1_VidSetCompareMatchOutputMode+0x6>
    10ae:	cd b7       	in	r28, 0x3d	; 61
    10b0:	de b7       	in	r29, 0x3e	; 62
    10b2:	9a 83       	std	Y+2, r25	; 0x02
    10b4:	89 83       	std	Y+1, r24	; 0x01

	/*		Compare Match Output Mode		*/

	/*				UNIT A					*/
	if(TIMER1->CompareMatchUnitType == UnitA){
    10b6:	e9 81       	ldd	r30, Y+1	; 0x01
    10b8:	fa 81       	ldd	r31, Y+2	; 0x02
    10ba:	80 81       	ld	r24, Z
    10bc:	88 23       	and	r24, r24
    10be:	71 f5       	brne	.+92     	; 0x111c <TIMER1_VidSetCompareMatchOutputMode+0x74>
		TCCR1A &= ~(TIMER1->CompareMatchOutputMode<<TCCR1A_COM1A0); /*Clear Bits*/
    10c0:	af e4       	ldi	r26, 0x4F	; 79
    10c2:	b0 e0       	ldi	r27, 0x00	; 0
    10c4:	ef e4       	ldi	r30, 0x4F	; 79
    10c6:	f0 e0       	ldi	r31, 0x00	; 0
    10c8:	80 81       	ld	r24, Z
    10ca:	28 2f       	mov	r18, r24
    10cc:	e9 81       	ldd	r30, Y+1	; 0x01
    10ce:	fa 81       	ldd	r31, Y+2	; 0x02
    10d0:	81 81       	ldd	r24, Z+1	; 0x01
    10d2:	88 2f       	mov	r24, r24
    10d4:	90 e0       	ldi	r25, 0x00	; 0
    10d6:	00 24       	eor	r0, r0
    10d8:	96 95       	lsr	r25
    10da:	87 95       	ror	r24
    10dc:	07 94       	ror	r0
    10de:	96 95       	lsr	r25
    10e0:	87 95       	ror	r24
    10e2:	07 94       	ror	r0
    10e4:	98 2f       	mov	r25, r24
    10e6:	80 2d       	mov	r24, r0
    10e8:	80 95       	com	r24
    10ea:	82 23       	and	r24, r18
    10ec:	8c 93       	st	X, r24
		TCCR1A |= (TIMER1->CompareMatchOutputMode<<TCCR1A_COM1A0); 	/*Set Bits*/
    10ee:	af e4       	ldi	r26, 0x4F	; 79
    10f0:	b0 e0       	ldi	r27, 0x00	; 0
    10f2:	ef e4       	ldi	r30, 0x4F	; 79
    10f4:	f0 e0       	ldi	r31, 0x00	; 0
    10f6:	80 81       	ld	r24, Z
    10f8:	28 2f       	mov	r18, r24
    10fa:	e9 81       	ldd	r30, Y+1	; 0x01
    10fc:	fa 81       	ldd	r31, Y+2	; 0x02
    10fe:	81 81       	ldd	r24, Z+1	; 0x01
    1100:	88 2f       	mov	r24, r24
    1102:	90 e0       	ldi	r25, 0x00	; 0
    1104:	00 24       	eor	r0, r0
    1106:	96 95       	lsr	r25
    1108:	87 95       	ror	r24
    110a:	07 94       	ror	r0
    110c:	96 95       	lsr	r25
    110e:	87 95       	ror	r24
    1110:	07 94       	ror	r0
    1112:	98 2f       	mov	r25, r24
    1114:	80 2d       	mov	r24, r0
    1116:	82 2b       	or	r24, r18
    1118:	8c 93       	st	X, r24
    111a:	2c c0       	rjmp	.+88     	; 0x1174 <TIMER1_VidSetCompareMatchOutputMode+0xcc>
	}
	/*				UNIT B					*/
	else if(TIMER1->CompareMatchUnitType == UnitB){
    111c:	e9 81       	ldd	r30, Y+1	; 0x01
    111e:	fa 81       	ldd	r31, Y+2	; 0x02
    1120:	80 81       	ld	r24, Z
    1122:	81 30       	cpi	r24, 0x01	; 1
    1124:	39 f5       	brne	.+78     	; 0x1174 <TIMER1_VidSetCompareMatchOutputMode+0xcc>
		TCCR1A &= ~(TIMER1->CompareMatchOutputMode<<TCCR1A_COM1B0); /*Clear Bits*/
    1126:	af e4       	ldi	r26, 0x4F	; 79
    1128:	b0 e0       	ldi	r27, 0x00	; 0
    112a:	ef e4       	ldi	r30, 0x4F	; 79
    112c:	f0 e0       	ldi	r31, 0x00	; 0
    112e:	80 81       	ld	r24, Z
    1130:	28 2f       	mov	r18, r24
    1132:	e9 81       	ldd	r30, Y+1	; 0x01
    1134:	fa 81       	ldd	r31, Y+2	; 0x02
    1136:	81 81       	ldd	r24, Z+1	; 0x01
    1138:	88 2f       	mov	r24, r24
    113a:	90 e0       	ldi	r25, 0x00	; 0
    113c:	82 95       	swap	r24
    113e:	92 95       	swap	r25
    1140:	90 7f       	andi	r25, 0xF0	; 240
    1142:	98 27       	eor	r25, r24
    1144:	80 7f       	andi	r24, 0xF0	; 240
    1146:	98 27       	eor	r25, r24
    1148:	80 95       	com	r24
    114a:	82 23       	and	r24, r18
    114c:	8c 93       	st	X, r24
		TCCR1A |= (TIMER1->CompareMatchOutputMode<<TCCR1A_COM1B0); 	/*Set Bits*/
    114e:	af e4       	ldi	r26, 0x4F	; 79
    1150:	b0 e0       	ldi	r27, 0x00	; 0
    1152:	ef e4       	ldi	r30, 0x4F	; 79
    1154:	f0 e0       	ldi	r31, 0x00	; 0
    1156:	80 81       	ld	r24, Z
    1158:	28 2f       	mov	r18, r24
    115a:	e9 81       	ldd	r30, Y+1	; 0x01
    115c:	fa 81       	ldd	r31, Y+2	; 0x02
    115e:	81 81       	ldd	r24, Z+1	; 0x01
    1160:	88 2f       	mov	r24, r24
    1162:	90 e0       	ldi	r25, 0x00	; 0
    1164:	82 95       	swap	r24
    1166:	92 95       	swap	r25
    1168:	90 7f       	andi	r25, 0xF0	; 240
    116a:	98 27       	eor	r25, r24
    116c:	80 7f       	andi	r24, 0xF0	; 240
    116e:	98 27       	eor	r25, r24
    1170:	82 2b       	or	r24, r18
    1172:	8c 93       	st	X, r24
	}
}
    1174:	0f 90       	pop	r0
    1176:	0f 90       	pop	r0
    1178:	cf 91       	pop	r28
    117a:	df 91       	pop	r29
    117c:	08 95       	ret

0000117e <TIMER1_VidSetCompareVal>:
void TIMER1_VidSetCompareVal(st_TIMER1_CompareValue* TIMER1){
    117e:	df 93       	push	r29
    1180:	cf 93       	push	r28
    1182:	00 d0       	rcall	.+0      	; 0x1184 <TIMER1_VidSetCompareVal+0x6>
    1184:	cd b7       	in	r28, 0x3d	; 61
    1186:	de b7       	in	r29, 0x3e	; 62
    1188:	9a 83       	std	Y+2, r25	; 0x02
    118a:	89 83       	std	Y+1, r24	; 0x01

	if(TIMER1->CompareMatchUnitType == UnitA){
    118c:	e9 81       	ldd	r30, Y+1	; 0x01
    118e:	fa 81       	ldd	r31, Y+2	; 0x02
    1190:	80 81       	ld	r24, Z
    1192:	88 23       	and	r24, r24
    1194:	59 f4       	brne	.+22     	; 0x11ac <TIMER1_VidSetCompareVal+0x2e>
	OCR1AL = TIMER1->CompareMatchValue;
    1196:	ea e4       	ldi	r30, 0x4A	; 74
    1198:	f0 e0       	ldi	r31, 0x00	; 0
    119a:	a9 81       	ldd	r26, Y+1	; 0x01
    119c:	ba 81       	ldd	r27, Y+2	; 0x02
    119e:	11 96       	adiw	r26, 0x01	; 1
    11a0:	8d 91       	ld	r24, X+
    11a2:	9c 91       	ld	r25, X
    11a4:	12 97       	sbiw	r26, 0x02	; 2
    11a6:	91 83       	std	Z+1, r25	; 0x01
    11a8:	80 83       	st	Z, r24
    11aa:	0f c0       	rjmp	.+30     	; 0x11ca <TIMER1_VidSetCompareVal+0x4c>
	}
	else if(TIMER1->CompareMatchUnitType == UnitB){
    11ac:	e9 81       	ldd	r30, Y+1	; 0x01
    11ae:	fa 81       	ldd	r31, Y+2	; 0x02
    11b0:	80 81       	ld	r24, Z
    11b2:	81 30       	cpi	r24, 0x01	; 1
    11b4:	51 f4       	brne	.+20     	; 0x11ca <TIMER1_VidSetCompareVal+0x4c>
	OCR1BL = TIMER1->CompareMatchValue;
    11b6:	e8 e4       	ldi	r30, 0x48	; 72
    11b8:	f0 e0       	ldi	r31, 0x00	; 0
    11ba:	a9 81       	ldd	r26, Y+1	; 0x01
    11bc:	ba 81       	ldd	r27, Y+2	; 0x02
    11be:	11 96       	adiw	r26, 0x01	; 1
    11c0:	8d 91       	ld	r24, X+
    11c2:	9c 91       	ld	r25, X
    11c4:	12 97       	sbiw	r26, 0x02	; 2
    11c6:	91 83       	std	Z+1, r25	; 0x01
    11c8:	80 83       	st	Z, r24
	}
}
    11ca:	0f 90       	pop	r0
    11cc:	0f 90       	pop	r0
    11ce:	cf 91       	pop	r28
    11d0:	df 91       	pop	r29
    11d2:	08 95       	ret

000011d4 <TIMER1_VidSetDutyCycleNormal>:
void TIMER1_VidSetDutyCycleNormal(st_TIMER1_DutyCycle* TIMER1){
    11d4:	0f 93       	push	r16
    11d6:	1f 93       	push	r17
    11d8:	df 93       	push	r29
    11da:	cf 93       	push	r28
    11dc:	00 d0       	rcall	.+0      	; 0x11de <TIMER1_VidSetDutyCycleNormal+0xa>
    11de:	cd b7       	in	r28, 0x3d	; 61
    11e0:	de b7       	in	r29, 0x3e	; 62
    11e2:	9a 83       	std	Y+2, r25	; 0x02
    11e4:	89 83       	std	Y+1, r24	; 0x01
	if(TIMER1->CompareMatchUnitType == UnitA){
    11e6:	e9 81       	ldd	r30, Y+1	; 0x01
    11e8:	fa 81       	ldd	r31, Y+2	; 0x02
    11ea:	80 81       	ld	r24, Z
    11ec:	88 23       	and	r24, r24
    11ee:	d1 f4       	brne	.+52     	; 0x1224 <TIMER1_VidSetDutyCycleNormal+0x50>
	OCR1AL = (65536UL*TIMER1->Duty_Cycle)/100;
    11f0:	0a e4       	ldi	r16, 0x4A	; 74
    11f2:	10 e0       	ldi	r17, 0x00	; 0
    11f4:	e9 81       	ldd	r30, Y+1	; 0x01
    11f6:	fa 81       	ldd	r31, Y+2	; 0x02
    11f8:	81 81       	ldd	r24, Z+1	; 0x01
    11fa:	92 81       	ldd	r25, Z+2	; 0x02
    11fc:	cc 01       	movw	r24, r24
    11fe:	a0 e0       	ldi	r26, 0x00	; 0
    1200:	b0 e0       	ldi	r27, 0x00	; 0
    1202:	dc 01       	movw	r26, r24
    1204:	99 27       	eor	r25, r25
    1206:	88 27       	eor	r24, r24
    1208:	24 e6       	ldi	r18, 0x64	; 100
    120a:	30 e0       	ldi	r19, 0x00	; 0
    120c:	40 e0       	ldi	r20, 0x00	; 0
    120e:	50 e0       	ldi	r21, 0x00	; 0
    1210:	bc 01       	movw	r22, r24
    1212:	cd 01       	movw	r24, r26
    1214:	0e 94 e0 13 	call	0x27c0	; 0x27c0 <__udivmodsi4>
    1218:	da 01       	movw	r26, r20
    121a:	c9 01       	movw	r24, r18
    121c:	f8 01       	movw	r30, r16
    121e:	91 83       	std	Z+1, r25	; 0x01
    1220:	80 83       	st	Z, r24
    1222:	1e c0       	rjmp	.+60     	; 0x1260 <TIMER1_VidSetDutyCycleNormal+0x8c>
	}
	else if(TIMER1->CompareMatchUnitType == UnitB){
    1224:	e9 81       	ldd	r30, Y+1	; 0x01
    1226:	fa 81       	ldd	r31, Y+2	; 0x02
    1228:	80 81       	ld	r24, Z
    122a:	81 30       	cpi	r24, 0x01	; 1
    122c:	c9 f4       	brne	.+50     	; 0x1260 <TIMER1_VidSetDutyCycleNormal+0x8c>
	OCR1BL = (65536UL*TIMER1->Duty_Cycle)/100;
    122e:	08 e4       	ldi	r16, 0x48	; 72
    1230:	10 e0       	ldi	r17, 0x00	; 0
    1232:	e9 81       	ldd	r30, Y+1	; 0x01
    1234:	fa 81       	ldd	r31, Y+2	; 0x02
    1236:	81 81       	ldd	r24, Z+1	; 0x01
    1238:	92 81       	ldd	r25, Z+2	; 0x02
    123a:	cc 01       	movw	r24, r24
    123c:	a0 e0       	ldi	r26, 0x00	; 0
    123e:	b0 e0       	ldi	r27, 0x00	; 0
    1240:	dc 01       	movw	r26, r24
    1242:	99 27       	eor	r25, r25
    1244:	88 27       	eor	r24, r24
    1246:	24 e6       	ldi	r18, 0x64	; 100
    1248:	30 e0       	ldi	r19, 0x00	; 0
    124a:	40 e0       	ldi	r20, 0x00	; 0
    124c:	50 e0       	ldi	r21, 0x00	; 0
    124e:	bc 01       	movw	r22, r24
    1250:	cd 01       	movw	r24, r26
    1252:	0e 94 e0 13 	call	0x27c0	; 0x27c0 <__udivmodsi4>
    1256:	da 01       	movw	r26, r20
    1258:	c9 01       	movw	r24, r18
    125a:	f8 01       	movw	r30, r16
    125c:	91 83       	std	Z+1, r25	; 0x01
    125e:	80 83       	st	Z, r24
	}
}
    1260:	0f 90       	pop	r0
    1262:	0f 90       	pop	r0
    1264:	cf 91       	pop	r28
    1266:	df 91       	pop	r29
    1268:	1f 91       	pop	r17
    126a:	0f 91       	pop	r16
    126c:	08 95       	ret

0000126e <TIMER1_VidSetDutyCycleReversed>:
void TIMER1_VidSetDutyCycleReversed(st_TIMER1_DutyCycle* TIMER1){
    126e:	0f 93       	push	r16
    1270:	1f 93       	push	r17
    1272:	df 93       	push	r29
    1274:	cf 93       	push	r28
    1276:	00 d0       	rcall	.+0      	; 0x1278 <TIMER1_VidSetDutyCycleReversed+0xa>
    1278:	cd b7       	in	r28, 0x3d	; 61
    127a:	de b7       	in	r29, 0x3e	; 62
    127c:	9a 83       	std	Y+2, r25	; 0x02
    127e:	89 83       	std	Y+1, r24	; 0x01
	if(TIMER1->CompareMatchUnitType == UnitA){
    1280:	e9 81       	ldd	r30, Y+1	; 0x01
    1282:	fa 81       	ldd	r31, Y+2	; 0x02
    1284:	80 81       	ld	r24, Z
    1286:	88 23       	and	r24, r24
    1288:	e9 f4       	brne	.+58     	; 0x12c4 <TIMER1_VidSetDutyCycleReversed+0x56>
	OCR1AL = 65536 - (65536UL*TIMER1->Duty_Cycle)/100;
    128a:	0a e4       	ldi	r16, 0x4A	; 74
    128c:	10 e0       	ldi	r17, 0x00	; 0
    128e:	e9 81       	ldd	r30, Y+1	; 0x01
    1290:	fa 81       	ldd	r31, Y+2	; 0x02
    1292:	81 81       	ldd	r24, Z+1	; 0x01
    1294:	92 81       	ldd	r25, Z+2	; 0x02
    1296:	cc 01       	movw	r24, r24
    1298:	a0 e0       	ldi	r26, 0x00	; 0
    129a:	b0 e0       	ldi	r27, 0x00	; 0
    129c:	dc 01       	movw	r26, r24
    129e:	99 27       	eor	r25, r25
    12a0:	88 27       	eor	r24, r24
    12a2:	24 e6       	ldi	r18, 0x64	; 100
    12a4:	30 e0       	ldi	r19, 0x00	; 0
    12a6:	40 e0       	ldi	r20, 0x00	; 0
    12a8:	50 e0       	ldi	r21, 0x00	; 0
    12aa:	bc 01       	movw	r22, r24
    12ac:	cd 01       	movw	r24, r26
    12ae:	0e 94 e0 13 	call	0x27c0	; 0x27c0 <__udivmodsi4>
    12b2:	da 01       	movw	r26, r20
    12b4:	c9 01       	movw	r24, r18
    12b6:	90 95       	com	r25
    12b8:	81 95       	neg	r24
    12ba:	9f 4f       	sbci	r25, 0xFF	; 255
    12bc:	f8 01       	movw	r30, r16
    12be:	91 83       	std	Z+1, r25	; 0x01
    12c0:	80 83       	st	Z, r24
    12c2:	21 c0       	rjmp	.+66     	; 0x1306 <TIMER1_VidSetDutyCycleReversed+0x98>
	}
	else if(TIMER1->CompareMatchUnitType == UnitB){
    12c4:	e9 81       	ldd	r30, Y+1	; 0x01
    12c6:	fa 81       	ldd	r31, Y+2	; 0x02
    12c8:	80 81       	ld	r24, Z
    12ca:	81 30       	cpi	r24, 0x01	; 1
    12cc:	e1 f4       	brne	.+56     	; 0x1306 <TIMER1_VidSetDutyCycleReversed+0x98>
	OCR1BL = 65536 - (65536UL*TIMER1->Duty_Cycle)/100;
    12ce:	08 e4       	ldi	r16, 0x48	; 72
    12d0:	10 e0       	ldi	r17, 0x00	; 0
    12d2:	e9 81       	ldd	r30, Y+1	; 0x01
    12d4:	fa 81       	ldd	r31, Y+2	; 0x02
    12d6:	81 81       	ldd	r24, Z+1	; 0x01
    12d8:	92 81       	ldd	r25, Z+2	; 0x02
    12da:	cc 01       	movw	r24, r24
    12dc:	a0 e0       	ldi	r26, 0x00	; 0
    12de:	b0 e0       	ldi	r27, 0x00	; 0
    12e0:	dc 01       	movw	r26, r24
    12e2:	99 27       	eor	r25, r25
    12e4:	88 27       	eor	r24, r24
    12e6:	24 e6       	ldi	r18, 0x64	; 100
    12e8:	30 e0       	ldi	r19, 0x00	; 0
    12ea:	40 e0       	ldi	r20, 0x00	; 0
    12ec:	50 e0       	ldi	r21, 0x00	; 0
    12ee:	bc 01       	movw	r22, r24
    12f0:	cd 01       	movw	r24, r26
    12f2:	0e 94 e0 13 	call	0x27c0	; 0x27c0 <__udivmodsi4>
    12f6:	da 01       	movw	r26, r20
    12f8:	c9 01       	movw	r24, r18
    12fa:	90 95       	com	r25
    12fc:	81 95       	neg	r24
    12fe:	9f 4f       	sbci	r25, 0xFF	; 255
    1300:	f8 01       	movw	r30, r16
    1302:	91 83       	std	Z+1, r25	; 0x01
    1304:	80 83       	st	Z, r24
	}
}
    1306:	0f 90       	pop	r0
    1308:	0f 90       	pop	r0
    130a:	cf 91       	pop	r28
    130c:	df 91       	pop	r29
    130e:	1f 91       	pop	r17
    1310:	0f 91       	pop	r16
    1312:	08 95       	ret

00001314 <TIMER1_VidSetTopOVF>:
void TIMER1_VidSetTopOVF(u16 Copy_SetTop){
    1314:	df 93       	push	r29
    1316:	cf 93       	push	r28
    1318:	00 d0       	rcall	.+0      	; 0x131a <TIMER1_VidSetTopOVF+0x6>
    131a:	cd b7       	in	r28, 0x3d	; 61
    131c:	de b7       	in	r29, 0x3e	; 62
    131e:	9a 83       	std	Y+2, r25	; 0x02
    1320:	89 83       	std	Y+1, r24	; 0x01
	/*Set ICR1H/ICR1L Top Value*/
	ICR1L = Copy_SetTop;
    1322:	e6 e4       	ldi	r30, 0x46	; 70
    1324:	f0 e0       	ldi	r31, 0x00	; 0
    1326:	89 81       	ldd	r24, Y+1	; 0x01
    1328:	9a 81       	ldd	r25, Y+2	; 0x02
    132a:	91 83       	std	Z+1, r25	; 0x01
    132c:	80 83       	st	Z, r24
}
    132e:	0f 90       	pop	r0
    1330:	0f 90       	pop	r0
    1332:	cf 91       	pop	r28
    1334:	df 91       	pop	r29
    1336:	08 95       	ret

00001338 <TIMER1_VidStopTimer>:
void TIMER1_VidStopTimer(void){
    1338:	df 93       	push	r29
    133a:	cf 93       	push	r28
    133c:	cd b7       	in	r28, 0x3d	; 61
    133e:	de b7       	in	r29, 0x3e	; 62
	TCCR0 &= ~(0b00000111);				/*Clear Bits*/
    1340:	a3 e5       	ldi	r26, 0x53	; 83
    1342:	b0 e0       	ldi	r27, 0x00	; 0
    1344:	e3 e5       	ldi	r30, 0x53	; 83
    1346:	f0 e0       	ldi	r31, 0x00	; 0
    1348:	80 81       	ld	r24, Z
    134a:	88 7f       	andi	r24, 0xF8	; 248
    134c:	8c 93       	st	X, r24
}
    134e:	cf 91       	pop	r28
    1350:	df 91       	pop	r29
    1352:	08 95       	ret

00001354 <TIMER1_VidICU_INT_Status>:

void TIMER1_VidICU_INT_Status(u8 Copy_u8Status){
    1354:	df 93       	push	r29
    1356:	cf 93       	push	r28
    1358:	0f 92       	push	r0
    135a:	cd b7       	in	r28, 0x3d	; 61
    135c:	de b7       	in	r29, 0x3e	; 62
    135e:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_u8Status == TIMER1_ICU_INT_Enable){
    1360:	89 81       	ldd	r24, Y+1	; 0x01
    1362:	81 30       	cpi	r24, 0x01	; 1
    1364:	41 f4       	brne	.+16     	; 0x1376 <TIMER1_VidICU_INT_Status+0x22>
		TIMSK |= (1<<TIMSK_TICIE1);
    1366:	a9 e5       	ldi	r26, 0x59	; 89
    1368:	b0 e0       	ldi	r27, 0x00	; 0
    136a:	e9 e5       	ldi	r30, 0x59	; 89
    136c:	f0 e0       	ldi	r31, 0x00	; 0
    136e:	80 81       	ld	r24, Z
    1370:	80 62       	ori	r24, 0x20	; 32
    1372:	8c 93       	st	X, r24
    1374:	0a c0       	rjmp	.+20     	; 0x138a <TIMER1_VidICU_INT_Status+0x36>
	}
	else if(Copy_u8Status == TIMER1_ICU_INT_Disable){
    1376:	89 81       	ldd	r24, Y+1	; 0x01
    1378:	88 23       	and	r24, r24
    137a:	39 f4       	brne	.+14     	; 0x138a <TIMER1_VidICU_INT_Status+0x36>
		TIMSK &= ~(1<<TIMSK_TICIE1);
    137c:	a9 e5       	ldi	r26, 0x59	; 89
    137e:	b0 e0       	ldi	r27, 0x00	; 0
    1380:	e9 e5       	ldi	r30, 0x59	; 89
    1382:	f0 e0       	ldi	r31, 0x00	; 0
    1384:	80 81       	ld	r24, Z
    1386:	8f 7d       	andi	r24, 0xDF	; 223
    1388:	8c 93       	st	X, r24
	}
}
    138a:	0f 90       	pop	r0
    138c:	cf 91       	pop	r28
    138e:	df 91       	pop	r29
    1390:	08 95       	ret

00001392 <TIMER1_VidICU_TriggerStatus>:
void TIMER1_VidICU_TriggerStatus(u8 Copy_u8Status){
    1392:	df 93       	push	r29
    1394:	cf 93       	push	r28
    1396:	0f 92       	push	r0
    1398:	cd b7       	in	r28, 0x3d	; 61
    139a:	de b7       	in	r29, 0x3e	; 62
    139c:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_u8Status == TIMER1_ICU_Rising_Edge){
    139e:	89 81       	ldd	r24, Y+1	; 0x01
    13a0:	81 30       	cpi	r24, 0x01	; 1
    13a2:	41 f4       	brne	.+16     	; 0x13b4 <TIMER1_VidICU_TriggerStatus+0x22>
		TCCR1B |= (1<<TCCR1B_ICES1);
    13a4:	ae e4       	ldi	r26, 0x4E	; 78
    13a6:	b0 e0       	ldi	r27, 0x00	; 0
    13a8:	ee e4       	ldi	r30, 0x4E	; 78
    13aa:	f0 e0       	ldi	r31, 0x00	; 0
    13ac:	80 81       	ld	r24, Z
    13ae:	80 64       	ori	r24, 0x40	; 64
    13b0:	8c 93       	st	X, r24
    13b2:	0a c0       	rjmp	.+20     	; 0x13c8 <TIMER1_VidICU_TriggerStatus+0x36>
	}
	else if(Copy_u8Status == TIMER1_ICU_Falling_Edge){
    13b4:	89 81       	ldd	r24, Y+1	; 0x01
    13b6:	88 23       	and	r24, r24
    13b8:	39 f4       	brne	.+14     	; 0x13c8 <TIMER1_VidICU_TriggerStatus+0x36>
		TCCR1B &= ~(1<<TCCR1B_ICES1);
    13ba:	ae e4       	ldi	r26, 0x4E	; 78
    13bc:	b0 e0       	ldi	r27, 0x00	; 0
    13be:	ee e4       	ldi	r30, 0x4E	; 78
    13c0:	f0 e0       	ldi	r31, 0x00	; 0
    13c2:	80 81       	ld	r24, Z
    13c4:	8f 7b       	andi	r24, 0xBF	; 191
    13c6:	8c 93       	st	X, r24
	}
}
    13c8:	0f 90       	pop	r0
    13ca:	cf 91       	pop	r28
    13cc:	df 91       	pop	r29
    13ce:	08 95       	ret

000013d0 <TIMER1_VidICU_NoiseCanceller>:
void TIMER1_VidICU_NoiseCanceller(u8 Copy_u8Status){
    13d0:	df 93       	push	r29
    13d2:	cf 93       	push	r28
    13d4:	0f 92       	push	r0
    13d6:	cd b7       	in	r28, 0x3d	; 61
    13d8:	de b7       	in	r29, 0x3e	; 62
    13da:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_u8Status == TIMER1_ICU_Rising_Edge){
    13dc:	89 81       	ldd	r24, Y+1	; 0x01
    13de:	81 30       	cpi	r24, 0x01	; 1
    13e0:	41 f4       	brne	.+16     	; 0x13f2 <TIMER1_VidICU_NoiseCanceller+0x22>
		TCCR1B |= (1<<TCCR1B_ICNC1);
    13e2:	ae e4       	ldi	r26, 0x4E	; 78
    13e4:	b0 e0       	ldi	r27, 0x00	; 0
    13e6:	ee e4       	ldi	r30, 0x4E	; 78
    13e8:	f0 e0       	ldi	r31, 0x00	; 0
    13ea:	80 81       	ld	r24, Z
    13ec:	80 68       	ori	r24, 0x80	; 128
    13ee:	8c 93       	st	X, r24
    13f0:	0a c0       	rjmp	.+20     	; 0x1406 <TIMER1_VidICU_NoiseCanceller+0x36>
	}
	else if(Copy_u8Status == TIMER1_ICU_Falling_Edge){
    13f2:	89 81       	ldd	r24, Y+1	; 0x01
    13f4:	88 23       	and	r24, r24
    13f6:	39 f4       	brne	.+14     	; 0x1406 <TIMER1_VidICU_NoiseCanceller+0x36>
		TCCR1B &= ~(1<<TCCR1B_ICNC1);
    13f8:	ae e4       	ldi	r26, 0x4E	; 78
    13fa:	b0 e0       	ldi	r27, 0x00	; 0
    13fc:	ee e4       	ldi	r30, 0x4E	; 78
    13fe:	f0 e0       	ldi	r31, 0x00	; 0
    1400:	80 81       	ld	r24, Z
    1402:	8f 77       	andi	r24, 0x7F	; 127
    1404:	8c 93       	st	X, r24
	}
}
    1406:	0f 90       	pop	r0
    1408:	cf 91       	pop	r28
    140a:	df 91       	pop	r29
    140c:	08 95       	ret

0000140e <TIMER1_VidICURead>:
u16 TIMER1_VidICURead(void){
    140e:	df 93       	push	r29
    1410:	cf 93       	push	r28
    1412:	cd b7       	in	r28, 0x3d	; 61
    1414:	de b7       	in	r29, 0x3e	; 62

	return ICR1L;
    1416:	e6 e4       	ldi	r30, 0x46	; 70
    1418:	f0 e0       	ldi	r31, 0x00	; 0
    141a:	80 81       	ld	r24, Z
    141c:	91 81       	ldd	r25, Z+1	; 0x01
}
    141e:	cf 91       	pop	r28
    1420:	df 91       	pop	r29
    1422:	08 95       	ret

00001424 <TIMER1_ICU_SetCallBack>:


/*Input Capture Unit ISR*/
static void (*TIMER1_ICU_SetCallBackFunc)(void) = NULL;

void TIMER1_ICU_SetCallBack(void(*Copy_pCallBackFunction)(void)){
    1424:	df 93       	push	r29
    1426:	cf 93       	push	r28
    1428:	00 d0       	rcall	.+0      	; 0x142a <TIMER1_ICU_SetCallBack+0x6>
    142a:	cd b7       	in	r28, 0x3d	; 61
    142c:	de b7       	in	r29, 0x3e	; 62
    142e:	9a 83       	std	Y+2, r25	; 0x02
    1430:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_pCallBackFunction != NULL){
    1432:	89 81       	ldd	r24, Y+1	; 0x01
    1434:	9a 81       	ldd	r25, Y+2	; 0x02
    1436:	00 97       	sbiw	r24, 0x00	; 0
    1438:	31 f0       	breq	.+12     	; 0x1446 <TIMER1_ICU_SetCallBack+0x22>
		TIMER1_ICU_SetCallBackFunc = Copy_pCallBackFunction;
    143a:	89 81       	ldd	r24, Y+1	; 0x01
    143c:	9a 81       	ldd	r25, Y+2	; 0x02
    143e:	90 93 95 00 	sts	0x0095, r25
    1442:	80 93 94 00 	sts	0x0094, r24
	}
}
    1446:	0f 90       	pop	r0
    1448:	0f 90       	pop	r0
    144a:	cf 91       	pop	r28
    144c:	df 91       	pop	r29
    144e:	08 95       	ret

00001450 <__vector_6>:


void __vector_6(void) __attribute__ ((signal));
void __vector_6(void){
    1450:	1f 92       	push	r1
    1452:	0f 92       	push	r0
    1454:	0f b6       	in	r0, 0x3f	; 63
    1456:	0f 92       	push	r0
    1458:	11 24       	eor	r1, r1
    145a:	2f 93       	push	r18
    145c:	3f 93       	push	r19
    145e:	4f 93       	push	r20
    1460:	5f 93       	push	r21
    1462:	6f 93       	push	r22
    1464:	7f 93       	push	r23
    1466:	8f 93       	push	r24
    1468:	9f 93       	push	r25
    146a:	af 93       	push	r26
    146c:	bf 93       	push	r27
    146e:	ef 93       	push	r30
    1470:	ff 93       	push	r31
    1472:	df 93       	push	r29
    1474:	cf 93       	push	r28
    1476:	cd b7       	in	r28, 0x3d	; 61
    1478:	de b7       	in	r29, 0x3e	; 62
	if(TIMER1_ICU_SetCallBackFunc != NULL){
    147a:	80 91 94 00 	lds	r24, 0x0094
    147e:	90 91 95 00 	lds	r25, 0x0095
    1482:	00 97       	sbiw	r24, 0x00	; 0
    1484:	29 f0       	breq	.+10     	; 0x1490 <__vector_6+0x40>
		TIMER1_ICU_SetCallBackFunc();
    1486:	e0 91 94 00 	lds	r30, 0x0094
    148a:	f0 91 95 00 	lds	r31, 0x0095
    148e:	09 95       	icall
	}

}
    1490:	cf 91       	pop	r28
    1492:	df 91       	pop	r29
    1494:	ff 91       	pop	r31
    1496:	ef 91       	pop	r30
    1498:	bf 91       	pop	r27
    149a:	af 91       	pop	r26
    149c:	9f 91       	pop	r25
    149e:	8f 91       	pop	r24
    14a0:	7f 91       	pop	r23
    14a2:	6f 91       	pop	r22
    14a4:	5f 91       	pop	r21
    14a6:	4f 91       	pop	r20
    14a8:	3f 91       	pop	r19
    14aa:	2f 91       	pop	r18
    14ac:	0f 90       	pop	r0
    14ae:	0f be       	out	0x3f, r0	; 63
    14b0:	0f 90       	pop	r0
    14b2:	1f 90       	pop	r1
    14b4:	18 95       	reti

000014b6 <TIMER0_SetCallBack>:


/*Timer 0 Compare Match "CTC" ISR*/
static void (*TIMER0_SetCallBackFunc)(void) = NULL;

void TIMER0_SetCallBack(void(*Copy_pCallBackFunction)(void)){
    14b6:	df 93       	push	r29
    14b8:	cf 93       	push	r28
    14ba:	00 d0       	rcall	.+0      	; 0x14bc <TIMER0_SetCallBack+0x6>
    14bc:	cd b7       	in	r28, 0x3d	; 61
    14be:	de b7       	in	r29, 0x3e	; 62
    14c0:	9a 83       	std	Y+2, r25	; 0x02
    14c2:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_pCallBackFunction != NULL){
    14c4:	89 81       	ldd	r24, Y+1	; 0x01
    14c6:	9a 81       	ldd	r25, Y+2	; 0x02
    14c8:	00 97       	sbiw	r24, 0x00	; 0
    14ca:	31 f0       	breq	.+12     	; 0x14d8 <TIMER0_SetCallBack+0x22>
		TIMER0_SetCallBackFunc = Copy_pCallBackFunction;
    14cc:	89 81       	ldd	r24, Y+1	; 0x01
    14ce:	9a 81       	ldd	r25, Y+2	; 0x02
    14d0:	90 93 97 00 	sts	0x0097, r25
    14d4:	80 93 96 00 	sts	0x0096, r24
	}
}
    14d8:	0f 90       	pop	r0
    14da:	0f 90       	pop	r0
    14dc:	cf 91       	pop	r28
    14de:	df 91       	pop	r29
    14e0:	08 95       	ret

000014e2 <__vector_10>:


void __vector_10(void) __attribute__ ((signal));
void __vector_10(void){
    14e2:	1f 92       	push	r1
    14e4:	0f 92       	push	r0
    14e6:	0f b6       	in	r0, 0x3f	; 63
    14e8:	0f 92       	push	r0
    14ea:	11 24       	eor	r1, r1
    14ec:	2f 93       	push	r18
    14ee:	3f 93       	push	r19
    14f0:	4f 93       	push	r20
    14f2:	5f 93       	push	r21
    14f4:	6f 93       	push	r22
    14f6:	7f 93       	push	r23
    14f8:	8f 93       	push	r24
    14fa:	9f 93       	push	r25
    14fc:	af 93       	push	r26
    14fe:	bf 93       	push	r27
    1500:	ef 93       	push	r30
    1502:	ff 93       	push	r31
    1504:	df 93       	push	r29
    1506:	cf 93       	push	r28
    1508:	cd b7       	in	r28, 0x3d	; 61
    150a:	de b7       	in	r29, 0x3e	; 62
	if(TIMER0_SetCallBackFunc != NULL){
    150c:	80 91 96 00 	lds	r24, 0x0096
    1510:	90 91 97 00 	lds	r25, 0x0097
    1514:	00 97       	sbiw	r24, 0x00	; 0
    1516:	29 f0       	breq	.+10     	; 0x1522 <__vector_10+0x40>
		TIMER0_SetCallBackFunc();
    1518:	e0 91 96 00 	lds	r30, 0x0096
    151c:	f0 91 97 00 	lds	r31, 0x0097
    1520:	09 95       	icall
	}

}
    1522:	cf 91       	pop	r28
    1524:	df 91       	pop	r29
    1526:	ff 91       	pop	r31
    1528:	ef 91       	pop	r30
    152a:	bf 91       	pop	r27
    152c:	af 91       	pop	r26
    152e:	9f 91       	pop	r25
    1530:	8f 91       	pop	r24
    1532:	7f 91       	pop	r23
    1534:	6f 91       	pop	r22
    1536:	5f 91       	pop	r21
    1538:	4f 91       	pop	r20
    153a:	3f 91       	pop	r19
    153c:	2f 91       	pop	r18
    153e:	0f 90       	pop	r0
    1540:	0f be       	out	0x3f, r0	; 63
    1542:	0f 90       	pop	r0
    1544:	1f 90       	pop	r1
    1546:	18 95       	reti

00001548 <GIE_VidEnable>:
#include "GIE_Interface.h"
#include "GIE_Private.h"

/*GIE Enable*/

void GIE_VidEnable(void){
    1548:	df 93       	push	r29
    154a:	cf 93       	push	r28
    154c:	cd b7       	in	r28, 0x3d	; 61
    154e:	de b7       	in	r29, 0x3e	; 62
	Set_Bit(SREG,SREG_I_BIT);
    1550:	af e5       	ldi	r26, 0x5F	; 95
    1552:	b0 e0       	ldi	r27, 0x00	; 0
    1554:	ef e5       	ldi	r30, 0x5F	; 95
    1556:	f0 e0       	ldi	r31, 0x00	; 0
    1558:	80 81       	ld	r24, Z
    155a:	80 68       	ori	r24, 0x80	; 128
    155c:	8c 93       	st	X, r24
}
    155e:	cf 91       	pop	r28
    1560:	df 91       	pop	r29
    1562:	08 95       	ret

00001564 <GIE_VidDisable>:

/*GIE Disable*/

void GIE_VidDisable(void){
    1564:	df 93       	push	r29
    1566:	cf 93       	push	r28
    1568:	cd b7       	in	r28, 0x3d	; 61
    156a:	de b7       	in	r29, 0x3e	; 62
	CLR_Bit(SREG,SREG_I_BIT);
    156c:	af e5       	ldi	r26, 0x5F	; 95
    156e:	b0 e0       	ldi	r27, 0x00	; 0
    1570:	ef e5       	ldi	r30, 0x5F	; 95
    1572:	f0 e0       	ldi	r31, 0x00	; 0
    1574:	80 81       	ld	r24, Z
    1576:	8f 77       	andi	r24, 0x7F	; 127
    1578:	8c 93       	st	X, r24
}
    157a:	cf 91       	pop	r28
    157c:	df 91       	pop	r29
    157e:	08 95       	ret

00001580 <DIO_VidSetPinValue>:
/*-------------------------------------------------------------------------------------------------------------------------*/
								/**************************set pin*****************************/
/*-------------------------------------------------------------------------------------------------------------------------*/


void DIO_VidSetPinValue(u8 Copy_u8Port, u8 Copy_u8PinNumber, u8 Copy_u8State ){
    1580:	df 93       	push	r29
    1582:	cf 93       	push	r28
    1584:	cd b7       	in	r28, 0x3d	; 61
    1586:	de b7       	in	r29, 0x3e	; 62
    1588:	27 97       	sbiw	r28, 0x07	; 7
    158a:	0f b6       	in	r0, 0x3f	; 63
    158c:	f8 94       	cli
    158e:	de bf       	out	0x3e, r29	; 62
    1590:	0f be       	out	0x3f, r0	; 63
    1592:	cd bf       	out	0x3d, r28	; 61
    1594:	89 83       	std	Y+1, r24	; 0x01
    1596:	6a 83       	std	Y+2, r22	; 0x02
    1598:	4b 83       	std	Y+3, r20	; 0x03

	/****************** set pin as input***********************/
	if(Copy_u8State == low){
    159a:	8b 81       	ldd	r24, Y+3	; 0x03
    159c:	88 23       	and	r24, r24
    159e:	09 f0       	breq	.+2      	; 0x15a2 <DIO_VidSetPinValue+0x22>
    15a0:	75 c0       	rjmp	.+234    	; 0x168c <DIO_VidSetPinValue+0x10c>
		switch (Copy_u8Port) {
    15a2:	89 81       	ldd	r24, Y+1	; 0x01
    15a4:	28 2f       	mov	r18, r24
    15a6:	30 e0       	ldi	r19, 0x00	; 0
    15a8:	3f 83       	std	Y+7, r19	; 0x07
    15aa:	2e 83       	std	Y+6, r18	; 0x06
    15ac:	8e 81       	ldd	r24, Y+6	; 0x06
    15ae:	9f 81       	ldd	r25, Y+7	; 0x07
    15b0:	83 30       	cpi	r24, 0x03	; 3
    15b2:	91 05       	cpc	r25, r1
    15b4:	61 f1       	breq	.+88     	; 0x160e <DIO_VidSetPinValue+0x8e>
    15b6:	2e 81       	ldd	r18, Y+6	; 0x06
    15b8:	3f 81       	ldd	r19, Y+7	; 0x07
    15ba:	24 30       	cpi	r18, 0x04	; 4
    15bc:	31 05       	cpc	r19, r1
    15be:	34 f4       	brge	.+12     	; 0x15cc <DIO_VidSetPinValue+0x4c>
    15c0:	8e 81       	ldd	r24, Y+6	; 0x06
    15c2:	9f 81       	ldd	r25, Y+7	; 0x07
    15c4:	82 30       	cpi	r24, 0x02	; 2
    15c6:	91 05       	cpc	r25, r1
    15c8:	69 f0       	breq	.+26     	; 0x15e4 <DIO_VidSetPinValue+0x64>
    15ca:	d3 c0       	rjmp	.+422    	; 0x1772 <DIO_VidSetPinValue+0x1f2>
    15cc:	2e 81       	ldd	r18, Y+6	; 0x06
    15ce:	3f 81       	ldd	r19, Y+7	; 0x07
    15d0:	24 30       	cpi	r18, 0x04	; 4
    15d2:	31 05       	cpc	r19, r1
    15d4:	89 f1       	breq	.+98     	; 0x1638 <DIO_VidSetPinValue+0xb8>
    15d6:	8e 81       	ldd	r24, Y+6	; 0x06
    15d8:	9f 81       	ldd	r25, Y+7	; 0x07
    15da:	85 30       	cpi	r24, 0x05	; 5
    15dc:	91 05       	cpc	r25, r1
    15de:	09 f4       	brne	.+2      	; 0x15e2 <DIO_VidSetPinValue+0x62>
    15e0:	40 c0       	rjmp	.+128    	; 0x1662 <DIO_VidSetPinValue+0xe2>
    15e2:	c7 c0       	rjmp	.+398    	; 0x1772 <DIO_VidSetPinValue+0x1f2>
			case (Port_A) : CLR_Bit(PORTA,Copy_u8PinNumber);break;
    15e4:	ab e3       	ldi	r26, 0x3B	; 59
    15e6:	b0 e0       	ldi	r27, 0x00	; 0
    15e8:	eb e3       	ldi	r30, 0x3B	; 59
    15ea:	f0 e0       	ldi	r31, 0x00	; 0
    15ec:	80 81       	ld	r24, Z
    15ee:	48 2f       	mov	r20, r24
    15f0:	8a 81       	ldd	r24, Y+2	; 0x02
    15f2:	28 2f       	mov	r18, r24
    15f4:	30 e0       	ldi	r19, 0x00	; 0
    15f6:	81 e0       	ldi	r24, 0x01	; 1
    15f8:	90 e0       	ldi	r25, 0x00	; 0
    15fa:	02 2e       	mov	r0, r18
    15fc:	02 c0       	rjmp	.+4      	; 0x1602 <DIO_VidSetPinValue+0x82>
    15fe:	88 0f       	add	r24, r24
    1600:	99 1f       	adc	r25, r25
    1602:	0a 94       	dec	r0
    1604:	e2 f7       	brpl	.-8      	; 0x15fe <DIO_VidSetPinValue+0x7e>
    1606:	80 95       	com	r24
    1608:	84 23       	and	r24, r20
    160a:	8c 93       	st	X, r24
    160c:	b2 c0       	rjmp	.+356    	; 0x1772 <DIO_VidSetPinValue+0x1f2>
			case (Port_B) : CLR_Bit(PORTB,Copy_u8PinNumber);break;
    160e:	a8 e3       	ldi	r26, 0x38	; 56
    1610:	b0 e0       	ldi	r27, 0x00	; 0
    1612:	e8 e3       	ldi	r30, 0x38	; 56
    1614:	f0 e0       	ldi	r31, 0x00	; 0
    1616:	80 81       	ld	r24, Z
    1618:	48 2f       	mov	r20, r24
    161a:	8a 81       	ldd	r24, Y+2	; 0x02
    161c:	28 2f       	mov	r18, r24
    161e:	30 e0       	ldi	r19, 0x00	; 0
    1620:	81 e0       	ldi	r24, 0x01	; 1
    1622:	90 e0       	ldi	r25, 0x00	; 0
    1624:	02 2e       	mov	r0, r18
    1626:	02 c0       	rjmp	.+4      	; 0x162c <DIO_VidSetPinValue+0xac>
    1628:	88 0f       	add	r24, r24
    162a:	99 1f       	adc	r25, r25
    162c:	0a 94       	dec	r0
    162e:	e2 f7       	brpl	.-8      	; 0x1628 <DIO_VidSetPinValue+0xa8>
    1630:	80 95       	com	r24
    1632:	84 23       	and	r24, r20
    1634:	8c 93       	st	X, r24
    1636:	9d c0       	rjmp	.+314    	; 0x1772 <DIO_VidSetPinValue+0x1f2>
			case (Port_C) : CLR_Bit(PORTC,Copy_u8PinNumber);break;
    1638:	a5 e3       	ldi	r26, 0x35	; 53
    163a:	b0 e0       	ldi	r27, 0x00	; 0
    163c:	e5 e3       	ldi	r30, 0x35	; 53
    163e:	f0 e0       	ldi	r31, 0x00	; 0
    1640:	80 81       	ld	r24, Z
    1642:	48 2f       	mov	r20, r24
    1644:	8a 81       	ldd	r24, Y+2	; 0x02
    1646:	28 2f       	mov	r18, r24
    1648:	30 e0       	ldi	r19, 0x00	; 0
    164a:	81 e0       	ldi	r24, 0x01	; 1
    164c:	90 e0       	ldi	r25, 0x00	; 0
    164e:	02 2e       	mov	r0, r18
    1650:	02 c0       	rjmp	.+4      	; 0x1656 <DIO_VidSetPinValue+0xd6>
    1652:	88 0f       	add	r24, r24
    1654:	99 1f       	adc	r25, r25
    1656:	0a 94       	dec	r0
    1658:	e2 f7       	brpl	.-8      	; 0x1652 <DIO_VidSetPinValue+0xd2>
    165a:	80 95       	com	r24
    165c:	84 23       	and	r24, r20
    165e:	8c 93       	st	X, r24
    1660:	88 c0       	rjmp	.+272    	; 0x1772 <DIO_VidSetPinValue+0x1f2>
			case (Port_D) : CLR_Bit(PORTD,Copy_u8PinNumber);break;
    1662:	a2 e3       	ldi	r26, 0x32	; 50
    1664:	b0 e0       	ldi	r27, 0x00	; 0
    1666:	e2 e3       	ldi	r30, 0x32	; 50
    1668:	f0 e0       	ldi	r31, 0x00	; 0
    166a:	80 81       	ld	r24, Z
    166c:	48 2f       	mov	r20, r24
    166e:	8a 81       	ldd	r24, Y+2	; 0x02
    1670:	28 2f       	mov	r18, r24
    1672:	30 e0       	ldi	r19, 0x00	; 0
    1674:	81 e0       	ldi	r24, 0x01	; 1
    1676:	90 e0       	ldi	r25, 0x00	; 0
    1678:	02 2e       	mov	r0, r18
    167a:	02 c0       	rjmp	.+4      	; 0x1680 <DIO_VidSetPinValue+0x100>
    167c:	88 0f       	add	r24, r24
    167e:	99 1f       	adc	r25, r25
    1680:	0a 94       	dec	r0
    1682:	e2 f7       	brpl	.-8      	; 0x167c <DIO_VidSetPinValue+0xfc>
    1684:	80 95       	com	r24
    1686:	84 23       	and	r24, r20
    1688:	8c 93       	st	X, r24
    168a:	73 c0       	rjmp	.+230    	; 0x1772 <DIO_VidSetPinValue+0x1f2>
		}
	}
	/****************** set pin as output***********************/
	else if(Copy_u8State == high){
    168c:	8b 81       	ldd	r24, Y+3	; 0x03
    168e:	81 30       	cpi	r24, 0x01	; 1
    1690:	09 f0       	breq	.+2      	; 0x1694 <DIO_VidSetPinValue+0x114>
    1692:	6f c0       	rjmp	.+222    	; 0x1772 <DIO_VidSetPinValue+0x1f2>
		switch (Copy_u8Port) {
    1694:	89 81       	ldd	r24, Y+1	; 0x01
    1696:	28 2f       	mov	r18, r24
    1698:	30 e0       	ldi	r19, 0x00	; 0
    169a:	3d 83       	std	Y+5, r19	; 0x05
    169c:	2c 83       	std	Y+4, r18	; 0x04
    169e:	8c 81       	ldd	r24, Y+4	; 0x04
    16a0:	9d 81       	ldd	r25, Y+5	; 0x05
    16a2:	83 30       	cpi	r24, 0x03	; 3
    16a4:	91 05       	cpc	r25, r1
    16a6:	51 f1       	breq	.+84     	; 0x16fc <DIO_VidSetPinValue+0x17c>
    16a8:	2c 81       	ldd	r18, Y+4	; 0x04
    16aa:	3d 81       	ldd	r19, Y+5	; 0x05
    16ac:	24 30       	cpi	r18, 0x04	; 4
    16ae:	31 05       	cpc	r19, r1
    16b0:	34 f4       	brge	.+12     	; 0x16be <DIO_VidSetPinValue+0x13e>
    16b2:	8c 81       	ldd	r24, Y+4	; 0x04
    16b4:	9d 81       	ldd	r25, Y+5	; 0x05
    16b6:	82 30       	cpi	r24, 0x02	; 2
    16b8:	91 05       	cpc	r25, r1
    16ba:	61 f0       	breq	.+24     	; 0x16d4 <DIO_VidSetPinValue+0x154>
    16bc:	5a c0       	rjmp	.+180    	; 0x1772 <DIO_VidSetPinValue+0x1f2>
    16be:	2c 81       	ldd	r18, Y+4	; 0x04
    16c0:	3d 81       	ldd	r19, Y+5	; 0x05
    16c2:	24 30       	cpi	r18, 0x04	; 4
    16c4:	31 05       	cpc	r19, r1
    16c6:	71 f1       	breq	.+92     	; 0x1724 <DIO_VidSetPinValue+0x1a4>
    16c8:	8c 81       	ldd	r24, Y+4	; 0x04
    16ca:	9d 81       	ldd	r25, Y+5	; 0x05
    16cc:	85 30       	cpi	r24, 0x05	; 5
    16ce:	91 05       	cpc	r25, r1
    16d0:	e9 f1       	breq	.+122    	; 0x174c <DIO_VidSetPinValue+0x1cc>
    16d2:	4f c0       	rjmp	.+158    	; 0x1772 <DIO_VidSetPinValue+0x1f2>
			case (Port_A) : Set_Bit(PORTA,Copy_u8PinNumber);break;
    16d4:	ab e3       	ldi	r26, 0x3B	; 59
    16d6:	b0 e0       	ldi	r27, 0x00	; 0
    16d8:	eb e3       	ldi	r30, 0x3B	; 59
    16da:	f0 e0       	ldi	r31, 0x00	; 0
    16dc:	80 81       	ld	r24, Z
    16de:	48 2f       	mov	r20, r24
    16e0:	8a 81       	ldd	r24, Y+2	; 0x02
    16e2:	28 2f       	mov	r18, r24
    16e4:	30 e0       	ldi	r19, 0x00	; 0
    16e6:	81 e0       	ldi	r24, 0x01	; 1
    16e8:	90 e0       	ldi	r25, 0x00	; 0
    16ea:	02 2e       	mov	r0, r18
    16ec:	02 c0       	rjmp	.+4      	; 0x16f2 <DIO_VidSetPinValue+0x172>
    16ee:	88 0f       	add	r24, r24
    16f0:	99 1f       	adc	r25, r25
    16f2:	0a 94       	dec	r0
    16f4:	e2 f7       	brpl	.-8      	; 0x16ee <DIO_VidSetPinValue+0x16e>
    16f6:	84 2b       	or	r24, r20
    16f8:	8c 93       	st	X, r24
    16fa:	3b c0       	rjmp	.+118    	; 0x1772 <DIO_VidSetPinValue+0x1f2>
			case (Port_B) : Set_Bit(PORTB,Copy_u8PinNumber);break;
    16fc:	a8 e3       	ldi	r26, 0x38	; 56
    16fe:	b0 e0       	ldi	r27, 0x00	; 0
    1700:	e8 e3       	ldi	r30, 0x38	; 56
    1702:	f0 e0       	ldi	r31, 0x00	; 0
    1704:	80 81       	ld	r24, Z
    1706:	48 2f       	mov	r20, r24
    1708:	8a 81       	ldd	r24, Y+2	; 0x02
    170a:	28 2f       	mov	r18, r24
    170c:	30 e0       	ldi	r19, 0x00	; 0
    170e:	81 e0       	ldi	r24, 0x01	; 1
    1710:	90 e0       	ldi	r25, 0x00	; 0
    1712:	02 2e       	mov	r0, r18
    1714:	02 c0       	rjmp	.+4      	; 0x171a <DIO_VidSetPinValue+0x19a>
    1716:	88 0f       	add	r24, r24
    1718:	99 1f       	adc	r25, r25
    171a:	0a 94       	dec	r0
    171c:	e2 f7       	brpl	.-8      	; 0x1716 <DIO_VidSetPinValue+0x196>
    171e:	84 2b       	or	r24, r20
    1720:	8c 93       	st	X, r24
    1722:	27 c0       	rjmp	.+78     	; 0x1772 <DIO_VidSetPinValue+0x1f2>
			case (Port_C) : Set_Bit(PORTC,Copy_u8PinNumber);break;
    1724:	a5 e3       	ldi	r26, 0x35	; 53
    1726:	b0 e0       	ldi	r27, 0x00	; 0
    1728:	e5 e3       	ldi	r30, 0x35	; 53
    172a:	f0 e0       	ldi	r31, 0x00	; 0
    172c:	80 81       	ld	r24, Z
    172e:	48 2f       	mov	r20, r24
    1730:	8a 81       	ldd	r24, Y+2	; 0x02
    1732:	28 2f       	mov	r18, r24
    1734:	30 e0       	ldi	r19, 0x00	; 0
    1736:	81 e0       	ldi	r24, 0x01	; 1
    1738:	90 e0       	ldi	r25, 0x00	; 0
    173a:	02 2e       	mov	r0, r18
    173c:	02 c0       	rjmp	.+4      	; 0x1742 <DIO_VidSetPinValue+0x1c2>
    173e:	88 0f       	add	r24, r24
    1740:	99 1f       	adc	r25, r25
    1742:	0a 94       	dec	r0
    1744:	e2 f7       	brpl	.-8      	; 0x173e <DIO_VidSetPinValue+0x1be>
    1746:	84 2b       	or	r24, r20
    1748:	8c 93       	st	X, r24
    174a:	13 c0       	rjmp	.+38     	; 0x1772 <DIO_VidSetPinValue+0x1f2>
			case (Port_D) : Set_Bit(PORTD,Copy_u8PinNumber);break;
    174c:	a2 e3       	ldi	r26, 0x32	; 50
    174e:	b0 e0       	ldi	r27, 0x00	; 0
    1750:	e2 e3       	ldi	r30, 0x32	; 50
    1752:	f0 e0       	ldi	r31, 0x00	; 0
    1754:	80 81       	ld	r24, Z
    1756:	48 2f       	mov	r20, r24
    1758:	8a 81       	ldd	r24, Y+2	; 0x02
    175a:	28 2f       	mov	r18, r24
    175c:	30 e0       	ldi	r19, 0x00	; 0
    175e:	81 e0       	ldi	r24, 0x01	; 1
    1760:	90 e0       	ldi	r25, 0x00	; 0
    1762:	02 2e       	mov	r0, r18
    1764:	02 c0       	rjmp	.+4      	; 0x176a <DIO_VidSetPinValue+0x1ea>
    1766:	88 0f       	add	r24, r24
    1768:	99 1f       	adc	r25, r25
    176a:	0a 94       	dec	r0
    176c:	e2 f7       	brpl	.-8      	; 0x1766 <DIO_VidSetPinValue+0x1e6>
    176e:	84 2b       	or	r24, r20
    1770:	8c 93       	st	X, r24
		}
	}
}
    1772:	27 96       	adiw	r28, 0x07	; 7
    1774:	0f b6       	in	r0, 0x3f	; 63
    1776:	f8 94       	cli
    1778:	de bf       	out	0x3e, r29	; 62
    177a:	0f be       	out	0x3f, r0	; 63
    177c:	cd bf       	out	0x3d, r28	; 61
    177e:	cf 91       	pop	r28
    1780:	df 91       	pop	r29
    1782:	08 95       	ret

00001784 <DIO_VidSetPinDirection>:

void DIO_VidSetPinDirection(u8 Copy_u8Port, u8 Copy_u8PinNumber,u8 Copy_u8PinDirection)
{
    1784:	df 93       	push	r29
    1786:	cf 93       	push	r28
    1788:	cd b7       	in	r28, 0x3d	; 61
    178a:	de b7       	in	r29, 0x3e	; 62
    178c:	27 97       	sbiw	r28, 0x07	; 7
    178e:	0f b6       	in	r0, 0x3f	; 63
    1790:	f8 94       	cli
    1792:	de bf       	out	0x3e, r29	; 62
    1794:	0f be       	out	0x3f, r0	; 63
    1796:	cd bf       	out	0x3d, r28	; 61
    1798:	89 83       	std	Y+1, r24	; 0x01
    179a:	6a 83       	std	Y+2, r22	; 0x02
    179c:	4b 83       	std	Y+3, r20	; 0x03
	/****************** set pin as input***********************/
	if(Copy_u8PinDirection == input){
    179e:	8b 81       	ldd	r24, Y+3	; 0x03
    17a0:	88 23       	and	r24, r24
    17a2:	09 f0       	breq	.+2      	; 0x17a6 <DIO_VidSetPinDirection+0x22>
    17a4:	75 c0       	rjmp	.+234    	; 0x1890 <DIO_VidSetPinDirection+0x10c>
		switch (Copy_u8Port) {
    17a6:	89 81       	ldd	r24, Y+1	; 0x01
    17a8:	28 2f       	mov	r18, r24
    17aa:	30 e0       	ldi	r19, 0x00	; 0
    17ac:	3f 83       	std	Y+7, r19	; 0x07
    17ae:	2e 83       	std	Y+6, r18	; 0x06
    17b0:	8e 81       	ldd	r24, Y+6	; 0x06
    17b2:	9f 81       	ldd	r25, Y+7	; 0x07
    17b4:	83 30       	cpi	r24, 0x03	; 3
    17b6:	91 05       	cpc	r25, r1
    17b8:	61 f1       	breq	.+88     	; 0x1812 <DIO_VidSetPinDirection+0x8e>
    17ba:	2e 81       	ldd	r18, Y+6	; 0x06
    17bc:	3f 81       	ldd	r19, Y+7	; 0x07
    17be:	24 30       	cpi	r18, 0x04	; 4
    17c0:	31 05       	cpc	r19, r1
    17c2:	34 f4       	brge	.+12     	; 0x17d0 <DIO_VidSetPinDirection+0x4c>
    17c4:	8e 81       	ldd	r24, Y+6	; 0x06
    17c6:	9f 81       	ldd	r25, Y+7	; 0x07
    17c8:	82 30       	cpi	r24, 0x02	; 2
    17ca:	91 05       	cpc	r25, r1
    17cc:	69 f0       	breq	.+26     	; 0x17e8 <DIO_VidSetPinDirection+0x64>
    17ce:	d3 c0       	rjmp	.+422    	; 0x1976 <DIO_VidSetPinDirection+0x1f2>
    17d0:	2e 81       	ldd	r18, Y+6	; 0x06
    17d2:	3f 81       	ldd	r19, Y+7	; 0x07
    17d4:	24 30       	cpi	r18, 0x04	; 4
    17d6:	31 05       	cpc	r19, r1
    17d8:	89 f1       	breq	.+98     	; 0x183c <DIO_VidSetPinDirection+0xb8>
    17da:	8e 81       	ldd	r24, Y+6	; 0x06
    17dc:	9f 81       	ldd	r25, Y+7	; 0x07
    17de:	85 30       	cpi	r24, 0x05	; 5
    17e0:	91 05       	cpc	r25, r1
    17e2:	09 f4       	brne	.+2      	; 0x17e6 <DIO_VidSetPinDirection+0x62>
    17e4:	40 c0       	rjmp	.+128    	; 0x1866 <DIO_VidSetPinDirection+0xe2>
    17e6:	c7 c0       	rjmp	.+398    	; 0x1976 <DIO_VidSetPinDirection+0x1f2>
			case (Port_A) : CLR_Bit(DDRA,Copy_u8PinNumber);break;
    17e8:	aa e3       	ldi	r26, 0x3A	; 58
    17ea:	b0 e0       	ldi	r27, 0x00	; 0
    17ec:	ea e3       	ldi	r30, 0x3A	; 58
    17ee:	f0 e0       	ldi	r31, 0x00	; 0
    17f0:	80 81       	ld	r24, Z
    17f2:	48 2f       	mov	r20, r24
    17f4:	8a 81       	ldd	r24, Y+2	; 0x02
    17f6:	28 2f       	mov	r18, r24
    17f8:	30 e0       	ldi	r19, 0x00	; 0
    17fa:	81 e0       	ldi	r24, 0x01	; 1
    17fc:	90 e0       	ldi	r25, 0x00	; 0
    17fe:	02 2e       	mov	r0, r18
    1800:	02 c0       	rjmp	.+4      	; 0x1806 <DIO_VidSetPinDirection+0x82>
    1802:	88 0f       	add	r24, r24
    1804:	99 1f       	adc	r25, r25
    1806:	0a 94       	dec	r0
    1808:	e2 f7       	brpl	.-8      	; 0x1802 <DIO_VidSetPinDirection+0x7e>
    180a:	80 95       	com	r24
    180c:	84 23       	and	r24, r20
    180e:	8c 93       	st	X, r24
    1810:	b2 c0       	rjmp	.+356    	; 0x1976 <DIO_VidSetPinDirection+0x1f2>
			case (Port_B) : CLR_Bit(DDRB,Copy_u8PinNumber);break;
    1812:	a7 e3       	ldi	r26, 0x37	; 55
    1814:	b0 e0       	ldi	r27, 0x00	; 0
    1816:	e7 e3       	ldi	r30, 0x37	; 55
    1818:	f0 e0       	ldi	r31, 0x00	; 0
    181a:	80 81       	ld	r24, Z
    181c:	48 2f       	mov	r20, r24
    181e:	8a 81       	ldd	r24, Y+2	; 0x02
    1820:	28 2f       	mov	r18, r24
    1822:	30 e0       	ldi	r19, 0x00	; 0
    1824:	81 e0       	ldi	r24, 0x01	; 1
    1826:	90 e0       	ldi	r25, 0x00	; 0
    1828:	02 2e       	mov	r0, r18
    182a:	02 c0       	rjmp	.+4      	; 0x1830 <DIO_VidSetPinDirection+0xac>
    182c:	88 0f       	add	r24, r24
    182e:	99 1f       	adc	r25, r25
    1830:	0a 94       	dec	r0
    1832:	e2 f7       	brpl	.-8      	; 0x182c <DIO_VidSetPinDirection+0xa8>
    1834:	80 95       	com	r24
    1836:	84 23       	and	r24, r20
    1838:	8c 93       	st	X, r24
    183a:	9d c0       	rjmp	.+314    	; 0x1976 <DIO_VidSetPinDirection+0x1f2>
			case (Port_C) : CLR_Bit(DDRC,Copy_u8PinNumber);break;
    183c:	a4 e3       	ldi	r26, 0x34	; 52
    183e:	b0 e0       	ldi	r27, 0x00	; 0
    1840:	e4 e3       	ldi	r30, 0x34	; 52
    1842:	f0 e0       	ldi	r31, 0x00	; 0
    1844:	80 81       	ld	r24, Z
    1846:	48 2f       	mov	r20, r24
    1848:	8a 81       	ldd	r24, Y+2	; 0x02
    184a:	28 2f       	mov	r18, r24
    184c:	30 e0       	ldi	r19, 0x00	; 0
    184e:	81 e0       	ldi	r24, 0x01	; 1
    1850:	90 e0       	ldi	r25, 0x00	; 0
    1852:	02 2e       	mov	r0, r18
    1854:	02 c0       	rjmp	.+4      	; 0x185a <DIO_VidSetPinDirection+0xd6>
    1856:	88 0f       	add	r24, r24
    1858:	99 1f       	adc	r25, r25
    185a:	0a 94       	dec	r0
    185c:	e2 f7       	brpl	.-8      	; 0x1856 <DIO_VidSetPinDirection+0xd2>
    185e:	80 95       	com	r24
    1860:	84 23       	and	r24, r20
    1862:	8c 93       	st	X, r24
    1864:	88 c0       	rjmp	.+272    	; 0x1976 <DIO_VidSetPinDirection+0x1f2>
			case (Port_D) : CLR_Bit(DDRD,Copy_u8PinNumber);break;
    1866:	a1 e3       	ldi	r26, 0x31	; 49
    1868:	b0 e0       	ldi	r27, 0x00	; 0
    186a:	e1 e3       	ldi	r30, 0x31	; 49
    186c:	f0 e0       	ldi	r31, 0x00	; 0
    186e:	80 81       	ld	r24, Z
    1870:	48 2f       	mov	r20, r24
    1872:	8a 81       	ldd	r24, Y+2	; 0x02
    1874:	28 2f       	mov	r18, r24
    1876:	30 e0       	ldi	r19, 0x00	; 0
    1878:	81 e0       	ldi	r24, 0x01	; 1
    187a:	90 e0       	ldi	r25, 0x00	; 0
    187c:	02 2e       	mov	r0, r18
    187e:	02 c0       	rjmp	.+4      	; 0x1884 <DIO_VidSetPinDirection+0x100>
    1880:	88 0f       	add	r24, r24
    1882:	99 1f       	adc	r25, r25
    1884:	0a 94       	dec	r0
    1886:	e2 f7       	brpl	.-8      	; 0x1880 <DIO_VidSetPinDirection+0xfc>
    1888:	80 95       	com	r24
    188a:	84 23       	and	r24, r20
    188c:	8c 93       	st	X, r24
    188e:	73 c0       	rjmp	.+230    	; 0x1976 <DIO_VidSetPinDirection+0x1f2>
		}
	}
	/****************** set pin as output***********************/
	else if(Copy_u8PinDirection == output){
    1890:	8b 81       	ldd	r24, Y+3	; 0x03
    1892:	81 30       	cpi	r24, 0x01	; 1
    1894:	09 f0       	breq	.+2      	; 0x1898 <DIO_VidSetPinDirection+0x114>
    1896:	6f c0       	rjmp	.+222    	; 0x1976 <DIO_VidSetPinDirection+0x1f2>
		switch (Copy_u8Port) {
    1898:	89 81       	ldd	r24, Y+1	; 0x01
    189a:	28 2f       	mov	r18, r24
    189c:	30 e0       	ldi	r19, 0x00	; 0
    189e:	3d 83       	std	Y+5, r19	; 0x05
    18a0:	2c 83       	std	Y+4, r18	; 0x04
    18a2:	8c 81       	ldd	r24, Y+4	; 0x04
    18a4:	9d 81       	ldd	r25, Y+5	; 0x05
    18a6:	83 30       	cpi	r24, 0x03	; 3
    18a8:	91 05       	cpc	r25, r1
    18aa:	51 f1       	breq	.+84     	; 0x1900 <DIO_VidSetPinDirection+0x17c>
    18ac:	2c 81       	ldd	r18, Y+4	; 0x04
    18ae:	3d 81       	ldd	r19, Y+5	; 0x05
    18b0:	24 30       	cpi	r18, 0x04	; 4
    18b2:	31 05       	cpc	r19, r1
    18b4:	34 f4       	brge	.+12     	; 0x18c2 <DIO_VidSetPinDirection+0x13e>
    18b6:	8c 81       	ldd	r24, Y+4	; 0x04
    18b8:	9d 81       	ldd	r25, Y+5	; 0x05
    18ba:	82 30       	cpi	r24, 0x02	; 2
    18bc:	91 05       	cpc	r25, r1
    18be:	61 f0       	breq	.+24     	; 0x18d8 <DIO_VidSetPinDirection+0x154>
    18c0:	5a c0       	rjmp	.+180    	; 0x1976 <DIO_VidSetPinDirection+0x1f2>
    18c2:	2c 81       	ldd	r18, Y+4	; 0x04
    18c4:	3d 81       	ldd	r19, Y+5	; 0x05
    18c6:	24 30       	cpi	r18, 0x04	; 4
    18c8:	31 05       	cpc	r19, r1
    18ca:	71 f1       	breq	.+92     	; 0x1928 <DIO_VidSetPinDirection+0x1a4>
    18cc:	8c 81       	ldd	r24, Y+4	; 0x04
    18ce:	9d 81       	ldd	r25, Y+5	; 0x05
    18d0:	85 30       	cpi	r24, 0x05	; 5
    18d2:	91 05       	cpc	r25, r1
    18d4:	e9 f1       	breq	.+122    	; 0x1950 <DIO_VidSetPinDirection+0x1cc>
    18d6:	4f c0       	rjmp	.+158    	; 0x1976 <DIO_VidSetPinDirection+0x1f2>
			case (Port_A) : Set_Bit(DDRA,Copy_u8PinNumber);break;
    18d8:	aa e3       	ldi	r26, 0x3A	; 58
    18da:	b0 e0       	ldi	r27, 0x00	; 0
    18dc:	ea e3       	ldi	r30, 0x3A	; 58
    18de:	f0 e0       	ldi	r31, 0x00	; 0
    18e0:	80 81       	ld	r24, Z
    18e2:	48 2f       	mov	r20, r24
    18e4:	8a 81       	ldd	r24, Y+2	; 0x02
    18e6:	28 2f       	mov	r18, r24
    18e8:	30 e0       	ldi	r19, 0x00	; 0
    18ea:	81 e0       	ldi	r24, 0x01	; 1
    18ec:	90 e0       	ldi	r25, 0x00	; 0
    18ee:	02 2e       	mov	r0, r18
    18f0:	02 c0       	rjmp	.+4      	; 0x18f6 <DIO_VidSetPinDirection+0x172>
    18f2:	88 0f       	add	r24, r24
    18f4:	99 1f       	adc	r25, r25
    18f6:	0a 94       	dec	r0
    18f8:	e2 f7       	brpl	.-8      	; 0x18f2 <DIO_VidSetPinDirection+0x16e>
    18fa:	84 2b       	or	r24, r20
    18fc:	8c 93       	st	X, r24
    18fe:	3b c0       	rjmp	.+118    	; 0x1976 <DIO_VidSetPinDirection+0x1f2>
			case (Port_B) : Set_Bit(DDRB,Copy_u8PinNumber);break;
    1900:	a7 e3       	ldi	r26, 0x37	; 55
    1902:	b0 e0       	ldi	r27, 0x00	; 0
    1904:	e7 e3       	ldi	r30, 0x37	; 55
    1906:	f0 e0       	ldi	r31, 0x00	; 0
    1908:	80 81       	ld	r24, Z
    190a:	48 2f       	mov	r20, r24
    190c:	8a 81       	ldd	r24, Y+2	; 0x02
    190e:	28 2f       	mov	r18, r24
    1910:	30 e0       	ldi	r19, 0x00	; 0
    1912:	81 e0       	ldi	r24, 0x01	; 1
    1914:	90 e0       	ldi	r25, 0x00	; 0
    1916:	02 2e       	mov	r0, r18
    1918:	02 c0       	rjmp	.+4      	; 0x191e <DIO_VidSetPinDirection+0x19a>
    191a:	88 0f       	add	r24, r24
    191c:	99 1f       	adc	r25, r25
    191e:	0a 94       	dec	r0
    1920:	e2 f7       	brpl	.-8      	; 0x191a <DIO_VidSetPinDirection+0x196>
    1922:	84 2b       	or	r24, r20
    1924:	8c 93       	st	X, r24
    1926:	27 c0       	rjmp	.+78     	; 0x1976 <DIO_VidSetPinDirection+0x1f2>
			case (Port_C) : Set_Bit(DDRC,Copy_u8PinNumber);break;
    1928:	a4 e3       	ldi	r26, 0x34	; 52
    192a:	b0 e0       	ldi	r27, 0x00	; 0
    192c:	e4 e3       	ldi	r30, 0x34	; 52
    192e:	f0 e0       	ldi	r31, 0x00	; 0
    1930:	80 81       	ld	r24, Z
    1932:	48 2f       	mov	r20, r24
    1934:	8a 81       	ldd	r24, Y+2	; 0x02
    1936:	28 2f       	mov	r18, r24
    1938:	30 e0       	ldi	r19, 0x00	; 0
    193a:	81 e0       	ldi	r24, 0x01	; 1
    193c:	90 e0       	ldi	r25, 0x00	; 0
    193e:	02 2e       	mov	r0, r18
    1940:	02 c0       	rjmp	.+4      	; 0x1946 <DIO_VidSetPinDirection+0x1c2>
    1942:	88 0f       	add	r24, r24
    1944:	99 1f       	adc	r25, r25
    1946:	0a 94       	dec	r0
    1948:	e2 f7       	brpl	.-8      	; 0x1942 <DIO_VidSetPinDirection+0x1be>
    194a:	84 2b       	or	r24, r20
    194c:	8c 93       	st	X, r24
    194e:	13 c0       	rjmp	.+38     	; 0x1976 <DIO_VidSetPinDirection+0x1f2>
			case (Port_D) : Set_Bit(DDRD,Copy_u8PinNumber);break;
    1950:	a1 e3       	ldi	r26, 0x31	; 49
    1952:	b0 e0       	ldi	r27, 0x00	; 0
    1954:	e1 e3       	ldi	r30, 0x31	; 49
    1956:	f0 e0       	ldi	r31, 0x00	; 0
    1958:	80 81       	ld	r24, Z
    195a:	48 2f       	mov	r20, r24
    195c:	8a 81       	ldd	r24, Y+2	; 0x02
    195e:	28 2f       	mov	r18, r24
    1960:	30 e0       	ldi	r19, 0x00	; 0
    1962:	81 e0       	ldi	r24, 0x01	; 1
    1964:	90 e0       	ldi	r25, 0x00	; 0
    1966:	02 2e       	mov	r0, r18
    1968:	02 c0       	rjmp	.+4      	; 0x196e <DIO_VidSetPinDirection+0x1ea>
    196a:	88 0f       	add	r24, r24
    196c:	99 1f       	adc	r25, r25
    196e:	0a 94       	dec	r0
    1970:	e2 f7       	brpl	.-8      	; 0x196a <DIO_VidSetPinDirection+0x1e6>
    1972:	84 2b       	or	r24, r20
    1974:	8c 93       	st	X, r24
		}
	}
}
    1976:	27 96       	adiw	r28, 0x07	; 7
    1978:	0f b6       	in	r0, 0x3f	; 63
    197a:	f8 94       	cli
    197c:	de bf       	out	0x3e, r29	; 62
    197e:	0f be       	out	0x3f, r0	; 63
    1980:	cd bf       	out	0x3d, r28	; 61
    1982:	cf 91       	pop	r28
    1984:	df 91       	pop	r29
    1986:	08 95       	ret

00001988 <DIO_VidGetPinValue>:


void DIO_VidGetPinValue(u8 Copy_u8Port, u8 Copy_u8PinNumber, u8* Copy_Pu8PinValue)
{
    1988:	df 93       	push	r29
    198a:	cf 93       	push	r28
    198c:	00 d0       	rcall	.+0      	; 0x198e <DIO_VidGetPinValue+0x6>
    198e:	00 d0       	rcall	.+0      	; 0x1990 <DIO_VidGetPinValue+0x8>
    1990:	00 d0       	rcall	.+0      	; 0x1992 <DIO_VidGetPinValue+0xa>
    1992:	cd b7       	in	r28, 0x3d	; 61
    1994:	de b7       	in	r29, 0x3e	; 62
    1996:	89 83       	std	Y+1, r24	; 0x01
    1998:	6a 83       	std	Y+2, r22	; 0x02
    199a:	5c 83       	std	Y+4, r21	; 0x04
    199c:	4b 83       	std	Y+3, r20	; 0x03
	/****************** set pin as input***********************/
		switch (Copy_u8Port) {
    199e:	89 81       	ldd	r24, Y+1	; 0x01
    19a0:	28 2f       	mov	r18, r24
    19a2:	30 e0       	ldi	r19, 0x00	; 0
    19a4:	3e 83       	std	Y+6, r19	; 0x06
    19a6:	2d 83       	std	Y+5, r18	; 0x05
    19a8:	4d 81       	ldd	r20, Y+5	; 0x05
    19aa:	5e 81       	ldd	r21, Y+6	; 0x06
    19ac:	43 30       	cpi	r20, 0x03	; 3
    19ae:	51 05       	cpc	r21, r1
    19b0:	59 f1       	breq	.+86     	; 0x1a08 <DIO_VidGetPinValue+0x80>
    19b2:	8d 81       	ldd	r24, Y+5	; 0x05
    19b4:	9e 81       	ldd	r25, Y+6	; 0x06
    19b6:	84 30       	cpi	r24, 0x04	; 4
    19b8:	91 05       	cpc	r25, r1
    19ba:	34 f4       	brge	.+12     	; 0x19c8 <DIO_VidGetPinValue+0x40>
    19bc:	2d 81       	ldd	r18, Y+5	; 0x05
    19be:	3e 81       	ldd	r19, Y+6	; 0x06
    19c0:	22 30       	cpi	r18, 0x02	; 2
    19c2:	31 05       	cpc	r19, r1
    19c4:	69 f0       	breq	.+26     	; 0x19e0 <DIO_VidGetPinValue+0x58>
    19c6:	5b c0       	rjmp	.+182    	; 0x1a7e <DIO_VidGetPinValue+0xf6>
    19c8:	4d 81       	ldd	r20, Y+5	; 0x05
    19ca:	5e 81       	ldd	r21, Y+6	; 0x06
    19cc:	44 30       	cpi	r20, 0x04	; 4
    19ce:	51 05       	cpc	r21, r1
    19d0:	79 f1       	breq	.+94     	; 0x1a30 <DIO_VidGetPinValue+0xa8>
    19d2:	8d 81       	ldd	r24, Y+5	; 0x05
    19d4:	9e 81       	ldd	r25, Y+6	; 0x06
    19d6:	85 30       	cpi	r24, 0x05	; 5
    19d8:	91 05       	cpc	r25, r1
    19da:	09 f4       	brne	.+2      	; 0x19de <DIO_VidGetPinValue+0x56>
    19dc:	3d c0       	rjmp	.+122    	; 0x1a58 <DIO_VidGetPinValue+0xd0>
    19de:	4f c0       	rjmp	.+158    	; 0x1a7e <DIO_VidGetPinValue+0xf6>
			case (Port_A) : *Copy_Pu8PinValue = Get_Bit(PINA,Copy_u8PinNumber);break;
    19e0:	e9 e3       	ldi	r30, 0x39	; 57
    19e2:	f0 e0       	ldi	r31, 0x00	; 0
    19e4:	80 81       	ld	r24, Z
    19e6:	28 2f       	mov	r18, r24
    19e8:	30 e0       	ldi	r19, 0x00	; 0
    19ea:	8a 81       	ldd	r24, Y+2	; 0x02
    19ec:	88 2f       	mov	r24, r24
    19ee:	90 e0       	ldi	r25, 0x00	; 0
    19f0:	a9 01       	movw	r20, r18
    19f2:	02 c0       	rjmp	.+4      	; 0x19f8 <DIO_VidGetPinValue+0x70>
    19f4:	55 95       	asr	r21
    19f6:	47 95       	ror	r20
    19f8:	8a 95       	dec	r24
    19fa:	e2 f7       	brpl	.-8      	; 0x19f4 <DIO_VidGetPinValue+0x6c>
    19fc:	ca 01       	movw	r24, r20
    19fe:	81 70       	andi	r24, 0x01	; 1
    1a00:	eb 81       	ldd	r30, Y+3	; 0x03
    1a02:	fc 81       	ldd	r31, Y+4	; 0x04
    1a04:	80 83       	st	Z, r24
    1a06:	3b c0       	rjmp	.+118    	; 0x1a7e <DIO_VidGetPinValue+0xf6>
			case (Port_B) : *Copy_Pu8PinValue = Get_Bit(PINB,Copy_u8PinNumber);break;
    1a08:	e6 e3       	ldi	r30, 0x36	; 54
    1a0a:	f0 e0       	ldi	r31, 0x00	; 0
    1a0c:	80 81       	ld	r24, Z
    1a0e:	28 2f       	mov	r18, r24
    1a10:	30 e0       	ldi	r19, 0x00	; 0
    1a12:	8a 81       	ldd	r24, Y+2	; 0x02
    1a14:	88 2f       	mov	r24, r24
    1a16:	90 e0       	ldi	r25, 0x00	; 0
    1a18:	a9 01       	movw	r20, r18
    1a1a:	02 c0       	rjmp	.+4      	; 0x1a20 <DIO_VidGetPinValue+0x98>
    1a1c:	55 95       	asr	r21
    1a1e:	47 95       	ror	r20
    1a20:	8a 95       	dec	r24
    1a22:	e2 f7       	brpl	.-8      	; 0x1a1c <DIO_VidGetPinValue+0x94>
    1a24:	ca 01       	movw	r24, r20
    1a26:	81 70       	andi	r24, 0x01	; 1
    1a28:	eb 81       	ldd	r30, Y+3	; 0x03
    1a2a:	fc 81       	ldd	r31, Y+4	; 0x04
    1a2c:	80 83       	st	Z, r24
    1a2e:	27 c0       	rjmp	.+78     	; 0x1a7e <DIO_VidGetPinValue+0xf6>
			case (Port_C) : *Copy_Pu8PinValue = Get_Bit(PINC,Copy_u8PinNumber);break;
    1a30:	e3 e3       	ldi	r30, 0x33	; 51
    1a32:	f0 e0       	ldi	r31, 0x00	; 0
    1a34:	80 81       	ld	r24, Z
    1a36:	28 2f       	mov	r18, r24
    1a38:	30 e0       	ldi	r19, 0x00	; 0
    1a3a:	8a 81       	ldd	r24, Y+2	; 0x02
    1a3c:	88 2f       	mov	r24, r24
    1a3e:	90 e0       	ldi	r25, 0x00	; 0
    1a40:	a9 01       	movw	r20, r18
    1a42:	02 c0       	rjmp	.+4      	; 0x1a48 <DIO_VidGetPinValue+0xc0>
    1a44:	55 95       	asr	r21
    1a46:	47 95       	ror	r20
    1a48:	8a 95       	dec	r24
    1a4a:	e2 f7       	brpl	.-8      	; 0x1a44 <DIO_VidGetPinValue+0xbc>
    1a4c:	ca 01       	movw	r24, r20
    1a4e:	81 70       	andi	r24, 0x01	; 1
    1a50:	eb 81       	ldd	r30, Y+3	; 0x03
    1a52:	fc 81       	ldd	r31, Y+4	; 0x04
    1a54:	80 83       	st	Z, r24
    1a56:	13 c0       	rjmp	.+38     	; 0x1a7e <DIO_VidGetPinValue+0xf6>
			case (Port_D) : *Copy_Pu8PinValue = Get_Bit(PIND,Copy_u8PinNumber);break;
    1a58:	e0 e3       	ldi	r30, 0x30	; 48
    1a5a:	f0 e0       	ldi	r31, 0x00	; 0
    1a5c:	80 81       	ld	r24, Z
    1a5e:	28 2f       	mov	r18, r24
    1a60:	30 e0       	ldi	r19, 0x00	; 0
    1a62:	8a 81       	ldd	r24, Y+2	; 0x02
    1a64:	88 2f       	mov	r24, r24
    1a66:	90 e0       	ldi	r25, 0x00	; 0
    1a68:	a9 01       	movw	r20, r18
    1a6a:	02 c0       	rjmp	.+4      	; 0x1a70 <DIO_VidGetPinValue+0xe8>
    1a6c:	55 95       	asr	r21
    1a6e:	47 95       	ror	r20
    1a70:	8a 95       	dec	r24
    1a72:	e2 f7       	brpl	.-8      	; 0x1a6c <DIO_VidGetPinValue+0xe4>
    1a74:	ca 01       	movw	r24, r20
    1a76:	81 70       	andi	r24, 0x01	; 1
    1a78:	eb 81       	ldd	r30, Y+3	; 0x03
    1a7a:	fc 81       	ldd	r31, Y+4	; 0x04
    1a7c:	80 83       	st	Z, r24
		}
}
    1a7e:	26 96       	adiw	r28, 0x06	; 6
    1a80:	0f b6       	in	r0, 0x3f	; 63
    1a82:	f8 94       	cli
    1a84:	de bf       	out	0x3e, r29	; 62
    1a86:	0f be       	out	0x3f, r0	; 63
    1a88:	cd bf       	out	0x3d, r28	; 61
    1a8a:	cf 91       	pop	r28
    1a8c:	df 91       	pop	r29
    1a8e:	08 95       	ret

00001a90 <DIO_VidSetPortVal>:
/*---------------------------------------------------------------------------------------------------------------------------------*/
									/************************set port************************/
/*---------------------------------------------------------------------------------------------------------------------------------*/


void DIO_VidSetPortVal(u8 Copy_u8Port, u8 Copy_u8Val){
    1a90:	df 93       	push	r29
    1a92:	cf 93       	push	r28
    1a94:	00 d0       	rcall	.+0      	; 0x1a96 <DIO_VidSetPortVal+0x6>
    1a96:	00 d0       	rcall	.+0      	; 0x1a98 <DIO_VidSetPortVal+0x8>
    1a98:	cd b7       	in	r28, 0x3d	; 61
    1a9a:	de b7       	in	r29, 0x3e	; 62
    1a9c:	89 83       	std	Y+1, r24	; 0x01
    1a9e:	6a 83       	std	Y+2, r22	; 0x02

		switch (Copy_u8Port) {
    1aa0:	89 81       	ldd	r24, Y+1	; 0x01
    1aa2:	28 2f       	mov	r18, r24
    1aa4:	30 e0       	ldi	r19, 0x00	; 0
    1aa6:	3c 83       	std	Y+4, r19	; 0x04
    1aa8:	2b 83       	std	Y+3, r18	; 0x03
    1aaa:	8b 81       	ldd	r24, Y+3	; 0x03
    1aac:	9c 81       	ldd	r25, Y+4	; 0x04
    1aae:	83 30       	cpi	r24, 0x03	; 3
    1ab0:	91 05       	cpc	r25, r1
    1ab2:	d9 f0       	breq	.+54     	; 0x1aea <DIO_VidSetPortVal+0x5a>
    1ab4:	2b 81       	ldd	r18, Y+3	; 0x03
    1ab6:	3c 81       	ldd	r19, Y+4	; 0x04
    1ab8:	24 30       	cpi	r18, 0x04	; 4
    1aba:	31 05       	cpc	r19, r1
    1abc:	34 f4       	brge	.+12     	; 0x1aca <DIO_VidSetPortVal+0x3a>
    1abe:	8b 81       	ldd	r24, Y+3	; 0x03
    1ac0:	9c 81       	ldd	r25, Y+4	; 0x04
    1ac2:	82 30       	cpi	r24, 0x02	; 2
    1ac4:	91 05       	cpc	r25, r1
    1ac6:	61 f0       	breq	.+24     	; 0x1ae0 <DIO_VidSetPortVal+0x50>
    1ac8:	1e c0       	rjmp	.+60     	; 0x1b06 <DIO_VidSetPortVal+0x76>
    1aca:	2b 81       	ldd	r18, Y+3	; 0x03
    1acc:	3c 81       	ldd	r19, Y+4	; 0x04
    1ace:	24 30       	cpi	r18, 0x04	; 4
    1ad0:	31 05       	cpc	r19, r1
    1ad2:	81 f0       	breq	.+32     	; 0x1af4 <DIO_VidSetPortVal+0x64>
    1ad4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ad6:	9c 81       	ldd	r25, Y+4	; 0x04
    1ad8:	85 30       	cpi	r24, 0x05	; 5
    1ada:	91 05       	cpc	r25, r1
    1adc:	81 f0       	breq	.+32     	; 0x1afe <DIO_VidSetPortVal+0x6e>
    1ade:	13 c0       	rjmp	.+38     	; 0x1b06 <DIO_VidSetPortVal+0x76>
			case (Port_A) : PORTA = Copy_u8Val;break;
    1ae0:	eb e3       	ldi	r30, 0x3B	; 59
    1ae2:	f0 e0       	ldi	r31, 0x00	; 0
    1ae4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ae6:	80 83       	st	Z, r24
    1ae8:	0e c0       	rjmp	.+28     	; 0x1b06 <DIO_VidSetPortVal+0x76>
			case (Port_B) : PORTB = Copy_u8Val;break;
    1aea:	e8 e3       	ldi	r30, 0x38	; 56
    1aec:	f0 e0       	ldi	r31, 0x00	; 0
    1aee:	8a 81       	ldd	r24, Y+2	; 0x02
    1af0:	80 83       	st	Z, r24
    1af2:	09 c0       	rjmp	.+18     	; 0x1b06 <DIO_VidSetPortVal+0x76>
			case (Port_C) : PORTC = Copy_u8Val;break;
    1af4:	e5 e3       	ldi	r30, 0x35	; 53
    1af6:	f0 e0       	ldi	r31, 0x00	; 0
    1af8:	8a 81       	ldd	r24, Y+2	; 0x02
    1afa:	80 83       	st	Z, r24
    1afc:	04 c0       	rjmp	.+8      	; 0x1b06 <DIO_VidSetPortVal+0x76>
			case (Port_D) : PORTD = Copy_u8Val;break;
    1afe:	e2 e3       	ldi	r30, 0x32	; 50
    1b00:	f0 e0       	ldi	r31, 0x00	; 0
    1b02:	8a 81       	ldd	r24, Y+2	; 0x02
    1b04:	80 83       	st	Z, r24
		}
}
    1b06:	0f 90       	pop	r0
    1b08:	0f 90       	pop	r0
    1b0a:	0f 90       	pop	r0
    1b0c:	0f 90       	pop	r0
    1b0e:	cf 91       	pop	r28
    1b10:	df 91       	pop	r29
    1b12:	08 95       	ret

00001b14 <DIO_VidSetPortDirection>:



void DIO_VidSetPortDirection(u8 Copy_u8Port, u8 Copy_u8Direction)
{
    1b14:	df 93       	push	r29
    1b16:	cf 93       	push	r28
    1b18:	00 d0       	rcall	.+0      	; 0x1b1a <DIO_VidSetPortDirection+0x6>
    1b1a:	00 d0       	rcall	.+0      	; 0x1b1c <DIO_VidSetPortDirection+0x8>
    1b1c:	00 d0       	rcall	.+0      	; 0x1b1e <DIO_VidSetPortDirection+0xa>
    1b1e:	cd b7       	in	r28, 0x3d	; 61
    1b20:	de b7       	in	r29, 0x3e	; 62
    1b22:	89 83       	std	Y+1, r24	; 0x01
    1b24:	6a 83       	std	Y+2, r22	; 0x02
	/****************** set Port as input***********************/
	if(Copy_u8Direction == input){
    1b26:	8a 81       	ldd	r24, Y+2	; 0x02
    1b28:	88 23       	and	r24, r24
    1b2a:	81 f5       	brne	.+96     	; 0x1b8c <DIO_VidSetPortDirection+0x78>
		switch (Copy_u8Port) {
    1b2c:	89 81       	ldd	r24, Y+1	; 0x01
    1b2e:	28 2f       	mov	r18, r24
    1b30:	30 e0       	ldi	r19, 0x00	; 0
    1b32:	3e 83       	std	Y+6, r19	; 0x06
    1b34:	2d 83       	std	Y+5, r18	; 0x05
    1b36:	8d 81       	ldd	r24, Y+5	; 0x05
    1b38:	9e 81       	ldd	r25, Y+6	; 0x06
    1b3a:	83 30       	cpi	r24, 0x03	; 3
    1b3c:	91 05       	cpc	r25, r1
    1b3e:	d1 f0       	breq	.+52     	; 0x1b74 <DIO_VidSetPortDirection+0x60>
    1b40:	2d 81       	ldd	r18, Y+5	; 0x05
    1b42:	3e 81       	ldd	r19, Y+6	; 0x06
    1b44:	24 30       	cpi	r18, 0x04	; 4
    1b46:	31 05       	cpc	r19, r1
    1b48:	34 f4       	brge	.+12     	; 0x1b56 <DIO_VidSetPortDirection+0x42>
    1b4a:	8d 81       	ldd	r24, Y+5	; 0x05
    1b4c:	9e 81       	ldd	r25, Y+6	; 0x06
    1b4e:	82 30       	cpi	r24, 0x02	; 2
    1b50:	91 05       	cpc	r25, r1
    1b52:	61 f0       	breq	.+24     	; 0x1b6c <DIO_VidSetPortDirection+0x58>
    1b54:	51 c0       	rjmp	.+162    	; 0x1bf8 <DIO_VidSetPortDirection+0xe4>
    1b56:	2d 81       	ldd	r18, Y+5	; 0x05
    1b58:	3e 81       	ldd	r19, Y+6	; 0x06
    1b5a:	24 30       	cpi	r18, 0x04	; 4
    1b5c:	31 05       	cpc	r19, r1
    1b5e:	71 f0       	breq	.+28     	; 0x1b7c <DIO_VidSetPortDirection+0x68>
    1b60:	8d 81       	ldd	r24, Y+5	; 0x05
    1b62:	9e 81       	ldd	r25, Y+6	; 0x06
    1b64:	85 30       	cpi	r24, 0x05	; 5
    1b66:	91 05       	cpc	r25, r1
    1b68:	69 f0       	breq	.+26     	; 0x1b84 <DIO_VidSetPortDirection+0x70>
    1b6a:	46 c0       	rjmp	.+140    	; 0x1bf8 <DIO_VidSetPortDirection+0xe4>
			case (Port_A) : DDRA = 0x00 ;break;
    1b6c:	ea e3       	ldi	r30, 0x3A	; 58
    1b6e:	f0 e0       	ldi	r31, 0x00	; 0
    1b70:	10 82       	st	Z, r1
    1b72:	42 c0       	rjmp	.+132    	; 0x1bf8 <DIO_VidSetPortDirection+0xe4>
			case (Port_B) : DDRB = 0x00 ;break;
    1b74:	e7 e3       	ldi	r30, 0x37	; 55
    1b76:	f0 e0       	ldi	r31, 0x00	; 0
    1b78:	10 82       	st	Z, r1
    1b7a:	3e c0       	rjmp	.+124    	; 0x1bf8 <DIO_VidSetPortDirection+0xe4>
			case (Port_C) : DDRC = 0x00 ;break;
    1b7c:	e4 e3       	ldi	r30, 0x34	; 52
    1b7e:	f0 e0       	ldi	r31, 0x00	; 0
    1b80:	10 82       	st	Z, r1
    1b82:	3a c0       	rjmp	.+116    	; 0x1bf8 <DIO_VidSetPortDirection+0xe4>
			case (Port_D) : DDRD = 0x00 ;break;
    1b84:	e1 e3       	ldi	r30, 0x31	; 49
    1b86:	f0 e0       	ldi	r31, 0x00	; 0
    1b88:	10 82       	st	Z, r1
    1b8a:	36 c0       	rjmp	.+108    	; 0x1bf8 <DIO_VidSetPortDirection+0xe4>
		}
	}

	/****************** set Port as output***********************/
	else if(Copy_u8Direction == output){
    1b8c:	8a 81       	ldd	r24, Y+2	; 0x02
    1b8e:	81 30       	cpi	r24, 0x01	; 1
    1b90:	99 f5       	brne	.+102    	; 0x1bf8 <DIO_VidSetPortDirection+0xe4>
		switch (Copy_u8Port) {
    1b92:	89 81       	ldd	r24, Y+1	; 0x01
    1b94:	28 2f       	mov	r18, r24
    1b96:	30 e0       	ldi	r19, 0x00	; 0
    1b98:	3c 83       	std	Y+4, r19	; 0x04
    1b9a:	2b 83       	std	Y+3, r18	; 0x03
    1b9c:	8b 81       	ldd	r24, Y+3	; 0x03
    1b9e:	9c 81       	ldd	r25, Y+4	; 0x04
    1ba0:	83 30       	cpi	r24, 0x03	; 3
    1ba2:	91 05       	cpc	r25, r1
    1ba4:	d9 f0       	breq	.+54     	; 0x1bdc <DIO_VidSetPortDirection+0xc8>
    1ba6:	2b 81       	ldd	r18, Y+3	; 0x03
    1ba8:	3c 81       	ldd	r19, Y+4	; 0x04
    1baa:	24 30       	cpi	r18, 0x04	; 4
    1bac:	31 05       	cpc	r19, r1
    1bae:	34 f4       	brge	.+12     	; 0x1bbc <DIO_VidSetPortDirection+0xa8>
    1bb0:	8b 81       	ldd	r24, Y+3	; 0x03
    1bb2:	9c 81       	ldd	r25, Y+4	; 0x04
    1bb4:	82 30       	cpi	r24, 0x02	; 2
    1bb6:	91 05       	cpc	r25, r1
    1bb8:	61 f0       	breq	.+24     	; 0x1bd2 <DIO_VidSetPortDirection+0xbe>
    1bba:	1e c0       	rjmp	.+60     	; 0x1bf8 <DIO_VidSetPortDirection+0xe4>
    1bbc:	2b 81       	ldd	r18, Y+3	; 0x03
    1bbe:	3c 81       	ldd	r19, Y+4	; 0x04
    1bc0:	24 30       	cpi	r18, 0x04	; 4
    1bc2:	31 05       	cpc	r19, r1
    1bc4:	81 f0       	breq	.+32     	; 0x1be6 <DIO_VidSetPortDirection+0xd2>
    1bc6:	8b 81       	ldd	r24, Y+3	; 0x03
    1bc8:	9c 81       	ldd	r25, Y+4	; 0x04
    1bca:	85 30       	cpi	r24, 0x05	; 5
    1bcc:	91 05       	cpc	r25, r1
    1bce:	81 f0       	breq	.+32     	; 0x1bf0 <DIO_VidSetPortDirection+0xdc>
    1bd0:	13 c0       	rjmp	.+38     	; 0x1bf8 <DIO_VidSetPortDirection+0xe4>
			case (Port_A) : DDRA = 0xff ;break;
    1bd2:	ea e3       	ldi	r30, 0x3A	; 58
    1bd4:	f0 e0       	ldi	r31, 0x00	; 0
    1bd6:	8f ef       	ldi	r24, 0xFF	; 255
    1bd8:	80 83       	st	Z, r24
    1bda:	0e c0       	rjmp	.+28     	; 0x1bf8 <DIO_VidSetPortDirection+0xe4>
			case (Port_B) : DDRB = 0xff ;break;
    1bdc:	e7 e3       	ldi	r30, 0x37	; 55
    1bde:	f0 e0       	ldi	r31, 0x00	; 0
    1be0:	8f ef       	ldi	r24, 0xFF	; 255
    1be2:	80 83       	st	Z, r24
    1be4:	09 c0       	rjmp	.+18     	; 0x1bf8 <DIO_VidSetPortDirection+0xe4>
			case (Port_C) : DDRC = 0xff ;break;
    1be6:	e4 e3       	ldi	r30, 0x34	; 52
    1be8:	f0 e0       	ldi	r31, 0x00	; 0
    1bea:	8f ef       	ldi	r24, 0xFF	; 255
    1bec:	80 83       	st	Z, r24
    1bee:	04 c0       	rjmp	.+8      	; 0x1bf8 <DIO_VidSetPortDirection+0xe4>
			case (Port_D) : DDRD = 0xff ;break;
    1bf0:	e1 e3       	ldi	r30, 0x31	; 49
    1bf2:	f0 e0       	ldi	r31, 0x00	; 0
    1bf4:	8f ef       	ldi	r24, 0xFF	; 255
    1bf6:	80 83       	st	Z, r24
		}
	}
}
    1bf8:	26 96       	adiw	r28, 0x06	; 6
    1bfa:	0f b6       	in	r0, 0x3f	; 63
    1bfc:	f8 94       	cli
    1bfe:	de bf       	out	0x3e, r29	; 62
    1c00:	0f be       	out	0x3f, r0	; 63
    1c02:	cd bf       	out	0x3d, r28	; 61
    1c04:	cf 91       	pop	r28
    1c06:	df 91       	pop	r29
    1c08:	08 95       	ret

00001c0a <DIO_VidGetPortValue>:

void DIO_VidGetPortValue(u8 Copy_u8Port, u8* Copy_Pu8Value)
{
    1c0a:	df 93       	push	r29
    1c0c:	cf 93       	push	r28
    1c0e:	00 d0       	rcall	.+0      	; 0x1c10 <DIO_VidGetPortValue+0x6>
    1c10:	00 d0       	rcall	.+0      	; 0x1c12 <DIO_VidGetPortValue+0x8>
    1c12:	0f 92       	push	r0
    1c14:	cd b7       	in	r28, 0x3d	; 61
    1c16:	de b7       	in	r29, 0x3e	; 62
    1c18:	89 83       	std	Y+1, r24	; 0x01
    1c1a:	7b 83       	std	Y+3, r23	; 0x03
    1c1c:	6a 83       	std	Y+2, r22	; 0x02
	switch (Copy_u8Port) {
    1c1e:	89 81       	ldd	r24, Y+1	; 0x01
    1c20:	28 2f       	mov	r18, r24
    1c22:	30 e0       	ldi	r19, 0x00	; 0
    1c24:	3d 83       	std	Y+5, r19	; 0x05
    1c26:	2c 83       	std	Y+4, r18	; 0x04
    1c28:	8c 81       	ldd	r24, Y+4	; 0x04
    1c2a:	9d 81       	ldd	r25, Y+5	; 0x05
    1c2c:	83 30       	cpi	r24, 0x03	; 3
    1c2e:	91 05       	cpc	r25, r1
    1c30:	e9 f0       	breq	.+58     	; 0x1c6c <DIO_VidGetPortValue+0x62>
    1c32:	2c 81       	ldd	r18, Y+4	; 0x04
    1c34:	3d 81       	ldd	r19, Y+5	; 0x05
    1c36:	24 30       	cpi	r18, 0x04	; 4
    1c38:	31 05       	cpc	r19, r1
    1c3a:	34 f4       	brge	.+12     	; 0x1c48 <DIO_VidGetPortValue+0x3e>
    1c3c:	8c 81       	ldd	r24, Y+4	; 0x04
    1c3e:	9d 81       	ldd	r25, Y+5	; 0x05
    1c40:	82 30       	cpi	r24, 0x02	; 2
    1c42:	91 05       	cpc	r25, r1
    1c44:	61 f0       	breq	.+24     	; 0x1c5e <DIO_VidGetPortValue+0x54>
    1c46:	26 c0       	rjmp	.+76     	; 0x1c94 <DIO_VidGetPortValue+0x8a>
    1c48:	2c 81       	ldd	r18, Y+4	; 0x04
    1c4a:	3d 81       	ldd	r19, Y+5	; 0x05
    1c4c:	24 30       	cpi	r18, 0x04	; 4
    1c4e:	31 05       	cpc	r19, r1
    1c50:	a1 f0       	breq	.+40     	; 0x1c7a <DIO_VidGetPortValue+0x70>
    1c52:	8c 81       	ldd	r24, Y+4	; 0x04
    1c54:	9d 81       	ldd	r25, Y+5	; 0x05
    1c56:	85 30       	cpi	r24, 0x05	; 5
    1c58:	91 05       	cpc	r25, r1
    1c5a:	b1 f0       	breq	.+44     	; 0x1c88 <DIO_VidGetPortValue+0x7e>
    1c5c:	1b c0       	rjmp	.+54     	; 0x1c94 <DIO_VidGetPortValue+0x8a>
		case (Port_A) : *Copy_Pu8Value = PINA; break;
    1c5e:	e9 e3       	ldi	r30, 0x39	; 57
    1c60:	f0 e0       	ldi	r31, 0x00	; 0
    1c62:	80 81       	ld	r24, Z
    1c64:	ea 81       	ldd	r30, Y+2	; 0x02
    1c66:	fb 81       	ldd	r31, Y+3	; 0x03
    1c68:	80 83       	st	Z, r24
    1c6a:	14 c0       	rjmp	.+40     	; 0x1c94 <DIO_VidGetPortValue+0x8a>
		case (Port_B) : *Copy_Pu8Value = PINB; break;
    1c6c:	e6 e3       	ldi	r30, 0x36	; 54
    1c6e:	f0 e0       	ldi	r31, 0x00	; 0
    1c70:	80 81       	ld	r24, Z
    1c72:	ea 81       	ldd	r30, Y+2	; 0x02
    1c74:	fb 81       	ldd	r31, Y+3	; 0x03
    1c76:	80 83       	st	Z, r24
    1c78:	0d c0       	rjmp	.+26     	; 0x1c94 <DIO_VidGetPortValue+0x8a>
		case (Port_C) : *Copy_Pu8Value = PINC; break;
    1c7a:	e3 e3       	ldi	r30, 0x33	; 51
    1c7c:	f0 e0       	ldi	r31, 0x00	; 0
    1c7e:	80 81       	ld	r24, Z
    1c80:	ea 81       	ldd	r30, Y+2	; 0x02
    1c82:	fb 81       	ldd	r31, Y+3	; 0x03
    1c84:	80 83       	st	Z, r24
    1c86:	06 c0       	rjmp	.+12     	; 0x1c94 <DIO_VidGetPortValue+0x8a>
		case (Port_D) : *Copy_Pu8Value = PIND; break;
    1c88:	e0 e3       	ldi	r30, 0x30	; 48
    1c8a:	f0 e0       	ldi	r31, 0x00	; 0
    1c8c:	80 81       	ld	r24, Z
    1c8e:	ea 81       	ldd	r30, Y+2	; 0x02
    1c90:	fb 81       	ldd	r31, Y+3	; 0x03
    1c92:	80 83       	st	Z, r24
	}
}
    1c94:	0f 90       	pop	r0
    1c96:	0f 90       	pop	r0
    1c98:	0f 90       	pop	r0
    1c9a:	0f 90       	pop	r0
    1c9c:	0f 90       	pop	r0
    1c9e:	cf 91       	pop	r28
    1ca0:	df 91       	pop	r29
    1ca2:	08 95       	ret

00001ca4 <ADC_VidInit>:
#include "ADC_Config.h"
#include "ADC_Interface.h"
#include "ADC_Private.h"

/*For Fixed options*/
void ADC_VidInit(){
    1ca4:	df 93       	push	r29
    1ca6:	cf 93       	push	r28
    1ca8:	cd b7       	in	r28, 0x3d	; 61
    1caa:	de b7       	in	r29, 0x3e	; 62
	/*Reference Selection Bit*/
	/*AVCC Reference*/
	Set_Bit(ADMUX,ADMUX_REFS0);
    1cac:	a7 e2       	ldi	r26, 0x27	; 39
    1cae:	b0 e0       	ldi	r27, 0x00	; 0
    1cb0:	e7 e2       	ldi	r30, 0x27	; 39
    1cb2:	f0 e0       	ldi	r31, 0x00	; 0
    1cb4:	80 81       	ld	r24, Z
    1cb6:	80 64       	ori	r24, 0x40	; 64
    1cb8:	8c 93       	st	X, r24
	CLR_Bit(ADMUX,ADMUX_REFS1);
    1cba:	a7 e2       	ldi	r26, 0x27	; 39
    1cbc:	b0 e0       	ldi	r27, 0x00	; 0
    1cbe:	e7 e2       	ldi	r30, 0x27	; 39
    1cc0:	f0 e0       	ldi	r31, 0x00	; 0
    1cc2:	80 81       	ld	r24, Z
    1cc4:	8f 77       	andi	r24, 0x7F	; 127
    1cc6:	8c 93       	st	X, r24

	/*ADLAR to read 8-Bits data as if it's 8-bits only*/
	Set_Bit(ADMUX,ADMUX_ADLAR);
    1cc8:	a7 e2       	ldi	r26, 0x27	; 39
    1cca:	b0 e0       	ldi	r27, 0x00	; 0
    1ccc:	e7 e2       	ldi	r30, 0x27	; 39
    1cce:	f0 e0       	ldi	r31, 0x00	; 0
    1cd0:	80 81       	ld	r24, Z
    1cd2:	80 62       	ori	r24, 0x20	; 32
    1cd4:	8c 93       	st	X, r24

	/*Prescaler 128*/
	Set_Bit(ADCSRA,ADCSRA_ADPS0);
    1cd6:	a6 e2       	ldi	r26, 0x26	; 38
    1cd8:	b0 e0       	ldi	r27, 0x00	; 0
    1cda:	e6 e2       	ldi	r30, 0x26	; 38
    1cdc:	f0 e0       	ldi	r31, 0x00	; 0
    1cde:	80 81       	ld	r24, Z
    1ce0:	81 60       	ori	r24, 0x01	; 1
    1ce2:	8c 93       	st	X, r24
	Set_Bit(ADCSRA,ADCSRA_ADPS1);
    1ce4:	a6 e2       	ldi	r26, 0x26	; 38
    1ce6:	b0 e0       	ldi	r27, 0x00	; 0
    1ce8:	e6 e2       	ldi	r30, 0x26	; 38
    1cea:	f0 e0       	ldi	r31, 0x00	; 0
    1cec:	80 81       	ld	r24, Z
    1cee:	82 60       	ori	r24, 0x02	; 2
    1cf0:	8c 93       	st	X, r24
	Set_Bit(ADCSRA,ADCSRA_ADPS2);
    1cf2:	a6 e2       	ldi	r26, 0x26	; 38
    1cf4:	b0 e0       	ldi	r27, 0x00	; 0
    1cf6:	e6 e2       	ldi	r30, 0x26	; 38
    1cf8:	f0 e0       	ldi	r31, 0x00	; 0
    1cfa:	80 81       	ld	r24, Z
    1cfc:	84 60       	ori	r24, 0x04	; 4
    1cfe:	8c 93       	st	X, r24

	/*Enable Module*/
	Set_Bit(ADCSRA,ADCSRA_ADEN);
    1d00:	a6 e2       	ldi	r26, 0x26	; 38
    1d02:	b0 e0       	ldi	r27, 0x00	; 0
    1d04:	e6 e2       	ldi	r30, 0x26	; 38
    1d06:	f0 e0       	ldi	r31, 0x00	; 0
    1d08:	80 81       	ld	r24, Z
    1d0a:	80 68       	ori	r24, 0x80	; 128
    1d0c:	8c 93       	st	X, r24
}
    1d0e:	cf 91       	pop	r28
    1d10:	df 91       	pop	r29
    1d12:	08 95       	ret

00001d14 <ADC_u8ReadChannel>:

u8 ADC_u8ReadChannel(u8 Copy_u8Channel){
    1d14:	df 93       	push	r29
    1d16:	cf 93       	push	r28
    1d18:	0f 92       	push	r0
    1d1a:	cd b7       	in	r28, 0x3d	; 61
    1d1c:	de b7       	in	r29, 0x3e	; 62
    1d1e:	89 83       	std	Y+1, r24	; 0x01
	/*choose Channel*/
	/*CLR first 5 Bits*/
	ADMUX &= 0b11100000;
    1d20:	a7 e2       	ldi	r26, 0x27	; 39
    1d22:	b0 e0       	ldi	r27, 0x00	; 0
    1d24:	e7 e2       	ldi	r30, 0x27	; 39
    1d26:	f0 e0       	ldi	r31, 0x00	; 0
    1d28:	80 81       	ld	r24, Z
    1d2a:	80 7e       	andi	r24, 0xE0	; 224
    1d2c:	8c 93       	st	X, r24
	/*Select Channel to read from - ADC0 to ADC7*/
	ADMUX |= Copy_u8Channel;
    1d2e:	a7 e2       	ldi	r26, 0x27	; 39
    1d30:	b0 e0       	ldi	r27, 0x00	; 0
    1d32:	e7 e2       	ldi	r30, 0x27	; 39
    1d34:	f0 e0       	ldi	r31, 0x00	; 0
    1d36:	90 81       	ld	r25, Z
    1d38:	89 81       	ldd	r24, Y+1	; 0x01
    1d3a:	89 2b       	or	r24, r25
    1d3c:	8c 93       	st	X, r24

	/*Start Conversion*/
	Set_Bit(ADCSRA,ADCSRA_ADSC);
    1d3e:	a6 e2       	ldi	r26, 0x26	; 38
    1d40:	b0 e0       	ldi	r27, 0x00	; 0
    1d42:	e6 e2       	ldi	r30, 0x26	; 38
    1d44:	f0 e0       	ldi	r31, 0x00	; 0
    1d46:	80 81       	ld	r24, Z
    1d48:	80 64       	ori	r24, 0x40	; 64
    1d4a:	8c 93       	st	X, r24

	/* Wait Till Conversion is Over*/
	while(!Get_Bit(ADCSRA,ADCSRA_ADIF));
    1d4c:	e6 e2       	ldi	r30, 0x26	; 38
    1d4e:	f0 e0       	ldi	r31, 0x00	; 0
    1d50:	80 81       	ld	r24, Z
    1d52:	82 95       	swap	r24
    1d54:	8f 70       	andi	r24, 0x0F	; 15
    1d56:	88 2f       	mov	r24, r24
    1d58:	90 e0       	ldi	r25, 0x00	; 0
    1d5a:	81 70       	andi	r24, 0x01	; 1
    1d5c:	90 70       	andi	r25, 0x00	; 0
    1d5e:	00 97       	sbiw	r24, 0x00	; 0
    1d60:	a9 f3       	breq	.-22     	; 0x1d4c <ADC_u8ReadChannel+0x38>

	/*Clear Flag by setting logical 1*/
	Set_Bit(ADCSRA,ADCSRA_ADIF);
    1d62:	a6 e2       	ldi	r26, 0x26	; 38
    1d64:	b0 e0       	ldi	r27, 0x00	; 0
    1d66:	e6 e2       	ldi	r30, 0x26	; 38
    1d68:	f0 e0       	ldi	r31, 0x00	; 0
    1d6a:	80 81       	ld	r24, Z
    1d6c:	80 61       	ori	r24, 0x10	; 16
    1d6e:	8c 93       	st	X, r24

	/*Return the value*/
	return ADCH;
    1d70:	e5 e2       	ldi	r30, 0x25	; 37
    1d72:	f0 e0       	ldi	r31, 0x00	; 0
    1d74:	80 81       	ld	r24, Z
}
    1d76:	0f 90       	pop	r0
    1d78:	cf 91       	pop	r28
    1d7a:	df 91       	pop	r29
    1d7c:	08 95       	ret

00001d7e <ADC_VidMapping>:

s32 ADC_VidMapping(s32 Copy_s32Value,s32 Copy_s32From_Min,s32 Copy_s32From_Max,s32 Copy_s32To_Min,s32 Copy_s32To_Max ){
    1d7e:	af 92       	push	r10
    1d80:	bf 92       	push	r11
    1d82:	cf 92       	push	r12
    1d84:	df 92       	push	r13
    1d86:	ef 92       	push	r14
    1d88:	ff 92       	push	r15
    1d8a:	0f 93       	push	r16
    1d8c:	1f 93       	push	r17
    1d8e:	df 93       	push	r29
    1d90:	cf 93       	push	r28
    1d92:	cd b7       	in	r28, 0x3d	; 61
    1d94:	de b7       	in	r29, 0x3e	; 62
    1d96:	64 97       	sbiw	r28, 0x14	; 20
    1d98:	0f b6       	in	r0, 0x3f	; 63
    1d9a:	f8 94       	cli
    1d9c:	de bf       	out	0x3e, r29	; 62
    1d9e:	0f be       	out	0x3f, r0	; 63
    1da0:	cd bf       	out	0x3d, r28	; 61
    1da2:	6d 83       	std	Y+5, r22	; 0x05
    1da4:	7e 83       	std	Y+6, r23	; 0x06
    1da6:	8f 83       	std	Y+7, r24	; 0x07
    1da8:	98 87       	std	Y+8, r25	; 0x08
    1daa:	29 87       	std	Y+9, r18	; 0x09
    1dac:	3a 87       	std	Y+10, r19	; 0x0a
    1dae:	4b 87       	std	Y+11, r20	; 0x0b
    1db0:	5c 87       	std	Y+12, r21	; 0x0c
    1db2:	ed 86       	std	Y+13, r14	; 0x0d
    1db4:	fe 86       	std	Y+14, r15	; 0x0e
    1db6:	0f 87       	std	Y+15, r16	; 0x0f
    1db8:	18 8b       	std	Y+16, r17	; 0x10
    1dba:	a9 8a       	std	Y+17, r10	; 0x11
    1dbc:	ba 8a       	std	Y+18, r11	; 0x12
    1dbe:	cb 8a       	std	Y+19, r12	; 0x13
    1dc0:	dc 8a       	std	Y+20, r13	; 0x14
		s32 Local_s32Temp = (Copy_s32Value - Copy_s32From_Min) ;
    1dc2:	2d 81       	ldd	r18, Y+5	; 0x05
    1dc4:	3e 81       	ldd	r19, Y+6	; 0x06
    1dc6:	4f 81       	ldd	r20, Y+7	; 0x07
    1dc8:	58 85       	ldd	r21, Y+8	; 0x08
    1dca:	89 85       	ldd	r24, Y+9	; 0x09
    1dcc:	9a 85       	ldd	r25, Y+10	; 0x0a
    1dce:	ab 85       	ldd	r26, Y+11	; 0x0b
    1dd0:	bc 85       	ldd	r27, Y+12	; 0x0c
    1dd2:	79 01       	movw	r14, r18
    1dd4:	8a 01       	movw	r16, r20
    1dd6:	e8 1a       	sub	r14, r24
    1dd8:	f9 0a       	sbc	r15, r25
    1dda:	0a 0b       	sbc	r16, r26
    1ddc:	1b 0b       	sbc	r17, r27
    1dde:	d8 01       	movw	r26, r16
    1de0:	c7 01       	movw	r24, r14
    1de2:	89 83       	std	Y+1, r24	; 0x01
    1de4:	9a 83       	std	Y+2, r25	; 0x02
    1de6:	ab 83       	std	Y+3, r26	; 0x03
    1de8:	bc 83       	std	Y+4, r27	; 0x04
		Local_s32Temp *=  (-Copy_s32To_Max + Copy_s32To_Min);
    1dea:	29 89       	ldd	r18, Y+17	; 0x11
    1dec:	3a 89       	ldd	r19, Y+18	; 0x12
    1dee:	4b 89       	ldd	r20, Y+19	; 0x13
    1df0:	5c 89       	ldd	r21, Y+20	; 0x14
    1df2:	89 a1       	ldd	r24, Y+33	; 0x21
    1df4:	9a a1       	ldd	r25, Y+34	; 0x22
    1df6:	ab a1       	ldd	r26, Y+35	; 0x23
    1df8:	bc a1       	ldd	r27, Y+36	; 0x24
    1dfa:	28 1b       	sub	r18, r24
    1dfc:	39 0b       	sbc	r19, r25
    1dfe:	4a 0b       	sbc	r20, r26
    1e00:	5b 0b       	sbc	r21, r27
    1e02:	89 81       	ldd	r24, Y+1	; 0x01
    1e04:	9a 81       	ldd	r25, Y+2	; 0x02
    1e06:	ab 81       	ldd	r26, Y+3	; 0x03
    1e08:	bc 81       	ldd	r27, Y+4	; 0x04
    1e0a:	bc 01       	movw	r22, r24
    1e0c:	cd 01       	movw	r24, r26
    1e0e:	0e 94 ae 13 	call	0x275c	; 0x275c <__mulsi3>
    1e12:	dc 01       	movw	r26, r24
    1e14:	cb 01       	movw	r24, r22
    1e16:	89 83       	std	Y+1, r24	; 0x01
    1e18:	9a 83       	std	Y+2, r25	; 0x02
    1e1a:	ab 83       	std	Y+3, r26	; 0x03
    1e1c:	bc 83       	std	Y+4, r27	; 0x04
		Local_s32Temp /= (-Copy_s32From_Max + Copy_s32From_Min);
    1e1e:	29 85       	ldd	r18, Y+9	; 0x09
    1e20:	3a 85       	ldd	r19, Y+10	; 0x0a
    1e22:	4b 85       	ldd	r20, Y+11	; 0x0b
    1e24:	5c 85       	ldd	r21, Y+12	; 0x0c
    1e26:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e28:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e2a:	af 85       	ldd	r26, Y+15	; 0x0f
    1e2c:	b8 89       	ldd	r27, Y+16	; 0x10
    1e2e:	28 1b       	sub	r18, r24
    1e30:	39 0b       	sbc	r19, r25
    1e32:	4a 0b       	sbc	r20, r26
    1e34:	5b 0b       	sbc	r21, r27
    1e36:	89 81       	ldd	r24, Y+1	; 0x01
    1e38:	9a 81       	ldd	r25, Y+2	; 0x02
    1e3a:	ab 81       	ldd	r26, Y+3	; 0x03
    1e3c:	bc 81       	ldd	r27, Y+4	; 0x04
    1e3e:	bc 01       	movw	r22, r24
    1e40:	cd 01       	movw	r24, r26
    1e42:	0e 94 02 14 	call	0x2804	; 0x2804 <__divmodsi4>
    1e46:	da 01       	movw	r26, r20
    1e48:	c9 01       	movw	r24, r18
    1e4a:	89 83       	std	Y+1, r24	; 0x01
    1e4c:	9a 83       	std	Y+2, r25	; 0x02
    1e4e:	ab 83       	std	Y+3, r26	; 0x03
    1e50:	bc 83       	std	Y+4, r27	; 0x04
		Local_s32Temp += Copy_s32To_Min;
    1e52:	29 81       	ldd	r18, Y+1	; 0x01
    1e54:	3a 81       	ldd	r19, Y+2	; 0x02
    1e56:	4b 81       	ldd	r20, Y+3	; 0x03
    1e58:	5c 81       	ldd	r21, Y+4	; 0x04
    1e5a:	89 89       	ldd	r24, Y+17	; 0x11
    1e5c:	9a 89       	ldd	r25, Y+18	; 0x12
    1e5e:	ab 89       	ldd	r26, Y+19	; 0x13
    1e60:	bc 89       	ldd	r27, Y+20	; 0x14
    1e62:	82 0f       	add	r24, r18
    1e64:	93 1f       	adc	r25, r19
    1e66:	a4 1f       	adc	r26, r20
    1e68:	b5 1f       	adc	r27, r21
    1e6a:	89 83       	std	Y+1, r24	; 0x01
    1e6c:	9a 83       	std	Y+2, r25	; 0x02
    1e6e:	ab 83       	std	Y+3, r26	; 0x03
    1e70:	bc 83       	std	Y+4, r27	; 0x04
	  return  Local_s32Temp;
    1e72:	89 81       	ldd	r24, Y+1	; 0x01
    1e74:	9a 81       	ldd	r25, Y+2	; 0x02
    1e76:	ab 81       	ldd	r26, Y+3	; 0x03
    1e78:	bc 81       	ldd	r27, Y+4	; 0x04
}
    1e7a:	bc 01       	movw	r22, r24
    1e7c:	cd 01       	movw	r24, r26
    1e7e:	64 96       	adiw	r28, 0x14	; 20
    1e80:	0f b6       	in	r0, 0x3f	; 63
    1e82:	f8 94       	cli
    1e84:	de bf       	out	0x3e, r29	; 62
    1e86:	0f be       	out	0x3f, r0	; 63
    1e88:	cd bf       	out	0x3d, r28	; 61
    1e8a:	cf 91       	pop	r28
    1e8c:	df 91       	pop	r29
    1e8e:	1f 91       	pop	r17
    1e90:	0f 91       	pop	r16
    1e92:	ff 90       	pop	r15
    1e94:	ef 90       	pop	r14
    1e96:	df 90       	pop	r13
    1e98:	cf 90       	pop	r12
    1e9a:	bf 90       	pop	r11
    1e9c:	af 90       	pop	r10
    1e9e:	08 95       	ret

00001ea0 <ADC_f32LCDVoltConv>:
u16 ADC_f32LCDVoltConv(u8 Copy_Reading){
    1ea0:	df 93       	push	r29
    1ea2:	cf 93       	push	r28
    1ea4:	00 d0       	rcall	.+0      	; 0x1ea6 <ADC_f32LCDVoltConv+0x6>
    1ea6:	0f 92       	push	r0
    1ea8:	cd b7       	in	r28, 0x3d	; 61
    1eaa:	de b7       	in	r29, 0x3e	; 62
    1eac:	8b 83       	std	Y+3, r24	; 0x03
	u16 newreading = (Copy_Reading*(5000/256UL));
    1eae:	8b 81       	ldd	r24, Y+3	; 0x03
    1eb0:	88 2f       	mov	r24, r24
    1eb2:	90 e0       	ldi	r25, 0x00	; 0
    1eb4:	a0 e0       	ldi	r26, 0x00	; 0
    1eb6:	b0 e0       	ldi	r27, 0x00	; 0
    1eb8:	23 e1       	ldi	r18, 0x13	; 19
    1eba:	30 e0       	ldi	r19, 0x00	; 0
    1ebc:	40 e0       	ldi	r20, 0x00	; 0
    1ebe:	50 e0       	ldi	r21, 0x00	; 0
    1ec0:	bc 01       	movw	r22, r24
    1ec2:	cd 01       	movw	r24, r26
    1ec4:	0e 94 ae 13 	call	0x275c	; 0x275c <__mulsi3>
    1ec8:	dc 01       	movw	r26, r24
    1eca:	cb 01       	movw	r24, r22
    1ecc:	9a 83       	std	Y+2, r25	; 0x02
    1ece:	89 83       	std	Y+1, r24	; 0x01
	return newreading;
    1ed0:	89 81       	ldd	r24, Y+1	; 0x01
    1ed2:	9a 81       	ldd	r25, Y+2	; 0x02

}
    1ed4:	0f 90       	pop	r0
    1ed6:	0f 90       	pop	r0
    1ed8:	0f 90       	pop	r0
    1eda:	cf 91       	pop	r28
    1edc:	df 91       	pop	r29
    1ede:	08 95       	ret

00001ee0 <CLCD_VidSendCommand>:





void CLCD_VidSendCommand(u8 Copy_u8Command){
    1ee0:	df 93       	push	r29
    1ee2:	cf 93       	push	r28
    1ee4:	cd b7       	in	r28, 0x3d	; 61
    1ee6:	de b7       	in	r29, 0x3e	; 62
    1ee8:	2f 97       	sbiw	r28, 0x0f	; 15
    1eea:	0f b6       	in	r0, 0x3f	; 63
    1eec:	f8 94       	cli
    1eee:	de bf       	out	0x3e, r29	; 62
    1ef0:	0f be       	out	0x3f, r0	; 63
    1ef2:	cd bf       	out	0x3d, r28	; 61
    1ef4:	8f 87       	std	Y+15, r24	; 0x0f

	/*set RS pin as low*/
	DIO_VidSetPinValue(CLCD_CTRL_PORT, CLCD_RS_PIN,low );
    1ef6:	84 e0       	ldi	r24, 0x04	; 4
    1ef8:	65 e0       	ldi	r22, 0x05	; 5
    1efa:	40 e0       	ldi	r20, 0x00	; 0
    1efc:	0e 94 c0 0a 	call	0x1580	; 0x1580 <DIO_VidSetPinValue>
	/*set RW pin low to write*/
	DIO_VidSetPinValue(CLCD_CTRL_PORT, CLCD_RW_PIN,low );
    1f00:	84 e0       	ldi	r24, 0x04	; 4
    1f02:	66 e0       	ldi	r22, 0x06	; 6
    1f04:	40 e0       	ldi	r20, 0x00	; 0
    1f06:	0e 94 c0 0a 	call	0x1580	; 0x1580 <DIO_VidSetPinValue>
	/*send commands to data pins */
	DIO_VidSetPortVal(CLCD_DATA_PORT, Copy_u8Command);
    1f0a:	82 e0       	ldi	r24, 0x02	; 2
    1f0c:	6f 85       	ldd	r22, Y+15	; 0x0f
    1f0e:	0e 94 48 0d 	call	0x1a90	; 0x1a90 <DIO_VidSetPortVal>
	/*send enable pulse*/
	DIO_VidSetPinValue(CLCD_CTRL_PORT,CLCD_EN_PIN,high);
    1f12:	84 e0       	ldi	r24, 0x04	; 4
    1f14:	67 e0       	ldi	r22, 0x07	; 7
    1f16:	41 e0       	ldi	r20, 0x01	; 1
    1f18:	0e 94 c0 0a 	call	0x1580	; 0x1580 <DIO_VidSetPinValue>
    1f1c:	80 e0       	ldi	r24, 0x00	; 0
    1f1e:	90 e0       	ldi	r25, 0x00	; 0
    1f20:	a0 e4       	ldi	r26, 0x40	; 64
    1f22:	b0 e4       	ldi	r27, 0x40	; 64
    1f24:	8b 87       	std	Y+11, r24	; 0x0b
    1f26:	9c 87       	std	Y+12, r25	; 0x0c
    1f28:	ad 87       	std	Y+13, r26	; 0x0d
    1f2a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f2c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f2e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f30:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f32:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f34:	20 e0       	ldi	r18, 0x00	; 0
    1f36:	30 e0       	ldi	r19, 0x00	; 0
    1f38:	4a ef       	ldi	r20, 0xFA	; 250
    1f3a:	54 e4       	ldi	r21, 0x44	; 68
    1f3c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f40:	dc 01       	movw	r26, r24
    1f42:	cb 01       	movw	r24, r22
    1f44:	8f 83       	std	Y+7, r24	; 0x07
    1f46:	98 87       	std	Y+8, r25	; 0x08
    1f48:	a9 87       	std	Y+9, r26	; 0x09
    1f4a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1f4c:	6f 81       	ldd	r22, Y+7	; 0x07
    1f4e:	78 85       	ldd	r23, Y+8	; 0x08
    1f50:	89 85       	ldd	r24, Y+9	; 0x09
    1f52:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f54:	20 e0       	ldi	r18, 0x00	; 0
    1f56:	30 e0       	ldi	r19, 0x00	; 0
    1f58:	40 e8       	ldi	r20, 0x80	; 128
    1f5a:	5f e3       	ldi	r21, 0x3F	; 63
    1f5c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1f60:	88 23       	and	r24, r24
    1f62:	2c f4       	brge	.+10     	; 0x1f6e <CLCD_VidSendCommand+0x8e>
		__ticks = 1;
    1f64:	81 e0       	ldi	r24, 0x01	; 1
    1f66:	90 e0       	ldi	r25, 0x00	; 0
    1f68:	9e 83       	std	Y+6, r25	; 0x06
    1f6a:	8d 83       	std	Y+5, r24	; 0x05
    1f6c:	3f c0       	rjmp	.+126    	; 0x1fec <CLCD_VidSendCommand+0x10c>
	else if (__tmp > 65535)
    1f6e:	6f 81       	ldd	r22, Y+7	; 0x07
    1f70:	78 85       	ldd	r23, Y+8	; 0x08
    1f72:	89 85       	ldd	r24, Y+9	; 0x09
    1f74:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f76:	20 e0       	ldi	r18, 0x00	; 0
    1f78:	3f ef       	ldi	r19, 0xFF	; 255
    1f7a:	4f e7       	ldi	r20, 0x7F	; 127
    1f7c:	57 e4       	ldi	r21, 0x47	; 71
    1f7e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1f82:	18 16       	cp	r1, r24
    1f84:	4c f5       	brge	.+82     	; 0x1fd8 <CLCD_VidSendCommand+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f86:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f88:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f8a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f8c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f8e:	20 e0       	ldi	r18, 0x00	; 0
    1f90:	30 e0       	ldi	r19, 0x00	; 0
    1f92:	40 e2       	ldi	r20, 0x20	; 32
    1f94:	51 e4       	ldi	r21, 0x41	; 65
    1f96:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f9a:	dc 01       	movw	r26, r24
    1f9c:	cb 01       	movw	r24, r22
    1f9e:	bc 01       	movw	r22, r24
    1fa0:	cd 01       	movw	r24, r26
    1fa2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fa6:	dc 01       	movw	r26, r24
    1fa8:	cb 01       	movw	r24, r22
    1faa:	9e 83       	std	Y+6, r25	; 0x06
    1fac:	8d 83       	std	Y+5, r24	; 0x05
    1fae:	0f c0       	rjmp	.+30     	; 0x1fce <CLCD_VidSendCommand+0xee>
    1fb0:	88 ec       	ldi	r24, 0xC8	; 200
    1fb2:	90 e0       	ldi	r25, 0x00	; 0
    1fb4:	9c 83       	std	Y+4, r25	; 0x04
    1fb6:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1fb8:	8b 81       	ldd	r24, Y+3	; 0x03
    1fba:	9c 81       	ldd	r25, Y+4	; 0x04
    1fbc:	01 97       	sbiw	r24, 0x01	; 1
    1fbe:	f1 f7       	brne	.-4      	; 0x1fbc <CLCD_VidSendCommand+0xdc>
    1fc0:	9c 83       	std	Y+4, r25	; 0x04
    1fc2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fc4:	8d 81       	ldd	r24, Y+5	; 0x05
    1fc6:	9e 81       	ldd	r25, Y+6	; 0x06
    1fc8:	01 97       	sbiw	r24, 0x01	; 1
    1fca:	9e 83       	std	Y+6, r25	; 0x06
    1fcc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fce:	8d 81       	ldd	r24, Y+5	; 0x05
    1fd0:	9e 81       	ldd	r25, Y+6	; 0x06
    1fd2:	00 97       	sbiw	r24, 0x00	; 0
    1fd4:	69 f7       	brne	.-38     	; 0x1fb0 <CLCD_VidSendCommand+0xd0>
    1fd6:	14 c0       	rjmp	.+40     	; 0x2000 <CLCD_VidSendCommand+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fd8:	6f 81       	ldd	r22, Y+7	; 0x07
    1fda:	78 85       	ldd	r23, Y+8	; 0x08
    1fdc:	89 85       	ldd	r24, Y+9	; 0x09
    1fde:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fe0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fe4:	dc 01       	movw	r26, r24
    1fe6:	cb 01       	movw	r24, r22
    1fe8:	9e 83       	std	Y+6, r25	; 0x06
    1fea:	8d 83       	std	Y+5, r24	; 0x05
    1fec:	8d 81       	ldd	r24, Y+5	; 0x05
    1fee:	9e 81       	ldd	r25, Y+6	; 0x06
    1ff0:	9a 83       	std	Y+2, r25	; 0x02
    1ff2:	89 83       	std	Y+1, r24	; 0x01
    1ff4:	89 81       	ldd	r24, Y+1	; 0x01
    1ff6:	9a 81       	ldd	r25, Y+2	; 0x02
    1ff8:	01 97       	sbiw	r24, 0x01	; 1
    1ffa:	f1 f7       	brne	.-4      	; 0x1ff8 <CLCD_VidSendCommand+0x118>
    1ffc:	9a 83       	std	Y+2, r25	; 0x02
    1ffe:	89 83       	std	Y+1, r24	; 0x01
	/*delay*/
	_delay_ms(3);
	/*Clear enable pin (Pulse Complete)*/
	DIO_VidSetPinValue(CLCD_CTRL_PORT,CLCD_EN_PIN,low);
    2000:	84 e0       	ldi	r24, 0x04	; 4
    2002:	67 e0       	ldi	r22, 0x07	; 7
    2004:	40 e0       	ldi	r20, 0x00	; 0
    2006:	0e 94 c0 0a 	call	0x1580	; 0x1580 <DIO_VidSetPinValue>
}
    200a:	2f 96       	adiw	r28, 0x0f	; 15
    200c:	0f b6       	in	r0, 0x3f	; 63
    200e:	f8 94       	cli
    2010:	de bf       	out	0x3e, r29	; 62
    2012:	0f be       	out	0x3f, r0	; 63
    2014:	cd bf       	out	0x3d, r28	; 61
    2016:	cf 91       	pop	r28
    2018:	df 91       	pop	r29
    201a:	08 95       	ret

0000201c <ClCD_VidSendData>:

void ClCD_VidSendData(u8 Copy_u8Data ){
    201c:	df 93       	push	r29
    201e:	cf 93       	push	r28
    2020:	cd b7       	in	r28, 0x3d	; 61
    2022:	de b7       	in	r29, 0x3e	; 62
    2024:	2f 97       	sbiw	r28, 0x0f	; 15
    2026:	0f b6       	in	r0, 0x3f	; 63
    2028:	f8 94       	cli
    202a:	de bf       	out	0x3e, r29	; 62
    202c:	0f be       	out	0x3f, r0	; 63
    202e:	cd bf       	out	0x3d, r28	; 61
    2030:	8f 87       	std	Y+15, r24	; 0x0f

	/*set RS pin as high*/
	DIO_VidSetPinValue(CLCD_CTRL_PORT, CLCD_RS_PIN,high );
    2032:	84 e0       	ldi	r24, 0x04	; 4
    2034:	65 e0       	ldi	r22, 0x05	; 5
    2036:	41 e0       	ldi	r20, 0x01	; 1
    2038:	0e 94 c0 0a 	call	0x1580	; 0x1580 <DIO_VidSetPinValue>
	/*set RW pin low to write*/
	DIO_VidSetPinValue(CLCD_CTRL_PORT, CLCD_RW_PIN,low );
    203c:	84 e0       	ldi	r24, 0x04	; 4
    203e:	66 e0       	ldi	r22, 0x06	; 6
    2040:	40 e0       	ldi	r20, 0x00	; 0
    2042:	0e 94 c0 0a 	call	0x1580	; 0x1580 <DIO_VidSetPinValue>
	/*send commands to data pins */
	DIO_VidSetPortVal(CLCD_DATA_PORT, Copy_u8Data);
    2046:	82 e0       	ldi	r24, 0x02	; 2
    2048:	6f 85       	ldd	r22, Y+15	; 0x0f
    204a:	0e 94 48 0d 	call	0x1a90	; 0x1a90 <DIO_VidSetPortVal>
	/*send enable pulse*/
	DIO_VidSetPinValue(CLCD_CTRL_PORT,CLCD_EN_PIN,high);
    204e:	84 e0       	ldi	r24, 0x04	; 4
    2050:	67 e0       	ldi	r22, 0x07	; 7
    2052:	41 e0       	ldi	r20, 0x01	; 1
    2054:	0e 94 c0 0a 	call	0x1580	; 0x1580 <DIO_VidSetPinValue>
    2058:	80 e0       	ldi	r24, 0x00	; 0
    205a:	90 e0       	ldi	r25, 0x00	; 0
    205c:	a0 e4       	ldi	r26, 0x40	; 64
    205e:	b0 e4       	ldi	r27, 0x40	; 64
    2060:	8b 87       	std	Y+11, r24	; 0x0b
    2062:	9c 87       	std	Y+12, r25	; 0x0c
    2064:	ad 87       	std	Y+13, r26	; 0x0d
    2066:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2068:	6b 85       	ldd	r22, Y+11	; 0x0b
    206a:	7c 85       	ldd	r23, Y+12	; 0x0c
    206c:	8d 85       	ldd	r24, Y+13	; 0x0d
    206e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2070:	20 e0       	ldi	r18, 0x00	; 0
    2072:	30 e0       	ldi	r19, 0x00	; 0
    2074:	4a ef       	ldi	r20, 0xFA	; 250
    2076:	54 e4       	ldi	r21, 0x44	; 68
    2078:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    207c:	dc 01       	movw	r26, r24
    207e:	cb 01       	movw	r24, r22
    2080:	8f 83       	std	Y+7, r24	; 0x07
    2082:	98 87       	std	Y+8, r25	; 0x08
    2084:	a9 87       	std	Y+9, r26	; 0x09
    2086:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2088:	6f 81       	ldd	r22, Y+7	; 0x07
    208a:	78 85       	ldd	r23, Y+8	; 0x08
    208c:	89 85       	ldd	r24, Y+9	; 0x09
    208e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2090:	20 e0       	ldi	r18, 0x00	; 0
    2092:	30 e0       	ldi	r19, 0x00	; 0
    2094:	40 e8       	ldi	r20, 0x80	; 128
    2096:	5f e3       	ldi	r21, 0x3F	; 63
    2098:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    209c:	88 23       	and	r24, r24
    209e:	2c f4       	brge	.+10     	; 0x20aa <ClCD_VidSendData+0x8e>
		__ticks = 1;
    20a0:	81 e0       	ldi	r24, 0x01	; 1
    20a2:	90 e0       	ldi	r25, 0x00	; 0
    20a4:	9e 83       	std	Y+6, r25	; 0x06
    20a6:	8d 83       	std	Y+5, r24	; 0x05
    20a8:	3f c0       	rjmp	.+126    	; 0x2128 <ClCD_VidSendData+0x10c>
	else if (__tmp > 65535)
    20aa:	6f 81       	ldd	r22, Y+7	; 0x07
    20ac:	78 85       	ldd	r23, Y+8	; 0x08
    20ae:	89 85       	ldd	r24, Y+9	; 0x09
    20b0:	9a 85       	ldd	r25, Y+10	; 0x0a
    20b2:	20 e0       	ldi	r18, 0x00	; 0
    20b4:	3f ef       	ldi	r19, 0xFF	; 255
    20b6:	4f e7       	ldi	r20, 0x7F	; 127
    20b8:	57 e4       	ldi	r21, 0x47	; 71
    20ba:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    20be:	18 16       	cp	r1, r24
    20c0:	4c f5       	brge	.+82     	; 0x2114 <ClCD_VidSendData+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20c2:	6b 85       	ldd	r22, Y+11	; 0x0b
    20c4:	7c 85       	ldd	r23, Y+12	; 0x0c
    20c6:	8d 85       	ldd	r24, Y+13	; 0x0d
    20c8:	9e 85       	ldd	r25, Y+14	; 0x0e
    20ca:	20 e0       	ldi	r18, 0x00	; 0
    20cc:	30 e0       	ldi	r19, 0x00	; 0
    20ce:	40 e2       	ldi	r20, 0x20	; 32
    20d0:	51 e4       	ldi	r21, 0x41	; 65
    20d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20d6:	dc 01       	movw	r26, r24
    20d8:	cb 01       	movw	r24, r22
    20da:	bc 01       	movw	r22, r24
    20dc:	cd 01       	movw	r24, r26
    20de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20e2:	dc 01       	movw	r26, r24
    20e4:	cb 01       	movw	r24, r22
    20e6:	9e 83       	std	Y+6, r25	; 0x06
    20e8:	8d 83       	std	Y+5, r24	; 0x05
    20ea:	0f c0       	rjmp	.+30     	; 0x210a <ClCD_VidSendData+0xee>
    20ec:	88 ec       	ldi	r24, 0xC8	; 200
    20ee:	90 e0       	ldi	r25, 0x00	; 0
    20f0:	9c 83       	std	Y+4, r25	; 0x04
    20f2:	8b 83       	std	Y+3, r24	; 0x03
    20f4:	8b 81       	ldd	r24, Y+3	; 0x03
    20f6:	9c 81       	ldd	r25, Y+4	; 0x04
    20f8:	01 97       	sbiw	r24, 0x01	; 1
    20fa:	f1 f7       	brne	.-4      	; 0x20f8 <ClCD_VidSendData+0xdc>
    20fc:	9c 83       	std	Y+4, r25	; 0x04
    20fe:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2100:	8d 81       	ldd	r24, Y+5	; 0x05
    2102:	9e 81       	ldd	r25, Y+6	; 0x06
    2104:	01 97       	sbiw	r24, 0x01	; 1
    2106:	9e 83       	std	Y+6, r25	; 0x06
    2108:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    210a:	8d 81       	ldd	r24, Y+5	; 0x05
    210c:	9e 81       	ldd	r25, Y+6	; 0x06
    210e:	00 97       	sbiw	r24, 0x00	; 0
    2110:	69 f7       	brne	.-38     	; 0x20ec <ClCD_VidSendData+0xd0>
    2112:	14 c0       	rjmp	.+40     	; 0x213c <ClCD_VidSendData+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2114:	6f 81       	ldd	r22, Y+7	; 0x07
    2116:	78 85       	ldd	r23, Y+8	; 0x08
    2118:	89 85       	ldd	r24, Y+9	; 0x09
    211a:	9a 85       	ldd	r25, Y+10	; 0x0a
    211c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2120:	dc 01       	movw	r26, r24
    2122:	cb 01       	movw	r24, r22
    2124:	9e 83       	std	Y+6, r25	; 0x06
    2126:	8d 83       	std	Y+5, r24	; 0x05
    2128:	8d 81       	ldd	r24, Y+5	; 0x05
    212a:	9e 81       	ldd	r25, Y+6	; 0x06
    212c:	9a 83       	std	Y+2, r25	; 0x02
    212e:	89 83       	std	Y+1, r24	; 0x01
    2130:	89 81       	ldd	r24, Y+1	; 0x01
    2132:	9a 81       	ldd	r25, Y+2	; 0x02
    2134:	01 97       	sbiw	r24, 0x01	; 1
    2136:	f1 f7       	brne	.-4      	; 0x2134 <ClCD_VidSendData+0x118>
    2138:	9a 83       	std	Y+2, r25	; 0x02
    213a:	89 83       	std	Y+1, r24	; 0x01
	/*delay*/
	_delay_ms(3);
	/*Clear enable pin (Pulse Complete)*/
	DIO_VidSetPinValue(CLCD_CTRL_PORT,CLCD_EN_PIN,low);
    213c:	84 e0       	ldi	r24, 0x04	; 4
    213e:	67 e0       	ldi	r22, 0x07	; 7
    2140:	40 e0       	ldi	r20, 0x00	; 0
    2142:	0e 94 c0 0a 	call	0x1580	; 0x1580 <DIO_VidSetPinValue>
}
    2146:	2f 96       	adiw	r28, 0x0f	; 15
    2148:	0f b6       	in	r0, 0x3f	; 63
    214a:	f8 94       	cli
    214c:	de bf       	out	0x3e, r29	; 62
    214e:	0f be       	out	0x3f, r0	; 63
    2150:	cd bf       	out	0x3d, r28	; 61
    2152:	cf 91       	pop	r28
    2154:	df 91       	pop	r29
    2156:	08 95       	ret

00002158 <CLCD_VidInit>:
void CLCD_VidInit(void){
    2158:	df 93       	push	r29
    215a:	cf 93       	push	r28
    215c:	cd b7       	in	r28, 0x3d	; 61
    215e:	de b7       	in	r29, 0x3e	; 62
    2160:	2e 97       	sbiw	r28, 0x0e	; 14
    2162:	0f b6       	in	r0, 0x3f	; 63
    2164:	f8 94       	cli
    2166:	de bf       	out	0x3e, r29	; 62
    2168:	0f be       	out	0x3f, r0	; 63
    216a:	cd bf       	out	0x3d, r28	; 61
    216c:	80 e0       	ldi	r24, 0x00	; 0
    216e:	90 e0       	ldi	r25, 0x00	; 0
    2170:	a0 e2       	ldi	r26, 0x20	; 32
    2172:	b2 e4       	ldi	r27, 0x42	; 66
    2174:	8b 87       	std	Y+11, r24	; 0x0b
    2176:	9c 87       	std	Y+12, r25	; 0x0c
    2178:	ad 87       	std	Y+13, r26	; 0x0d
    217a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    217c:	6b 85       	ldd	r22, Y+11	; 0x0b
    217e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2180:	8d 85       	ldd	r24, Y+13	; 0x0d
    2182:	9e 85       	ldd	r25, Y+14	; 0x0e
    2184:	20 e0       	ldi	r18, 0x00	; 0
    2186:	30 e0       	ldi	r19, 0x00	; 0
    2188:	4a ef       	ldi	r20, 0xFA	; 250
    218a:	54 e4       	ldi	r21, 0x44	; 68
    218c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2190:	dc 01       	movw	r26, r24
    2192:	cb 01       	movw	r24, r22
    2194:	8f 83       	std	Y+7, r24	; 0x07
    2196:	98 87       	std	Y+8, r25	; 0x08
    2198:	a9 87       	std	Y+9, r26	; 0x09
    219a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    219c:	6f 81       	ldd	r22, Y+7	; 0x07
    219e:	78 85       	ldd	r23, Y+8	; 0x08
    21a0:	89 85       	ldd	r24, Y+9	; 0x09
    21a2:	9a 85       	ldd	r25, Y+10	; 0x0a
    21a4:	20 e0       	ldi	r18, 0x00	; 0
    21a6:	30 e0       	ldi	r19, 0x00	; 0
    21a8:	40 e8       	ldi	r20, 0x80	; 128
    21aa:	5f e3       	ldi	r21, 0x3F	; 63
    21ac:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    21b0:	88 23       	and	r24, r24
    21b2:	2c f4       	brge	.+10     	; 0x21be <CLCD_VidInit+0x66>
		__ticks = 1;
    21b4:	81 e0       	ldi	r24, 0x01	; 1
    21b6:	90 e0       	ldi	r25, 0x00	; 0
    21b8:	9e 83       	std	Y+6, r25	; 0x06
    21ba:	8d 83       	std	Y+5, r24	; 0x05
    21bc:	3f c0       	rjmp	.+126    	; 0x223c <CLCD_VidInit+0xe4>
	else if (__tmp > 65535)
    21be:	6f 81       	ldd	r22, Y+7	; 0x07
    21c0:	78 85       	ldd	r23, Y+8	; 0x08
    21c2:	89 85       	ldd	r24, Y+9	; 0x09
    21c4:	9a 85       	ldd	r25, Y+10	; 0x0a
    21c6:	20 e0       	ldi	r18, 0x00	; 0
    21c8:	3f ef       	ldi	r19, 0xFF	; 255
    21ca:	4f e7       	ldi	r20, 0x7F	; 127
    21cc:	57 e4       	ldi	r21, 0x47	; 71
    21ce:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    21d2:	18 16       	cp	r1, r24
    21d4:	4c f5       	brge	.+82     	; 0x2228 <CLCD_VidInit+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21d6:	6b 85       	ldd	r22, Y+11	; 0x0b
    21d8:	7c 85       	ldd	r23, Y+12	; 0x0c
    21da:	8d 85       	ldd	r24, Y+13	; 0x0d
    21dc:	9e 85       	ldd	r25, Y+14	; 0x0e
    21de:	20 e0       	ldi	r18, 0x00	; 0
    21e0:	30 e0       	ldi	r19, 0x00	; 0
    21e2:	40 e2       	ldi	r20, 0x20	; 32
    21e4:	51 e4       	ldi	r21, 0x41	; 65
    21e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21ea:	dc 01       	movw	r26, r24
    21ec:	cb 01       	movw	r24, r22
    21ee:	bc 01       	movw	r22, r24
    21f0:	cd 01       	movw	r24, r26
    21f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21f6:	dc 01       	movw	r26, r24
    21f8:	cb 01       	movw	r24, r22
    21fa:	9e 83       	std	Y+6, r25	; 0x06
    21fc:	8d 83       	std	Y+5, r24	; 0x05
    21fe:	0f c0       	rjmp	.+30     	; 0x221e <CLCD_VidInit+0xc6>
    2200:	88 ec       	ldi	r24, 0xC8	; 200
    2202:	90 e0       	ldi	r25, 0x00	; 0
    2204:	9c 83       	std	Y+4, r25	; 0x04
    2206:	8b 83       	std	Y+3, r24	; 0x03
    2208:	8b 81       	ldd	r24, Y+3	; 0x03
    220a:	9c 81       	ldd	r25, Y+4	; 0x04
    220c:	01 97       	sbiw	r24, 0x01	; 1
    220e:	f1 f7       	brne	.-4      	; 0x220c <CLCD_VidInit+0xb4>
    2210:	9c 83       	std	Y+4, r25	; 0x04
    2212:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2214:	8d 81       	ldd	r24, Y+5	; 0x05
    2216:	9e 81       	ldd	r25, Y+6	; 0x06
    2218:	01 97       	sbiw	r24, 0x01	; 1
    221a:	9e 83       	std	Y+6, r25	; 0x06
    221c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    221e:	8d 81       	ldd	r24, Y+5	; 0x05
    2220:	9e 81       	ldd	r25, Y+6	; 0x06
    2222:	00 97       	sbiw	r24, 0x00	; 0
    2224:	69 f7       	brne	.-38     	; 0x2200 <CLCD_VidInit+0xa8>
    2226:	14 c0       	rjmp	.+40     	; 0x2250 <CLCD_VidInit+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2228:	6f 81       	ldd	r22, Y+7	; 0x07
    222a:	78 85       	ldd	r23, Y+8	; 0x08
    222c:	89 85       	ldd	r24, Y+9	; 0x09
    222e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2230:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2234:	dc 01       	movw	r26, r24
    2236:	cb 01       	movw	r24, r22
    2238:	9e 83       	std	Y+6, r25	; 0x06
    223a:	8d 83       	std	Y+5, r24	; 0x05
    223c:	8d 81       	ldd	r24, Y+5	; 0x05
    223e:	9e 81       	ldd	r25, Y+6	; 0x06
    2240:	9a 83       	std	Y+2, r25	; 0x02
    2242:	89 83       	std	Y+1, r24	; 0x01
    2244:	89 81       	ldd	r24, Y+1	; 0x01
    2246:	9a 81       	ldd	r25, Y+2	; 0x02
    2248:	01 97       	sbiw	r24, 0x01	; 1
    224a:	f1 f7       	brne	.-4      	; 0x2248 <CLCD_VidInit+0xf0>
    224c:	9a 83       	std	Y+2, r25	; 0x02
    224e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(40);
	/*Function Set Command*/
	CLCD_VidSendCommand(0b00111111);
    2250:	8f e3       	ldi	r24, 0x3F	; 63
    2252:	0e 94 70 0f 	call	0x1ee0	; 0x1ee0 <CLCD_VidSendCommand>
	/*Display on/off control command*/
	CLCD_VidSendCommand(0b00001111);
    2256:	8f e0       	ldi	r24, 0x0F	; 15
    2258:	0e 94 70 0f 	call	0x1ee0	; 0x1ee0 <CLCD_VidSendCommand>
	/*Display Clear command*/
	CLCD_VidSendCommand(1);
    225c:	81 e0       	ldi	r24, 0x01	; 1
    225e:	0e 94 70 0f 	call	0x1ee0	; 0x1ee0 <CLCD_VidSendCommand>
}
    2262:	2e 96       	adiw	r28, 0x0e	; 14
    2264:	0f b6       	in	r0, 0x3f	; 63
    2266:	f8 94       	cli
    2268:	de bf       	out	0x3e, r29	; 62
    226a:	0f be       	out	0x3f, r0	; 63
    226c:	cd bf       	out	0x3d, r28	; 61
    226e:	cf 91       	pop	r28
    2270:	df 91       	pop	r29
    2272:	08 95       	ret

00002274 <CLCD_VidGotoXY>:
void CLCD_VidGotoXY (u8 Copy_u8XPos,u8 Copy_u8YPos){ /*x from 0 to 1 -------- y from 0 to 16*/
    2274:	df 93       	push	r29
    2276:	cf 93       	push	r28
    2278:	00 d0       	rcall	.+0      	; 0x227a <CLCD_VidGotoXY+0x6>
    227a:	0f 92       	push	r0
    227c:	cd b7       	in	r28, 0x3d	; 61
    227e:	de b7       	in	r29, 0x3e	; 62
    2280:	8a 83       	std	Y+2, r24	; 0x02
    2282:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8Address = 0 ;
    2284:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8XPos ==0){
    2286:	8a 81       	ldd	r24, Y+2	; 0x02
    2288:	88 23       	and	r24, r24
    228a:	19 f4       	brne	.+6      	; 0x2292 <CLCD_VidGotoXY+0x1e>
		Local_u8Address = Copy_u8YPos;
    228c:	8b 81       	ldd	r24, Y+3	; 0x03
    228e:	89 83       	std	Y+1, r24	; 0x01
    2290:	06 c0       	rjmp	.+12     	; 0x229e <CLCD_VidGotoXY+0x2a>
	}
	else if(Copy_u8XPos==1 ){
    2292:	8a 81       	ldd	r24, Y+2	; 0x02
    2294:	81 30       	cpi	r24, 0x01	; 1
    2296:	19 f4       	brne	.+6      	; 0x229e <CLCD_VidGotoXY+0x2a>
		Local_u8Address = 0x40 + Copy_u8YPos;
    2298:	8b 81       	ldd	r24, Y+3	; 0x03
    229a:	80 5c       	subi	r24, 0xC0	; 192
    229c:	89 83       	std	Y+1, r24	; 0x01
	}
	/*0b1000000 ----> 128 */
	CLCD_VidSendCommand(128+Local_u8Address);
    229e:	89 81       	ldd	r24, Y+1	; 0x01
    22a0:	80 58       	subi	r24, 0x80	; 128
    22a2:	0e 94 70 0f 	call	0x1ee0	; 0x1ee0 <CLCD_VidSendCommand>

}
    22a6:	0f 90       	pop	r0
    22a8:	0f 90       	pop	r0
    22aa:	0f 90       	pop	r0
    22ac:	cf 91       	pop	r28
    22ae:	df 91       	pop	r29
    22b0:	08 95       	ret

000022b2 <CLCD_VidWriteSpecialChar>:
void CLCD_VidWriteSpecialChar(u8 * Copy_Pu8Pattern, u8 Copy_u8PatternNumber,u8 Copy_u8XPos,u8 Copy_u8YPos ){
    22b2:	df 93       	push	r29
    22b4:	cf 93       	push	r28
    22b6:	cd b7       	in	r28, 0x3d	; 61
    22b8:	de b7       	in	r29, 0x3e	; 62
    22ba:	27 97       	sbiw	r28, 0x07	; 7
    22bc:	0f b6       	in	r0, 0x3f	; 63
    22be:	f8 94       	cli
    22c0:	de bf       	out	0x3e, r29	; 62
    22c2:	0f be       	out	0x3f, r0	; 63
    22c4:	cd bf       	out	0x3d, r28	; 61
    22c6:	9c 83       	std	Y+4, r25	; 0x04
    22c8:	8b 83       	std	Y+3, r24	; 0x03
    22ca:	6d 83       	std	Y+5, r22	; 0x05
    22cc:	4e 83       	std	Y+6, r20	; 0x06
    22ce:	2f 83       	std	Y+7, r18	; 0x07

	u8 Local_u8Address = 0;
    22d0:	1a 82       	std	Y+2, r1	; 0x02

	Local_u8Address = 8* Copy_u8PatternNumber; /*Generate the wanted location*/
    22d2:	8d 81       	ldd	r24, Y+5	; 0x05
    22d4:	88 2f       	mov	r24, r24
    22d6:	90 e0       	ldi	r25, 0x00	; 0
    22d8:	88 0f       	add	r24, r24
    22da:	99 1f       	adc	r25, r25
    22dc:	88 0f       	add	r24, r24
    22de:	99 1f       	adc	r25, r25
    22e0:	88 0f       	add	r24, r24
    22e2:	99 1f       	adc	r25, r25
    22e4:	8a 83       	std	Y+2, r24	; 0x02

	CLCD_VidSendCommand(64+Local_u8Address); /*Access the wanted location*/
    22e6:	8a 81       	ldd	r24, Y+2	; 0x02
    22e8:	80 5c       	subi	r24, 0xC0	; 192
    22ea:	0e 94 70 0f 	call	0x1ee0	; 0x1ee0 <CLCD_VidSendCommand>

	for (u8 i = 0 ; i<8;i++){
    22ee:	19 82       	std	Y+1, r1	; 0x01
    22f0:	0e c0       	rjmp	.+28     	; 0x230e <CLCD_VidWriteSpecialChar+0x5c>
		ClCD_VidSendData(Copy_Pu8Pattern[i]);  /*store data in the location*/
    22f2:	89 81       	ldd	r24, Y+1	; 0x01
    22f4:	28 2f       	mov	r18, r24
    22f6:	30 e0       	ldi	r19, 0x00	; 0
    22f8:	8b 81       	ldd	r24, Y+3	; 0x03
    22fa:	9c 81       	ldd	r25, Y+4	; 0x04
    22fc:	fc 01       	movw	r30, r24
    22fe:	e2 0f       	add	r30, r18
    2300:	f3 1f       	adc	r31, r19
    2302:	80 81       	ld	r24, Z
    2304:	0e 94 0e 10 	call	0x201c	; 0x201c <ClCD_VidSendData>

	Local_u8Address = 8* Copy_u8PatternNumber; /*Generate the wanted location*/

	CLCD_VidSendCommand(64+Local_u8Address); /*Access the wanted location*/

	for (u8 i = 0 ; i<8;i++){
    2308:	89 81       	ldd	r24, Y+1	; 0x01
    230a:	8f 5f       	subi	r24, 0xFF	; 255
    230c:	89 83       	std	Y+1, r24	; 0x01
    230e:	89 81       	ldd	r24, Y+1	; 0x01
    2310:	88 30       	cpi	r24, 0x08	; 8
    2312:	78 f3       	brcs	.-34     	; 0x22f2 <CLCD_VidWriteSpecialChar+0x40>
		ClCD_VidSendData(Copy_Pu8Pattern[i]);  /*store data in the location*/
	}
	CLCD_VidGotoXY(Copy_u8XPos,Copy_u8YPos);  /*GO TO RAM*/
    2314:	8e 81       	ldd	r24, Y+6	; 0x06
    2316:	6f 81       	ldd	r22, Y+7	; 0x07
    2318:	0e 94 3a 11 	call	0x2274	; 0x2274 <CLCD_VidGotoXY>
	ClCD_VidSendData(Copy_u8PatternNumber); /*Go to first address in CGRAM, Display output sequentially*/
    231c:	8d 81       	ldd	r24, Y+5	; 0x05
    231e:	0e 94 0e 10 	call	0x201c	; 0x201c <ClCD_VidSendData>
}
    2322:	27 96       	adiw	r28, 0x07	; 7
    2324:	0f b6       	in	r0, 0x3f	; 63
    2326:	f8 94       	cli
    2328:	de bf       	out	0x3e, r29	; 62
    232a:	0f be       	out	0x3f, r0	; 63
    232c:	cd bf       	out	0x3d, r28	; 61
    232e:	cf 91       	pop	r28
    2330:	df 91       	pop	r29
    2332:	08 95       	ret

00002334 <CLCD_VidSendString>:

void CLCD_VidSendString(u8 * Copy_Pu8Str){
    2334:	df 93       	push	r29
    2336:	cf 93       	push	r28
    2338:	00 d0       	rcall	.+0      	; 0x233a <CLCD_VidSendString+0x6>
    233a:	0f 92       	push	r0
    233c:	cd b7       	in	r28, 0x3d	; 61
    233e:	de b7       	in	r29, 0x3e	; 62
    2340:	9b 83       	std	Y+3, r25	; 0x03
    2342:	8a 83       	std	Y+2, r24	; 0x02
	u8 i = 0;
    2344:	19 82       	std	Y+1, r1	; 0x01
    2346:	0e c0       	rjmp	.+28     	; 0x2364 <CLCD_VidSendString+0x30>
	while(Copy_Pu8Str[i] != '\0'){

		ClCD_VidSendData(Copy_Pu8Str[i]);
    2348:	89 81       	ldd	r24, Y+1	; 0x01
    234a:	28 2f       	mov	r18, r24
    234c:	30 e0       	ldi	r19, 0x00	; 0
    234e:	8a 81       	ldd	r24, Y+2	; 0x02
    2350:	9b 81       	ldd	r25, Y+3	; 0x03
    2352:	fc 01       	movw	r30, r24
    2354:	e2 0f       	add	r30, r18
    2356:	f3 1f       	adc	r31, r19
    2358:	80 81       	ld	r24, Z
    235a:	0e 94 0e 10 	call	0x201c	; 0x201c <ClCD_VidSendData>
		i++;
    235e:	89 81       	ldd	r24, Y+1	; 0x01
    2360:	8f 5f       	subi	r24, 0xFF	; 255
    2362:	89 83       	std	Y+1, r24	; 0x01
	ClCD_VidSendData(Copy_u8PatternNumber); /*Go to first address in CGRAM, Display output sequentially*/
}

void CLCD_VidSendString(u8 * Copy_Pu8Str){
	u8 i = 0;
	while(Copy_Pu8Str[i] != '\0'){
    2364:	89 81       	ldd	r24, Y+1	; 0x01
    2366:	28 2f       	mov	r18, r24
    2368:	30 e0       	ldi	r19, 0x00	; 0
    236a:	8a 81       	ldd	r24, Y+2	; 0x02
    236c:	9b 81       	ldd	r25, Y+3	; 0x03
    236e:	fc 01       	movw	r30, r24
    2370:	e2 0f       	add	r30, r18
    2372:	f3 1f       	adc	r31, r19
    2374:	80 81       	ld	r24, Z
    2376:	88 23       	and	r24, r24
    2378:	39 f7       	brne	.-50     	; 0x2348 <CLCD_VidSendString+0x14>

		ClCD_VidSendData(Copy_Pu8Str[i]);
		i++;
	}
}
    237a:	0f 90       	pop	r0
    237c:	0f 90       	pop	r0
    237e:	0f 90       	pop	r0
    2380:	cf 91       	pop	r28
    2382:	df 91       	pop	r29
    2384:	08 95       	ret

00002386 <CLCD_VidLcdClear>:
void CLCD_VidLcdClear(void){
    2386:	df 93       	push	r29
    2388:	cf 93       	push	r28
    238a:	cd b7       	in	r28, 0x3d	; 61
    238c:	de b7       	in	r29, 0x3e	; 62
	CLCD_VidSendCommand(1);
    238e:	81 e0       	ldi	r24, 0x01	; 1
    2390:	0e 94 70 0f 	call	0x1ee0	; 0x1ee0 <CLCD_VidSendCommand>
}
    2394:	cf 91       	pop	r28
    2396:	df 91       	pop	r29
    2398:	08 95       	ret

0000239a <CLCD_VidSendNumber>:
void CLCD_VidSendNumber(u16 CLCD_u16Number,u8 * CLCD_u8PCharArr){
    239a:	df 93       	push	r29
    239c:	cf 93       	push	r28
    239e:	00 d0       	rcall	.+0      	; 0x23a0 <CLCD_VidSendNumber+0x6>
    23a0:	00 d0       	rcall	.+0      	; 0x23a2 <CLCD_VidSendNumber+0x8>
    23a2:	cd b7       	in	r28, 0x3d	; 61
    23a4:	de b7       	in	r29, 0x3e	; 62
    23a6:	9a 83       	std	Y+2, r25	; 0x02
    23a8:	89 83       	std	Y+1, r24	; 0x01
    23aa:	7c 83       	std	Y+4, r23	; 0x04
    23ac:	6b 83       	std	Y+3, r22	; 0x03

	sprintf(CLCD_u8PCharArr,CLCD_u16Number);
    23ae:	29 81       	ldd	r18, Y+1	; 0x01
    23b0:	3a 81       	ldd	r19, Y+2	; 0x02
    23b2:	00 d0       	rcall	.+0      	; 0x23b4 <CLCD_VidSendNumber+0x1a>
    23b4:	00 d0       	rcall	.+0      	; 0x23b6 <CLCD_VidSendNumber+0x1c>
    23b6:	ed b7       	in	r30, 0x3d	; 61
    23b8:	fe b7       	in	r31, 0x3e	; 62
    23ba:	31 96       	adiw	r30, 0x01	; 1
    23bc:	8b 81       	ldd	r24, Y+3	; 0x03
    23be:	9c 81       	ldd	r25, Y+4	; 0x04
    23c0:	91 83       	std	Z+1, r25	; 0x01
    23c2:	80 83       	st	Z, r24
    23c4:	33 83       	std	Z+3, r19	; 0x03
    23c6:	22 83       	std	Z+2, r18	; 0x02
    23c8:	0e 94 99 14 	call	0x2932	; 0x2932 <sprintf>
    23cc:	0f 90       	pop	r0
    23ce:	0f 90       	pop	r0
    23d0:	0f 90       	pop	r0
    23d2:	0f 90       	pop	r0
	CLCD_VidSendString(CLCD_u8PCharArr);
    23d4:	8b 81       	ldd	r24, Y+3	; 0x03
    23d6:	9c 81       	ldd	r25, Y+4	; 0x04
    23d8:	0e 94 9a 11 	call	0x2334	; 0x2334 <CLCD_VidSendString>

}
    23dc:	0f 90       	pop	r0
    23de:	0f 90       	pop	r0
    23e0:	0f 90       	pop	r0
    23e2:	0f 90       	pop	r0
    23e4:	cf 91       	pop	r28
    23e6:	df 91       	pop	r29
    23e8:	08 95       	ret

000023ea <CLCD_VidSendFloatNumber>:
void CLCD_VidSendFloatNumber(f64 CLCD_u16Number,u8 * CLCD_u8PCharArr){
    23ea:	df 93       	push	r29
    23ec:	cf 93       	push	r28
    23ee:	00 d0       	rcall	.+0      	; 0x23f0 <CLCD_VidSendFloatNumber+0x6>
    23f0:	00 d0       	rcall	.+0      	; 0x23f2 <CLCD_VidSendFloatNumber+0x8>
    23f2:	00 d0       	rcall	.+0      	; 0x23f4 <CLCD_VidSendFloatNumber+0xa>
    23f4:	cd b7       	in	r28, 0x3d	; 61
    23f6:	de b7       	in	r29, 0x3e	; 62
    23f8:	69 83       	std	Y+1, r22	; 0x01
    23fa:	7a 83       	std	Y+2, r23	; 0x02
    23fc:	8b 83       	std	Y+3, r24	; 0x03
    23fe:	9c 83       	std	Y+4, r25	; 0x04
    2400:	5e 83       	std	Y+6, r21	; 0x06
    2402:	4d 83       	std	Y+5, r20	; 0x05

	snprintf(CLCD_u8PCharArr,6,"%f",CLCD_u16Number);
    2404:	8d b7       	in	r24, 0x3d	; 61
    2406:	9e b7       	in	r25, 0x3e	; 62
    2408:	0a 97       	sbiw	r24, 0x0a	; 10
    240a:	0f b6       	in	r0, 0x3f	; 63
    240c:	f8 94       	cli
    240e:	9e bf       	out	0x3e, r25	; 62
    2410:	0f be       	out	0x3f, r0	; 63
    2412:	8d bf       	out	0x3d, r24	; 61
    2414:	ed b7       	in	r30, 0x3d	; 61
    2416:	fe b7       	in	r31, 0x3e	; 62
    2418:	31 96       	adiw	r30, 0x01	; 1
    241a:	8d 81       	ldd	r24, Y+5	; 0x05
    241c:	9e 81       	ldd	r25, Y+6	; 0x06
    241e:	91 83       	std	Z+1, r25	; 0x01
    2420:	80 83       	st	Z, r24
    2422:	86 e0       	ldi	r24, 0x06	; 6
    2424:	90 e0       	ldi	r25, 0x00	; 0
    2426:	93 83       	std	Z+3, r25	; 0x03
    2428:	82 83       	std	Z+2, r24	; 0x02
    242a:	80 e6       	ldi	r24, 0x60	; 96
    242c:	90 e0       	ldi	r25, 0x00	; 0
    242e:	95 83       	std	Z+5, r25	; 0x05
    2430:	84 83       	std	Z+4, r24	; 0x04
    2432:	89 81       	ldd	r24, Y+1	; 0x01
    2434:	9a 81       	ldd	r25, Y+2	; 0x02
    2436:	ab 81       	ldd	r26, Y+3	; 0x03
    2438:	bc 81       	ldd	r27, Y+4	; 0x04
    243a:	86 83       	std	Z+6, r24	; 0x06
    243c:	97 83       	std	Z+7, r25	; 0x07
    243e:	a0 87       	std	Z+8, r26	; 0x08
    2440:	b1 87       	std	Z+9, r27	; 0x09
    2442:	0e 94 68 14 	call	0x28d0	; 0x28d0 <snprintf>
    2446:	8d b7       	in	r24, 0x3d	; 61
    2448:	9e b7       	in	r25, 0x3e	; 62
    244a:	0a 96       	adiw	r24, 0x0a	; 10
    244c:	0f b6       	in	r0, 0x3f	; 63
    244e:	f8 94       	cli
    2450:	9e bf       	out	0x3e, r25	; 62
    2452:	0f be       	out	0x3f, r0	; 63
    2454:	8d bf       	out	0x3d, r24	; 61
	CLCD_VidSendString(CLCD_u8PCharArr);
    2456:	8d 81       	ldd	r24, Y+5	; 0x05
    2458:	9e 81       	ldd	r25, Y+6	; 0x06
    245a:	0e 94 9a 11 	call	0x2334	; 0x2334 <CLCD_VidSendString>

}
    245e:	26 96       	adiw	r28, 0x06	; 6
    2460:	0f b6       	in	r0, 0x3f	; 63
    2462:	f8 94       	cli
    2464:	de bf       	out	0x3e, r29	; 62
    2466:	0f be       	out	0x3f, r0	; 63
    2468:	cd bf       	out	0x3d, r28	; 61
    246a:	cf 91       	pop	r28
    246c:	df 91       	pop	r29
    246e:	08 95       	ret

00002470 <Timer1ICU_VidTaks1>:


#elif Code_Select == 2

u16 Global_u16OnTime, Global_u16Duty;
void Timer1ICU_VidTaks1(void){
    2470:	df 93       	push	r29
    2472:	cf 93       	push	r28
    2474:	cd b7       	in	r28, 0x3d	; 61
    2476:	de b7       	in	r29, 0x3e	; 62
	DIO_VidSetPinValue(Port_B,Pin_2,high);
    2478:	83 e0       	ldi	r24, 0x03	; 3
    247a:	62 e0       	ldi	r22, 0x02	; 2
    247c:	41 e0       	ldi	r20, 0x01	; 1
    247e:	0e 94 c0 0a 	call	0x1580	; 0x1580 <DIO_VidSetPinValue>
	static u16 Local_u8ICUSnap1, Local_u8ICUSnap2, Local_u8ICUSnap3;
	static u8 Local_u8Counter=0;
	if(Local_u8Counter ==0 ){
    2482:	80 91 98 00 	lds	r24, 0x0098
    2486:	88 23       	and	r24, r24
    2488:	51 f4       	brne	.+20     	; 0x249e <Timer1ICU_VidTaks1+0x2e>
		Local_u8ICUSnap1 = TIMER1_VidICURead();
    248a:	0e 94 07 0a 	call	0x140e	; 0x140e <TIMER1_VidICURead>
    248e:	90 93 9e 00 	sts	0x009E, r25
    2492:	80 93 9d 00 	sts	0x009D, r24
		Local_u8Counter = 1;
    2496:	81 e0       	ldi	r24, 0x01	; 1
    2498:	80 93 98 00 	sts	0x0098, r24
    249c:	40 c0       	rjmp	.+128    	; 0x251e <Timer1ICU_VidTaks1+0xae>
	}
	else if(Local_u8Counter ==1 ){
    249e:	80 91 98 00 	lds	r24, 0x0098
    24a2:	81 30       	cpi	r24, 0x01	; 1
    24a4:	e9 f4       	brne	.+58     	; 0x24e0 <Timer1ICU_VidTaks1+0x70>
		Local_u8ICUSnap2 = TIMER1_VidICURead();
    24a6:	0e 94 07 0a 	call	0x140e	; 0x140e <TIMER1_VidICURead>
    24aa:	90 93 9c 00 	sts	0x009C, r25
    24ae:	80 93 9b 00 	sts	0x009B, r24
		Local_u8Counter = 2;
    24b2:	82 e0       	ldi	r24, 0x02	; 2
    24b4:	80 93 98 00 	sts	0x0098, r24
		Global_u16OnTime = Local_u8ICUSnap2 - Local_u8ICUSnap1;
    24b8:	20 91 9b 00 	lds	r18, 0x009B
    24bc:	30 91 9c 00 	lds	r19, 0x009C
    24c0:	80 91 9d 00 	lds	r24, 0x009D
    24c4:	90 91 9e 00 	lds	r25, 0x009E
    24c8:	a9 01       	movw	r20, r18
    24ca:	48 1b       	sub	r20, r24
    24cc:	59 0b       	sbc	r21, r25
    24ce:	ca 01       	movw	r24, r20
    24d0:	90 93 a2 00 	sts	0x00A2, r25
    24d4:	80 93 a1 00 	sts	0x00A1, r24
		TIMER1_VidICU_TriggerStatus(TIMER1_ICU_Falling_Edge);
    24d8:	80 e0       	ldi	r24, 0x00	; 0
    24da:	0e 94 c9 09 	call	0x1392	; 0x1392 <TIMER1_VidICU_TriggerStatus>
    24de:	1f c0       	rjmp	.+62     	; 0x251e <Timer1ICU_VidTaks1+0xae>

	}
	else if(Local_u8Counter ==2 ){
    24e0:	80 91 98 00 	lds	r24, 0x0098
    24e4:	82 30       	cpi	r24, 0x02	; 2
    24e6:	d9 f4       	brne	.+54     	; 0x251e <Timer1ICU_VidTaks1+0xae>
		Local_u8ICUSnap3 = TIMER1_VidICURead();
    24e8:	0e 94 07 0a 	call	0x140e	; 0x140e <TIMER1_VidICURead>
    24ec:	90 93 9a 00 	sts	0x009A, r25
    24f0:	80 93 99 00 	sts	0x0099, r24
		Global_u16Duty = Local_u8ICUSnap3 - Local_u8ICUSnap1;
    24f4:	20 91 99 00 	lds	r18, 0x0099
    24f8:	30 91 9a 00 	lds	r19, 0x009A
    24fc:	80 91 9d 00 	lds	r24, 0x009D
    2500:	90 91 9e 00 	lds	r25, 0x009E
    2504:	a9 01       	movw	r20, r18
    2506:	48 1b       	sub	r20, r24
    2508:	59 0b       	sbc	r21, r25
    250a:	ca 01       	movw	r24, r20
    250c:	90 93 a0 00 	sts	0x00A0, r25
    2510:	80 93 9f 00 	sts	0x009F, r24
		Local_u8Counter = 0;
    2514:	10 92 98 00 	sts	0x0098, r1
		//DIO_VidSetPinValue(Port_B,Pin_3,high);
		TIMER1_VidICU_INT_Status(TIMER1_ICU_INT_Disable);
    2518:	80 e0       	ldi	r24, 0x00	; 0
    251a:	0e 94 aa 09 	call	0x1354	; 0x1354 <TIMER1_VidICU_INT_Status>
	}
}
    251e:	cf 91       	pop	r28
    2520:	df 91       	pop	r29
    2522:	08 95       	ret

00002524 <main>:
extern st_TIMER1_INIT timer1_init;
void main(void){
    2524:	df 93       	push	r29
    2526:	cf 93       	push	r28
    2528:	cd b7       	in	r28, 0x3d	; 61
    252a:	de b7       	in	r29, 0x3e	; 62
    252c:	e6 97       	sbiw	r28, 0x36	; 54
    252e:	0f b6       	in	r0, 0x3f	; 63
    2530:	f8 94       	cli
    2532:	de bf       	out	0x3e, r29	; 62
    2534:	0f be       	out	0x3f, r0	; 63
    2536:	cd bf       	out	0x3d, r28	; 61

	u8 Local_u8OnTime[20]={0};
    2538:	84 e1       	ldi	r24, 0x14	; 20
    253a:	fe 01       	movw	r30, r28
    253c:	3f 96       	adiw	r30, 0x0f	; 15
    253e:	df 01       	movw	r26, r30
    2540:	98 2f       	mov	r25, r24
    2542:	1d 92       	st	X+, r1
    2544:	9a 95       	dec	r25
    2546:	e9 f7       	brne	.-6      	; 0x2542 <main+0x1e>
	u8 Local_u8Duty[20]={0};
    2548:	84 e1       	ldi	r24, 0x14	; 20
    254a:	fe 01       	movw	r30, r28
    254c:	b3 96       	adiw	r30, 0x23	; 35
    254e:	df 01       	movw	r26, r30
    2550:	98 2f       	mov	r25, r24
    2552:	1d 92       	st	X+, r1
    2554:	9a 95       	dec	r25
    2556:	e9 f7       	brne	.-6      	; 0x2552 <main+0x2e>
	timer1_init.Timer_Mode = Normal;
    2558:	10 92 88 00 	sts	0x0088, r1
	timer1_init.Interrupt_type = Over_FLOW_INT;
    255c:	83 e0       	ldi	r24, 0x03	; 3
    255e:	80 93 89 00 	sts	0x0089, r24
	timer1_init.Interrupt_status = TIMER1_INT_Disable;
    2562:	10 92 8a 00 	sts	0x008A, r1
	DIO_VidSetPinDirection(Port_B,Pin_2,output);
    2566:	83 e0       	ldi	r24, 0x03	; 3
    2568:	62 e0       	ldi	r22, 0x02	; 2
    256a:	41 e0       	ldi	r20, 0x01	; 1
    256c:	0e 94 c2 0b 	call	0x1784	; 0x1784 <DIO_VidSetPinDirection>
	//DIO_VidSetPinDirection(Port_B,Pin_3,output);
	/*Setting LCD Directions*/
	DIO_VidSetPinDirection(CLCD_CTRL_PORT,CLCD_RS_PIN,output);
    2570:	84 e0       	ldi	r24, 0x04	; 4
    2572:	65 e0       	ldi	r22, 0x05	; 5
    2574:	41 e0       	ldi	r20, 0x01	; 1
    2576:	0e 94 c2 0b 	call	0x1784	; 0x1784 <DIO_VidSetPinDirection>
	DIO_VidSetPinDirection(CLCD_CTRL_PORT,CLCD_RW_PIN,output);
    257a:	84 e0       	ldi	r24, 0x04	; 4
    257c:	66 e0       	ldi	r22, 0x06	; 6
    257e:	41 e0       	ldi	r20, 0x01	; 1
    2580:	0e 94 c2 0b 	call	0x1784	; 0x1784 <DIO_VidSetPinDirection>
	DIO_VidSetPinDirection(CLCD_CTRL_PORT,CLCD_EN_PIN,output);
    2584:	84 e0       	ldi	r24, 0x04	; 4
    2586:	67 e0       	ldi	r22, 0x07	; 7
    2588:	41 e0       	ldi	r20, 0x01	; 1
    258a:	0e 94 c2 0b 	call	0x1784	; 0x1784 <DIO_VidSetPinDirection>
	DIO_VidSetPortDirection(CLCD_DATA_PORT, output);
    258e:	82 e0       	ldi	r24, 0x02	; 2
    2590:	61 e0       	ldi	r22, 0x01	; 1
    2592:	0e 94 8a 0d 	call	0x1b14	; 0x1b14 <DIO_VidSetPortDirection>
	TIMER1_ICU_SetCallBack(Timer1ICU_VidTaks1);
    2596:	88 e3       	ldi	r24, 0x38	; 56
    2598:	92 e1       	ldi	r25, 0x12	; 18
    259a:	0e 94 12 0a 	call	0x1424	; 0x1424 <TIMER1_ICU_SetCallBack>
	TIMER1_VidInit(&timer1_init);				/*Initialize timer1*/
    259e:	88 e8       	ldi	r24, 0x88	; 136
    25a0:	90 e0       	ldi	r25, 0x00	; 0
    25a2:	0e 94 7c 07 	call	0xef8	; 0xef8 <TIMER1_VidInit>
	GIE_VidEnable();
    25a6:	0e 94 a4 0a 	call	0x1548	; 0x1548 <GIE_VidEnable>
	TIMER1_VidICU_TriggerStatus(TIMER1_ICU_Rising_Edge);
    25aa:	81 e0       	ldi	r24, 0x01	; 1
    25ac:	0e 94 c9 09 	call	0x1392	; 0x1392 <TIMER1_VidICU_TriggerStatus>
	TIMER1_VidICU_INT_Status(TIMER1_ICU_INT_Enable);
    25b0:	81 e0       	ldi	r24, 0x01	; 1
    25b2:	0e 94 aa 09 	call	0x1354	; 0x1354 <TIMER1_VidICU_INT_Status>


	CLCD_VidInit(); /*Initializes the LCD*/
    25b6:	0e 94 ac 10 	call	0x2158	; 0x2158 <CLCD_VidInit>



	while(1){
		CLCD_VidGotoXY(0,0);
    25ba:	80 e0       	ldi	r24, 0x00	; 0
    25bc:	60 e0       	ldi	r22, 0x00	; 0
    25be:	0e 94 3a 11 	call	0x2274	; 0x2274 <CLCD_VidGotoXY>
		snprintf(Local_u8OnTime,20,"On Time = %i",Global_u16OnTime);
    25c2:	20 91 a1 00 	lds	r18, 0x00A1
    25c6:	30 91 a2 00 	lds	r19, 0x00A2
    25ca:	ad b7       	in	r26, 0x3d	; 61
    25cc:	be b7       	in	r27, 0x3e	; 62
    25ce:	18 97       	sbiw	r26, 0x08	; 8
    25d0:	0f b6       	in	r0, 0x3f	; 63
    25d2:	f8 94       	cli
    25d4:	be bf       	out	0x3e, r27	; 62
    25d6:	0f be       	out	0x3f, r0	; 63
    25d8:	ad bf       	out	0x3d, r26	; 61
    25da:	ed b7       	in	r30, 0x3d	; 61
    25dc:	fe b7       	in	r31, 0x3e	; 62
    25de:	31 96       	adiw	r30, 0x01	; 1
    25e0:	ce 01       	movw	r24, r28
    25e2:	0f 96       	adiw	r24, 0x0f	; 15
    25e4:	91 83       	std	Z+1, r25	; 0x01
    25e6:	80 83       	st	Z, r24
    25e8:	84 e1       	ldi	r24, 0x14	; 20
    25ea:	90 e0       	ldi	r25, 0x00	; 0
    25ec:	93 83       	std	Z+3, r25	; 0x03
    25ee:	82 83       	std	Z+2, r24	; 0x02
    25f0:	83 e6       	ldi	r24, 0x63	; 99
    25f2:	90 e0       	ldi	r25, 0x00	; 0
    25f4:	95 83       	std	Z+5, r25	; 0x05
    25f6:	84 83       	std	Z+4, r24	; 0x04
    25f8:	37 83       	std	Z+7, r19	; 0x07
    25fa:	26 83       	std	Z+6, r18	; 0x06
    25fc:	0e 94 68 14 	call	0x28d0	; 0x28d0 <snprintf>
    2600:	8d b7       	in	r24, 0x3d	; 61
    2602:	9e b7       	in	r25, 0x3e	; 62
    2604:	08 96       	adiw	r24, 0x08	; 8
    2606:	0f b6       	in	r0, 0x3f	; 63
    2608:	f8 94       	cli
    260a:	9e bf       	out	0x3e, r25	; 62
    260c:	0f be       	out	0x3f, r0	; 63
    260e:	8d bf       	out	0x3d, r24	; 61
		CLCD_VidSendString(Local_u8OnTime);
    2610:	ce 01       	movw	r24, r28
    2612:	0f 96       	adiw	r24, 0x0f	; 15
    2614:	0e 94 9a 11 	call	0x2334	; 0x2334 <CLCD_VidSendString>
		CLCD_VidGotoXY(1,0);
    2618:	81 e0       	ldi	r24, 0x01	; 1
    261a:	60 e0       	ldi	r22, 0x00	; 0
    261c:	0e 94 3a 11 	call	0x2274	; 0x2274 <CLCD_VidGotoXY>
		snprintf(Local_u8Duty,20,"Duty = %i",Global_u16Duty);
    2620:	20 91 9f 00 	lds	r18, 0x009F
    2624:	30 91 a0 00 	lds	r19, 0x00A0
    2628:	ad b7       	in	r26, 0x3d	; 61
    262a:	be b7       	in	r27, 0x3e	; 62
    262c:	18 97       	sbiw	r26, 0x08	; 8
    262e:	0f b6       	in	r0, 0x3f	; 63
    2630:	f8 94       	cli
    2632:	be bf       	out	0x3e, r27	; 62
    2634:	0f be       	out	0x3f, r0	; 63
    2636:	ad bf       	out	0x3d, r26	; 61
    2638:	ed b7       	in	r30, 0x3d	; 61
    263a:	fe b7       	in	r31, 0x3e	; 62
    263c:	31 96       	adiw	r30, 0x01	; 1
    263e:	ce 01       	movw	r24, r28
    2640:	83 96       	adiw	r24, 0x23	; 35
    2642:	91 83       	std	Z+1, r25	; 0x01
    2644:	80 83       	st	Z, r24
    2646:	84 e1       	ldi	r24, 0x14	; 20
    2648:	90 e0       	ldi	r25, 0x00	; 0
    264a:	93 83       	std	Z+3, r25	; 0x03
    264c:	82 83       	std	Z+2, r24	; 0x02
    264e:	80 e7       	ldi	r24, 0x70	; 112
    2650:	90 e0       	ldi	r25, 0x00	; 0
    2652:	95 83       	std	Z+5, r25	; 0x05
    2654:	84 83       	std	Z+4, r24	; 0x04
    2656:	37 83       	std	Z+7, r19	; 0x07
    2658:	26 83       	std	Z+6, r18	; 0x06
    265a:	0e 94 68 14 	call	0x28d0	; 0x28d0 <snprintf>
    265e:	8d b7       	in	r24, 0x3d	; 61
    2660:	9e b7       	in	r25, 0x3e	; 62
    2662:	08 96       	adiw	r24, 0x08	; 8
    2664:	0f b6       	in	r0, 0x3f	; 63
    2666:	f8 94       	cli
    2668:	9e bf       	out	0x3e, r25	; 62
    266a:	0f be       	out	0x3f, r0	; 63
    266c:	8d bf       	out	0x3d, r24	; 61
		CLCD_VidSendString(Local_u8Duty);
    266e:	ce 01       	movw	r24, r28
    2670:	83 96       	adiw	r24, 0x23	; 35
    2672:	0e 94 9a 11 	call	0x2334	; 0x2334 <CLCD_VidSendString>
    2676:	80 e0       	ldi	r24, 0x00	; 0
    2678:	90 e0       	ldi	r25, 0x00	; 0
    267a:	aa e7       	ldi	r26, 0x7A	; 122
    267c:	b4 e4       	ldi	r27, 0x44	; 68
    267e:	8b 87       	std	Y+11, r24	; 0x0b
    2680:	9c 87       	std	Y+12, r25	; 0x0c
    2682:	ad 87       	std	Y+13, r26	; 0x0d
    2684:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2686:	6b 85       	ldd	r22, Y+11	; 0x0b
    2688:	7c 85       	ldd	r23, Y+12	; 0x0c
    268a:	8d 85       	ldd	r24, Y+13	; 0x0d
    268c:	9e 85       	ldd	r25, Y+14	; 0x0e
    268e:	20 e0       	ldi	r18, 0x00	; 0
    2690:	30 e0       	ldi	r19, 0x00	; 0
    2692:	4a ef       	ldi	r20, 0xFA	; 250
    2694:	54 e4       	ldi	r21, 0x44	; 68
    2696:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    269a:	dc 01       	movw	r26, r24
    269c:	cb 01       	movw	r24, r22
    269e:	8f 83       	std	Y+7, r24	; 0x07
    26a0:	98 87       	std	Y+8, r25	; 0x08
    26a2:	a9 87       	std	Y+9, r26	; 0x09
    26a4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    26a6:	6f 81       	ldd	r22, Y+7	; 0x07
    26a8:	78 85       	ldd	r23, Y+8	; 0x08
    26aa:	89 85       	ldd	r24, Y+9	; 0x09
    26ac:	9a 85       	ldd	r25, Y+10	; 0x0a
    26ae:	20 e0       	ldi	r18, 0x00	; 0
    26b0:	30 e0       	ldi	r19, 0x00	; 0
    26b2:	40 e8       	ldi	r20, 0x80	; 128
    26b4:	5f e3       	ldi	r21, 0x3F	; 63
    26b6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    26ba:	88 23       	and	r24, r24
    26bc:	2c f4       	brge	.+10     	; 0x26c8 <main+0x1a4>
		__ticks = 1;
    26be:	81 e0       	ldi	r24, 0x01	; 1
    26c0:	90 e0       	ldi	r25, 0x00	; 0
    26c2:	9e 83       	std	Y+6, r25	; 0x06
    26c4:	8d 83       	std	Y+5, r24	; 0x05
    26c6:	3f c0       	rjmp	.+126    	; 0x2746 <main+0x222>
	else if (__tmp > 65535)
    26c8:	6f 81       	ldd	r22, Y+7	; 0x07
    26ca:	78 85       	ldd	r23, Y+8	; 0x08
    26cc:	89 85       	ldd	r24, Y+9	; 0x09
    26ce:	9a 85       	ldd	r25, Y+10	; 0x0a
    26d0:	20 e0       	ldi	r18, 0x00	; 0
    26d2:	3f ef       	ldi	r19, 0xFF	; 255
    26d4:	4f e7       	ldi	r20, 0x7F	; 127
    26d6:	57 e4       	ldi	r21, 0x47	; 71
    26d8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    26dc:	18 16       	cp	r1, r24
    26de:	4c f5       	brge	.+82     	; 0x2732 <main+0x20e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26e0:	6b 85       	ldd	r22, Y+11	; 0x0b
    26e2:	7c 85       	ldd	r23, Y+12	; 0x0c
    26e4:	8d 85       	ldd	r24, Y+13	; 0x0d
    26e6:	9e 85       	ldd	r25, Y+14	; 0x0e
    26e8:	20 e0       	ldi	r18, 0x00	; 0
    26ea:	30 e0       	ldi	r19, 0x00	; 0
    26ec:	40 e2       	ldi	r20, 0x20	; 32
    26ee:	51 e4       	ldi	r21, 0x41	; 65
    26f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26f4:	dc 01       	movw	r26, r24
    26f6:	cb 01       	movw	r24, r22
    26f8:	bc 01       	movw	r22, r24
    26fa:	cd 01       	movw	r24, r26
    26fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2700:	dc 01       	movw	r26, r24
    2702:	cb 01       	movw	r24, r22
    2704:	9e 83       	std	Y+6, r25	; 0x06
    2706:	8d 83       	std	Y+5, r24	; 0x05
    2708:	0f c0       	rjmp	.+30     	; 0x2728 <main+0x204>
    270a:	88 ec       	ldi	r24, 0xC8	; 200
    270c:	90 e0       	ldi	r25, 0x00	; 0
    270e:	9c 83       	std	Y+4, r25	; 0x04
    2710:	8b 83       	std	Y+3, r24	; 0x03
    2712:	8b 81       	ldd	r24, Y+3	; 0x03
    2714:	9c 81       	ldd	r25, Y+4	; 0x04
    2716:	01 97       	sbiw	r24, 0x01	; 1
    2718:	f1 f7       	brne	.-4      	; 0x2716 <main+0x1f2>
    271a:	9c 83       	std	Y+4, r25	; 0x04
    271c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    271e:	8d 81       	ldd	r24, Y+5	; 0x05
    2720:	9e 81       	ldd	r25, Y+6	; 0x06
    2722:	01 97       	sbiw	r24, 0x01	; 1
    2724:	9e 83       	std	Y+6, r25	; 0x06
    2726:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2728:	8d 81       	ldd	r24, Y+5	; 0x05
    272a:	9e 81       	ldd	r25, Y+6	; 0x06
    272c:	00 97       	sbiw	r24, 0x00	; 0
    272e:	69 f7       	brne	.-38     	; 0x270a <main+0x1e6>
    2730:	44 cf       	rjmp	.-376    	; 0x25ba <main+0x96>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2732:	6f 81       	ldd	r22, Y+7	; 0x07
    2734:	78 85       	ldd	r23, Y+8	; 0x08
    2736:	89 85       	ldd	r24, Y+9	; 0x09
    2738:	9a 85       	ldd	r25, Y+10	; 0x0a
    273a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    273e:	dc 01       	movw	r26, r24
    2740:	cb 01       	movw	r24, r22
    2742:	9e 83       	std	Y+6, r25	; 0x06
    2744:	8d 83       	std	Y+5, r24	; 0x05
    2746:	8d 81       	ldd	r24, Y+5	; 0x05
    2748:	9e 81       	ldd	r25, Y+6	; 0x06
    274a:	9a 83       	std	Y+2, r25	; 0x02
    274c:	89 83       	std	Y+1, r24	; 0x01
    274e:	89 81       	ldd	r24, Y+1	; 0x01
    2750:	9a 81       	ldd	r25, Y+2	; 0x02
    2752:	01 97       	sbiw	r24, 0x01	; 1
    2754:	f1 f7       	brne	.-4      	; 0x2752 <main+0x22e>
    2756:	9a 83       	std	Y+2, r25	; 0x02
    2758:	89 83       	std	Y+1, r24	; 0x01
    275a:	2f cf       	rjmp	.-418    	; 0x25ba <main+0x96>

0000275c <__mulsi3>:
    275c:	62 9f       	mul	r22, r18
    275e:	d0 01       	movw	r26, r0
    2760:	73 9f       	mul	r23, r19
    2762:	f0 01       	movw	r30, r0
    2764:	82 9f       	mul	r24, r18
    2766:	e0 0d       	add	r30, r0
    2768:	f1 1d       	adc	r31, r1
    276a:	64 9f       	mul	r22, r20
    276c:	e0 0d       	add	r30, r0
    276e:	f1 1d       	adc	r31, r1
    2770:	92 9f       	mul	r25, r18
    2772:	f0 0d       	add	r31, r0
    2774:	83 9f       	mul	r24, r19
    2776:	f0 0d       	add	r31, r0
    2778:	74 9f       	mul	r23, r20
    277a:	f0 0d       	add	r31, r0
    277c:	65 9f       	mul	r22, r21
    277e:	f0 0d       	add	r31, r0
    2780:	99 27       	eor	r25, r25
    2782:	72 9f       	mul	r23, r18
    2784:	b0 0d       	add	r27, r0
    2786:	e1 1d       	adc	r30, r1
    2788:	f9 1f       	adc	r31, r25
    278a:	63 9f       	mul	r22, r19
    278c:	b0 0d       	add	r27, r0
    278e:	e1 1d       	adc	r30, r1
    2790:	f9 1f       	adc	r31, r25
    2792:	bd 01       	movw	r22, r26
    2794:	cf 01       	movw	r24, r30
    2796:	11 24       	eor	r1, r1
    2798:	08 95       	ret

0000279a <__divmodhi4>:
    279a:	97 fb       	bst	r25, 7
    279c:	09 2e       	mov	r0, r25
    279e:	07 26       	eor	r0, r23
    27a0:	0a d0       	rcall	.+20     	; 0x27b6 <__divmodhi4_neg1>
    27a2:	77 fd       	sbrc	r23, 7
    27a4:	04 d0       	rcall	.+8      	; 0x27ae <__divmodhi4_neg2>
    27a6:	49 d0       	rcall	.+146    	; 0x283a <__udivmodhi4>
    27a8:	06 d0       	rcall	.+12     	; 0x27b6 <__divmodhi4_neg1>
    27aa:	00 20       	and	r0, r0
    27ac:	1a f4       	brpl	.+6      	; 0x27b4 <__divmodhi4_exit>

000027ae <__divmodhi4_neg2>:
    27ae:	70 95       	com	r23
    27b0:	61 95       	neg	r22
    27b2:	7f 4f       	sbci	r23, 0xFF	; 255

000027b4 <__divmodhi4_exit>:
    27b4:	08 95       	ret

000027b6 <__divmodhi4_neg1>:
    27b6:	f6 f7       	brtc	.-4      	; 0x27b4 <__divmodhi4_exit>
    27b8:	90 95       	com	r25
    27ba:	81 95       	neg	r24
    27bc:	9f 4f       	sbci	r25, 0xFF	; 255
    27be:	08 95       	ret

000027c0 <__udivmodsi4>:
    27c0:	a1 e2       	ldi	r26, 0x21	; 33
    27c2:	1a 2e       	mov	r1, r26
    27c4:	aa 1b       	sub	r26, r26
    27c6:	bb 1b       	sub	r27, r27
    27c8:	fd 01       	movw	r30, r26
    27ca:	0d c0       	rjmp	.+26     	; 0x27e6 <__udivmodsi4_ep>

000027cc <__udivmodsi4_loop>:
    27cc:	aa 1f       	adc	r26, r26
    27ce:	bb 1f       	adc	r27, r27
    27d0:	ee 1f       	adc	r30, r30
    27d2:	ff 1f       	adc	r31, r31
    27d4:	a2 17       	cp	r26, r18
    27d6:	b3 07       	cpc	r27, r19
    27d8:	e4 07       	cpc	r30, r20
    27da:	f5 07       	cpc	r31, r21
    27dc:	20 f0       	brcs	.+8      	; 0x27e6 <__udivmodsi4_ep>
    27de:	a2 1b       	sub	r26, r18
    27e0:	b3 0b       	sbc	r27, r19
    27e2:	e4 0b       	sbc	r30, r20
    27e4:	f5 0b       	sbc	r31, r21

000027e6 <__udivmodsi4_ep>:
    27e6:	66 1f       	adc	r22, r22
    27e8:	77 1f       	adc	r23, r23
    27ea:	88 1f       	adc	r24, r24
    27ec:	99 1f       	adc	r25, r25
    27ee:	1a 94       	dec	r1
    27f0:	69 f7       	brne	.-38     	; 0x27cc <__udivmodsi4_loop>
    27f2:	60 95       	com	r22
    27f4:	70 95       	com	r23
    27f6:	80 95       	com	r24
    27f8:	90 95       	com	r25
    27fa:	9b 01       	movw	r18, r22
    27fc:	ac 01       	movw	r20, r24
    27fe:	bd 01       	movw	r22, r26
    2800:	cf 01       	movw	r24, r30
    2802:	08 95       	ret

00002804 <__divmodsi4>:
    2804:	97 fb       	bst	r25, 7
    2806:	09 2e       	mov	r0, r25
    2808:	05 26       	eor	r0, r21
    280a:	0e d0       	rcall	.+28     	; 0x2828 <__divmodsi4_neg1>
    280c:	57 fd       	sbrc	r21, 7
    280e:	04 d0       	rcall	.+8      	; 0x2818 <__divmodsi4_neg2>
    2810:	d7 df       	rcall	.-82     	; 0x27c0 <__udivmodsi4>
    2812:	0a d0       	rcall	.+20     	; 0x2828 <__divmodsi4_neg1>
    2814:	00 1c       	adc	r0, r0
    2816:	38 f4       	brcc	.+14     	; 0x2826 <__divmodsi4_exit>

00002818 <__divmodsi4_neg2>:
    2818:	50 95       	com	r21
    281a:	40 95       	com	r20
    281c:	30 95       	com	r19
    281e:	21 95       	neg	r18
    2820:	3f 4f       	sbci	r19, 0xFF	; 255
    2822:	4f 4f       	sbci	r20, 0xFF	; 255
    2824:	5f 4f       	sbci	r21, 0xFF	; 255

00002826 <__divmodsi4_exit>:
    2826:	08 95       	ret

00002828 <__divmodsi4_neg1>:
    2828:	f6 f7       	brtc	.-4      	; 0x2826 <__divmodsi4_exit>
    282a:	90 95       	com	r25
    282c:	80 95       	com	r24
    282e:	70 95       	com	r23
    2830:	61 95       	neg	r22
    2832:	7f 4f       	sbci	r23, 0xFF	; 255
    2834:	8f 4f       	sbci	r24, 0xFF	; 255
    2836:	9f 4f       	sbci	r25, 0xFF	; 255
    2838:	08 95       	ret

0000283a <__udivmodhi4>:
    283a:	aa 1b       	sub	r26, r26
    283c:	bb 1b       	sub	r27, r27
    283e:	51 e1       	ldi	r21, 0x11	; 17
    2840:	07 c0       	rjmp	.+14     	; 0x2850 <__udivmodhi4_ep>

00002842 <__udivmodhi4_loop>:
    2842:	aa 1f       	adc	r26, r26
    2844:	bb 1f       	adc	r27, r27
    2846:	a6 17       	cp	r26, r22
    2848:	b7 07       	cpc	r27, r23
    284a:	10 f0       	brcs	.+4      	; 0x2850 <__udivmodhi4_ep>
    284c:	a6 1b       	sub	r26, r22
    284e:	b7 0b       	sbc	r27, r23

00002850 <__udivmodhi4_ep>:
    2850:	88 1f       	adc	r24, r24
    2852:	99 1f       	adc	r25, r25
    2854:	5a 95       	dec	r21
    2856:	a9 f7       	brne	.-22     	; 0x2842 <__udivmodhi4_loop>
    2858:	80 95       	com	r24
    285a:	90 95       	com	r25
    285c:	bc 01       	movw	r22, r24
    285e:	cd 01       	movw	r24, r26
    2860:	08 95       	ret

00002862 <__prologue_saves__>:
    2862:	2f 92       	push	r2
    2864:	3f 92       	push	r3
    2866:	4f 92       	push	r4
    2868:	5f 92       	push	r5
    286a:	6f 92       	push	r6
    286c:	7f 92       	push	r7
    286e:	8f 92       	push	r8
    2870:	9f 92       	push	r9
    2872:	af 92       	push	r10
    2874:	bf 92       	push	r11
    2876:	cf 92       	push	r12
    2878:	df 92       	push	r13
    287a:	ef 92       	push	r14
    287c:	ff 92       	push	r15
    287e:	0f 93       	push	r16
    2880:	1f 93       	push	r17
    2882:	cf 93       	push	r28
    2884:	df 93       	push	r29
    2886:	cd b7       	in	r28, 0x3d	; 61
    2888:	de b7       	in	r29, 0x3e	; 62
    288a:	ca 1b       	sub	r28, r26
    288c:	db 0b       	sbc	r29, r27
    288e:	0f b6       	in	r0, 0x3f	; 63
    2890:	f8 94       	cli
    2892:	de bf       	out	0x3e, r29	; 62
    2894:	0f be       	out	0x3f, r0	; 63
    2896:	cd bf       	out	0x3d, r28	; 61
    2898:	09 94       	ijmp

0000289a <__epilogue_restores__>:
    289a:	2a 88       	ldd	r2, Y+18	; 0x12
    289c:	39 88       	ldd	r3, Y+17	; 0x11
    289e:	48 88       	ldd	r4, Y+16	; 0x10
    28a0:	5f 84       	ldd	r5, Y+15	; 0x0f
    28a2:	6e 84       	ldd	r6, Y+14	; 0x0e
    28a4:	7d 84       	ldd	r7, Y+13	; 0x0d
    28a6:	8c 84       	ldd	r8, Y+12	; 0x0c
    28a8:	9b 84       	ldd	r9, Y+11	; 0x0b
    28aa:	aa 84       	ldd	r10, Y+10	; 0x0a
    28ac:	b9 84       	ldd	r11, Y+9	; 0x09
    28ae:	c8 84       	ldd	r12, Y+8	; 0x08
    28b0:	df 80       	ldd	r13, Y+7	; 0x07
    28b2:	ee 80       	ldd	r14, Y+6	; 0x06
    28b4:	fd 80       	ldd	r15, Y+5	; 0x05
    28b6:	0c 81       	ldd	r16, Y+4	; 0x04
    28b8:	1b 81       	ldd	r17, Y+3	; 0x03
    28ba:	aa 81       	ldd	r26, Y+2	; 0x02
    28bc:	b9 81       	ldd	r27, Y+1	; 0x01
    28be:	ce 0f       	add	r28, r30
    28c0:	d1 1d       	adc	r29, r1
    28c2:	0f b6       	in	r0, 0x3f	; 63
    28c4:	f8 94       	cli
    28c6:	de bf       	out	0x3e, r29	; 62
    28c8:	0f be       	out	0x3f, r0	; 63
    28ca:	cd bf       	out	0x3d, r28	; 61
    28cc:	ed 01       	movw	r28, r26
    28ce:	08 95       	ret

000028d0 <snprintf>:
    28d0:	ae e0       	ldi	r26, 0x0E	; 14
    28d2:	b0 e0       	ldi	r27, 0x00	; 0
    28d4:	ee e6       	ldi	r30, 0x6E	; 110
    28d6:	f4 e1       	ldi	r31, 0x14	; 20
    28d8:	0c 94 3f 14 	jmp	0x287e	; 0x287e <__prologue_saves__+0x1c>
    28dc:	0d 89       	ldd	r16, Y+21	; 0x15
    28de:	1e 89       	ldd	r17, Y+22	; 0x16
    28e0:	8f 89       	ldd	r24, Y+23	; 0x17
    28e2:	98 8d       	ldd	r25, Y+24	; 0x18
    28e4:	97 ff       	sbrs	r25, 7
    28e6:	02 c0       	rjmp	.+4      	; 0x28ec <snprintf+0x1c>
    28e8:	80 e0       	ldi	r24, 0x00	; 0
    28ea:	90 e8       	ldi	r25, 0x80	; 128
    28ec:	01 97       	sbiw	r24, 0x01	; 1
    28ee:	9e 83       	std	Y+6, r25	; 0x06
    28f0:	8d 83       	std	Y+5, r24	; 0x05
    28f2:	1a 83       	std	Y+2, r17	; 0x02
    28f4:	09 83       	std	Y+1, r16	; 0x01
    28f6:	86 e0       	ldi	r24, 0x06	; 6
    28f8:	8c 83       	std	Y+4, r24	; 0x04
    28fa:	9e 01       	movw	r18, r28
    28fc:	25 5e       	subi	r18, 0xE5	; 229
    28fe:	3f 4f       	sbci	r19, 0xFF	; 255
    2900:	ce 01       	movw	r24, r28
    2902:	01 96       	adiw	r24, 0x01	; 1
    2904:	69 8d       	ldd	r22, Y+25	; 0x19
    2906:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2908:	a9 01       	movw	r20, r18
    290a:	0e 94 bd 14 	call	0x297a	; 0x297a <vfprintf>
    290e:	4d 81       	ldd	r20, Y+5	; 0x05
    2910:	5e 81       	ldd	r21, Y+6	; 0x06
    2912:	57 fd       	sbrc	r21, 7
    2914:	0a c0       	rjmp	.+20     	; 0x292a <snprintf+0x5a>
    2916:	2f 81       	ldd	r18, Y+7	; 0x07
    2918:	38 85       	ldd	r19, Y+8	; 0x08
    291a:	42 17       	cp	r20, r18
    291c:	53 07       	cpc	r21, r19
    291e:	0c f4       	brge	.+2      	; 0x2922 <snprintf+0x52>
    2920:	9a 01       	movw	r18, r20
    2922:	02 0f       	add	r16, r18
    2924:	13 1f       	adc	r17, r19
    2926:	f8 01       	movw	r30, r16
    2928:	10 82       	st	Z, r1
    292a:	2e 96       	adiw	r28, 0x0e	; 14
    292c:	e4 e0       	ldi	r30, 0x04	; 4
    292e:	0c 94 5b 14 	jmp	0x28b6	; 0x28b6 <__epilogue_restores__+0x1c>

00002932 <sprintf>:
    2932:	ae e0       	ldi	r26, 0x0E	; 14
    2934:	b0 e0       	ldi	r27, 0x00	; 0
    2936:	ef e9       	ldi	r30, 0x9F	; 159
    2938:	f4 e1       	ldi	r31, 0x14	; 20
    293a:	0c 94 3f 14 	jmp	0x287e	; 0x287e <__prologue_saves__+0x1c>
    293e:	0d 89       	ldd	r16, Y+21	; 0x15
    2940:	1e 89       	ldd	r17, Y+22	; 0x16
    2942:	86 e0       	ldi	r24, 0x06	; 6
    2944:	8c 83       	std	Y+4, r24	; 0x04
    2946:	1a 83       	std	Y+2, r17	; 0x02
    2948:	09 83       	std	Y+1, r16	; 0x01
    294a:	8f ef       	ldi	r24, 0xFF	; 255
    294c:	9f e7       	ldi	r25, 0x7F	; 127
    294e:	9e 83       	std	Y+6, r25	; 0x06
    2950:	8d 83       	std	Y+5, r24	; 0x05
    2952:	9e 01       	movw	r18, r28
    2954:	27 5e       	subi	r18, 0xE7	; 231
    2956:	3f 4f       	sbci	r19, 0xFF	; 255
    2958:	ce 01       	movw	r24, r28
    295a:	01 96       	adiw	r24, 0x01	; 1
    295c:	6f 89       	ldd	r22, Y+23	; 0x17
    295e:	78 8d       	ldd	r23, Y+24	; 0x18
    2960:	a9 01       	movw	r20, r18
    2962:	0e 94 bd 14 	call	0x297a	; 0x297a <vfprintf>
    2966:	2f 81       	ldd	r18, Y+7	; 0x07
    2968:	38 85       	ldd	r19, Y+8	; 0x08
    296a:	02 0f       	add	r16, r18
    296c:	13 1f       	adc	r17, r19
    296e:	f8 01       	movw	r30, r16
    2970:	10 82       	st	Z, r1
    2972:	2e 96       	adiw	r28, 0x0e	; 14
    2974:	e4 e0       	ldi	r30, 0x04	; 4
    2976:	0c 94 5b 14 	jmp	0x28b6	; 0x28b6 <__epilogue_restores__+0x1c>

0000297a <vfprintf>:
    297a:	ab e0       	ldi	r26, 0x0B	; 11
    297c:	b0 e0       	ldi	r27, 0x00	; 0
    297e:	e3 ec       	ldi	r30, 0xC3	; 195
    2980:	f4 e1       	ldi	r31, 0x14	; 20
    2982:	0c 94 31 14 	jmp	0x2862	; 0x2862 <__prologue_saves__>
    2986:	3c 01       	movw	r6, r24
    2988:	2b 01       	movw	r4, r22
    298a:	5a 01       	movw	r10, r20
    298c:	fc 01       	movw	r30, r24
    298e:	17 82       	std	Z+7, r1	; 0x07
    2990:	16 82       	std	Z+6, r1	; 0x06
    2992:	83 81       	ldd	r24, Z+3	; 0x03
    2994:	81 fd       	sbrc	r24, 1
    2996:	03 c0       	rjmp	.+6      	; 0x299e <vfprintf+0x24>
    2998:	6f ef       	ldi	r22, 0xFF	; 255
    299a:	7f ef       	ldi	r23, 0xFF	; 255
    299c:	c6 c1       	rjmp	.+908    	; 0x2d2a <vfprintf+0x3b0>
    299e:	9a e0       	ldi	r25, 0x0A	; 10
    29a0:	89 2e       	mov	r8, r25
    29a2:	1e 01       	movw	r2, r28
    29a4:	08 94       	sec
    29a6:	21 1c       	adc	r2, r1
    29a8:	31 1c       	adc	r3, r1
    29aa:	f3 01       	movw	r30, r6
    29ac:	23 81       	ldd	r18, Z+3	; 0x03
    29ae:	f2 01       	movw	r30, r4
    29b0:	23 fd       	sbrc	r18, 3
    29b2:	85 91       	lpm	r24, Z+
    29b4:	23 ff       	sbrs	r18, 3
    29b6:	81 91       	ld	r24, Z+
    29b8:	2f 01       	movw	r4, r30
    29ba:	88 23       	and	r24, r24
    29bc:	09 f4       	brne	.+2      	; 0x29c0 <vfprintf+0x46>
    29be:	b2 c1       	rjmp	.+868    	; 0x2d24 <vfprintf+0x3aa>
    29c0:	85 32       	cpi	r24, 0x25	; 37
    29c2:	39 f4       	brne	.+14     	; 0x29d2 <vfprintf+0x58>
    29c4:	23 fd       	sbrc	r18, 3
    29c6:	85 91       	lpm	r24, Z+
    29c8:	23 ff       	sbrs	r18, 3
    29ca:	81 91       	ld	r24, Z+
    29cc:	2f 01       	movw	r4, r30
    29ce:	85 32       	cpi	r24, 0x25	; 37
    29d0:	29 f4       	brne	.+10     	; 0x29dc <vfprintf+0x62>
    29d2:	90 e0       	ldi	r25, 0x00	; 0
    29d4:	b3 01       	movw	r22, r6
    29d6:	0e 94 b0 16 	call	0x2d60	; 0x2d60 <fputc>
    29da:	e7 cf       	rjmp	.-50     	; 0x29aa <vfprintf+0x30>
    29dc:	98 2f       	mov	r25, r24
    29de:	ff 24       	eor	r15, r15
    29e0:	ee 24       	eor	r14, r14
    29e2:	99 24       	eor	r9, r9
    29e4:	ff e1       	ldi	r31, 0x1F	; 31
    29e6:	ff 15       	cp	r31, r15
    29e8:	d0 f0       	brcs	.+52     	; 0x2a1e <vfprintf+0xa4>
    29ea:	9b 32       	cpi	r25, 0x2B	; 43
    29ec:	69 f0       	breq	.+26     	; 0x2a08 <vfprintf+0x8e>
    29ee:	9c 32       	cpi	r25, 0x2C	; 44
    29f0:	28 f4       	brcc	.+10     	; 0x29fc <vfprintf+0x82>
    29f2:	90 32       	cpi	r25, 0x20	; 32
    29f4:	59 f0       	breq	.+22     	; 0x2a0c <vfprintf+0x92>
    29f6:	93 32       	cpi	r25, 0x23	; 35
    29f8:	91 f4       	brne	.+36     	; 0x2a1e <vfprintf+0xa4>
    29fa:	0e c0       	rjmp	.+28     	; 0x2a18 <vfprintf+0x9e>
    29fc:	9d 32       	cpi	r25, 0x2D	; 45
    29fe:	49 f0       	breq	.+18     	; 0x2a12 <vfprintf+0x98>
    2a00:	90 33       	cpi	r25, 0x30	; 48
    2a02:	69 f4       	brne	.+26     	; 0x2a1e <vfprintf+0xa4>
    2a04:	41 e0       	ldi	r20, 0x01	; 1
    2a06:	24 c0       	rjmp	.+72     	; 0x2a50 <vfprintf+0xd6>
    2a08:	52 e0       	ldi	r21, 0x02	; 2
    2a0a:	f5 2a       	or	r15, r21
    2a0c:	84 e0       	ldi	r24, 0x04	; 4
    2a0e:	f8 2a       	or	r15, r24
    2a10:	28 c0       	rjmp	.+80     	; 0x2a62 <vfprintf+0xe8>
    2a12:	98 e0       	ldi	r25, 0x08	; 8
    2a14:	f9 2a       	or	r15, r25
    2a16:	25 c0       	rjmp	.+74     	; 0x2a62 <vfprintf+0xe8>
    2a18:	e0 e1       	ldi	r30, 0x10	; 16
    2a1a:	fe 2a       	or	r15, r30
    2a1c:	22 c0       	rjmp	.+68     	; 0x2a62 <vfprintf+0xe8>
    2a1e:	f7 fc       	sbrc	r15, 7
    2a20:	29 c0       	rjmp	.+82     	; 0x2a74 <vfprintf+0xfa>
    2a22:	89 2f       	mov	r24, r25
    2a24:	80 53       	subi	r24, 0x30	; 48
    2a26:	8a 30       	cpi	r24, 0x0A	; 10
    2a28:	70 f4       	brcc	.+28     	; 0x2a46 <vfprintf+0xcc>
    2a2a:	f6 fe       	sbrs	r15, 6
    2a2c:	05 c0       	rjmp	.+10     	; 0x2a38 <vfprintf+0xbe>
    2a2e:	98 9c       	mul	r9, r8
    2a30:	90 2c       	mov	r9, r0
    2a32:	11 24       	eor	r1, r1
    2a34:	98 0e       	add	r9, r24
    2a36:	15 c0       	rjmp	.+42     	; 0x2a62 <vfprintf+0xe8>
    2a38:	e8 9c       	mul	r14, r8
    2a3a:	e0 2c       	mov	r14, r0
    2a3c:	11 24       	eor	r1, r1
    2a3e:	e8 0e       	add	r14, r24
    2a40:	f0 e2       	ldi	r31, 0x20	; 32
    2a42:	ff 2a       	or	r15, r31
    2a44:	0e c0       	rjmp	.+28     	; 0x2a62 <vfprintf+0xe8>
    2a46:	9e 32       	cpi	r25, 0x2E	; 46
    2a48:	29 f4       	brne	.+10     	; 0x2a54 <vfprintf+0xda>
    2a4a:	f6 fc       	sbrc	r15, 6
    2a4c:	6b c1       	rjmp	.+726    	; 0x2d24 <vfprintf+0x3aa>
    2a4e:	40 e4       	ldi	r20, 0x40	; 64
    2a50:	f4 2a       	or	r15, r20
    2a52:	07 c0       	rjmp	.+14     	; 0x2a62 <vfprintf+0xe8>
    2a54:	9c 36       	cpi	r25, 0x6C	; 108
    2a56:	19 f4       	brne	.+6      	; 0x2a5e <vfprintf+0xe4>
    2a58:	50 e8       	ldi	r21, 0x80	; 128
    2a5a:	f5 2a       	or	r15, r21
    2a5c:	02 c0       	rjmp	.+4      	; 0x2a62 <vfprintf+0xe8>
    2a5e:	98 36       	cpi	r25, 0x68	; 104
    2a60:	49 f4       	brne	.+18     	; 0x2a74 <vfprintf+0xfa>
    2a62:	f2 01       	movw	r30, r4
    2a64:	23 fd       	sbrc	r18, 3
    2a66:	95 91       	lpm	r25, Z+
    2a68:	23 ff       	sbrs	r18, 3
    2a6a:	91 91       	ld	r25, Z+
    2a6c:	2f 01       	movw	r4, r30
    2a6e:	99 23       	and	r25, r25
    2a70:	09 f0       	breq	.+2      	; 0x2a74 <vfprintf+0xfa>
    2a72:	b8 cf       	rjmp	.-144    	; 0x29e4 <vfprintf+0x6a>
    2a74:	89 2f       	mov	r24, r25
    2a76:	85 54       	subi	r24, 0x45	; 69
    2a78:	83 30       	cpi	r24, 0x03	; 3
    2a7a:	18 f0       	brcs	.+6      	; 0x2a82 <vfprintf+0x108>
    2a7c:	80 52       	subi	r24, 0x20	; 32
    2a7e:	83 30       	cpi	r24, 0x03	; 3
    2a80:	38 f4       	brcc	.+14     	; 0x2a90 <vfprintf+0x116>
    2a82:	44 e0       	ldi	r20, 0x04	; 4
    2a84:	50 e0       	ldi	r21, 0x00	; 0
    2a86:	a4 0e       	add	r10, r20
    2a88:	b5 1e       	adc	r11, r21
    2a8a:	5f e3       	ldi	r21, 0x3F	; 63
    2a8c:	59 83       	std	Y+1, r21	; 0x01
    2a8e:	0f c0       	rjmp	.+30     	; 0x2aae <vfprintf+0x134>
    2a90:	93 36       	cpi	r25, 0x63	; 99
    2a92:	31 f0       	breq	.+12     	; 0x2aa0 <vfprintf+0x126>
    2a94:	93 37       	cpi	r25, 0x73	; 115
    2a96:	79 f0       	breq	.+30     	; 0x2ab6 <vfprintf+0x13c>
    2a98:	93 35       	cpi	r25, 0x53	; 83
    2a9a:	09 f0       	breq	.+2      	; 0x2a9e <vfprintf+0x124>
    2a9c:	56 c0       	rjmp	.+172    	; 0x2b4a <vfprintf+0x1d0>
    2a9e:	20 c0       	rjmp	.+64     	; 0x2ae0 <vfprintf+0x166>
    2aa0:	f5 01       	movw	r30, r10
    2aa2:	80 81       	ld	r24, Z
    2aa4:	89 83       	std	Y+1, r24	; 0x01
    2aa6:	42 e0       	ldi	r20, 0x02	; 2
    2aa8:	50 e0       	ldi	r21, 0x00	; 0
    2aaa:	a4 0e       	add	r10, r20
    2aac:	b5 1e       	adc	r11, r21
    2aae:	61 01       	movw	r12, r2
    2ab0:	01 e0       	ldi	r16, 0x01	; 1
    2ab2:	10 e0       	ldi	r17, 0x00	; 0
    2ab4:	12 c0       	rjmp	.+36     	; 0x2ada <vfprintf+0x160>
    2ab6:	f5 01       	movw	r30, r10
    2ab8:	c0 80       	ld	r12, Z
    2aba:	d1 80       	ldd	r13, Z+1	; 0x01
    2abc:	f6 fc       	sbrc	r15, 6
    2abe:	03 c0       	rjmp	.+6      	; 0x2ac6 <vfprintf+0x14c>
    2ac0:	6f ef       	ldi	r22, 0xFF	; 255
    2ac2:	7f ef       	ldi	r23, 0xFF	; 255
    2ac4:	02 c0       	rjmp	.+4      	; 0x2aca <vfprintf+0x150>
    2ac6:	69 2d       	mov	r22, r9
    2ac8:	70 e0       	ldi	r23, 0x00	; 0
    2aca:	42 e0       	ldi	r20, 0x02	; 2
    2acc:	50 e0       	ldi	r21, 0x00	; 0
    2ace:	a4 0e       	add	r10, r20
    2ad0:	b5 1e       	adc	r11, r21
    2ad2:	c6 01       	movw	r24, r12
    2ad4:	0e 94 a5 16 	call	0x2d4a	; 0x2d4a <strnlen>
    2ad8:	8c 01       	movw	r16, r24
    2ada:	5f e7       	ldi	r21, 0x7F	; 127
    2adc:	f5 22       	and	r15, r21
    2ade:	14 c0       	rjmp	.+40     	; 0x2b08 <vfprintf+0x18e>
    2ae0:	f5 01       	movw	r30, r10
    2ae2:	c0 80       	ld	r12, Z
    2ae4:	d1 80       	ldd	r13, Z+1	; 0x01
    2ae6:	f6 fc       	sbrc	r15, 6
    2ae8:	03 c0       	rjmp	.+6      	; 0x2af0 <vfprintf+0x176>
    2aea:	6f ef       	ldi	r22, 0xFF	; 255
    2aec:	7f ef       	ldi	r23, 0xFF	; 255
    2aee:	02 c0       	rjmp	.+4      	; 0x2af4 <vfprintf+0x17a>
    2af0:	69 2d       	mov	r22, r9
    2af2:	70 e0       	ldi	r23, 0x00	; 0
    2af4:	42 e0       	ldi	r20, 0x02	; 2
    2af6:	50 e0       	ldi	r21, 0x00	; 0
    2af8:	a4 0e       	add	r10, r20
    2afa:	b5 1e       	adc	r11, r21
    2afc:	c6 01       	movw	r24, r12
    2afe:	0e 94 9a 16 	call	0x2d34	; 0x2d34 <strnlen_P>
    2b02:	8c 01       	movw	r16, r24
    2b04:	50 e8       	ldi	r21, 0x80	; 128
    2b06:	f5 2a       	or	r15, r21
    2b08:	f3 fe       	sbrs	r15, 3
    2b0a:	07 c0       	rjmp	.+14     	; 0x2b1a <vfprintf+0x1a0>
    2b0c:	1a c0       	rjmp	.+52     	; 0x2b42 <vfprintf+0x1c8>
    2b0e:	80 e2       	ldi	r24, 0x20	; 32
    2b10:	90 e0       	ldi	r25, 0x00	; 0
    2b12:	b3 01       	movw	r22, r6
    2b14:	0e 94 b0 16 	call	0x2d60	; 0x2d60 <fputc>
    2b18:	ea 94       	dec	r14
    2b1a:	8e 2d       	mov	r24, r14
    2b1c:	90 e0       	ldi	r25, 0x00	; 0
    2b1e:	08 17       	cp	r16, r24
    2b20:	19 07       	cpc	r17, r25
    2b22:	a8 f3       	brcs	.-22     	; 0x2b0e <vfprintf+0x194>
    2b24:	0e c0       	rjmp	.+28     	; 0x2b42 <vfprintf+0x1c8>
    2b26:	f6 01       	movw	r30, r12
    2b28:	f7 fc       	sbrc	r15, 7
    2b2a:	85 91       	lpm	r24, Z+
    2b2c:	f7 fe       	sbrs	r15, 7
    2b2e:	81 91       	ld	r24, Z+
    2b30:	6f 01       	movw	r12, r30
    2b32:	90 e0       	ldi	r25, 0x00	; 0
    2b34:	b3 01       	movw	r22, r6
    2b36:	0e 94 b0 16 	call	0x2d60	; 0x2d60 <fputc>
    2b3a:	e1 10       	cpse	r14, r1
    2b3c:	ea 94       	dec	r14
    2b3e:	01 50       	subi	r16, 0x01	; 1
    2b40:	10 40       	sbci	r17, 0x00	; 0
    2b42:	01 15       	cp	r16, r1
    2b44:	11 05       	cpc	r17, r1
    2b46:	79 f7       	brne	.-34     	; 0x2b26 <vfprintf+0x1ac>
    2b48:	ea c0       	rjmp	.+468    	; 0x2d1e <vfprintf+0x3a4>
    2b4a:	94 36       	cpi	r25, 0x64	; 100
    2b4c:	11 f0       	breq	.+4      	; 0x2b52 <vfprintf+0x1d8>
    2b4e:	99 36       	cpi	r25, 0x69	; 105
    2b50:	69 f5       	brne	.+90     	; 0x2bac <vfprintf+0x232>
    2b52:	f7 fe       	sbrs	r15, 7
    2b54:	08 c0       	rjmp	.+16     	; 0x2b66 <vfprintf+0x1ec>
    2b56:	f5 01       	movw	r30, r10
    2b58:	20 81       	ld	r18, Z
    2b5a:	31 81       	ldd	r19, Z+1	; 0x01
    2b5c:	42 81       	ldd	r20, Z+2	; 0x02
    2b5e:	53 81       	ldd	r21, Z+3	; 0x03
    2b60:	84 e0       	ldi	r24, 0x04	; 4
    2b62:	90 e0       	ldi	r25, 0x00	; 0
    2b64:	0a c0       	rjmp	.+20     	; 0x2b7a <vfprintf+0x200>
    2b66:	f5 01       	movw	r30, r10
    2b68:	80 81       	ld	r24, Z
    2b6a:	91 81       	ldd	r25, Z+1	; 0x01
    2b6c:	9c 01       	movw	r18, r24
    2b6e:	44 27       	eor	r20, r20
    2b70:	37 fd       	sbrc	r19, 7
    2b72:	40 95       	com	r20
    2b74:	54 2f       	mov	r21, r20
    2b76:	82 e0       	ldi	r24, 0x02	; 2
    2b78:	90 e0       	ldi	r25, 0x00	; 0
    2b7a:	a8 0e       	add	r10, r24
    2b7c:	b9 1e       	adc	r11, r25
    2b7e:	9f e6       	ldi	r25, 0x6F	; 111
    2b80:	f9 22       	and	r15, r25
    2b82:	57 ff       	sbrs	r21, 7
    2b84:	09 c0       	rjmp	.+18     	; 0x2b98 <vfprintf+0x21e>
    2b86:	50 95       	com	r21
    2b88:	40 95       	com	r20
    2b8a:	30 95       	com	r19
    2b8c:	21 95       	neg	r18
    2b8e:	3f 4f       	sbci	r19, 0xFF	; 255
    2b90:	4f 4f       	sbci	r20, 0xFF	; 255
    2b92:	5f 4f       	sbci	r21, 0xFF	; 255
    2b94:	e0 e8       	ldi	r30, 0x80	; 128
    2b96:	fe 2a       	or	r15, r30
    2b98:	ca 01       	movw	r24, r20
    2b9a:	b9 01       	movw	r22, r18
    2b9c:	a1 01       	movw	r20, r2
    2b9e:	2a e0       	ldi	r18, 0x0A	; 10
    2ba0:	30 e0       	ldi	r19, 0x00	; 0
    2ba2:	0e 94 dc 16 	call	0x2db8	; 0x2db8 <__ultoa_invert>
    2ba6:	d8 2e       	mov	r13, r24
    2ba8:	d2 18       	sub	r13, r2
    2baa:	40 c0       	rjmp	.+128    	; 0x2c2c <vfprintf+0x2b2>
    2bac:	95 37       	cpi	r25, 0x75	; 117
    2bae:	29 f4       	brne	.+10     	; 0x2bba <vfprintf+0x240>
    2bb0:	1f 2d       	mov	r17, r15
    2bb2:	1f 7e       	andi	r17, 0xEF	; 239
    2bb4:	2a e0       	ldi	r18, 0x0A	; 10
    2bb6:	30 e0       	ldi	r19, 0x00	; 0
    2bb8:	1d c0       	rjmp	.+58     	; 0x2bf4 <vfprintf+0x27a>
    2bba:	1f 2d       	mov	r17, r15
    2bbc:	19 7f       	andi	r17, 0xF9	; 249
    2bbe:	9f 36       	cpi	r25, 0x6F	; 111
    2bc0:	61 f0       	breq	.+24     	; 0x2bda <vfprintf+0x260>
    2bc2:	90 37       	cpi	r25, 0x70	; 112
    2bc4:	20 f4       	brcc	.+8      	; 0x2bce <vfprintf+0x254>
    2bc6:	98 35       	cpi	r25, 0x58	; 88
    2bc8:	09 f0       	breq	.+2      	; 0x2bcc <vfprintf+0x252>
    2bca:	ac c0       	rjmp	.+344    	; 0x2d24 <vfprintf+0x3aa>
    2bcc:	0f c0       	rjmp	.+30     	; 0x2bec <vfprintf+0x272>
    2bce:	90 37       	cpi	r25, 0x70	; 112
    2bd0:	39 f0       	breq	.+14     	; 0x2be0 <vfprintf+0x266>
    2bd2:	98 37       	cpi	r25, 0x78	; 120
    2bd4:	09 f0       	breq	.+2      	; 0x2bd8 <vfprintf+0x25e>
    2bd6:	a6 c0       	rjmp	.+332    	; 0x2d24 <vfprintf+0x3aa>
    2bd8:	04 c0       	rjmp	.+8      	; 0x2be2 <vfprintf+0x268>
    2bda:	28 e0       	ldi	r18, 0x08	; 8
    2bdc:	30 e0       	ldi	r19, 0x00	; 0
    2bde:	0a c0       	rjmp	.+20     	; 0x2bf4 <vfprintf+0x27a>
    2be0:	10 61       	ori	r17, 0x10	; 16
    2be2:	14 fd       	sbrc	r17, 4
    2be4:	14 60       	ori	r17, 0x04	; 4
    2be6:	20 e1       	ldi	r18, 0x10	; 16
    2be8:	30 e0       	ldi	r19, 0x00	; 0
    2bea:	04 c0       	rjmp	.+8      	; 0x2bf4 <vfprintf+0x27a>
    2bec:	14 fd       	sbrc	r17, 4
    2bee:	16 60       	ori	r17, 0x06	; 6
    2bf0:	20 e1       	ldi	r18, 0x10	; 16
    2bf2:	32 e0       	ldi	r19, 0x02	; 2
    2bf4:	17 ff       	sbrs	r17, 7
    2bf6:	08 c0       	rjmp	.+16     	; 0x2c08 <vfprintf+0x28e>
    2bf8:	f5 01       	movw	r30, r10
    2bfa:	60 81       	ld	r22, Z
    2bfc:	71 81       	ldd	r23, Z+1	; 0x01
    2bfe:	82 81       	ldd	r24, Z+2	; 0x02
    2c00:	93 81       	ldd	r25, Z+3	; 0x03
    2c02:	44 e0       	ldi	r20, 0x04	; 4
    2c04:	50 e0       	ldi	r21, 0x00	; 0
    2c06:	08 c0       	rjmp	.+16     	; 0x2c18 <vfprintf+0x29e>
    2c08:	f5 01       	movw	r30, r10
    2c0a:	80 81       	ld	r24, Z
    2c0c:	91 81       	ldd	r25, Z+1	; 0x01
    2c0e:	bc 01       	movw	r22, r24
    2c10:	80 e0       	ldi	r24, 0x00	; 0
    2c12:	90 e0       	ldi	r25, 0x00	; 0
    2c14:	42 e0       	ldi	r20, 0x02	; 2
    2c16:	50 e0       	ldi	r21, 0x00	; 0
    2c18:	a4 0e       	add	r10, r20
    2c1a:	b5 1e       	adc	r11, r21
    2c1c:	a1 01       	movw	r20, r2
    2c1e:	0e 94 dc 16 	call	0x2db8	; 0x2db8 <__ultoa_invert>
    2c22:	d8 2e       	mov	r13, r24
    2c24:	d2 18       	sub	r13, r2
    2c26:	8f e7       	ldi	r24, 0x7F	; 127
    2c28:	f8 2e       	mov	r15, r24
    2c2a:	f1 22       	and	r15, r17
    2c2c:	f6 fe       	sbrs	r15, 6
    2c2e:	0b c0       	rjmp	.+22     	; 0x2c46 <vfprintf+0x2cc>
    2c30:	5e ef       	ldi	r21, 0xFE	; 254
    2c32:	f5 22       	and	r15, r21
    2c34:	d9 14       	cp	r13, r9
    2c36:	38 f4       	brcc	.+14     	; 0x2c46 <vfprintf+0x2cc>
    2c38:	f4 fe       	sbrs	r15, 4
    2c3a:	07 c0       	rjmp	.+14     	; 0x2c4a <vfprintf+0x2d0>
    2c3c:	f2 fc       	sbrc	r15, 2
    2c3e:	05 c0       	rjmp	.+10     	; 0x2c4a <vfprintf+0x2d0>
    2c40:	8f ee       	ldi	r24, 0xEF	; 239
    2c42:	f8 22       	and	r15, r24
    2c44:	02 c0       	rjmp	.+4      	; 0x2c4a <vfprintf+0x2d0>
    2c46:	1d 2d       	mov	r17, r13
    2c48:	01 c0       	rjmp	.+2      	; 0x2c4c <vfprintf+0x2d2>
    2c4a:	19 2d       	mov	r17, r9
    2c4c:	f4 fe       	sbrs	r15, 4
    2c4e:	0d c0       	rjmp	.+26     	; 0x2c6a <vfprintf+0x2f0>
    2c50:	fe 01       	movw	r30, r28
    2c52:	ed 0d       	add	r30, r13
    2c54:	f1 1d       	adc	r31, r1
    2c56:	80 81       	ld	r24, Z
    2c58:	80 33       	cpi	r24, 0x30	; 48
    2c5a:	19 f4       	brne	.+6      	; 0x2c62 <vfprintf+0x2e8>
    2c5c:	99 ee       	ldi	r25, 0xE9	; 233
    2c5e:	f9 22       	and	r15, r25
    2c60:	08 c0       	rjmp	.+16     	; 0x2c72 <vfprintf+0x2f8>
    2c62:	1f 5f       	subi	r17, 0xFF	; 255
    2c64:	f2 fe       	sbrs	r15, 2
    2c66:	05 c0       	rjmp	.+10     	; 0x2c72 <vfprintf+0x2f8>
    2c68:	03 c0       	rjmp	.+6      	; 0x2c70 <vfprintf+0x2f6>
    2c6a:	8f 2d       	mov	r24, r15
    2c6c:	86 78       	andi	r24, 0x86	; 134
    2c6e:	09 f0       	breq	.+2      	; 0x2c72 <vfprintf+0x2f8>
    2c70:	1f 5f       	subi	r17, 0xFF	; 255
    2c72:	0f 2d       	mov	r16, r15
    2c74:	f3 fc       	sbrc	r15, 3
    2c76:	14 c0       	rjmp	.+40     	; 0x2ca0 <vfprintf+0x326>
    2c78:	f0 fe       	sbrs	r15, 0
    2c7a:	0f c0       	rjmp	.+30     	; 0x2c9a <vfprintf+0x320>
    2c7c:	1e 15       	cp	r17, r14
    2c7e:	10 f0       	brcs	.+4      	; 0x2c84 <vfprintf+0x30a>
    2c80:	9d 2c       	mov	r9, r13
    2c82:	0b c0       	rjmp	.+22     	; 0x2c9a <vfprintf+0x320>
    2c84:	9d 2c       	mov	r9, r13
    2c86:	9e 0c       	add	r9, r14
    2c88:	91 1a       	sub	r9, r17
    2c8a:	1e 2d       	mov	r17, r14
    2c8c:	06 c0       	rjmp	.+12     	; 0x2c9a <vfprintf+0x320>
    2c8e:	80 e2       	ldi	r24, 0x20	; 32
    2c90:	90 e0       	ldi	r25, 0x00	; 0
    2c92:	b3 01       	movw	r22, r6
    2c94:	0e 94 b0 16 	call	0x2d60	; 0x2d60 <fputc>
    2c98:	1f 5f       	subi	r17, 0xFF	; 255
    2c9a:	1e 15       	cp	r17, r14
    2c9c:	c0 f3       	brcs	.-16     	; 0x2c8e <vfprintf+0x314>
    2c9e:	04 c0       	rjmp	.+8      	; 0x2ca8 <vfprintf+0x32e>
    2ca0:	1e 15       	cp	r17, r14
    2ca2:	10 f4       	brcc	.+4      	; 0x2ca8 <vfprintf+0x32e>
    2ca4:	e1 1a       	sub	r14, r17
    2ca6:	01 c0       	rjmp	.+2      	; 0x2caa <vfprintf+0x330>
    2ca8:	ee 24       	eor	r14, r14
    2caa:	04 ff       	sbrs	r16, 4
    2cac:	0f c0       	rjmp	.+30     	; 0x2ccc <vfprintf+0x352>
    2cae:	80 e3       	ldi	r24, 0x30	; 48
    2cb0:	90 e0       	ldi	r25, 0x00	; 0
    2cb2:	b3 01       	movw	r22, r6
    2cb4:	0e 94 b0 16 	call	0x2d60	; 0x2d60 <fputc>
    2cb8:	02 ff       	sbrs	r16, 2
    2cba:	1d c0       	rjmp	.+58     	; 0x2cf6 <vfprintf+0x37c>
    2cbc:	01 fd       	sbrc	r16, 1
    2cbe:	03 c0       	rjmp	.+6      	; 0x2cc6 <vfprintf+0x34c>
    2cc0:	88 e7       	ldi	r24, 0x78	; 120
    2cc2:	90 e0       	ldi	r25, 0x00	; 0
    2cc4:	0e c0       	rjmp	.+28     	; 0x2ce2 <vfprintf+0x368>
    2cc6:	88 e5       	ldi	r24, 0x58	; 88
    2cc8:	90 e0       	ldi	r25, 0x00	; 0
    2cca:	0b c0       	rjmp	.+22     	; 0x2ce2 <vfprintf+0x368>
    2ccc:	80 2f       	mov	r24, r16
    2cce:	86 78       	andi	r24, 0x86	; 134
    2cd0:	91 f0       	breq	.+36     	; 0x2cf6 <vfprintf+0x37c>
    2cd2:	01 ff       	sbrs	r16, 1
    2cd4:	02 c0       	rjmp	.+4      	; 0x2cda <vfprintf+0x360>
    2cd6:	8b e2       	ldi	r24, 0x2B	; 43
    2cd8:	01 c0       	rjmp	.+2      	; 0x2cdc <vfprintf+0x362>
    2cda:	80 e2       	ldi	r24, 0x20	; 32
    2cdc:	f7 fc       	sbrc	r15, 7
    2cde:	8d e2       	ldi	r24, 0x2D	; 45
    2ce0:	90 e0       	ldi	r25, 0x00	; 0
    2ce2:	b3 01       	movw	r22, r6
    2ce4:	0e 94 b0 16 	call	0x2d60	; 0x2d60 <fputc>
    2ce8:	06 c0       	rjmp	.+12     	; 0x2cf6 <vfprintf+0x37c>
    2cea:	80 e3       	ldi	r24, 0x30	; 48
    2cec:	90 e0       	ldi	r25, 0x00	; 0
    2cee:	b3 01       	movw	r22, r6
    2cf0:	0e 94 b0 16 	call	0x2d60	; 0x2d60 <fputc>
    2cf4:	9a 94       	dec	r9
    2cf6:	d9 14       	cp	r13, r9
    2cf8:	c0 f3       	brcs	.-16     	; 0x2cea <vfprintf+0x370>
    2cfa:	da 94       	dec	r13
    2cfc:	f1 01       	movw	r30, r2
    2cfe:	ed 0d       	add	r30, r13
    2d00:	f1 1d       	adc	r31, r1
    2d02:	80 81       	ld	r24, Z
    2d04:	90 e0       	ldi	r25, 0x00	; 0
    2d06:	b3 01       	movw	r22, r6
    2d08:	0e 94 b0 16 	call	0x2d60	; 0x2d60 <fputc>
    2d0c:	dd 20       	and	r13, r13
    2d0e:	a9 f7       	brne	.-22     	; 0x2cfa <vfprintf+0x380>
    2d10:	06 c0       	rjmp	.+12     	; 0x2d1e <vfprintf+0x3a4>
    2d12:	80 e2       	ldi	r24, 0x20	; 32
    2d14:	90 e0       	ldi	r25, 0x00	; 0
    2d16:	b3 01       	movw	r22, r6
    2d18:	0e 94 b0 16 	call	0x2d60	; 0x2d60 <fputc>
    2d1c:	ea 94       	dec	r14
    2d1e:	ee 20       	and	r14, r14
    2d20:	c1 f7       	brne	.-16     	; 0x2d12 <vfprintf+0x398>
    2d22:	43 ce       	rjmp	.-890    	; 0x29aa <vfprintf+0x30>
    2d24:	f3 01       	movw	r30, r6
    2d26:	66 81       	ldd	r22, Z+6	; 0x06
    2d28:	77 81       	ldd	r23, Z+7	; 0x07
    2d2a:	cb 01       	movw	r24, r22
    2d2c:	2b 96       	adiw	r28, 0x0b	; 11
    2d2e:	e2 e1       	ldi	r30, 0x12	; 18
    2d30:	0c 94 4d 14 	jmp	0x289a	; 0x289a <__epilogue_restores__>

00002d34 <strnlen_P>:
    2d34:	fc 01       	movw	r30, r24
    2d36:	05 90       	lpm	r0, Z+
    2d38:	61 50       	subi	r22, 0x01	; 1
    2d3a:	70 40       	sbci	r23, 0x00	; 0
    2d3c:	01 10       	cpse	r0, r1
    2d3e:	d8 f7       	brcc	.-10     	; 0x2d36 <strnlen_P+0x2>
    2d40:	80 95       	com	r24
    2d42:	90 95       	com	r25
    2d44:	8e 0f       	add	r24, r30
    2d46:	9f 1f       	adc	r25, r31
    2d48:	08 95       	ret

00002d4a <strnlen>:
    2d4a:	fc 01       	movw	r30, r24
    2d4c:	61 50       	subi	r22, 0x01	; 1
    2d4e:	70 40       	sbci	r23, 0x00	; 0
    2d50:	01 90       	ld	r0, Z+
    2d52:	01 10       	cpse	r0, r1
    2d54:	d8 f7       	brcc	.-10     	; 0x2d4c <strnlen+0x2>
    2d56:	80 95       	com	r24
    2d58:	90 95       	com	r25
    2d5a:	8e 0f       	add	r24, r30
    2d5c:	9f 1f       	adc	r25, r31
    2d5e:	08 95       	ret

00002d60 <fputc>:
    2d60:	0f 93       	push	r16
    2d62:	1f 93       	push	r17
    2d64:	cf 93       	push	r28
    2d66:	df 93       	push	r29
    2d68:	8c 01       	movw	r16, r24
    2d6a:	eb 01       	movw	r28, r22
    2d6c:	8b 81       	ldd	r24, Y+3	; 0x03
    2d6e:	81 ff       	sbrs	r24, 1
    2d70:	1b c0       	rjmp	.+54     	; 0x2da8 <fputc+0x48>
    2d72:	82 ff       	sbrs	r24, 2
    2d74:	0d c0       	rjmp	.+26     	; 0x2d90 <fputc+0x30>
    2d76:	2e 81       	ldd	r18, Y+6	; 0x06
    2d78:	3f 81       	ldd	r19, Y+7	; 0x07
    2d7a:	8c 81       	ldd	r24, Y+4	; 0x04
    2d7c:	9d 81       	ldd	r25, Y+5	; 0x05
    2d7e:	28 17       	cp	r18, r24
    2d80:	39 07       	cpc	r19, r25
    2d82:	64 f4       	brge	.+24     	; 0x2d9c <fputc+0x3c>
    2d84:	e8 81       	ld	r30, Y
    2d86:	f9 81       	ldd	r31, Y+1	; 0x01
    2d88:	01 93       	st	Z+, r16
    2d8a:	f9 83       	std	Y+1, r31	; 0x01
    2d8c:	e8 83       	st	Y, r30
    2d8e:	06 c0       	rjmp	.+12     	; 0x2d9c <fputc+0x3c>
    2d90:	e8 85       	ldd	r30, Y+8	; 0x08
    2d92:	f9 85       	ldd	r31, Y+9	; 0x09
    2d94:	80 2f       	mov	r24, r16
    2d96:	09 95       	icall
    2d98:	89 2b       	or	r24, r25
    2d9a:	31 f4       	brne	.+12     	; 0x2da8 <fputc+0x48>
    2d9c:	8e 81       	ldd	r24, Y+6	; 0x06
    2d9e:	9f 81       	ldd	r25, Y+7	; 0x07
    2da0:	01 96       	adiw	r24, 0x01	; 1
    2da2:	9f 83       	std	Y+7, r25	; 0x07
    2da4:	8e 83       	std	Y+6, r24	; 0x06
    2da6:	02 c0       	rjmp	.+4      	; 0x2dac <fputc+0x4c>
    2da8:	0f ef       	ldi	r16, 0xFF	; 255
    2daa:	1f ef       	ldi	r17, 0xFF	; 255
    2dac:	c8 01       	movw	r24, r16
    2dae:	df 91       	pop	r29
    2db0:	cf 91       	pop	r28
    2db2:	1f 91       	pop	r17
    2db4:	0f 91       	pop	r16
    2db6:	08 95       	ret

00002db8 <__ultoa_invert>:
    2db8:	fa 01       	movw	r30, r20
    2dba:	aa 27       	eor	r26, r26
    2dbc:	28 30       	cpi	r18, 0x08	; 8
    2dbe:	51 f1       	breq	.+84     	; 0x2e14 <__ultoa_invert+0x5c>
    2dc0:	20 31       	cpi	r18, 0x10	; 16
    2dc2:	81 f1       	breq	.+96     	; 0x2e24 <__ultoa_invert+0x6c>
    2dc4:	e8 94       	clt
    2dc6:	6f 93       	push	r22
    2dc8:	6e 7f       	andi	r22, 0xFE	; 254
    2dca:	6e 5f       	subi	r22, 0xFE	; 254
    2dcc:	7f 4f       	sbci	r23, 0xFF	; 255
    2dce:	8f 4f       	sbci	r24, 0xFF	; 255
    2dd0:	9f 4f       	sbci	r25, 0xFF	; 255
    2dd2:	af 4f       	sbci	r26, 0xFF	; 255
    2dd4:	b1 e0       	ldi	r27, 0x01	; 1
    2dd6:	3e d0       	rcall	.+124    	; 0x2e54 <__ultoa_invert+0x9c>
    2dd8:	b4 e0       	ldi	r27, 0x04	; 4
    2dda:	3c d0       	rcall	.+120    	; 0x2e54 <__ultoa_invert+0x9c>
    2ddc:	67 0f       	add	r22, r23
    2dde:	78 1f       	adc	r23, r24
    2de0:	89 1f       	adc	r24, r25
    2de2:	9a 1f       	adc	r25, r26
    2de4:	a1 1d       	adc	r26, r1
    2de6:	68 0f       	add	r22, r24
    2de8:	79 1f       	adc	r23, r25
    2dea:	8a 1f       	adc	r24, r26
    2dec:	91 1d       	adc	r25, r1
    2dee:	a1 1d       	adc	r26, r1
    2df0:	6a 0f       	add	r22, r26
    2df2:	71 1d       	adc	r23, r1
    2df4:	81 1d       	adc	r24, r1
    2df6:	91 1d       	adc	r25, r1
    2df8:	a1 1d       	adc	r26, r1
    2dfa:	20 d0       	rcall	.+64     	; 0x2e3c <__ultoa_invert+0x84>
    2dfc:	09 f4       	brne	.+2      	; 0x2e00 <__ultoa_invert+0x48>
    2dfe:	68 94       	set
    2e00:	3f 91       	pop	r19
    2e02:	2a e0       	ldi	r18, 0x0A	; 10
    2e04:	26 9f       	mul	r18, r22
    2e06:	11 24       	eor	r1, r1
    2e08:	30 19       	sub	r19, r0
    2e0a:	30 5d       	subi	r19, 0xD0	; 208
    2e0c:	31 93       	st	Z+, r19
    2e0e:	de f6       	brtc	.-74     	; 0x2dc6 <__ultoa_invert+0xe>
    2e10:	cf 01       	movw	r24, r30
    2e12:	08 95       	ret
    2e14:	46 2f       	mov	r20, r22
    2e16:	47 70       	andi	r20, 0x07	; 7
    2e18:	40 5d       	subi	r20, 0xD0	; 208
    2e1a:	41 93       	st	Z+, r20
    2e1c:	b3 e0       	ldi	r27, 0x03	; 3
    2e1e:	0f d0       	rcall	.+30     	; 0x2e3e <__ultoa_invert+0x86>
    2e20:	c9 f7       	brne	.-14     	; 0x2e14 <__ultoa_invert+0x5c>
    2e22:	f6 cf       	rjmp	.-20     	; 0x2e10 <__ultoa_invert+0x58>
    2e24:	46 2f       	mov	r20, r22
    2e26:	4f 70       	andi	r20, 0x0F	; 15
    2e28:	40 5d       	subi	r20, 0xD0	; 208
    2e2a:	4a 33       	cpi	r20, 0x3A	; 58
    2e2c:	18 f0       	brcs	.+6      	; 0x2e34 <__ultoa_invert+0x7c>
    2e2e:	49 5d       	subi	r20, 0xD9	; 217
    2e30:	31 fd       	sbrc	r19, 1
    2e32:	40 52       	subi	r20, 0x20	; 32
    2e34:	41 93       	st	Z+, r20
    2e36:	02 d0       	rcall	.+4      	; 0x2e3c <__ultoa_invert+0x84>
    2e38:	a9 f7       	brne	.-22     	; 0x2e24 <__ultoa_invert+0x6c>
    2e3a:	ea cf       	rjmp	.-44     	; 0x2e10 <__ultoa_invert+0x58>
    2e3c:	b4 e0       	ldi	r27, 0x04	; 4
    2e3e:	a6 95       	lsr	r26
    2e40:	97 95       	ror	r25
    2e42:	87 95       	ror	r24
    2e44:	77 95       	ror	r23
    2e46:	67 95       	ror	r22
    2e48:	ba 95       	dec	r27
    2e4a:	c9 f7       	brne	.-14     	; 0x2e3e <__ultoa_invert+0x86>
    2e4c:	00 97       	sbiw	r24, 0x00	; 0
    2e4e:	61 05       	cpc	r22, r1
    2e50:	71 05       	cpc	r23, r1
    2e52:	08 95       	ret
    2e54:	9b 01       	movw	r18, r22
    2e56:	ac 01       	movw	r20, r24
    2e58:	0a 2e       	mov	r0, r26
    2e5a:	06 94       	lsr	r0
    2e5c:	57 95       	ror	r21
    2e5e:	47 95       	ror	r20
    2e60:	37 95       	ror	r19
    2e62:	27 95       	ror	r18
    2e64:	ba 95       	dec	r27
    2e66:	c9 f7       	brne	.-14     	; 0x2e5a <__ultoa_invert+0xa2>
    2e68:	62 0f       	add	r22, r18
    2e6a:	73 1f       	adc	r23, r19
    2e6c:	84 1f       	adc	r24, r20
    2e6e:	95 1f       	adc	r25, r21
    2e70:	a0 1d       	adc	r26, r0
    2e72:	08 95       	ret

00002e74 <_exit>:
    2e74:	f8 94       	cli

00002e76 <__stop_program>:
    2e76:	ff cf       	rjmp	.-2      	; 0x2e76 <__stop_program>
