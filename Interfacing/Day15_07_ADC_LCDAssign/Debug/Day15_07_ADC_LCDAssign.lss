
Day15_07_ADC_LCDAssign.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002306  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000e  00800060  00002306  0000239a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  0080006e  0080006e  000023a8  2**0
                  ALLOC
  3 .stab         00001b30  00000000  00000000  000023a8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000012e0  00000000  00000000  00003ed8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  000051b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  000052f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00005468  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  000070b1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00007f9c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  00008d4c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  00008eac  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  00009139  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00009907  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 1e 06 	jmp	0xc3c	; 0xc3c <__vector_1>
       8:	0c 94 63 06 	jmp	0xcc6	; 0xcc6 <__vector_2>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 e0       	ldi	r30, 0x06	; 6
      68:	f3 e2       	ldi	r31, 0x23	; 35
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ae 36       	cpi	r26, 0x6E	; 110
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	ae e6       	ldi	r26, 0x6E	; 110
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a2 37       	cpi	r26, 0x72	; 114
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 7d 0d 	call	0x1afa	; 0x1afa <main>
      8a:	0c 94 81 11 	jmp	0x2302	; 0x2302 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 78 0e 	jmp	0x1cf0	; 0x1cf0 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a6 e6       	ldi	r26, 0x66	; 102
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 94 0e 	jmp	0x1d28	; 0x1d28 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 84 0e 	jmp	0x1d08	; 0x1d08 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 a0 0e 	jmp	0x1d40	; 0x1d40 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 84 0e 	jmp	0x1d08	; 0x1d08 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 a0 0e 	jmp	0x1d40	; 0x1d40 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 78 0e 	jmp	0x1cf0	; 0x1cf0 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	86 e6       	ldi	r24, 0x66	; 102
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 94 0e 	jmp	0x1d28	; 0x1d28 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 84 0e 	jmp	0x1d08	; 0x1d08 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 a0 0e 	jmp	0x1d40	; 0x1d40 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 84 0e 	jmp	0x1d08	; 0x1d08 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 a0 0e 	jmp	0x1d40	; 0x1d40 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 84 0e 	jmp	0x1d08	; 0x1d08 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 a0 0e 	jmp	0x1d40	; 0x1d40 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 88 0e 	jmp	0x1d10	; 0x1d10 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 a4 0e 	jmp	0x1d48	; 0x1d48 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <GIE_VidEnable>:
#include "GIE_Interface.h"
#include "GIE_Private.h"

/*GIE Enable*/

void GIE_VidEnable(void){
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	Set_Bit(SREG,SREG_I_BIT);
     b4e:	af e5       	ldi	r26, 0x5F	; 95
     b50:	b0 e0       	ldi	r27, 0x00	; 0
     b52:	ef e5       	ldi	r30, 0x5F	; 95
     b54:	f0 e0       	ldi	r31, 0x00	; 0
     b56:	80 81       	ld	r24, Z
     b58:	80 68       	ori	r24, 0x80	; 128
     b5a:	8c 93       	st	X, r24
}
     b5c:	cf 91       	pop	r28
     b5e:	df 91       	pop	r29
     b60:	08 95       	ret

00000b62 <GIE_VidDisable>:

/*GIE Disable*/

void GIE_VidDisable(void){
     b62:	df 93       	push	r29
     b64:	cf 93       	push	r28
     b66:	cd b7       	in	r28, 0x3d	; 61
     b68:	de b7       	in	r29, 0x3e	; 62
	CLR_Bit(SREG,SREG_I_BIT);
     b6a:	af e5       	ldi	r26, 0x5F	; 95
     b6c:	b0 e0       	ldi	r27, 0x00	; 0
     b6e:	ef e5       	ldi	r30, 0x5F	; 95
     b70:	f0 e0       	ldi	r31, 0x00	; 0
     b72:	80 81       	ld	r24, Z
     b74:	8f 77       	andi	r24, 0x7F	; 127
     b76:	8c 93       	st	X, r24
}
     b78:	cf 91       	pop	r28
     b7a:	df 91       	pop	r29
     b7c:	08 95       	ret

00000b7e <EXTI0_VidIntInit>:
#include "EXTI_Config.h"


/*EXTI Init*/

void EXTI0_VidIntInit(){
     b7e:	df 93       	push	r29
     b80:	cf 93       	push	r28
     b82:	cd b7       	in	r28, 0x3d	; 61
     b84:	de b7       	in	r29, 0x3e	; 62
		CLR_Bit(MCUCR,MCUCR_ISC00_PIN);
#elif	EXTI0_SENSE_CONTROL == EXTI_RISING_EDGE_SC
		Set_Bit(MCUCR,MCUCR_ISC01_PIN);
		Set_Bit(MCUCR,MCUCR_ISC00_PIN);
#elif	EXTI0_SENSE_CONTROL == EXTI_ON_CHANGE_SC
		Set_Bit(MCUCR,MCUCR_ISC00_PIN);
     b86:	a5 e5       	ldi	r26, 0x55	; 85
     b88:	b0 e0       	ldi	r27, 0x00	; 0
     b8a:	e5 e5       	ldi	r30, 0x55	; 85
     b8c:	f0 e0       	ldi	r31, 0x00	; 0
     b8e:	80 81       	ld	r24, Z
     b90:	81 60       	ori	r24, 0x01	; 1
     b92:	8c 93       	st	X, r24
		CLR_Bit(MCUCR,MCUCR_ISC01_PIN);
     b94:	a5 e5       	ldi	r26, 0x55	; 85
     b96:	b0 e0       	ldi	r27, 0x00	; 0
     b98:	e5 e5       	ldi	r30, 0x55	; 85
     b9a:	f0 e0       	ldi	r31, 0x00	; 0
     b9c:	80 81       	ld	r24, Z
     b9e:	8d 7f       	andi	r24, 0xFD	; 253
     ba0:	8c 93       	st	X, r24
#else
		#warning "No Sense Control Selected, Back to Config File"
#endif
	/*Enable Interrupt*/

		Set_Bit(GICR,GICR_INT0_PIN);
     ba2:	ab e5       	ldi	r26, 0x5B	; 91
     ba4:	b0 e0       	ldi	r27, 0x00	; 0
     ba6:	eb e5       	ldi	r30, 0x5B	; 91
     ba8:	f0 e0       	ldi	r31, 0x00	; 0
     baa:	80 81       	ld	r24, Z
     bac:	80 64       	ori	r24, 0x40	; 64
     bae:	8c 93       	st	X, r24
}
     bb0:	cf 91       	pop	r28
     bb2:	df 91       	pop	r29
     bb4:	08 95       	ret

00000bb6 <EXTI1_VidIntInit>:
void EXTI1_VidIntInit(){
     bb6:	df 93       	push	r29
     bb8:	cf 93       	push	r28
     bba:	cd b7       	in	r28, 0x3d	; 61
     bbc:	de b7       	in	r29, 0x3e	; 62
		CLR_Bit(MCUCR,MCUCR_ISC10_PIN);
#elif	EXTI1_SENSE_CONTROL == EXTI_RISING_EDGE_SC
		Set_Bit(MCUCR,MCUCR_ISC11_PIN);
		Set_Bit(MCUCR,MCUCR_ISC10_PIN);
#elif	EXTI1_SENSE_CONTROL == EXTI_ON_CHANGE_SC
		Set_Bit(MCUCR,MCUCR_ISC10_PIN);
     bbe:	a5 e5       	ldi	r26, 0x55	; 85
     bc0:	b0 e0       	ldi	r27, 0x00	; 0
     bc2:	e5 e5       	ldi	r30, 0x55	; 85
     bc4:	f0 e0       	ldi	r31, 0x00	; 0
     bc6:	80 81       	ld	r24, Z
     bc8:	84 60       	ori	r24, 0x04	; 4
     bca:	8c 93       	st	X, r24
		CLR_Bit(MCUCR,MCUCR_ISC11_PIN);
     bcc:	a5 e5       	ldi	r26, 0x55	; 85
     bce:	b0 e0       	ldi	r27, 0x00	; 0
     bd0:	e5 e5       	ldi	r30, 0x55	; 85
     bd2:	f0 e0       	ldi	r31, 0x00	; 0
     bd4:	80 81       	ld	r24, Z
     bd6:	87 7f       	andi	r24, 0xF7	; 247
     bd8:	8c 93       	st	X, r24
#else
		#warning "No Sense Control Selected, Back to Config File"
#endif
	/*Enable Interrupt*/

		Set_Bit(GICR,GICR_INT1_PIN);
     bda:	ab e5       	ldi	r26, 0x5B	; 91
     bdc:	b0 e0       	ldi	r27, 0x00	; 0
     bde:	eb e5       	ldi	r30, 0x5B	; 91
     be0:	f0 e0       	ldi	r31, 0x00	; 0
     be2:	80 81       	ld	r24, Z
     be4:	80 68       	ori	r24, 0x80	; 128
     be6:	8c 93       	st	X, r24
}
     be8:	cf 91       	pop	r28
     bea:	df 91       	pop	r29
     bec:	08 95       	ret

00000bee <EXTI2_VidIntInit>:
void EXTI2_VidIntInit(){
     bee:	df 93       	push	r29
     bf0:	cf 93       	push	r28
     bf2:	cd b7       	in	r28, 0x3d	; 61
     bf4:	de b7       	in	r29, 0x3e	; 62
	/*Sense Control*/

#if 	EXTI2_SENSE_CONTROL == EXTI_FALLING_EDGE_SC
		CLR_Bit(MCUCSR,MCUCSR_ISC2_PIN);
     bf6:	a4 e5       	ldi	r26, 0x54	; 84
     bf8:	b0 e0       	ldi	r27, 0x00	; 0
     bfa:	e4 e5       	ldi	r30, 0x54	; 84
     bfc:	f0 e0       	ldi	r31, 0x00	; 0
     bfe:	80 81       	ld	r24, Z
     c00:	8f 7b       	andi	r24, 0xBF	; 191
     c02:	8c 93       	st	X, r24
#else
		#warning "No Sense Control Selected, Back to Config File"
#endif
	/*Enable Interrupt*/

		Set_Bit(GICR,GICR_INT2_PIN);
     c04:	ab e5       	ldi	r26, 0x5B	; 91
     c06:	b0 e0       	ldi	r27, 0x00	; 0
     c08:	eb e5       	ldi	r30, 0x5B	; 91
     c0a:	f0 e0       	ldi	r31, 0x00	; 0
     c0c:	80 81       	ld	r24, Z
     c0e:	80 62       	ori	r24, 0x20	; 32
     c10:	8c 93       	st	X, r24
}
     c12:	cf 91       	pop	r28
     c14:	df 91       	pop	r29
     c16:	08 95       	ret

00000c18 <EXTI0_CallBack>:
  returns nothing (void)}.. pointing to NULL*/
void (* EXTI0_Func)(void) = NULL;


/*a function that takes pointer to function as an argument*/
void EXTI0_CallBack (void(*func)(void)){
     c18:	df 93       	push	r29
     c1a:	cf 93       	push	r28
     c1c:	00 d0       	rcall	.+0      	; 0xc1e <EXTI0_CallBack+0x6>
     c1e:	cd b7       	in	r28, 0x3d	; 61
     c20:	de b7       	in	r29, 0x3e	; 62
     c22:	9a 83       	std	Y+2, r25	; 0x02
     c24:	89 83       	std	Y+1, r24	; 0x01
	/*CAll back function pointing to the passed function argument*/
	EXTI0_Func = func ;
     c26:	89 81       	ldd	r24, Y+1	; 0x01
     c28:	9a 81       	ldd	r25, Y+2	; 0x02
     c2a:	90 93 6f 00 	sts	0x006F, r25
     c2e:	80 93 6e 00 	sts	0x006E, r24
}
     c32:	0f 90       	pop	r0
     c34:	0f 90       	pop	r0
     c36:	cf 91       	pop	r28
     c38:	df 91       	pop	r29
     c3a:	08 95       	ret

00000c3c <__vector_1>:

void __vector_1 (void) __attribute__((signal)) ;

void __vector_1 (void){
     c3c:	1f 92       	push	r1
     c3e:	0f 92       	push	r0
     c40:	0f b6       	in	r0, 0x3f	; 63
     c42:	0f 92       	push	r0
     c44:	11 24       	eor	r1, r1
     c46:	2f 93       	push	r18
     c48:	3f 93       	push	r19
     c4a:	4f 93       	push	r20
     c4c:	5f 93       	push	r21
     c4e:	6f 93       	push	r22
     c50:	7f 93       	push	r23
     c52:	8f 93       	push	r24
     c54:	9f 93       	push	r25
     c56:	af 93       	push	r26
     c58:	bf 93       	push	r27
     c5a:	ef 93       	push	r30
     c5c:	ff 93       	push	r31
     c5e:	df 93       	push	r29
     c60:	cf 93       	push	r28
     c62:	cd b7       	in	r28, 0x3d	; 61
     c64:	de b7       	in	r29, 0x3e	; 62
	if(EXTI0_Func != NULL)
     c66:	80 91 6e 00 	lds	r24, 0x006E
     c6a:	90 91 6f 00 	lds	r25, 0x006F
     c6e:	00 97       	sbiw	r24, 0x00	; 0
     c70:	29 f0       	breq	.+10     	; 0xc7c <__vector_1+0x40>
		EXTI0_Func();
     c72:	e0 91 6e 00 	lds	r30, 0x006E
     c76:	f0 91 6f 00 	lds	r31, 0x006F
     c7a:	09 95       	icall
}
     c7c:	cf 91       	pop	r28
     c7e:	df 91       	pop	r29
     c80:	ff 91       	pop	r31
     c82:	ef 91       	pop	r30
     c84:	bf 91       	pop	r27
     c86:	af 91       	pop	r26
     c88:	9f 91       	pop	r25
     c8a:	8f 91       	pop	r24
     c8c:	7f 91       	pop	r23
     c8e:	6f 91       	pop	r22
     c90:	5f 91       	pop	r21
     c92:	4f 91       	pop	r20
     c94:	3f 91       	pop	r19
     c96:	2f 91       	pop	r18
     c98:	0f 90       	pop	r0
     c9a:	0f be       	out	0x3f, r0	; 63
     c9c:	0f 90       	pop	r0
     c9e:	1f 90       	pop	r1
     ca0:	18 95       	reti

00000ca2 <EXTI1_CallBack>:


void (* EXTI1_Func)(void) = NULL; /*ptr*/


void EXTI1_CallBack (void(*func)(void)){ /*fun agr is ptr*/
     ca2:	df 93       	push	r29
     ca4:	cf 93       	push	r28
     ca6:	00 d0       	rcall	.+0      	; 0xca8 <EXTI1_CallBack+0x6>
     ca8:	cd b7       	in	r28, 0x3d	; 61
     caa:	de b7       	in	r29, 0x3e	; 62
     cac:	9a 83       	std	Y+2, r25	; 0x02
     cae:	89 83       	std	Y+1, r24	; 0x01
	EXTI1_Func = func ;
     cb0:	89 81       	ldd	r24, Y+1	; 0x01
     cb2:	9a 81       	ldd	r25, Y+2	; 0x02
     cb4:	90 93 71 00 	sts	0x0071, r25
     cb8:	80 93 70 00 	sts	0x0070, r24
}
     cbc:	0f 90       	pop	r0
     cbe:	0f 90       	pop	r0
     cc0:	cf 91       	pop	r28
     cc2:	df 91       	pop	r29
     cc4:	08 95       	ret

00000cc6 <__vector_2>:

void __vector_2 (void) __attribute__((signal)) ;

void __vector_2 (void){
     cc6:	1f 92       	push	r1
     cc8:	0f 92       	push	r0
     cca:	0f b6       	in	r0, 0x3f	; 63
     ccc:	0f 92       	push	r0
     cce:	11 24       	eor	r1, r1
     cd0:	2f 93       	push	r18
     cd2:	3f 93       	push	r19
     cd4:	4f 93       	push	r20
     cd6:	5f 93       	push	r21
     cd8:	6f 93       	push	r22
     cda:	7f 93       	push	r23
     cdc:	8f 93       	push	r24
     cde:	9f 93       	push	r25
     ce0:	af 93       	push	r26
     ce2:	bf 93       	push	r27
     ce4:	ef 93       	push	r30
     ce6:	ff 93       	push	r31
     ce8:	df 93       	push	r29
     cea:	cf 93       	push	r28
     cec:	cd b7       	in	r28, 0x3d	; 61
     cee:	de b7       	in	r29, 0x3e	; 62
	if(EXTI1_Func != NULL)
     cf0:	80 91 70 00 	lds	r24, 0x0070
     cf4:	90 91 71 00 	lds	r25, 0x0071
     cf8:	00 97       	sbiw	r24, 0x00	; 0
     cfa:	29 f0       	breq	.+10     	; 0xd06 <__vector_2+0x40>
		EXTI1_Func();
     cfc:	e0 91 70 00 	lds	r30, 0x0070
     d00:	f0 91 71 00 	lds	r31, 0x0071
     d04:	09 95       	icall
}
     d06:	cf 91       	pop	r28
     d08:	df 91       	pop	r29
     d0a:	ff 91       	pop	r31
     d0c:	ef 91       	pop	r30
     d0e:	bf 91       	pop	r27
     d10:	af 91       	pop	r26
     d12:	9f 91       	pop	r25
     d14:	8f 91       	pop	r24
     d16:	7f 91       	pop	r23
     d18:	6f 91       	pop	r22
     d1a:	5f 91       	pop	r21
     d1c:	4f 91       	pop	r20
     d1e:	3f 91       	pop	r19
     d20:	2f 91       	pop	r18
     d22:	0f 90       	pop	r0
     d24:	0f be       	out	0x3f, r0	; 63
     d26:	0f 90       	pop	r0
     d28:	1f 90       	pop	r1
     d2a:	18 95       	reti

00000d2c <DIO_VidSetPinValue>:
/*-------------------------------------------------------------------------------------------------------------------------*/
								/**************************set pin*****************************/
/*-------------------------------------------------------------------------------------------------------------------------*/


void DIO_VidSetPinValue(u8 Copy_u8Port, u8 Copy_u8PinNumber, u8 Copy_u8State ){
     d2c:	df 93       	push	r29
     d2e:	cf 93       	push	r28
     d30:	cd b7       	in	r28, 0x3d	; 61
     d32:	de b7       	in	r29, 0x3e	; 62
     d34:	27 97       	sbiw	r28, 0x07	; 7
     d36:	0f b6       	in	r0, 0x3f	; 63
     d38:	f8 94       	cli
     d3a:	de bf       	out	0x3e, r29	; 62
     d3c:	0f be       	out	0x3f, r0	; 63
     d3e:	cd bf       	out	0x3d, r28	; 61
     d40:	89 83       	std	Y+1, r24	; 0x01
     d42:	6a 83       	std	Y+2, r22	; 0x02
     d44:	4b 83       	std	Y+3, r20	; 0x03

	/****************** set pin as input***********************/
	if(Copy_u8State == low){
     d46:	8b 81       	ldd	r24, Y+3	; 0x03
     d48:	88 23       	and	r24, r24
     d4a:	09 f0       	breq	.+2      	; 0xd4e <DIO_VidSetPinValue+0x22>
     d4c:	75 c0       	rjmp	.+234    	; 0xe38 <DIO_VidSetPinValue+0x10c>
		switch (Copy_u8Port) {
     d4e:	89 81       	ldd	r24, Y+1	; 0x01
     d50:	28 2f       	mov	r18, r24
     d52:	30 e0       	ldi	r19, 0x00	; 0
     d54:	3f 83       	std	Y+7, r19	; 0x07
     d56:	2e 83       	std	Y+6, r18	; 0x06
     d58:	8e 81       	ldd	r24, Y+6	; 0x06
     d5a:	9f 81       	ldd	r25, Y+7	; 0x07
     d5c:	83 30       	cpi	r24, 0x03	; 3
     d5e:	91 05       	cpc	r25, r1
     d60:	61 f1       	breq	.+88     	; 0xdba <DIO_VidSetPinValue+0x8e>
     d62:	2e 81       	ldd	r18, Y+6	; 0x06
     d64:	3f 81       	ldd	r19, Y+7	; 0x07
     d66:	24 30       	cpi	r18, 0x04	; 4
     d68:	31 05       	cpc	r19, r1
     d6a:	34 f4       	brge	.+12     	; 0xd78 <DIO_VidSetPinValue+0x4c>
     d6c:	8e 81       	ldd	r24, Y+6	; 0x06
     d6e:	9f 81       	ldd	r25, Y+7	; 0x07
     d70:	82 30       	cpi	r24, 0x02	; 2
     d72:	91 05       	cpc	r25, r1
     d74:	69 f0       	breq	.+26     	; 0xd90 <DIO_VidSetPinValue+0x64>
     d76:	d3 c0       	rjmp	.+422    	; 0xf1e <DIO_VidSetPinValue+0x1f2>
     d78:	2e 81       	ldd	r18, Y+6	; 0x06
     d7a:	3f 81       	ldd	r19, Y+7	; 0x07
     d7c:	24 30       	cpi	r18, 0x04	; 4
     d7e:	31 05       	cpc	r19, r1
     d80:	89 f1       	breq	.+98     	; 0xde4 <DIO_VidSetPinValue+0xb8>
     d82:	8e 81       	ldd	r24, Y+6	; 0x06
     d84:	9f 81       	ldd	r25, Y+7	; 0x07
     d86:	85 30       	cpi	r24, 0x05	; 5
     d88:	91 05       	cpc	r25, r1
     d8a:	09 f4       	brne	.+2      	; 0xd8e <DIO_VidSetPinValue+0x62>
     d8c:	40 c0       	rjmp	.+128    	; 0xe0e <DIO_VidSetPinValue+0xe2>
     d8e:	c7 c0       	rjmp	.+398    	; 0xf1e <DIO_VidSetPinValue+0x1f2>
			case (Port_A) : CLR_Bit(PORTA,Copy_u8PinNumber);break;
     d90:	ab e3       	ldi	r26, 0x3B	; 59
     d92:	b0 e0       	ldi	r27, 0x00	; 0
     d94:	eb e3       	ldi	r30, 0x3B	; 59
     d96:	f0 e0       	ldi	r31, 0x00	; 0
     d98:	80 81       	ld	r24, Z
     d9a:	48 2f       	mov	r20, r24
     d9c:	8a 81       	ldd	r24, Y+2	; 0x02
     d9e:	28 2f       	mov	r18, r24
     da0:	30 e0       	ldi	r19, 0x00	; 0
     da2:	81 e0       	ldi	r24, 0x01	; 1
     da4:	90 e0       	ldi	r25, 0x00	; 0
     da6:	02 2e       	mov	r0, r18
     da8:	02 c0       	rjmp	.+4      	; 0xdae <DIO_VidSetPinValue+0x82>
     daa:	88 0f       	add	r24, r24
     dac:	99 1f       	adc	r25, r25
     dae:	0a 94       	dec	r0
     db0:	e2 f7       	brpl	.-8      	; 0xdaa <DIO_VidSetPinValue+0x7e>
     db2:	80 95       	com	r24
     db4:	84 23       	and	r24, r20
     db6:	8c 93       	st	X, r24
     db8:	b2 c0       	rjmp	.+356    	; 0xf1e <DIO_VidSetPinValue+0x1f2>
			case (Port_B) : CLR_Bit(PORTB,Copy_u8PinNumber);break;
     dba:	a8 e3       	ldi	r26, 0x38	; 56
     dbc:	b0 e0       	ldi	r27, 0x00	; 0
     dbe:	e8 e3       	ldi	r30, 0x38	; 56
     dc0:	f0 e0       	ldi	r31, 0x00	; 0
     dc2:	80 81       	ld	r24, Z
     dc4:	48 2f       	mov	r20, r24
     dc6:	8a 81       	ldd	r24, Y+2	; 0x02
     dc8:	28 2f       	mov	r18, r24
     dca:	30 e0       	ldi	r19, 0x00	; 0
     dcc:	81 e0       	ldi	r24, 0x01	; 1
     dce:	90 e0       	ldi	r25, 0x00	; 0
     dd0:	02 2e       	mov	r0, r18
     dd2:	02 c0       	rjmp	.+4      	; 0xdd8 <DIO_VidSetPinValue+0xac>
     dd4:	88 0f       	add	r24, r24
     dd6:	99 1f       	adc	r25, r25
     dd8:	0a 94       	dec	r0
     dda:	e2 f7       	brpl	.-8      	; 0xdd4 <DIO_VidSetPinValue+0xa8>
     ddc:	80 95       	com	r24
     dde:	84 23       	and	r24, r20
     de0:	8c 93       	st	X, r24
     de2:	9d c0       	rjmp	.+314    	; 0xf1e <DIO_VidSetPinValue+0x1f2>
			case (Port_C) : CLR_Bit(PORTC,Copy_u8PinNumber);break;
     de4:	a5 e3       	ldi	r26, 0x35	; 53
     de6:	b0 e0       	ldi	r27, 0x00	; 0
     de8:	e5 e3       	ldi	r30, 0x35	; 53
     dea:	f0 e0       	ldi	r31, 0x00	; 0
     dec:	80 81       	ld	r24, Z
     dee:	48 2f       	mov	r20, r24
     df0:	8a 81       	ldd	r24, Y+2	; 0x02
     df2:	28 2f       	mov	r18, r24
     df4:	30 e0       	ldi	r19, 0x00	; 0
     df6:	81 e0       	ldi	r24, 0x01	; 1
     df8:	90 e0       	ldi	r25, 0x00	; 0
     dfa:	02 2e       	mov	r0, r18
     dfc:	02 c0       	rjmp	.+4      	; 0xe02 <DIO_VidSetPinValue+0xd6>
     dfe:	88 0f       	add	r24, r24
     e00:	99 1f       	adc	r25, r25
     e02:	0a 94       	dec	r0
     e04:	e2 f7       	brpl	.-8      	; 0xdfe <DIO_VidSetPinValue+0xd2>
     e06:	80 95       	com	r24
     e08:	84 23       	and	r24, r20
     e0a:	8c 93       	st	X, r24
     e0c:	88 c0       	rjmp	.+272    	; 0xf1e <DIO_VidSetPinValue+0x1f2>
			case (Port_D) : CLR_Bit(PORTD,Copy_u8PinNumber);break;
     e0e:	a2 e3       	ldi	r26, 0x32	; 50
     e10:	b0 e0       	ldi	r27, 0x00	; 0
     e12:	e2 e3       	ldi	r30, 0x32	; 50
     e14:	f0 e0       	ldi	r31, 0x00	; 0
     e16:	80 81       	ld	r24, Z
     e18:	48 2f       	mov	r20, r24
     e1a:	8a 81       	ldd	r24, Y+2	; 0x02
     e1c:	28 2f       	mov	r18, r24
     e1e:	30 e0       	ldi	r19, 0x00	; 0
     e20:	81 e0       	ldi	r24, 0x01	; 1
     e22:	90 e0       	ldi	r25, 0x00	; 0
     e24:	02 2e       	mov	r0, r18
     e26:	02 c0       	rjmp	.+4      	; 0xe2c <DIO_VidSetPinValue+0x100>
     e28:	88 0f       	add	r24, r24
     e2a:	99 1f       	adc	r25, r25
     e2c:	0a 94       	dec	r0
     e2e:	e2 f7       	brpl	.-8      	; 0xe28 <DIO_VidSetPinValue+0xfc>
     e30:	80 95       	com	r24
     e32:	84 23       	and	r24, r20
     e34:	8c 93       	st	X, r24
     e36:	73 c0       	rjmp	.+230    	; 0xf1e <DIO_VidSetPinValue+0x1f2>
		}
	}
	/****************** set pin as output***********************/
	else if(Copy_u8State == high){
     e38:	8b 81       	ldd	r24, Y+3	; 0x03
     e3a:	81 30       	cpi	r24, 0x01	; 1
     e3c:	09 f0       	breq	.+2      	; 0xe40 <DIO_VidSetPinValue+0x114>
     e3e:	6f c0       	rjmp	.+222    	; 0xf1e <DIO_VidSetPinValue+0x1f2>
		switch (Copy_u8Port) {
     e40:	89 81       	ldd	r24, Y+1	; 0x01
     e42:	28 2f       	mov	r18, r24
     e44:	30 e0       	ldi	r19, 0x00	; 0
     e46:	3d 83       	std	Y+5, r19	; 0x05
     e48:	2c 83       	std	Y+4, r18	; 0x04
     e4a:	8c 81       	ldd	r24, Y+4	; 0x04
     e4c:	9d 81       	ldd	r25, Y+5	; 0x05
     e4e:	83 30       	cpi	r24, 0x03	; 3
     e50:	91 05       	cpc	r25, r1
     e52:	51 f1       	breq	.+84     	; 0xea8 <DIO_VidSetPinValue+0x17c>
     e54:	2c 81       	ldd	r18, Y+4	; 0x04
     e56:	3d 81       	ldd	r19, Y+5	; 0x05
     e58:	24 30       	cpi	r18, 0x04	; 4
     e5a:	31 05       	cpc	r19, r1
     e5c:	34 f4       	brge	.+12     	; 0xe6a <DIO_VidSetPinValue+0x13e>
     e5e:	8c 81       	ldd	r24, Y+4	; 0x04
     e60:	9d 81       	ldd	r25, Y+5	; 0x05
     e62:	82 30       	cpi	r24, 0x02	; 2
     e64:	91 05       	cpc	r25, r1
     e66:	61 f0       	breq	.+24     	; 0xe80 <DIO_VidSetPinValue+0x154>
     e68:	5a c0       	rjmp	.+180    	; 0xf1e <DIO_VidSetPinValue+0x1f2>
     e6a:	2c 81       	ldd	r18, Y+4	; 0x04
     e6c:	3d 81       	ldd	r19, Y+5	; 0x05
     e6e:	24 30       	cpi	r18, 0x04	; 4
     e70:	31 05       	cpc	r19, r1
     e72:	71 f1       	breq	.+92     	; 0xed0 <DIO_VidSetPinValue+0x1a4>
     e74:	8c 81       	ldd	r24, Y+4	; 0x04
     e76:	9d 81       	ldd	r25, Y+5	; 0x05
     e78:	85 30       	cpi	r24, 0x05	; 5
     e7a:	91 05       	cpc	r25, r1
     e7c:	e9 f1       	breq	.+122    	; 0xef8 <DIO_VidSetPinValue+0x1cc>
     e7e:	4f c0       	rjmp	.+158    	; 0xf1e <DIO_VidSetPinValue+0x1f2>
			case (Port_A) : Set_Bit(PORTA,Copy_u8PinNumber);break;
     e80:	ab e3       	ldi	r26, 0x3B	; 59
     e82:	b0 e0       	ldi	r27, 0x00	; 0
     e84:	eb e3       	ldi	r30, 0x3B	; 59
     e86:	f0 e0       	ldi	r31, 0x00	; 0
     e88:	80 81       	ld	r24, Z
     e8a:	48 2f       	mov	r20, r24
     e8c:	8a 81       	ldd	r24, Y+2	; 0x02
     e8e:	28 2f       	mov	r18, r24
     e90:	30 e0       	ldi	r19, 0x00	; 0
     e92:	81 e0       	ldi	r24, 0x01	; 1
     e94:	90 e0       	ldi	r25, 0x00	; 0
     e96:	02 2e       	mov	r0, r18
     e98:	02 c0       	rjmp	.+4      	; 0xe9e <DIO_VidSetPinValue+0x172>
     e9a:	88 0f       	add	r24, r24
     e9c:	99 1f       	adc	r25, r25
     e9e:	0a 94       	dec	r0
     ea0:	e2 f7       	brpl	.-8      	; 0xe9a <DIO_VidSetPinValue+0x16e>
     ea2:	84 2b       	or	r24, r20
     ea4:	8c 93       	st	X, r24
     ea6:	3b c0       	rjmp	.+118    	; 0xf1e <DIO_VidSetPinValue+0x1f2>
			case (Port_B) : Set_Bit(PORTB,Copy_u8PinNumber);break;
     ea8:	a8 e3       	ldi	r26, 0x38	; 56
     eaa:	b0 e0       	ldi	r27, 0x00	; 0
     eac:	e8 e3       	ldi	r30, 0x38	; 56
     eae:	f0 e0       	ldi	r31, 0x00	; 0
     eb0:	80 81       	ld	r24, Z
     eb2:	48 2f       	mov	r20, r24
     eb4:	8a 81       	ldd	r24, Y+2	; 0x02
     eb6:	28 2f       	mov	r18, r24
     eb8:	30 e0       	ldi	r19, 0x00	; 0
     eba:	81 e0       	ldi	r24, 0x01	; 1
     ebc:	90 e0       	ldi	r25, 0x00	; 0
     ebe:	02 2e       	mov	r0, r18
     ec0:	02 c0       	rjmp	.+4      	; 0xec6 <DIO_VidSetPinValue+0x19a>
     ec2:	88 0f       	add	r24, r24
     ec4:	99 1f       	adc	r25, r25
     ec6:	0a 94       	dec	r0
     ec8:	e2 f7       	brpl	.-8      	; 0xec2 <DIO_VidSetPinValue+0x196>
     eca:	84 2b       	or	r24, r20
     ecc:	8c 93       	st	X, r24
     ece:	27 c0       	rjmp	.+78     	; 0xf1e <DIO_VidSetPinValue+0x1f2>
			case (Port_C) : Set_Bit(PORTC,Copy_u8PinNumber);break;
     ed0:	a5 e3       	ldi	r26, 0x35	; 53
     ed2:	b0 e0       	ldi	r27, 0x00	; 0
     ed4:	e5 e3       	ldi	r30, 0x35	; 53
     ed6:	f0 e0       	ldi	r31, 0x00	; 0
     ed8:	80 81       	ld	r24, Z
     eda:	48 2f       	mov	r20, r24
     edc:	8a 81       	ldd	r24, Y+2	; 0x02
     ede:	28 2f       	mov	r18, r24
     ee0:	30 e0       	ldi	r19, 0x00	; 0
     ee2:	81 e0       	ldi	r24, 0x01	; 1
     ee4:	90 e0       	ldi	r25, 0x00	; 0
     ee6:	02 2e       	mov	r0, r18
     ee8:	02 c0       	rjmp	.+4      	; 0xeee <DIO_VidSetPinValue+0x1c2>
     eea:	88 0f       	add	r24, r24
     eec:	99 1f       	adc	r25, r25
     eee:	0a 94       	dec	r0
     ef0:	e2 f7       	brpl	.-8      	; 0xeea <DIO_VidSetPinValue+0x1be>
     ef2:	84 2b       	or	r24, r20
     ef4:	8c 93       	st	X, r24
     ef6:	13 c0       	rjmp	.+38     	; 0xf1e <DIO_VidSetPinValue+0x1f2>
			case (Port_D) : Set_Bit(PORTD,Copy_u8PinNumber);break;
     ef8:	a2 e3       	ldi	r26, 0x32	; 50
     efa:	b0 e0       	ldi	r27, 0x00	; 0
     efc:	e2 e3       	ldi	r30, 0x32	; 50
     efe:	f0 e0       	ldi	r31, 0x00	; 0
     f00:	80 81       	ld	r24, Z
     f02:	48 2f       	mov	r20, r24
     f04:	8a 81       	ldd	r24, Y+2	; 0x02
     f06:	28 2f       	mov	r18, r24
     f08:	30 e0       	ldi	r19, 0x00	; 0
     f0a:	81 e0       	ldi	r24, 0x01	; 1
     f0c:	90 e0       	ldi	r25, 0x00	; 0
     f0e:	02 2e       	mov	r0, r18
     f10:	02 c0       	rjmp	.+4      	; 0xf16 <DIO_VidSetPinValue+0x1ea>
     f12:	88 0f       	add	r24, r24
     f14:	99 1f       	adc	r25, r25
     f16:	0a 94       	dec	r0
     f18:	e2 f7       	brpl	.-8      	; 0xf12 <DIO_VidSetPinValue+0x1e6>
     f1a:	84 2b       	or	r24, r20
     f1c:	8c 93       	st	X, r24
		}
	}
}
     f1e:	27 96       	adiw	r28, 0x07	; 7
     f20:	0f b6       	in	r0, 0x3f	; 63
     f22:	f8 94       	cli
     f24:	de bf       	out	0x3e, r29	; 62
     f26:	0f be       	out	0x3f, r0	; 63
     f28:	cd bf       	out	0x3d, r28	; 61
     f2a:	cf 91       	pop	r28
     f2c:	df 91       	pop	r29
     f2e:	08 95       	ret

00000f30 <DIO_VidSetPinDirection>:

void DIO_VidSetPinDirection(u8 Copy_u8Port, u8 Copy_u8PinNumber,u8 Copy_u8PinDirection)
{
     f30:	df 93       	push	r29
     f32:	cf 93       	push	r28
     f34:	cd b7       	in	r28, 0x3d	; 61
     f36:	de b7       	in	r29, 0x3e	; 62
     f38:	27 97       	sbiw	r28, 0x07	; 7
     f3a:	0f b6       	in	r0, 0x3f	; 63
     f3c:	f8 94       	cli
     f3e:	de bf       	out	0x3e, r29	; 62
     f40:	0f be       	out	0x3f, r0	; 63
     f42:	cd bf       	out	0x3d, r28	; 61
     f44:	89 83       	std	Y+1, r24	; 0x01
     f46:	6a 83       	std	Y+2, r22	; 0x02
     f48:	4b 83       	std	Y+3, r20	; 0x03
	/****************** set pin as input***********************/
	if(Copy_u8PinDirection == input){
     f4a:	8b 81       	ldd	r24, Y+3	; 0x03
     f4c:	88 23       	and	r24, r24
     f4e:	09 f0       	breq	.+2      	; 0xf52 <DIO_VidSetPinDirection+0x22>
     f50:	75 c0       	rjmp	.+234    	; 0x103c <DIO_VidSetPinDirection+0x10c>
		switch (Copy_u8Port) {
     f52:	89 81       	ldd	r24, Y+1	; 0x01
     f54:	28 2f       	mov	r18, r24
     f56:	30 e0       	ldi	r19, 0x00	; 0
     f58:	3f 83       	std	Y+7, r19	; 0x07
     f5a:	2e 83       	std	Y+6, r18	; 0x06
     f5c:	8e 81       	ldd	r24, Y+6	; 0x06
     f5e:	9f 81       	ldd	r25, Y+7	; 0x07
     f60:	83 30       	cpi	r24, 0x03	; 3
     f62:	91 05       	cpc	r25, r1
     f64:	61 f1       	breq	.+88     	; 0xfbe <DIO_VidSetPinDirection+0x8e>
     f66:	2e 81       	ldd	r18, Y+6	; 0x06
     f68:	3f 81       	ldd	r19, Y+7	; 0x07
     f6a:	24 30       	cpi	r18, 0x04	; 4
     f6c:	31 05       	cpc	r19, r1
     f6e:	34 f4       	brge	.+12     	; 0xf7c <DIO_VidSetPinDirection+0x4c>
     f70:	8e 81       	ldd	r24, Y+6	; 0x06
     f72:	9f 81       	ldd	r25, Y+7	; 0x07
     f74:	82 30       	cpi	r24, 0x02	; 2
     f76:	91 05       	cpc	r25, r1
     f78:	69 f0       	breq	.+26     	; 0xf94 <DIO_VidSetPinDirection+0x64>
     f7a:	d3 c0       	rjmp	.+422    	; 0x1122 <DIO_VidSetPinDirection+0x1f2>
     f7c:	2e 81       	ldd	r18, Y+6	; 0x06
     f7e:	3f 81       	ldd	r19, Y+7	; 0x07
     f80:	24 30       	cpi	r18, 0x04	; 4
     f82:	31 05       	cpc	r19, r1
     f84:	89 f1       	breq	.+98     	; 0xfe8 <DIO_VidSetPinDirection+0xb8>
     f86:	8e 81       	ldd	r24, Y+6	; 0x06
     f88:	9f 81       	ldd	r25, Y+7	; 0x07
     f8a:	85 30       	cpi	r24, 0x05	; 5
     f8c:	91 05       	cpc	r25, r1
     f8e:	09 f4       	brne	.+2      	; 0xf92 <DIO_VidSetPinDirection+0x62>
     f90:	40 c0       	rjmp	.+128    	; 0x1012 <DIO_VidSetPinDirection+0xe2>
     f92:	c7 c0       	rjmp	.+398    	; 0x1122 <DIO_VidSetPinDirection+0x1f2>
			case (Port_A) : CLR_Bit(DDRA,Copy_u8PinNumber);break;
     f94:	aa e3       	ldi	r26, 0x3A	; 58
     f96:	b0 e0       	ldi	r27, 0x00	; 0
     f98:	ea e3       	ldi	r30, 0x3A	; 58
     f9a:	f0 e0       	ldi	r31, 0x00	; 0
     f9c:	80 81       	ld	r24, Z
     f9e:	48 2f       	mov	r20, r24
     fa0:	8a 81       	ldd	r24, Y+2	; 0x02
     fa2:	28 2f       	mov	r18, r24
     fa4:	30 e0       	ldi	r19, 0x00	; 0
     fa6:	81 e0       	ldi	r24, 0x01	; 1
     fa8:	90 e0       	ldi	r25, 0x00	; 0
     faa:	02 2e       	mov	r0, r18
     fac:	02 c0       	rjmp	.+4      	; 0xfb2 <DIO_VidSetPinDirection+0x82>
     fae:	88 0f       	add	r24, r24
     fb0:	99 1f       	adc	r25, r25
     fb2:	0a 94       	dec	r0
     fb4:	e2 f7       	brpl	.-8      	; 0xfae <DIO_VidSetPinDirection+0x7e>
     fb6:	80 95       	com	r24
     fb8:	84 23       	and	r24, r20
     fba:	8c 93       	st	X, r24
     fbc:	b2 c0       	rjmp	.+356    	; 0x1122 <DIO_VidSetPinDirection+0x1f2>
			case (Port_B) : CLR_Bit(DDRB,Copy_u8PinNumber);break;
     fbe:	a7 e3       	ldi	r26, 0x37	; 55
     fc0:	b0 e0       	ldi	r27, 0x00	; 0
     fc2:	e7 e3       	ldi	r30, 0x37	; 55
     fc4:	f0 e0       	ldi	r31, 0x00	; 0
     fc6:	80 81       	ld	r24, Z
     fc8:	48 2f       	mov	r20, r24
     fca:	8a 81       	ldd	r24, Y+2	; 0x02
     fcc:	28 2f       	mov	r18, r24
     fce:	30 e0       	ldi	r19, 0x00	; 0
     fd0:	81 e0       	ldi	r24, 0x01	; 1
     fd2:	90 e0       	ldi	r25, 0x00	; 0
     fd4:	02 2e       	mov	r0, r18
     fd6:	02 c0       	rjmp	.+4      	; 0xfdc <DIO_VidSetPinDirection+0xac>
     fd8:	88 0f       	add	r24, r24
     fda:	99 1f       	adc	r25, r25
     fdc:	0a 94       	dec	r0
     fde:	e2 f7       	brpl	.-8      	; 0xfd8 <DIO_VidSetPinDirection+0xa8>
     fe0:	80 95       	com	r24
     fe2:	84 23       	and	r24, r20
     fe4:	8c 93       	st	X, r24
     fe6:	9d c0       	rjmp	.+314    	; 0x1122 <DIO_VidSetPinDirection+0x1f2>
			case (Port_C) : CLR_Bit(DDRC,Copy_u8PinNumber);break;
     fe8:	a4 e3       	ldi	r26, 0x34	; 52
     fea:	b0 e0       	ldi	r27, 0x00	; 0
     fec:	e4 e3       	ldi	r30, 0x34	; 52
     fee:	f0 e0       	ldi	r31, 0x00	; 0
     ff0:	80 81       	ld	r24, Z
     ff2:	48 2f       	mov	r20, r24
     ff4:	8a 81       	ldd	r24, Y+2	; 0x02
     ff6:	28 2f       	mov	r18, r24
     ff8:	30 e0       	ldi	r19, 0x00	; 0
     ffa:	81 e0       	ldi	r24, 0x01	; 1
     ffc:	90 e0       	ldi	r25, 0x00	; 0
     ffe:	02 2e       	mov	r0, r18
    1000:	02 c0       	rjmp	.+4      	; 0x1006 <DIO_VidSetPinDirection+0xd6>
    1002:	88 0f       	add	r24, r24
    1004:	99 1f       	adc	r25, r25
    1006:	0a 94       	dec	r0
    1008:	e2 f7       	brpl	.-8      	; 0x1002 <DIO_VidSetPinDirection+0xd2>
    100a:	80 95       	com	r24
    100c:	84 23       	and	r24, r20
    100e:	8c 93       	st	X, r24
    1010:	88 c0       	rjmp	.+272    	; 0x1122 <DIO_VidSetPinDirection+0x1f2>
			case (Port_D) : CLR_Bit(DDRD,Copy_u8PinNumber);break;
    1012:	a1 e3       	ldi	r26, 0x31	; 49
    1014:	b0 e0       	ldi	r27, 0x00	; 0
    1016:	e1 e3       	ldi	r30, 0x31	; 49
    1018:	f0 e0       	ldi	r31, 0x00	; 0
    101a:	80 81       	ld	r24, Z
    101c:	48 2f       	mov	r20, r24
    101e:	8a 81       	ldd	r24, Y+2	; 0x02
    1020:	28 2f       	mov	r18, r24
    1022:	30 e0       	ldi	r19, 0x00	; 0
    1024:	81 e0       	ldi	r24, 0x01	; 1
    1026:	90 e0       	ldi	r25, 0x00	; 0
    1028:	02 2e       	mov	r0, r18
    102a:	02 c0       	rjmp	.+4      	; 0x1030 <DIO_VidSetPinDirection+0x100>
    102c:	88 0f       	add	r24, r24
    102e:	99 1f       	adc	r25, r25
    1030:	0a 94       	dec	r0
    1032:	e2 f7       	brpl	.-8      	; 0x102c <DIO_VidSetPinDirection+0xfc>
    1034:	80 95       	com	r24
    1036:	84 23       	and	r24, r20
    1038:	8c 93       	st	X, r24
    103a:	73 c0       	rjmp	.+230    	; 0x1122 <DIO_VidSetPinDirection+0x1f2>
		}
	}
	/****************** set pin as output***********************/
	else if(Copy_u8PinDirection == output){
    103c:	8b 81       	ldd	r24, Y+3	; 0x03
    103e:	81 30       	cpi	r24, 0x01	; 1
    1040:	09 f0       	breq	.+2      	; 0x1044 <DIO_VidSetPinDirection+0x114>
    1042:	6f c0       	rjmp	.+222    	; 0x1122 <DIO_VidSetPinDirection+0x1f2>
		switch (Copy_u8Port) {
    1044:	89 81       	ldd	r24, Y+1	; 0x01
    1046:	28 2f       	mov	r18, r24
    1048:	30 e0       	ldi	r19, 0x00	; 0
    104a:	3d 83       	std	Y+5, r19	; 0x05
    104c:	2c 83       	std	Y+4, r18	; 0x04
    104e:	8c 81       	ldd	r24, Y+4	; 0x04
    1050:	9d 81       	ldd	r25, Y+5	; 0x05
    1052:	83 30       	cpi	r24, 0x03	; 3
    1054:	91 05       	cpc	r25, r1
    1056:	51 f1       	breq	.+84     	; 0x10ac <DIO_VidSetPinDirection+0x17c>
    1058:	2c 81       	ldd	r18, Y+4	; 0x04
    105a:	3d 81       	ldd	r19, Y+5	; 0x05
    105c:	24 30       	cpi	r18, 0x04	; 4
    105e:	31 05       	cpc	r19, r1
    1060:	34 f4       	brge	.+12     	; 0x106e <DIO_VidSetPinDirection+0x13e>
    1062:	8c 81       	ldd	r24, Y+4	; 0x04
    1064:	9d 81       	ldd	r25, Y+5	; 0x05
    1066:	82 30       	cpi	r24, 0x02	; 2
    1068:	91 05       	cpc	r25, r1
    106a:	61 f0       	breq	.+24     	; 0x1084 <DIO_VidSetPinDirection+0x154>
    106c:	5a c0       	rjmp	.+180    	; 0x1122 <DIO_VidSetPinDirection+0x1f2>
    106e:	2c 81       	ldd	r18, Y+4	; 0x04
    1070:	3d 81       	ldd	r19, Y+5	; 0x05
    1072:	24 30       	cpi	r18, 0x04	; 4
    1074:	31 05       	cpc	r19, r1
    1076:	71 f1       	breq	.+92     	; 0x10d4 <DIO_VidSetPinDirection+0x1a4>
    1078:	8c 81       	ldd	r24, Y+4	; 0x04
    107a:	9d 81       	ldd	r25, Y+5	; 0x05
    107c:	85 30       	cpi	r24, 0x05	; 5
    107e:	91 05       	cpc	r25, r1
    1080:	e9 f1       	breq	.+122    	; 0x10fc <DIO_VidSetPinDirection+0x1cc>
    1082:	4f c0       	rjmp	.+158    	; 0x1122 <DIO_VidSetPinDirection+0x1f2>
			case (Port_A) : Set_Bit(DDRA,Copy_u8PinNumber);break;
    1084:	aa e3       	ldi	r26, 0x3A	; 58
    1086:	b0 e0       	ldi	r27, 0x00	; 0
    1088:	ea e3       	ldi	r30, 0x3A	; 58
    108a:	f0 e0       	ldi	r31, 0x00	; 0
    108c:	80 81       	ld	r24, Z
    108e:	48 2f       	mov	r20, r24
    1090:	8a 81       	ldd	r24, Y+2	; 0x02
    1092:	28 2f       	mov	r18, r24
    1094:	30 e0       	ldi	r19, 0x00	; 0
    1096:	81 e0       	ldi	r24, 0x01	; 1
    1098:	90 e0       	ldi	r25, 0x00	; 0
    109a:	02 2e       	mov	r0, r18
    109c:	02 c0       	rjmp	.+4      	; 0x10a2 <DIO_VidSetPinDirection+0x172>
    109e:	88 0f       	add	r24, r24
    10a0:	99 1f       	adc	r25, r25
    10a2:	0a 94       	dec	r0
    10a4:	e2 f7       	brpl	.-8      	; 0x109e <DIO_VidSetPinDirection+0x16e>
    10a6:	84 2b       	or	r24, r20
    10a8:	8c 93       	st	X, r24
    10aa:	3b c0       	rjmp	.+118    	; 0x1122 <DIO_VidSetPinDirection+0x1f2>
			case (Port_B) : Set_Bit(DDRB,Copy_u8PinNumber);break;
    10ac:	a7 e3       	ldi	r26, 0x37	; 55
    10ae:	b0 e0       	ldi	r27, 0x00	; 0
    10b0:	e7 e3       	ldi	r30, 0x37	; 55
    10b2:	f0 e0       	ldi	r31, 0x00	; 0
    10b4:	80 81       	ld	r24, Z
    10b6:	48 2f       	mov	r20, r24
    10b8:	8a 81       	ldd	r24, Y+2	; 0x02
    10ba:	28 2f       	mov	r18, r24
    10bc:	30 e0       	ldi	r19, 0x00	; 0
    10be:	81 e0       	ldi	r24, 0x01	; 1
    10c0:	90 e0       	ldi	r25, 0x00	; 0
    10c2:	02 2e       	mov	r0, r18
    10c4:	02 c0       	rjmp	.+4      	; 0x10ca <DIO_VidSetPinDirection+0x19a>
    10c6:	88 0f       	add	r24, r24
    10c8:	99 1f       	adc	r25, r25
    10ca:	0a 94       	dec	r0
    10cc:	e2 f7       	brpl	.-8      	; 0x10c6 <DIO_VidSetPinDirection+0x196>
    10ce:	84 2b       	or	r24, r20
    10d0:	8c 93       	st	X, r24
    10d2:	27 c0       	rjmp	.+78     	; 0x1122 <DIO_VidSetPinDirection+0x1f2>
			case (Port_C) : Set_Bit(DDRC,Copy_u8PinNumber);break;
    10d4:	a4 e3       	ldi	r26, 0x34	; 52
    10d6:	b0 e0       	ldi	r27, 0x00	; 0
    10d8:	e4 e3       	ldi	r30, 0x34	; 52
    10da:	f0 e0       	ldi	r31, 0x00	; 0
    10dc:	80 81       	ld	r24, Z
    10de:	48 2f       	mov	r20, r24
    10e0:	8a 81       	ldd	r24, Y+2	; 0x02
    10e2:	28 2f       	mov	r18, r24
    10e4:	30 e0       	ldi	r19, 0x00	; 0
    10e6:	81 e0       	ldi	r24, 0x01	; 1
    10e8:	90 e0       	ldi	r25, 0x00	; 0
    10ea:	02 2e       	mov	r0, r18
    10ec:	02 c0       	rjmp	.+4      	; 0x10f2 <DIO_VidSetPinDirection+0x1c2>
    10ee:	88 0f       	add	r24, r24
    10f0:	99 1f       	adc	r25, r25
    10f2:	0a 94       	dec	r0
    10f4:	e2 f7       	brpl	.-8      	; 0x10ee <DIO_VidSetPinDirection+0x1be>
    10f6:	84 2b       	or	r24, r20
    10f8:	8c 93       	st	X, r24
    10fa:	13 c0       	rjmp	.+38     	; 0x1122 <DIO_VidSetPinDirection+0x1f2>
			case (Port_D) : Set_Bit(DDRD,Copy_u8PinNumber);break;
    10fc:	a1 e3       	ldi	r26, 0x31	; 49
    10fe:	b0 e0       	ldi	r27, 0x00	; 0
    1100:	e1 e3       	ldi	r30, 0x31	; 49
    1102:	f0 e0       	ldi	r31, 0x00	; 0
    1104:	80 81       	ld	r24, Z
    1106:	48 2f       	mov	r20, r24
    1108:	8a 81       	ldd	r24, Y+2	; 0x02
    110a:	28 2f       	mov	r18, r24
    110c:	30 e0       	ldi	r19, 0x00	; 0
    110e:	81 e0       	ldi	r24, 0x01	; 1
    1110:	90 e0       	ldi	r25, 0x00	; 0
    1112:	02 2e       	mov	r0, r18
    1114:	02 c0       	rjmp	.+4      	; 0x111a <DIO_VidSetPinDirection+0x1ea>
    1116:	88 0f       	add	r24, r24
    1118:	99 1f       	adc	r25, r25
    111a:	0a 94       	dec	r0
    111c:	e2 f7       	brpl	.-8      	; 0x1116 <DIO_VidSetPinDirection+0x1e6>
    111e:	84 2b       	or	r24, r20
    1120:	8c 93       	st	X, r24
		}
	}
}
    1122:	27 96       	adiw	r28, 0x07	; 7
    1124:	0f b6       	in	r0, 0x3f	; 63
    1126:	f8 94       	cli
    1128:	de bf       	out	0x3e, r29	; 62
    112a:	0f be       	out	0x3f, r0	; 63
    112c:	cd bf       	out	0x3d, r28	; 61
    112e:	cf 91       	pop	r28
    1130:	df 91       	pop	r29
    1132:	08 95       	ret

00001134 <DIO_VidGetPinValue>:


void DIO_VidGetPinValue(u8 Copy_u8Port, u8 Copy_u8PinNumber, u8* Copy_Pu8PinValue)
{
    1134:	df 93       	push	r29
    1136:	cf 93       	push	r28
    1138:	00 d0       	rcall	.+0      	; 0x113a <DIO_VidGetPinValue+0x6>
    113a:	00 d0       	rcall	.+0      	; 0x113c <DIO_VidGetPinValue+0x8>
    113c:	00 d0       	rcall	.+0      	; 0x113e <DIO_VidGetPinValue+0xa>
    113e:	cd b7       	in	r28, 0x3d	; 61
    1140:	de b7       	in	r29, 0x3e	; 62
    1142:	89 83       	std	Y+1, r24	; 0x01
    1144:	6a 83       	std	Y+2, r22	; 0x02
    1146:	5c 83       	std	Y+4, r21	; 0x04
    1148:	4b 83       	std	Y+3, r20	; 0x03
	/****************** set pin as input***********************/
		switch (Copy_u8Port) {
    114a:	89 81       	ldd	r24, Y+1	; 0x01
    114c:	28 2f       	mov	r18, r24
    114e:	30 e0       	ldi	r19, 0x00	; 0
    1150:	3e 83       	std	Y+6, r19	; 0x06
    1152:	2d 83       	std	Y+5, r18	; 0x05
    1154:	4d 81       	ldd	r20, Y+5	; 0x05
    1156:	5e 81       	ldd	r21, Y+6	; 0x06
    1158:	43 30       	cpi	r20, 0x03	; 3
    115a:	51 05       	cpc	r21, r1
    115c:	59 f1       	breq	.+86     	; 0x11b4 <DIO_VidGetPinValue+0x80>
    115e:	8d 81       	ldd	r24, Y+5	; 0x05
    1160:	9e 81       	ldd	r25, Y+6	; 0x06
    1162:	84 30       	cpi	r24, 0x04	; 4
    1164:	91 05       	cpc	r25, r1
    1166:	34 f4       	brge	.+12     	; 0x1174 <DIO_VidGetPinValue+0x40>
    1168:	2d 81       	ldd	r18, Y+5	; 0x05
    116a:	3e 81       	ldd	r19, Y+6	; 0x06
    116c:	22 30       	cpi	r18, 0x02	; 2
    116e:	31 05       	cpc	r19, r1
    1170:	69 f0       	breq	.+26     	; 0x118c <DIO_VidGetPinValue+0x58>
    1172:	5b c0       	rjmp	.+182    	; 0x122a <DIO_VidGetPinValue+0xf6>
    1174:	4d 81       	ldd	r20, Y+5	; 0x05
    1176:	5e 81       	ldd	r21, Y+6	; 0x06
    1178:	44 30       	cpi	r20, 0x04	; 4
    117a:	51 05       	cpc	r21, r1
    117c:	79 f1       	breq	.+94     	; 0x11dc <DIO_VidGetPinValue+0xa8>
    117e:	8d 81       	ldd	r24, Y+5	; 0x05
    1180:	9e 81       	ldd	r25, Y+6	; 0x06
    1182:	85 30       	cpi	r24, 0x05	; 5
    1184:	91 05       	cpc	r25, r1
    1186:	09 f4       	brne	.+2      	; 0x118a <DIO_VidGetPinValue+0x56>
    1188:	3d c0       	rjmp	.+122    	; 0x1204 <DIO_VidGetPinValue+0xd0>
    118a:	4f c0       	rjmp	.+158    	; 0x122a <DIO_VidGetPinValue+0xf6>
			case (Port_A) : *Copy_Pu8PinValue = Get_Bit(PINA,Copy_u8PinNumber);break;
    118c:	e9 e3       	ldi	r30, 0x39	; 57
    118e:	f0 e0       	ldi	r31, 0x00	; 0
    1190:	80 81       	ld	r24, Z
    1192:	28 2f       	mov	r18, r24
    1194:	30 e0       	ldi	r19, 0x00	; 0
    1196:	8a 81       	ldd	r24, Y+2	; 0x02
    1198:	88 2f       	mov	r24, r24
    119a:	90 e0       	ldi	r25, 0x00	; 0
    119c:	a9 01       	movw	r20, r18
    119e:	02 c0       	rjmp	.+4      	; 0x11a4 <DIO_VidGetPinValue+0x70>
    11a0:	55 95       	asr	r21
    11a2:	47 95       	ror	r20
    11a4:	8a 95       	dec	r24
    11a6:	e2 f7       	brpl	.-8      	; 0x11a0 <DIO_VidGetPinValue+0x6c>
    11a8:	ca 01       	movw	r24, r20
    11aa:	81 70       	andi	r24, 0x01	; 1
    11ac:	eb 81       	ldd	r30, Y+3	; 0x03
    11ae:	fc 81       	ldd	r31, Y+4	; 0x04
    11b0:	80 83       	st	Z, r24
    11b2:	3b c0       	rjmp	.+118    	; 0x122a <DIO_VidGetPinValue+0xf6>
			case (Port_B) : *Copy_Pu8PinValue = Get_Bit(PINB,Copy_u8PinNumber);break;
    11b4:	e6 e3       	ldi	r30, 0x36	; 54
    11b6:	f0 e0       	ldi	r31, 0x00	; 0
    11b8:	80 81       	ld	r24, Z
    11ba:	28 2f       	mov	r18, r24
    11bc:	30 e0       	ldi	r19, 0x00	; 0
    11be:	8a 81       	ldd	r24, Y+2	; 0x02
    11c0:	88 2f       	mov	r24, r24
    11c2:	90 e0       	ldi	r25, 0x00	; 0
    11c4:	a9 01       	movw	r20, r18
    11c6:	02 c0       	rjmp	.+4      	; 0x11cc <DIO_VidGetPinValue+0x98>
    11c8:	55 95       	asr	r21
    11ca:	47 95       	ror	r20
    11cc:	8a 95       	dec	r24
    11ce:	e2 f7       	brpl	.-8      	; 0x11c8 <DIO_VidGetPinValue+0x94>
    11d0:	ca 01       	movw	r24, r20
    11d2:	81 70       	andi	r24, 0x01	; 1
    11d4:	eb 81       	ldd	r30, Y+3	; 0x03
    11d6:	fc 81       	ldd	r31, Y+4	; 0x04
    11d8:	80 83       	st	Z, r24
    11da:	27 c0       	rjmp	.+78     	; 0x122a <DIO_VidGetPinValue+0xf6>
			case (Port_C) : *Copy_Pu8PinValue = Get_Bit(PINC,Copy_u8PinNumber);break;
    11dc:	e3 e3       	ldi	r30, 0x33	; 51
    11de:	f0 e0       	ldi	r31, 0x00	; 0
    11e0:	80 81       	ld	r24, Z
    11e2:	28 2f       	mov	r18, r24
    11e4:	30 e0       	ldi	r19, 0x00	; 0
    11e6:	8a 81       	ldd	r24, Y+2	; 0x02
    11e8:	88 2f       	mov	r24, r24
    11ea:	90 e0       	ldi	r25, 0x00	; 0
    11ec:	a9 01       	movw	r20, r18
    11ee:	02 c0       	rjmp	.+4      	; 0x11f4 <DIO_VidGetPinValue+0xc0>
    11f0:	55 95       	asr	r21
    11f2:	47 95       	ror	r20
    11f4:	8a 95       	dec	r24
    11f6:	e2 f7       	brpl	.-8      	; 0x11f0 <DIO_VidGetPinValue+0xbc>
    11f8:	ca 01       	movw	r24, r20
    11fa:	81 70       	andi	r24, 0x01	; 1
    11fc:	eb 81       	ldd	r30, Y+3	; 0x03
    11fe:	fc 81       	ldd	r31, Y+4	; 0x04
    1200:	80 83       	st	Z, r24
    1202:	13 c0       	rjmp	.+38     	; 0x122a <DIO_VidGetPinValue+0xf6>
			case (Port_D) : *Copy_Pu8PinValue = Get_Bit(PIND,Copy_u8PinNumber);break;
    1204:	e0 e3       	ldi	r30, 0x30	; 48
    1206:	f0 e0       	ldi	r31, 0x00	; 0
    1208:	80 81       	ld	r24, Z
    120a:	28 2f       	mov	r18, r24
    120c:	30 e0       	ldi	r19, 0x00	; 0
    120e:	8a 81       	ldd	r24, Y+2	; 0x02
    1210:	88 2f       	mov	r24, r24
    1212:	90 e0       	ldi	r25, 0x00	; 0
    1214:	a9 01       	movw	r20, r18
    1216:	02 c0       	rjmp	.+4      	; 0x121c <DIO_VidGetPinValue+0xe8>
    1218:	55 95       	asr	r21
    121a:	47 95       	ror	r20
    121c:	8a 95       	dec	r24
    121e:	e2 f7       	brpl	.-8      	; 0x1218 <DIO_VidGetPinValue+0xe4>
    1220:	ca 01       	movw	r24, r20
    1222:	81 70       	andi	r24, 0x01	; 1
    1224:	eb 81       	ldd	r30, Y+3	; 0x03
    1226:	fc 81       	ldd	r31, Y+4	; 0x04
    1228:	80 83       	st	Z, r24
		}
}
    122a:	26 96       	adiw	r28, 0x06	; 6
    122c:	0f b6       	in	r0, 0x3f	; 63
    122e:	f8 94       	cli
    1230:	de bf       	out	0x3e, r29	; 62
    1232:	0f be       	out	0x3f, r0	; 63
    1234:	cd bf       	out	0x3d, r28	; 61
    1236:	cf 91       	pop	r28
    1238:	df 91       	pop	r29
    123a:	08 95       	ret

0000123c <DIO_VidSetPortVal>:
/*---------------------------------------------------------------------------------------------------------------------------------*/
									/************************set port************************/
/*---------------------------------------------------------------------------------------------------------------------------------*/


void DIO_VidSetPortVal(u8 Copy_u8Port, u8 Copy_u8Val){
    123c:	df 93       	push	r29
    123e:	cf 93       	push	r28
    1240:	00 d0       	rcall	.+0      	; 0x1242 <DIO_VidSetPortVal+0x6>
    1242:	00 d0       	rcall	.+0      	; 0x1244 <DIO_VidSetPortVal+0x8>
    1244:	cd b7       	in	r28, 0x3d	; 61
    1246:	de b7       	in	r29, 0x3e	; 62
    1248:	89 83       	std	Y+1, r24	; 0x01
    124a:	6a 83       	std	Y+2, r22	; 0x02

		switch (Copy_u8Port) {
    124c:	89 81       	ldd	r24, Y+1	; 0x01
    124e:	28 2f       	mov	r18, r24
    1250:	30 e0       	ldi	r19, 0x00	; 0
    1252:	3c 83       	std	Y+4, r19	; 0x04
    1254:	2b 83       	std	Y+3, r18	; 0x03
    1256:	8b 81       	ldd	r24, Y+3	; 0x03
    1258:	9c 81       	ldd	r25, Y+4	; 0x04
    125a:	83 30       	cpi	r24, 0x03	; 3
    125c:	91 05       	cpc	r25, r1
    125e:	d9 f0       	breq	.+54     	; 0x1296 <DIO_VidSetPortVal+0x5a>
    1260:	2b 81       	ldd	r18, Y+3	; 0x03
    1262:	3c 81       	ldd	r19, Y+4	; 0x04
    1264:	24 30       	cpi	r18, 0x04	; 4
    1266:	31 05       	cpc	r19, r1
    1268:	34 f4       	brge	.+12     	; 0x1276 <DIO_VidSetPortVal+0x3a>
    126a:	8b 81       	ldd	r24, Y+3	; 0x03
    126c:	9c 81       	ldd	r25, Y+4	; 0x04
    126e:	82 30       	cpi	r24, 0x02	; 2
    1270:	91 05       	cpc	r25, r1
    1272:	61 f0       	breq	.+24     	; 0x128c <DIO_VidSetPortVal+0x50>
    1274:	1e c0       	rjmp	.+60     	; 0x12b2 <DIO_VidSetPortVal+0x76>
    1276:	2b 81       	ldd	r18, Y+3	; 0x03
    1278:	3c 81       	ldd	r19, Y+4	; 0x04
    127a:	24 30       	cpi	r18, 0x04	; 4
    127c:	31 05       	cpc	r19, r1
    127e:	81 f0       	breq	.+32     	; 0x12a0 <DIO_VidSetPortVal+0x64>
    1280:	8b 81       	ldd	r24, Y+3	; 0x03
    1282:	9c 81       	ldd	r25, Y+4	; 0x04
    1284:	85 30       	cpi	r24, 0x05	; 5
    1286:	91 05       	cpc	r25, r1
    1288:	81 f0       	breq	.+32     	; 0x12aa <DIO_VidSetPortVal+0x6e>
    128a:	13 c0       	rjmp	.+38     	; 0x12b2 <DIO_VidSetPortVal+0x76>
			case (Port_A) : PORTA = Copy_u8Val;break;
    128c:	eb e3       	ldi	r30, 0x3B	; 59
    128e:	f0 e0       	ldi	r31, 0x00	; 0
    1290:	8a 81       	ldd	r24, Y+2	; 0x02
    1292:	80 83       	st	Z, r24
    1294:	0e c0       	rjmp	.+28     	; 0x12b2 <DIO_VidSetPortVal+0x76>
			case (Port_B) : PORTB = Copy_u8Val;break;
    1296:	e8 e3       	ldi	r30, 0x38	; 56
    1298:	f0 e0       	ldi	r31, 0x00	; 0
    129a:	8a 81       	ldd	r24, Y+2	; 0x02
    129c:	80 83       	st	Z, r24
    129e:	09 c0       	rjmp	.+18     	; 0x12b2 <DIO_VidSetPortVal+0x76>
			case (Port_C) : PORTC = Copy_u8Val;break;
    12a0:	e5 e3       	ldi	r30, 0x35	; 53
    12a2:	f0 e0       	ldi	r31, 0x00	; 0
    12a4:	8a 81       	ldd	r24, Y+2	; 0x02
    12a6:	80 83       	st	Z, r24
    12a8:	04 c0       	rjmp	.+8      	; 0x12b2 <DIO_VidSetPortVal+0x76>
			case (Port_D) : PORTD = Copy_u8Val;break;
    12aa:	e2 e3       	ldi	r30, 0x32	; 50
    12ac:	f0 e0       	ldi	r31, 0x00	; 0
    12ae:	8a 81       	ldd	r24, Y+2	; 0x02
    12b0:	80 83       	st	Z, r24
		}
}
    12b2:	0f 90       	pop	r0
    12b4:	0f 90       	pop	r0
    12b6:	0f 90       	pop	r0
    12b8:	0f 90       	pop	r0
    12ba:	cf 91       	pop	r28
    12bc:	df 91       	pop	r29
    12be:	08 95       	ret

000012c0 <DIO_VidSetPortDirection>:



void DIO_VidSetPortDirection(u8 Copy_u8Port, u8 Copy_u8Direction)
{
    12c0:	df 93       	push	r29
    12c2:	cf 93       	push	r28
    12c4:	00 d0       	rcall	.+0      	; 0x12c6 <DIO_VidSetPortDirection+0x6>
    12c6:	00 d0       	rcall	.+0      	; 0x12c8 <DIO_VidSetPortDirection+0x8>
    12c8:	00 d0       	rcall	.+0      	; 0x12ca <DIO_VidSetPortDirection+0xa>
    12ca:	cd b7       	in	r28, 0x3d	; 61
    12cc:	de b7       	in	r29, 0x3e	; 62
    12ce:	89 83       	std	Y+1, r24	; 0x01
    12d0:	6a 83       	std	Y+2, r22	; 0x02
	/****************** set Port as input***********************/
	if(Copy_u8Direction == input){
    12d2:	8a 81       	ldd	r24, Y+2	; 0x02
    12d4:	88 23       	and	r24, r24
    12d6:	81 f5       	brne	.+96     	; 0x1338 <DIO_VidSetPortDirection+0x78>
		switch (Copy_u8Port) {
    12d8:	89 81       	ldd	r24, Y+1	; 0x01
    12da:	28 2f       	mov	r18, r24
    12dc:	30 e0       	ldi	r19, 0x00	; 0
    12de:	3e 83       	std	Y+6, r19	; 0x06
    12e0:	2d 83       	std	Y+5, r18	; 0x05
    12e2:	8d 81       	ldd	r24, Y+5	; 0x05
    12e4:	9e 81       	ldd	r25, Y+6	; 0x06
    12e6:	83 30       	cpi	r24, 0x03	; 3
    12e8:	91 05       	cpc	r25, r1
    12ea:	d1 f0       	breq	.+52     	; 0x1320 <DIO_VidSetPortDirection+0x60>
    12ec:	2d 81       	ldd	r18, Y+5	; 0x05
    12ee:	3e 81       	ldd	r19, Y+6	; 0x06
    12f0:	24 30       	cpi	r18, 0x04	; 4
    12f2:	31 05       	cpc	r19, r1
    12f4:	34 f4       	brge	.+12     	; 0x1302 <DIO_VidSetPortDirection+0x42>
    12f6:	8d 81       	ldd	r24, Y+5	; 0x05
    12f8:	9e 81       	ldd	r25, Y+6	; 0x06
    12fa:	82 30       	cpi	r24, 0x02	; 2
    12fc:	91 05       	cpc	r25, r1
    12fe:	61 f0       	breq	.+24     	; 0x1318 <DIO_VidSetPortDirection+0x58>
    1300:	51 c0       	rjmp	.+162    	; 0x13a4 <DIO_VidSetPortDirection+0xe4>
    1302:	2d 81       	ldd	r18, Y+5	; 0x05
    1304:	3e 81       	ldd	r19, Y+6	; 0x06
    1306:	24 30       	cpi	r18, 0x04	; 4
    1308:	31 05       	cpc	r19, r1
    130a:	71 f0       	breq	.+28     	; 0x1328 <DIO_VidSetPortDirection+0x68>
    130c:	8d 81       	ldd	r24, Y+5	; 0x05
    130e:	9e 81       	ldd	r25, Y+6	; 0x06
    1310:	85 30       	cpi	r24, 0x05	; 5
    1312:	91 05       	cpc	r25, r1
    1314:	69 f0       	breq	.+26     	; 0x1330 <DIO_VidSetPortDirection+0x70>
    1316:	46 c0       	rjmp	.+140    	; 0x13a4 <DIO_VidSetPortDirection+0xe4>
			case (Port_A) : DDRA = 0x00 ;break;
    1318:	ea e3       	ldi	r30, 0x3A	; 58
    131a:	f0 e0       	ldi	r31, 0x00	; 0
    131c:	10 82       	st	Z, r1
    131e:	42 c0       	rjmp	.+132    	; 0x13a4 <DIO_VidSetPortDirection+0xe4>
			case (Port_B) : DDRB = 0x00 ;break;
    1320:	e7 e3       	ldi	r30, 0x37	; 55
    1322:	f0 e0       	ldi	r31, 0x00	; 0
    1324:	10 82       	st	Z, r1
    1326:	3e c0       	rjmp	.+124    	; 0x13a4 <DIO_VidSetPortDirection+0xe4>
			case (Port_C) : DDRC = 0x00 ;break;
    1328:	e4 e3       	ldi	r30, 0x34	; 52
    132a:	f0 e0       	ldi	r31, 0x00	; 0
    132c:	10 82       	st	Z, r1
    132e:	3a c0       	rjmp	.+116    	; 0x13a4 <DIO_VidSetPortDirection+0xe4>
			case (Port_D) : DDRD = 0x00 ;break;
    1330:	e1 e3       	ldi	r30, 0x31	; 49
    1332:	f0 e0       	ldi	r31, 0x00	; 0
    1334:	10 82       	st	Z, r1
    1336:	36 c0       	rjmp	.+108    	; 0x13a4 <DIO_VidSetPortDirection+0xe4>
		}
	}

	/****************** set Port as output***********************/
	else if(Copy_u8Direction == output){
    1338:	8a 81       	ldd	r24, Y+2	; 0x02
    133a:	81 30       	cpi	r24, 0x01	; 1
    133c:	99 f5       	brne	.+102    	; 0x13a4 <DIO_VidSetPortDirection+0xe4>
		switch (Copy_u8Port) {
    133e:	89 81       	ldd	r24, Y+1	; 0x01
    1340:	28 2f       	mov	r18, r24
    1342:	30 e0       	ldi	r19, 0x00	; 0
    1344:	3c 83       	std	Y+4, r19	; 0x04
    1346:	2b 83       	std	Y+3, r18	; 0x03
    1348:	8b 81       	ldd	r24, Y+3	; 0x03
    134a:	9c 81       	ldd	r25, Y+4	; 0x04
    134c:	83 30       	cpi	r24, 0x03	; 3
    134e:	91 05       	cpc	r25, r1
    1350:	d9 f0       	breq	.+54     	; 0x1388 <DIO_VidSetPortDirection+0xc8>
    1352:	2b 81       	ldd	r18, Y+3	; 0x03
    1354:	3c 81       	ldd	r19, Y+4	; 0x04
    1356:	24 30       	cpi	r18, 0x04	; 4
    1358:	31 05       	cpc	r19, r1
    135a:	34 f4       	brge	.+12     	; 0x1368 <DIO_VidSetPortDirection+0xa8>
    135c:	8b 81       	ldd	r24, Y+3	; 0x03
    135e:	9c 81       	ldd	r25, Y+4	; 0x04
    1360:	82 30       	cpi	r24, 0x02	; 2
    1362:	91 05       	cpc	r25, r1
    1364:	61 f0       	breq	.+24     	; 0x137e <DIO_VidSetPortDirection+0xbe>
    1366:	1e c0       	rjmp	.+60     	; 0x13a4 <DIO_VidSetPortDirection+0xe4>
    1368:	2b 81       	ldd	r18, Y+3	; 0x03
    136a:	3c 81       	ldd	r19, Y+4	; 0x04
    136c:	24 30       	cpi	r18, 0x04	; 4
    136e:	31 05       	cpc	r19, r1
    1370:	81 f0       	breq	.+32     	; 0x1392 <DIO_VidSetPortDirection+0xd2>
    1372:	8b 81       	ldd	r24, Y+3	; 0x03
    1374:	9c 81       	ldd	r25, Y+4	; 0x04
    1376:	85 30       	cpi	r24, 0x05	; 5
    1378:	91 05       	cpc	r25, r1
    137a:	81 f0       	breq	.+32     	; 0x139c <DIO_VidSetPortDirection+0xdc>
    137c:	13 c0       	rjmp	.+38     	; 0x13a4 <DIO_VidSetPortDirection+0xe4>
			case (Port_A) : DDRA = 0xff ;break;
    137e:	ea e3       	ldi	r30, 0x3A	; 58
    1380:	f0 e0       	ldi	r31, 0x00	; 0
    1382:	8f ef       	ldi	r24, 0xFF	; 255
    1384:	80 83       	st	Z, r24
    1386:	0e c0       	rjmp	.+28     	; 0x13a4 <DIO_VidSetPortDirection+0xe4>
			case (Port_B) : DDRB = 0xff ;break;
    1388:	e7 e3       	ldi	r30, 0x37	; 55
    138a:	f0 e0       	ldi	r31, 0x00	; 0
    138c:	8f ef       	ldi	r24, 0xFF	; 255
    138e:	80 83       	st	Z, r24
    1390:	09 c0       	rjmp	.+18     	; 0x13a4 <DIO_VidSetPortDirection+0xe4>
			case (Port_C) : DDRC = 0xff ;break;
    1392:	e4 e3       	ldi	r30, 0x34	; 52
    1394:	f0 e0       	ldi	r31, 0x00	; 0
    1396:	8f ef       	ldi	r24, 0xFF	; 255
    1398:	80 83       	st	Z, r24
    139a:	04 c0       	rjmp	.+8      	; 0x13a4 <DIO_VidSetPortDirection+0xe4>
			case (Port_D) : DDRD = 0xff ;break;
    139c:	e1 e3       	ldi	r30, 0x31	; 49
    139e:	f0 e0       	ldi	r31, 0x00	; 0
    13a0:	8f ef       	ldi	r24, 0xFF	; 255
    13a2:	80 83       	st	Z, r24
		}
	}
}
    13a4:	26 96       	adiw	r28, 0x06	; 6
    13a6:	0f b6       	in	r0, 0x3f	; 63
    13a8:	f8 94       	cli
    13aa:	de bf       	out	0x3e, r29	; 62
    13ac:	0f be       	out	0x3f, r0	; 63
    13ae:	cd bf       	out	0x3d, r28	; 61
    13b0:	cf 91       	pop	r28
    13b2:	df 91       	pop	r29
    13b4:	08 95       	ret

000013b6 <DIO_VidGetPortValue>:

void DIO_VidGetPortValue(u8 Copy_u8Port, u8* Copy_Pu8Value)
{
    13b6:	df 93       	push	r29
    13b8:	cf 93       	push	r28
    13ba:	00 d0       	rcall	.+0      	; 0x13bc <DIO_VidGetPortValue+0x6>
    13bc:	00 d0       	rcall	.+0      	; 0x13be <DIO_VidGetPortValue+0x8>
    13be:	0f 92       	push	r0
    13c0:	cd b7       	in	r28, 0x3d	; 61
    13c2:	de b7       	in	r29, 0x3e	; 62
    13c4:	89 83       	std	Y+1, r24	; 0x01
    13c6:	7b 83       	std	Y+3, r23	; 0x03
    13c8:	6a 83       	std	Y+2, r22	; 0x02
	switch (Copy_u8Port) {
    13ca:	89 81       	ldd	r24, Y+1	; 0x01
    13cc:	28 2f       	mov	r18, r24
    13ce:	30 e0       	ldi	r19, 0x00	; 0
    13d0:	3d 83       	std	Y+5, r19	; 0x05
    13d2:	2c 83       	std	Y+4, r18	; 0x04
    13d4:	8c 81       	ldd	r24, Y+4	; 0x04
    13d6:	9d 81       	ldd	r25, Y+5	; 0x05
    13d8:	83 30       	cpi	r24, 0x03	; 3
    13da:	91 05       	cpc	r25, r1
    13dc:	e9 f0       	breq	.+58     	; 0x1418 <DIO_VidGetPortValue+0x62>
    13de:	2c 81       	ldd	r18, Y+4	; 0x04
    13e0:	3d 81       	ldd	r19, Y+5	; 0x05
    13e2:	24 30       	cpi	r18, 0x04	; 4
    13e4:	31 05       	cpc	r19, r1
    13e6:	34 f4       	brge	.+12     	; 0x13f4 <DIO_VidGetPortValue+0x3e>
    13e8:	8c 81       	ldd	r24, Y+4	; 0x04
    13ea:	9d 81       	ldd	r25, Y+5	; 0x05
    13ec:	82 30       	cpi	r24, 0x02	; 2
    13ee:	91 05       	cpc	r25, r1
    13f0:	61 f0       	breq	.+24     	; 0x140a <DIO_VidGetPortValue+0x54>
    13f2:	26 c0       	rjmp	.+76     	; 0x1440 <DIO_VidGetPortValue+0x8a>
    13f4:	2c 81       	ldd	r18, Y+4	; 0x04
    13f6:	3d 81       	ldd	r19, Y+5	; 0x05
    13f8:	24 30       	cpi	r18, 0x04	; 4
    13fa:	31 05       	cpc	r19, r1
    13fc:	a1 f0       	breq	.+40     	; 0x1426 <DIO_VidGetPortValue+0x70>
    13fe:	8c 81       	ldd	r24, Y+4	; 0x04
    1400:	9d 81       	ldd	r25, Y+5	; 0x05
    1402:	85 30       	cpi	r24, 0x05	; 5
    1404:	91 05       	cpc	r25, r1
    1406:	b1 f0       	breq	.+44     	; 0x1434 <DIO_VidGetPortValue+0x7e>
    1408:	1b c0       	rjmp	.+54     	; 0x1440 <DIO_VidGetPortValue+0x8a>
		case (Port_A) : *Copy_Pu8Value = PINA; break;
    140a:	e9 e3       	ldi	r30, 0x39	; 57
    140c:	f0 e0       	ldi	r31, 0x00	; 0
    140e:	80 81       	ld	r24, Z
    1410:	ea 81       	ldd	r30, Y+2	; 0x02
    1412:	fb 81       	ldd	r31, Y+3	; 0x03
    1414:	80 83       	st	Z, r24
    1416:	14 c0       	rjmp	.+40     	; 0x1440 <DIO_VidGetPortValue+0x8a>
		case (Port_B) : *Copy_Pu8Value = PINB; break;
    1418:	e6 e3       	ldi	r30, 0x36	; 54
    141a:	f0 e0       	ldi	r31, 0x00	; 0
    141c:	80 81       	ld	r24, Z
    141e:	ea 81       	ldd	r30, Y+2	; 0x02
    1420:	fb 81       	ldd	r31, Y+3	; 0x03
    1422:	80 83       	st	Z, r24
    1424:	0d c0       	rjmp	.+26     	; 0x1440 <DIO_VidGetPortValue+0x8a>
		case (Port_C) : *Copy_Pu8Value = PINC; break;
    1426:	e3 e3       	ldi	r30, 0x33	; 51
    1428:	f0 e0       	ldi	r31, 0x00	; 0
    142a:	80 81       	ld	r24, Z
    142c:	ea 81       	ldd	r30, Y+2	; 0x02
    142e:	fb 81       	ldd	r31, Y+3	; 0x03
    1430:	80 83       	st	Z, r24
    1432:	06 c0       	rjmp	.+12     	; 0x1440 <DIO_VidGetPortValue+0x8a>
		case (Port_D) : *Copy_Pu8Value = PIND; break;
    1434:	e0 e3       	ldi	r30, 0x30	; 48
    1436:	f0 e0       	ldi	r31, 0x00	; 0
    1438:	80 81       	ld	r24, Z
    143a:	ea 81       	ldd	r30, Y+2	; 0x02
    143c:	fb 81       	ldd	r31, Y+3	; 0x03
    143e:	80 83       	st	Z, r24
	}
}
    1440:	0f 90       	pop	r0
    1442:	0f 90       	pop	r0
    1444:	0f 90       	pop	r0
    1446:	0f 90       	pop	r0
    1448:	0f 90       	pop	r0
    144a:	cf 91       	pop	r28
    144c:	df 91       	pop	r29
    144e:	08 95       	ret

00001450 <ADC_VidInit>:
#include "ADC_Config.h"
#include "ADC_Interface.h"
#include "ADC_Private.h"

/*For Fixed options*/
void ADC_VidInit(){
    1450:	df 93       	push	r29
    1452:	cf 93       	push	r28
    1454:	cd b7       	in	r28, 0x3d	; 61
    1456:	de b7       	in	r29, 0x3e	; 62
	/*Reference Selection Bit*/
	/*AVCC Reference*/
	Set_Bit(ADMUX,ADMUX_REFS0);
    1458:	a7 e2       	ldi	r26, 0x27	; 39
    145a:	b0 e0       	ldi	r27, 0x00	; 0
    145c:	e7 e2       	ldi	r30, 0x27	; 39
    145e:	f0 e0       	ldi	r31, 0x00	; 0
    1460:	80 81       	ld	r24, Z
    1462:	80 64       	ori	r24, 0x40	; 64
    1464:	8c 93       	st	X, r24
	CLR_Bit(ADMUX,ADMUX_REFS1);
    1466:	a7 e2       	ldi	r26, 0x27	; 39
    1468:	b0 e0       	ldi	r27, 0x00	; 0
    146a:	e7 e2       	ldi	r30, 0x27	; 39
    146c:	f0 e0       	ldi	r31, 0x00	; 0
    146e:	80 81       	ld	r24, Z
    1470:	8f 77       	andi	r24, 0x7F	; 127
    1472:	8c 93       	st	X, r24

	/*ADLAR to read 8-Bits data as if it's 8-bits only*/
	Set_Bit(ADMUX,ADMUX_ADLAR);
    1474:	a7 e2       	ldi	r26, 0x27	; 39
    1476:	b0 e0       	ldi	r27, 0x00	; 0
    1478:	e7 e2       	ldi	r30, 0x27	; 39
    147a:	f0 e0       	ldi	r31, 0x00	; 0
    147c:	80 81       	ld	r24, Z
    147e:	80 62       	ori	r24, 0x20	; 32
    1480:	8c 93       	st	X, r24

	/*Prescaler 128*/
	Set_Bit(ADCSRA,ADCSRA_ADPS0);
    1482:	a6 e2       	ldi	r26, 0x26	; 38
    1484:	b0 e0       	ldi	r27, 0x00	; 0
    1486:	e6 e2       	ldi	r30, 0x26	; 38
    1488:	f0 e0       	ldi	r31, 0x00	; 0
    148a:	80 81       	ld	r24, Z
    148c:	81 60       	ori	r24, 0x01	; 1
    148e:	8c 93       	st	X, r24
	Set_Bit(ADCSRA,ADCSRA_ADPS1);
    1490:	a6 e2       	ldi	r26, 0x26	; 38
    1492:	b0 e0       	ldi	r27, 0x00	; 0
    1494:	e6 e2       	ldi	r30, 0x26	; 38
    1496:	f0 e0       	ldi	r31, 0x00	; 0
    1498:	80 81       	ld	r24, Z
    149a:	82 60       	ori	r24, 0x02	; 2
    149c:	8c 93       	st	X, r24
	Set_Bit(ADCSRA,ADCSRA_ADPS2);
    149e:	a6 e2       	ldi	r26, 0x26	; 38
    14a0:	b0 e0       	ldi	r27, 0x00	; 0
    14a2:	e6 e2       	ldi	r30, 0x26	; 38
    14a4:	f0 e0       	ldi	r31, 0x00	; 0
    14a6:	80 81       	ld	r24, Z
    14a8:	84 60       	ori	r24, 0x04	; 4
    14aa:	8c 93       	st	X, r24

	/*Enable Module*/
	Set_Bit(ADCSRA,ADCSRA_ADEN);
    14ac:	a6 e2       	ldi	r26, 0x26	; 38
    14ae:	b0 e0       	ldi	r27, 0x00	; 0
    14b0:	e6 e2       	ldi	r30, 0x26	; 38
    14b2:	f0 e0       	ldi	r31, 0x00	; 0
    14b4:	80 81       	ld	r24, Z
    14b6:	80 68       	ori	r24, 0x80	; 128
    14b8:	8c 93       	st	X, r24
}
    14ba:	cf 91       	pop	r28
    14bc:	df 91       	pop	r29
    14be:	08 95       	ret

000014c0 <ADC_u8ReadChannel>:

u8 ADC_u8ReadChannel(u8 Copy_u8Channel){
    14c0:	df 93       	push	r29
    14c2:	cf 93       	push	r28
    14c4:	0f 92       	push	r0
    14c6:	cd b7       	in	r28, 0x3d	; 61
    14c8:	de b7       	in	r29, 0x3e	; 62
    14ca:	89 83       	std	Y+1, r24	; 0x01
	/*choose Channel*/
	/*CLR first 5 Bits*/
	ADMUX &= 0b11100000;
    14cc:	a7 e2       	ldi	r26, 0x27	; 39
    14ce:	b0 e0       	ldi	r27, 0x00	; 0
    14d0:	e7 e2       	ldi	r30, 0x27	; 39
    14d2:	f0 e0       	ldi	r31, 0x00	; 0
    14d4:	80 81       	ld	r24, Z
    14d6:	80 7e       	andi	r24, 0xE0	; 224
    14d8:	8c 93       	st	X, r24
	/*Select Channel to read from - ADC0 to ADC7*/
	ADMUX |= Copy_u8Channel;
    14da:	a7 e2       	ldi	r26, 0x27	; 39
    14dc:	b0 e0       	ldi	r27, 0x00	; 0
    14de:	e7 e2       	ldi	r30, 0x27	; 39
    14e0:	f0 e0       	ldi	r31, 0x00	; 0
    14e2:	90 81       	ld	r25, Z
    14e4:	89 81       	ldd	r24, Y+1	; 0x01
    14e6:	89 2b       	or	r24, r25
    14e8:	8c 93       	st	X, r24

	/*Start Conversion*/
	Set_Bit(ADCSRA,ADCSRA_ADSC);
    14ea:	a6 e2       	ldi	r26, 0x26	; 38
    14ec:	b0 e0       	ldi	r27, 0x00	; 0
    14ee:	e6 e2       	ldi	r30, 0x26	; 38
    14f0:	f0 e0       	ldi	r31, 0x00	; 0
    14f2:	80 81       	ld	r24, Z
    14f4:	80 64       	ori	r24, 0x40	; 64
    14f6:	8c 93       	st	X, r24

	/* Wait Till Conversion is Over*/
	while(!Get_Bit(ADCSRA,ADCSRA_ADIF));
    14f8:	e6 e2       	ldi	r30, 0x26	; 38
    14fa:	f0 e0       	ldi	r31, 0x00	; 0
    14fc:	80 81       	ld	r24, Z
    14fe:	82 95       	swap	r24
    1500:	8f 70       	andi	r24, 0x0F	; 15
    1502:	88 2f       	mov	r24, r24
    1504:	90 e0       	ldi	r25, 0x00	; 0
    1506:	81 70       	andi	r24, 0x01	; 1
    1508:	90 70       	andi	r25, 0x00	; 0
    150a:	00 97       	sbiw	r24, 0x00	; 0
    150c:	a9 f3       	breq	.-22     	; 0x14f8 <ADC_u8ReadChannel+0x38>

	/*Clear Flag by setting logical 1*/
	Set_Bit(ADCSRA,ADCSRA_ADIF);
    150e:	a6 e2       	ldi	r26, 0x26	; 38
    1510:	b0 e0       	ldi	r27, 0x00	; 0
    1512:	e6 e2       	ldi	r30, 0x26	; 38
    1514:	f0 e0       	ldi	r31, 0x00	; 0
    1516:	80 81       	ld	r24, Z
    1518:	80 61       	ori	r24, 0x10	; 16
    151a:	8c 93       	st	X, r24

	/*Return the value*/
	return ADCH;
    151c:	e5 e2       	ldi	r30, 0x25	; 37
    151e:	f0 e0       	ldi	r31, 0x00	; 0
    1520:	80 81       	ld	r24, Z
}
    1522:	0f 90       	pop	r0
    1524:	cf 91       	pop	r28
    1526:	df 91       	pop	r29
    1528:	08 95       	ret

0000152a <ADC_f32LCDVoltConv>:
u16 ADC_f32LCDVoltConv(u8 Copy_Reading){
    152a:	df 93       	push	r29
    152c:	cf 93       	push	r28
    152e:	00 d0       	rcall	.+0      	; 0x1530 <ADC_f32LCDVoltConv+0x6>
    1530:	0f 92       	push	r0
    1532:	cd b7       	in	r28, 0x3d	; 61
    1534:	de b7       	in	r29, 0x3e	; 62
    1536:	8b 83       	std	Y+3, r24	; 0x03
	u16 newreading = (Copy_Reading*(5000/256UL));
    1538:	8b 81       	ldd	r24, Y+3	; 0x03
    153a:	88 2f       	mov	r24, r24
    153c:	90 e0       	ldi	r25, 0x00	; 0
    153e:	a0 e0       	ldi	r26, 0x00	; 0
    1540:	b0 e0       	ldi	r27, 0x00	; 0
    1542:	23 e1       	ldi	r18, 0x13	; 19
    1544:	30 e0       	ldi	r19, 0x00	; 0
    1546:	40 e0       	ldi	r20, 0x00	; 0
    1548:	50 e0       	ldi	r21, 0x00	; 0
    154a:	bc 01       	movw	r22, r24
    154c:	cd 01       	movw	r24, r26
    154e:	0e 94 59 0e 	call	0x1cb2	; 0x1cb2 <__mulsi3>
    1552:	dc 01       	movw	r26, r24
    1554:	cb 01       	movw	r24, r22
    1556:	9a 83       	std	Y+2, r25	; 0x02
    1558:	89 83       	std	Y+1, r24	; 0x01
	return newreading;
    155a:	89 81       	ldd	r24, Y+1	; 0x01
    155c:	9a 81       	ldd	r25, Y+2	; 0x02

}
    155e:	0f 90       	pop	r0
    1560:	0f 90       	pop	r0
    1562:	0f 90       	pop	r0
    1564:	cf 91       	pop	r28
    1566:	df 91       	pop	r29
    1568:	08 95       	ret

0000156a <CLCD_VidSendCommand>:





void CLCD_VidSendCommand(u8 Copy_u8Command){
    156a:	df 93       	push	r29
    156c:	cf 93       	push	r28
    156e:	cd b7       	in	r28, 0x3d	; 61
    1570:	de b7       	in	r29, 0x3e	; 62
    1572:	2f 97       	sbiw	r28, 0x0f	; 15
    1574:	0f b6       	in	r0, 0x3f	; 63
    1576:	f8 94       	cli
    1578:	de bf       	out	0x3e, r29	; 62
    157a:	0f be       	out	0x3f, r0	; 63
    157c:	cd bf       	out	0x3d, r28	; 61
    157e:	8f 87       	std	Y+15, r24	; 0x0f

	/*set RS pin as low*/
	DIO_VidSetPinValue(CLCD_CTRL_PORT, CLCD_RS_PIN,low );
    1580:	84 e0       	ldi	r24, 0x04	; 4
    1582:	65 e0       	ldi	r22, 0x05	; 5
    1584:	40 e0       	ldi	r20, 0x00	; 0
    1586:	0e 94 96 06 	call	0xd2c	; 0xd2c <DIO_VidSetPinValue>
	/*set RW pin low to write*/
	DIO_VidSetPinValue(CLCD_CTRL_PORT, CLCD_RW_PIN,low );
    158a:	84 e0       	ldi	r24, 0x04	; 4
    158c:	66 e0       	ldi	r22, 0x06	; 6
    158e:	40 e0       	ldi	r20, 0x00	; 0
    1590:	0e 94 96 06 	call	0xd2c	; 0xd2c <DIO_VidSetPinValue>
	/*send commands to data pins */
	DIO_VidSetPortVal(CLCD_DATA_PORT, Copy_u8Command);
    1594:	85 e0       	ldi	r24, 0x05	; 5
    1596:	6f 85       	ldd	r22, Y+15	; 0x0f
    1598:	0e 94 1e 09 	call	0x123c	; 0x123c <DIO_VidSetPortVal>
	/*send enable pulse*/
	DIO_VidSetPinValue(CLCD_CTRL_PORT,CLCD_EN_PIN,high);
    159c:	84 e0       	ldi	r24, 0x04	; 4
    159e:	67 e0       	ldi	r22, 0x07	; 7
    15a0:	41 e0       	ldi	r20, 0x01	; 1
    15a2:	0e 94 96 06 	call	0xd2c	; 0xd2c <DIO_VidSetPinValue>
    15a6:	80 e0       	ldi	r24, 0x00	; 0
    15a8:	90 e0       	ldi	r25, 0x00	; 0
    15aa:	a0 e4       	ldi	r26, 0x40	; 64
    15ac:	b0 e4       	ldi	r27, 0x40	; 64
    15ae:	8b 87       	std	Y+11, r24	; 0x0b
    15b0:	9c 87       	std	Y+12, r25	; 0x0c
    15b2:	ad 87       	std	Y+13, r26	; 0x0d
    15b4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    15b6:	6b 85       	ldd	r22, Y+11	; 0x0b
    15b8:	7c 85       	ldd	r23, Y+12	; 0x0c
    15ba:	8d 85       	ldd	r24, Y+13	; 0x0d
    15bc:	9e 85       	ldd	r25, Y+14	; 0x0e
    15be:	20 e0       	ldi	r18, 0x00	; 0
    15c0:	30 e0       	ldi	r19, 0x00	; 0
    15c2:	4a ef       	ldi	r20, 0xFA	; 250
    15c4:	54 e4       	ldi	r21, 0x44	; 68
    15c6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15ca:	dc 01       	movw	r26, r24
    15cc:	cb 01       	movw	r24, r22
    15ce:	8f 83       	std	Y+7, r24	; 0x07
    15d0:	98 87       	std	Y+8, r25	; 0x08
    15d2:	a9 87       	std	Y+9, r26	; 0x09
    15d4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    15d6:	6f 81       	ldd	r22, Y+7	; 0x07
    15d8:	78 85       	ldd	r23, Y+8	; 0x08
    15da:	89 85       	ldd	r24, Y+9	; 0x09
    15dc:	9a 85       	ldd	r25, Y+10	; 0x0a
    15de:	20 e0       	ldi	r18, 0x00	; 0
    15e0:	30 e0       	ldi	r19, 0x00	; 0
    15e2:	40 e8       	ldi	r20, 0x80	; 128
    15e4:	5f e3       	ldi	r21, 0x3F	; 63
    15e6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    15ea:	88 23       	and	r24, r24
    15ec:	2c f4       	brge	.+10     	; 0x15f8 <CLCD_VidSendCommand+0x8e>
		__ticks = 1;
    15ee:	81 e0       	ldi	r24, 0x01	; 1
    15f0:	90 e0       	ldi	r25, 0x00	; 0
    15f2:	9e 83       	std	Y+6, r25	; 0x06
    15f4:	8d 83       	std	Y+5, r24	; 0x05
    15f6:	3f c0       	rjmp	.+126    	; 0x1676 <CLCD_VidSendCommand+0x10c>
	else if (__tmp > 65535)
    15f8:	6f 81       	ldd	r22, Y+7	; 0x07
    15fa:	78 85       	ldd	r23, Y+8	; 0x08
    15fc:	89 85       	ldd	r24, Y+9	; 0x09
    15fe:	9a 85       	ldd	r25, Y+10	; 0x0a
    1600:	20 e0       	ldi	r18, 0x00	; 0
    1602:	3f ef       	ldi	r19, 0xFF	; 255
    1604:	4f e7       	ldi	r20, 0x7F	; 127
    1606:	57 e4       	ldi	r21, 0x47	; 71
    1608:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    160c:	18 16       	cp	r1, r24
    160e:	4c f5       	brge	.+82     	; 0x1662 <CLCD_VidSendCommand+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1610:	6b 85       	ldd	r22, Y+11	; 0x0b
    1612:	7c 85       	ldd	r23, Y+12	; 0x0c
    1614:	8d 85       	ldd	r24, Y+13	; 0x0d
    1616:	9e 85       	ldd	r25, Y+14	; 0x0e
    1618:	20 e0       	ldi	r18, 0x00	; 0
    161a:	30 e0       	ldi	r19, 0x00	; 0
    161c:	40 e2       	ldi	r20, 0x20	; 32
    161e:	51 e4       	ldi	r21, 0x41	; 65
    1620:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1624:	dc 01       	movw	r26, r24
    1626:	cb 01       	movw	r24, r22
    1628:	bc 01       	movw	r22, r24
    162a:	cd 01       	movw	r24, r26
    162c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1630:	dc 01       	movw	r26, r24
    1632:	cb 01       	movw	r24, r22
    1634:	9e 83       	std	Y+6, r25	; 0x06
    1636:	8d 83       	std	Y+5, r24	; 0x05
    1638:	0f c0       	rjmp	.+30     	; 0x1658 <CLCD_VidSendCommand+0xee>
    163a:	88 ec       	ldi	r24, 0xC8	; 200
    163c:	90 e0       	ldi	r25, 0x00	; 0
    163e:	9c 83       	std	Y+4, r25	; 0x04
    1640:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1642:	8b 81       	ldd	r24, Y+3	; 0x03
    1644:	9c 81       	ldd	r25, Y+4	; 0x04
    1646:	01 97       	sbiw	r24, 0x01	; 1
    1648:	f1 f7       	brne	.-4      	; 0x1646 <CLCD_VidSendCommand+0xdc>
    164a:	9c 83       	std	Y+4, r25	; 0x04
    164c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    164e:	8d 81       	ldd	r24, Y+5	; 0x05
    1650:	9e 81       	ldd	r25, Y+6	; 0x06
    1652:	01 97       	sbiw	r24, 0x01	; 1
    1654:	9e 83       	std	Y+6, r25	; 0x06
    1656:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1658:	8d 81       	ldd	r24, Y+5	; 0x05
    165a:	9e 81       	ldd	r25, Y+6	; 0x06
    165c:	00 97       	sbiw	r24, 0x00	; 0
    165e:	69 f7       	brne	.-38     	; 0x163a <CLCD_VidSendCommand+0xd0>
    1660:	14 c0       	rjmp	.+40     	; 0x168a <CLCD_VidSendCommand+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1662:	6f 81       	ldd	r22, Y+7	; 0x07
    1664:	78 85       	ldd	r23, Y+8	; 0x08
    1666:	89 85       	ldd	r24, Y+9	; 0x09
    1668:	9a 85       	ldd	r25, Y+10	; 0x0a
    166a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    166e:	dc 01       	movw	r26, r24
    1670:	cb 01       	movw	r24, r22
    1672:	9e 83       	std	Y+6, r25	; 0x06
    1674:	8d 83       	std	Y+5, r24	; 0x05
    1676:	8d 81       	ldd	r24, Y+5	; 0x05
    1678:	9e 81       	ldd	r25, Y+6	; 0x06
    167a:	9a 83       	std	Y+2, r25	; 0x02
    167c:	89 83       	std	Y+1, r24	; 0x01
    167e:	89 81       	ldd	r24, Y+1	; 0x01
    1680:	9a 81       	ldd	r25, Y+2	; 0x02
    1682:	01 97       	sbiw	r24, 0x01	; 1
    1684:	f1 f7       	brne	.-4      	; 0x1682 <CLCD_VidSendCommand+0x118>
    1686:	9a 83       	std	Y+2, r25	; 0x02
    1688:	89 83       	std	Y+1, r24	; 0x01
	/*delay*/
	_delay_ms(3);
	/*Clear enable pin (Pulse Complete)*/
	DIO_VidSetPinValue(CLCD_CTRL_PORT,CLCD_EN_PIN,low);
    168a:	84 e0       	ldi	r24, 0x04	; 4
    168c:	67 e0       	ldi	r22, 0x07	; 7
    168e:	40 e0       	ldi	r20, 0x00	; 0
    1690:	0e 94 96 06 	call	0xd2c	; 0xd2c <DIO_VidSetPinValue>
}
    1694:	2f 96       	adiw	r28, 0x0f	; 15
    1696:	0f b6       	in	r0, 0x3f	; 63
    1698:	f8 94       	cli
    169a:	de bf       	out	0x3e, r29	; 62
    169c:	0f be       	out	0x3f, r0	; 63
    169e:	cd bf       	out	0x3d, r28	; 61
    16a0:	cf 91       	pop	r28
    16a2:	df 91       	pop	r29
    16a4:	08 95       	ret

000016a6 <ClCD_VidSendData>:

void ClCD_VidSendData(u8 Copy_u8Data ){
    16a6:	df 93       	push	r29
    16a8:	cf 93       	push	r28
    16aa:	cd b7       	in	r28, 0x3d	; 61
    16ac:	de b7       	in	r29, 0x3e	; 62
    16ae:	2f 97       	sbiw	r28, 0x0f	; 15
    16b0:	0f b6       	in	r0, 0x3f	; 63
    16b2:	f8 94       	cli
    16b4:	de bf       	out	0x3e, r29	; 62
    16b6:	0f be       	out	0x3f, r0	; 63
    16b8:	cd bf       	out	0x3d, r28	; 61
    16ba:	8f 87       	std	Y+15, r24	; 0x0f

	/*set RS pin as high*/
	DIO_VidSetPinValue(CLCD_CTRL_PORT, CLCD_RS_PIN,high );
    16bc:	84 e0       	ldi	r24, 0x04	; 4
    16be:	65 e0       	ldi	r22, 0x05	; 5
    16c0:	41 e0       	ldi	r20, 0x01	; 1
    16c2:	0e 94 96 06 	call	0xd2c	; 0xd2c <DIO_VidSetPinValue>
	/*set RW pin low to write*/
	DIO_VidSetPinValue(CLCD_CTRL_PORT, CLCD_RW_PIN,low );
    16c6:	84 e0       	ldi	r24, 0x04	; 4
    16c8:	66 e0       	ldi	r22, 0x06	; 6
    16ca:	40 e0       	ldi	r20, 0x00	; 0
    16cc:	0e 94 96 06 	call	0xd2c	; 0xd2c <DIO_VidSetPinValue>
	/*send commands to data pins */
	DIO_VidSetPortVal(CLCD_DATA_PORT, Copy_u8Data);
    16d0:	85 e0       	ldi	r24, 0x05	; 5
    16d2:	6f 85       	ldd	r22, Y+15	; 0x0f
    16d4:	0e 94 1e 09 	call	0x123c	; 0x123c <DIO_VidSetPortVal>
	/*send enable pulse*/
	DIO_VidSetPinValue(CLCD_CTRL_PORT,CLCD_EN_PIN,high);
    16d8:	84 e0       	ldi	r24, 0x04	; 4
    16da:	67 e0       	ldi	r22, 0x07	; 7
    16dc:	41 e0       	ldi	r20, 0x01	; 1
    16de:	0e 94 96 06 	call	0xd2c	; 0xd2c <DIO_VidSetPinValue>
    16e2:	80 e0       	ldi	r24, 0x00	; 0
    16e4:	90 e0       	ldi	r25, 0x00	; 0
    16e6:	a0 e4       	ldi	r26, 0x40	; 64
    16e8:	b0 e4       	ldi	r27, 0x40	; 64
    16ea:	8b 87       	std	Y+11, r24	; 0x0b
    16ec:	9c 87       	std	Y+12, r25	; 0x0c
    16ee:	ad 87       	std	Y+13, r26	; 0x0d
    16f0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16f2:	6b 85       	ldd	r22, Y+11	; 0x0b
    16f4:	7c 85       	ldd	r23, Y+12	; 0x0c
    16f6:	8d 85       	ldd	r24, Y+13	; 0x0d
    16f8:	9e 85       	ldd	r25, Y+14	; 0x0e
    16fa:	20 e0       	ldi	r18, 0x00	; 0
    16fc:	30 e0       	ldi	r19, 0x00	; 0
    16fe:	4a ef       	ldi	r20, 0xFA	; 250
    1700:	54 e4       	ldi	r21, 0x44	; 68
    1702:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1706:	dc 01       	movw	r26, r24
    1708:	cb 01       	movw	r24, r22
    170a:	8f 83       	std	Y+7, r24	; 0x07
    170c:	98 87       	std	Y+8, r25	; 0x08
    170e:	a9 87       	std	Y+9, r26	; 0x09
    1710:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1712:	6f 81       	ldd	r22, Y+7	; 0x07
    1714:	78 85       	ldd	r23, Y+8	; 0x08
    1716:	89 85       	ldd	r24, Y+9	; 0x09
    1718:	9a 85       	ldd	r25, Y+10	; 0x0a
    171a:	20 e0       	ldi	r18, 0x00	; 0
    171c:	30 e0       	ldi	r19, 0x00	; 0
    171e:	40 e8       	ldi	r20, 0x80	; 128
    1720:	5f e3       	ldi	r21, 0x3F	; 63
    1722:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1726:	88 23       	and	r24, r24
    1728:	2c f4       	brge	.+10     	; 0x1734 <ClCD_VidSendData+0x8e>
		__ticks = 1;
    172a:	81 e0       	ldi	r24, 0x01	; 1
    172c:	90 e0       	ldi	r25, 0x00	; 0
    172e:	9e 83       	std	Y+6, r25	; 0x06
    1730:	8d 83       	std	Y+5, r24	; 0x05
    1732:	3f c0       	rjmp	.+126    	; 0x17b2 <ClCD_VidSendData+0x10c>
	else if (__tmp > 65535)
    1734:	6f 81       	ldd	r22, Y+7	; 0x07
    1736:	78 85       	ldd	r23, Y+8	; 0x08
    1738:	89 85       	ldd	r24, Y+9	; 0x09
    173a:	9a 85       	ldd	r25, Y+10	; 0x0a
    173c:	20 e0       	ldi	r18, 0x00	; 0
    173e:	3f ef       	ldi	r19, 0xFF	; 255
    1740:	4f e7       	ldi	r20, 0x7F	; 127
    1742:	57 e4       	ldi	r21, 0x47	; 71
    1744:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1748:	18 16       	cp	r1, r24
    174a:	4c f5       	brge	.+82     	; 0x179e <ClCD_VidSendData+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    174c:	6b 85       	ldd	r22, Y+11	; 0x0b
    174e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1750:	8d 85       	ldd	r24, Y+13	; 0x0d
    1752:	9e 85       	ldd	r25, Y+14	; 0x0e
    1754:	20 e0       	ldi	r18, 0x00	; 0
    1756:	30 e0       	ldi	r19, 0x00	; 0
    1758:	40 e2       	ldi	r20, 0x20	; 32
    175a:	51 e4       	ldi	r21, 0x41	; 65
    175c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1760:	dc 01       	movw	r26, r24
    1762:	cb 01       	movw	r24, r22
    1764:	bc 01       	movw	r22, r24
    1766:	cd 01       	movw	r24, r26
    1768:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    176c:	dc 01       	movw	r26, r24
    176e:	cb 01       	movw	r24, r22
    1770:	9e 83       	std	Y+6, r25	; 0x06
    1772:	8d 83       	std	Y+5, r24	; 0x05
    1774:	0f c0       	rjmp	.+30     	; 0x1794 <ClCD_VidSendData+0xee>
    1776:	88 ec       	ldi	r24, 0xC8	; 200
    1778:	90 e0       	ldi	r25, 0x00	; 0
    177a:	9c 83       	std	Y+4, r25	; 0x04
    177c:	8b 83       	std	Y+3, r24	; 0x03
    177e:	8b 81       	ldd	r24, Y+3	; 0x03
    1780:	9c 81       	ldd	r25, Y+4	; 0x04
    1782:	01 97       	sbiw	r24, 0x01	; 1
    1784:	f1 f7       	brne	.-4      	; 0x1782 <ClCD_VidSendData+0xdc>
    1786:	9c 83       	std	Y+4, r25	; 0x04
    1788:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    178a:	8d 81       	ldd	r24, Y+5	; 0x05
    178c:	9e 81       	ldd	r25, Y+6	; 0x06
    178e:	01 97       	sbiw	r24, 0x01	; 1
    1790:	9e 83       	std	Y+6, r25	; 0x06
    1792:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1794:	8d 81       	ldd	r24, Y+5	; 0x05
    1796:	9e 81       	ldd	r25, Y+6	; 0x06
    1798:	00 97       	sbiw	r24, 0x00	; 0
    179a:	69 f7       	brne	.-38     	; 0x1776 <ClCD_VidSendData+0xd0>
    179c:	14 c0       	rjmp	.+40     	; 0x17c6 <ClCD_VidSendData+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    179e:	6f 81       	ldd	r22, Y+7	; 0x07
    17a0:	78 85       	ldd	r23, Y+8	; 0x08
    17a2:	89 85       	ldd	r24, Y+9	; 0x09
    17a4:	9a 85       	ldd	r25, Y+10	; 0x0a
    17a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17aa:	dc 01       	movw	r26, r24
    17ac:	cb 01       	movw	r24, r22
    17ae:	9e 83       	std	Y+6, r25	; 0x06
    17b0:	8d 83       	std	Y+5, r24	; 0x05
    17b2:	8d 81       	ldd	r24, Y+5	; 0x05
    17b4:	9e 81       	ldd	r25, Y+6	; 0x06
    17b6:	9a 83       	std	Y+2, r25	; 0x02
    17b8:	89 83       	std	Y+1, r24	; 0x01
    17ba:	89 81       	ldd	r24, Y+1	; 0x01
    17bc:	9a 81       	ldd	r25, Y+2	; 0x02
    17be:	01 97       	sbiw	r24, 0x01	; 1
    17c0:	f1 f7       	brne	.-4      	; 0x17be <ClCD_VidSendData+0x118>
    17c2:	9a 83       	std	Y+2, r25	; 0x02
    17c4:	89 83       	std	Y+1, r24	; 0x01
	/*delay*/
	_delay_ms(3);
	/*Clear enable pin (Pulse Complete)*/
	DIO_VidSetPinValue(CLCD_CTRL_PORT,CLCD_EN_PIN,low);
    17c6:	84 e0       	ldi	r24, 0x04	; 4
    17c8:	67 e0       	ldi	r22, 0x07	; 7
    17ca:	40 e0       	ldi	r20, 0x00	; 0
    17cc:	0e 94 96 06 	call	0xd2c	; 0xd2c <DIO_VidSetPinValue>
}
    17d0:	2f 96       	adiw	r28, 0x0f	; 15
    17d2:	0f b6       	in	r0, 0x3f	; 63
    17d4:	f8 94       	cli
    17d6:	de bf       	out	0x3e, r29	; 62
    17d8:	0f be       	out	0x3f, r0	; 63
    17da:	cd bf       	out	0x3d, r28	; 61
    17dc:	cf 91       	pop	r28
    17de:	df 91       	pop	r29
    17e0:	08 95       	ret

000017e2 <CLCD_VidInit>:
void CLCD_VidInit(void){
    17e2:	df 93       	push	r29
    17e4:	cf 93       	push	r28
    17e6:	cd b7       	in	r28, 0x3d	; 61
    17e8:	de b7       	in	r29, 0x3e	; 62
    17ea:	2e 97       	sbiw	r28, 0x0e	; 14
    17ec:	0f b6       	in	r0, 0x3f	; 63
    17ee:	f8 94       	cli
    17f0:	de bf       	out	0x3e, r29	; 62
    17f2:	0f be       	out	0x3f, r0	; 63
    17f4:	cd bf       	out	0x3d, r28	; 61
    17f6:	80 e0       	ldi	r24, 0x00	; 0
    17f8:	90 e0       	ldi	r25, 0x00	; 0
    17fa:	a0 e2       	ldi	r26, 0x20	; 32
    17fc:	b2 e4       	ldi	r27, 0x42	; 66
    17fe:	8b 87       	std	Y+11, r24	; 0x0b
    1800:	9c 87       	std	Y+12, r25	; 0x0c
    1802:	ad 87       	std	Y+13, r26	; 0x0d
    1804:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1806:	6b 85       	ldd	r22, Y+11	; 0x0b
    1808:	7c 85       	ldd	r23, Y+12	; 0x0c
    180a:	8d 85       	ldd	r24, Y+13	; 0x0d
    180c:	9e 85       	ldd	r25, Y+14	; 0x0e
    180e:	20 e0       	ldi	r18, 0x00	; 0
    1810:	30 e0       	ldi	r19, 0x00	; 0
    1812:	4a ef       	ldi	r20, 0xFA	; 250
    1814:	54 e4       	ldi	r21, 0x44	; 68
    1816:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    181a:	dc 01       	movw	r26, r24
    181c:	cb 01       	movw	r24, r22
    181e:	8f 83       	std	Y+7, r24	; 0x07
    1820:	98 87       	std	Y+8, r25	; 0x08
    1822:	a9 87       	std	Y+9, r26	; 0x09
    1824:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1826:	6f 81       	ldd	r22, Y+7	; 0x07
    1828:	78 85       	ldd	r23, Y+8	; 0x08
    182a:	89 85       	ldd	r24, Y+9	; 0x09
    182c:	9a 85       	ldd	r25, Y+10	; 0x0a
    182e:	20 e0       	ldi	r18, 0x00	; 0
    1830:	30 e0       	ldi	r19, 0x00	; 0
    1832:	40 e8       	ldi	r20, 0x80	; 128
    1834:	5f e3       	ldi	r21, 0x3F	; 63
    1836:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    183a:	88 23       	and	r24, r24
    183c:	2c f4       	brge	.+10     	; 0x1848 <CLCD_VidInit+0x66>
		__ticks = 1;
    183e:	81 e0       	ldi	r24, 0x01	; 1
    1840:	90 e0       	ldi	r25, 0x00	; 0
    1842:	9e 83       	std	Y+6, r25	; 0x06
    1844:	8d 83       	std	Y+5, r24	; 0x05
    1846:	3f c0       	rjmp	.+126    	; 0x18c6 <CLCD_VidInit+0xe4>
	else if (__tmp > 65535)
    1848:	6f 81       	ldd	r22, Y+7	; 0x07
    184a:	78 85       	ldd	r23, Y+8	; 0x08
    184c:	89 85       	ldd	r24, Y+9	; 0x09
    184e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1850:	20 e0       	ldi	r18, 0x00	; 0
    1852:	3f ef       	ldi	r19, 0xFF	; 255
    1854:	4f e7       	ldi	r20, 0x7F	; 127
    1856:	57 e4       	ldi	r21, 0x47	; 71
    1858:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    185c:	18 16       	cp	r1, r24
    185e:	4c f5       	brge	.+82     	; 0x18b2 <CLCD_VidInit+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1860:	6b 85       	ldd	r22, Y+11	; 0x0b
    1862:	7c 85       	ldd	r23, Y+12	; 0x0c
    1864:	8d 85       	ldd	r24, Y+13	; 0x0d
    1866:	9e 85       	ldd	r25, Y+14	; 0x0e
    1868:	20 e0       	ldi	r18, 0x00	; 0
    186a:	30 e0       	ldi	r19, 0x00	; 0
    186c:	40 e2       	ldi	r20, 0x20	; 32
    186e:	51 e4       	ldi	r21, 0x41	; 65
    1870:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1874:	dc 01       	movw	r26, r24
    1876:	cb 01       	movw	r24, r22
    1878:	bc 01       	movw	r22, r24
    187a:	cd 01       	movw	r24, r26
    187c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1880:	dc 01       	movw	r26, r24
    1882:	cb 01       	movw	r24, r22
    1884:	9e 83       	std	Y+6, r25	; 0x06
    1886:	8d 83       	std	Y+5, r24	; 0x05
    1888:	0f c0       	rjmp	.+30     	; 0x18a8 <CLCD_VidInit+0xc6>
    188a:	88 ec       	ldi	r24, 0xC8	; 200
    188c:	90 e0       	ldi	r25, 0x00	; 0
    188e:	9c 83       	std	Y+4, r25	; 0x04
    1890:	8b 83       	std	Y+3, r24	; 0x03
    1892:	8b 81       	ldd	r24, Y+3	; 0x03
    1894:	9c 81       	ldd	r25, Y+4	; 0x04
    1896:	01 97       	sbiw	r24, 0x01	; 1
    1898:	f1 f7       	brne	.-4      	; 0x1896 <CLCD_VidInit+0xb4>
    189a:	9c 83       	std	Y+4, r25	; 0x04
    189c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    189e:	8d 81       	ldd	r24, Y+5	; 0x05
    18a0:	9e 81       	ldd	r25, Y+6	; 0x06
    18a2:	01 97       	sbiw	r24, 0x01	; 1
    18a4:	9e 83       	std	Y+6, r25	; 0x06
    18a6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18a8:	8d 81       	ldd	r24, Y+5	; 0x05
    18aa:	9e 81       	ldd	r25, Y+6	; 0x06
    18ac:	00 97       	sbiw	r24, 0x00	; 0
    18ae:	69 f7       	brne	.-38     	; 0x188a <CLCD_VidInit+0xa8>
    18b0:	14 c0       	rjmp	.+40     	; 0x18da <CLCD_VidInit+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18b2:	6f 81       	ldd	r22, Y+7	; 0x07
    18b4:	78 85       	ldd	r23, Y+8	; 0x08
    18b6:	89 85       	ldd	r24, Y+9	; 0x09
    18b8:	9a 85       	ldd	r25, Y+10	; 0x0a
    18ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18be:	dc 01       	movw	r26, r24
    18c0:	cb 01       	movw	r24, r22
    18c2:	9e 83       	std	Y+6, r25	; 0x06
    18c4:	8d 83       	std	Y+5, r24	; 0x05
    18c6:	8d 81       	ldd	r24, Y+5	; 0x05
    18c8:	9e 81       	ldd	r25, Y+6	; 0x06
    18ca:	9a 83       	std	Y+2, r25	; 0x02
    18cc:	89 83       	std	Y+1, r24	; 0x01
    18ce:	89 81       	ldd	r24, Y+1	; 0x01
    18d0:	9a 81       	ldd	r25, Y+2	; 0x02
    18d2:	01 97       	sbiw	r24, 0x01	; 1
    18d4:	f1 f7       	brne	.-4      	; 0x18d2 <CLCD_VidInit+0xf0>
    18d6:	9a 83       	std	Y+2, r25	; 0x02
    18d8:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(40);
	/*Function Set Command*/
	CLCD_VidSendCommand(0b00111111);
    18da:	8f e3       	ldi	r24, 0x3F	; 63
    18dc:	0e 94 b5 0a 	call	0x156a	; 0x156a <CLCD_VidSendCommand>
	/*Display on/off control command*/
	CLCD_VidSendCommand(0b00001111);
    18e0:	8f e0       	ldi	r24, 0x0F	; 15
    18e2:	0e 94 b5 0a 	call	0x156a	; 0x156a <CLCD_VidSendCommand>
	/*Display Clear command*/
	CLCD_VidSendCommand(1);
    18e6:	81 e0       	ldi	r24, 0x01	; 1
    18e8:	0e 94 b5 0a 	call	0x156a	; 0x156a <CLCD_VidSendCommand>
}
    18ec:	2e 96       	adiw	r28, 0x0e	; 14
    18ee:	0f b6       	in	r0, 0x3f	; 63
    18f0:	f8 94       	cli
    18f2:	de bf       	out	0x3e, r29	; 62
    18f4:	0f be       	out	0x3f, r0	; 63
    18f6:	cd bf       	out	0x3d, r28	; 61
    18f8:	cf 91       	pop	r28
    18fa:	df 91       	pop	r29
    18fc:	08 95       	ret

000018fe <CLCD_VidGotoXY>:
void CLCD_VidGotoXY (u8 Copy_u8XPos,u8 Copy_u8YPos){ /*x from 0 to 1 -------- y from 0 to 16*/
    18fe:	df 93       	push	r29
    1900:	cf 93       	push	r28
    1902:	00 d0       	rcall	.+0      	; 0x1904 <CLCD_VidGotoXY+0x6>
    1904:	0f 92       	push	r0
    1906:	cd b7       	in	r28, 0x3d	; 61
    1908:	de b7       	in	r29, 0x3e	; 62
    190a:	8a 83       	std	Y+2, r24	; 0x02
    190c:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8Address = 0 ;
    190e:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8XPos ==0){
    1910:	8a 81       	ldd	r24, Y+2	; 0x02
    1912:	88 23       	and	r24, r24
    1914:	19 f4       	brne	.+6      	; 0x191c <CLCD_VidGotoXY+0x1e>
		Local_u8Address = Copy_u8YPos;
    1916:	8b 81       	ldd	r24, Y+3	; 0x03
    1918:	89 83       	std	Y+1, r24	; 0x01
    191a:	06 c0       	rjmp	.+12     	; 0x1928 <CLCD_VidGotoXY+0x2a>
	}
	else if(Copy_u8XPos==1 ){
    191c:	8a 81       	ldd	r24, Y+2	; 0x02
    191e:	81 30       	cpi	r24, 0x01	; 1
    1920:	19 f4       	brne	.+6      	; 0x1928 <CLCD_VidGotoXY+0x2a>
		Local_u8Address = 0x40 + Copy_u8YPos;
    1922:	8b 81       	ldd	r24, Y+3	; 0x03
    1924:	80 5c       	subi	r24, 0xC0	; 192
    1926:	89 83       	std	Y+1, r24	; 0x01
	}
	/*0b1000000 ----> 128 */
	CLCD_VidSendCommand(128+Local_u8Address);
    1928:	89 81       	ldd	r24, Y+1	; 0x01
    192a:	80 58       	subi	r24, 0x80	; 128
    192c:	0e 94 b5 0a 	call	0x156a	; 0x156a <CLCD_VidSendCommand>

}
    1930:	0f 90       	pop	r0
    1932:	0f 90       	pop	r0
    1934:	0f 90       	pop	r0
    1936:	cf 91       	pop	r28
    1938:	df 91       	pop	r29
    193a:	08 95       	ret

0000193c <CLCD_VidWriteSpecialChar>:
void CLCD_VidWriteSpecialChar(u8 * Copy_Pu8Pattern, u8 Copy_u8PatternNumber,u8 Copy_u8XPos,u8 Copy_u8YPos ){
    193c:	df 93       	push	r29
    193e:	cf 93       	push	r28
    1940:	cd b7       	in	r28, 0x3d	; 61
    1942:	de b7       	in	r29, 0x3e	; 62
    1944:	27 97       	sbiw	r28, 0x07	; 7
    1946:	0f b6       	in	r0, 0x3f	; 63
    1948:	f8 94       	cli
    194a:	de bf       	out	0x3e, r29	; 62
    194c:	0f be       	out	0x3f, r0	; 63
    194e:	cd bf       	out	0x3d, r28	; 61
    1950:	9c 83       	std	Y+4, r25	; 0x04
    1952:	8b 83       	std	Y+3, r24	; 0x03
    1954:	6d 83       	std	Y+5, r22	; 0x05
    1956:	4e 83       	std	Y+6, r20	; 0x06
    1958:	2f 83       	std	Y+7, r18	; 0x07

	u8 Local_u8Address = 0;
    195a:	1a 82       	std	Y+2, r1	; 0x02

	Local_u8Address = 8* Copy_u8PatternNumber; /*Generate the wanted location*/
    195c:	8d 81       	ldd	r24, Y+5	; 0x05
    195e:	88 2f       	mov	r24, r24
    1960:	90 e0       	ldi	r25, 0x00	; 0
    1962:	88 0f       	add	r24, r24
    1964:	99 1f       	adc	r25, r25
    1966:	88 0f       	add	r24, r24
    1968:	99 1f       	adc	r25, r25
    196a:	88 0f       	add	r24, r24
    196c:	99 1f       	adc	r25, r25
    196e:	8a 83       	std	Y+2, r24	; 0x02

	CLCD_VidSendCommand(64+Local_u8Address); /*Access the wanted location*/
    1970:	8a 81       	ldd	r24, Y+2	; 0x02
    1972:	80 5c       	subi	r24, 0xC0	; 192
    1974:	0e 94 b5 0a 	call	0x156a	; 0x156a <CLCD_VidSendCommand>

	for (u8 i = 0 ; i<8;i++){
    1978:	19 82       	std	Y+1, r1	; 0x01
    197a:	0e c0       	rjmp	.+28     	; 0x1998 <CLCD_VidWriteSpecialChar+0x5c>
		ClCD_VidSendData(Copy_Pu8Pattern[i]);  /*store data in the location*/
    197c:	89 81       	ldd	r24, Y+1	; 0x01
    197e:	28 2f       	mov	r18, r24
    1980:	30 e0       	ldi	r19, 0x00	; 0
    1982:	8b 81       	ldd	r24, Y+3	; 0x03
    1984:	9c 81       	ldd	r25, Y+4	; 0x04
    1986:	fc 01       	movw	r30, r24
    1988:	e2 0f       	add	r30, r18
    198a:	f3 1f       	adc	r31, r19
    198c:	80 81       	ld	r24, Z
    198e:	0e 94 53 0b 	call	0x16a6	; 0x16a6 <ClCD_VidSendData>

	Local_u8Address = 8* Copy_u8PatternNumber; /*Generate the wanted location*/

	CLCD_VidSendCommand(64+Local_u8Address); /*Access the wanted location*/

	for (u8 i = 0 ; i<8;i++){
    1992:	89 81       	ldd	r24, Y+1	; 0x01
    1994:	8f 5f       	subi	r24, 0xFF	; 255
    1996:	89 83       	std	Y+1, r24	; 0x01
    1998:	89 81       	ldd	r24, Y+1	; 0x01
    199a:	88 30       	cpi	r24, 0x08	; 8
    199c:	78 f3       	brcs	.-34     	; 0x197c <CLCD_VidWriteSpecialChar+0x40>
		ClCD_VidSendData(Copy_Pu8Pattern[i]);  /*store data in the location*/
	}
	CLCD_VidGotoXY(Copy_u8XPos,Copy_u8YPos);  /*GO TO RAM*/
    199e:	8e 81       	ldd	r24, Y+6	; 0x06
    19a0:	6f 81       	ldd	r22, Y+7	; 0x07
    19a2:	0e 94 7f 0c 	call	0x18fe	; 0x18fe <CLCD_VidGotoXY>
	ClCD_VidSendData(Copy_u8PatternNumber); /*Go to first address in CGRAM, Display output sequentially*/
    19a6:	8d 81       	ldd	r24, Y+5	; 0x05
    19a8:	0e 94 53 0b 	call	0x16a6	; 0x16a6 <ClCD_VidSendData>
}
    19ac:	27 96       	adiw	r28, 0x07	; 7
    19ae:	0f b6       	in	r0, 0x3f	; 63
    19b0:	f8 94       	cli
    19b2:	de bf       	out	0x3e, r29	; 62
    19b4:	0f be       	out	0x3f, r0	; 63
    19b6:	cd bf       	out	0x3d, r28	; 61
    19b8:	cf 91       	pop	r28
    19ba:	df 91       	pop	r29
    19bc:	08 95       	ret

000019be <CLCD_VidSendString>:

void CLCD_VidSendString(u8 * Copy_Pu8Str){
    19be:	df 93       	push	r29
    19c0:	cf 93       	push	r28
    19c2:	00 d0       	rcall	.+0      	; 0x19c4 <CLCD_VidSendString+0x6>
    19c4:	0f 92       	push	r0
    19c6:	cd b7       	in	r28, 0x3d	; 61
    19c8:	de b7       	in	r29, 0x3e	; 62
    19ca:	9b 83       	std	Y+3, r25	; 0x03
    19cc:	8a 83       	std	Y+2, r24	; 0x02
	u8 i = 0;
    19ce:	19 82       	std	Y+1, r1	; 0x01
    19d0:	0e c0       	rjmp	.+28     	; 0x19ee <CLCD_VidSendString+0x30>
	while(Copy_Pu8Str[i] != '\0'){

		ClCD_VidSendData(Copy_Pu8Str[i]);
    19d2:	89 81       	ldd	r24, Y+1	; 0x01
    19d4:	28 2f       	mov	r18, r24
    19d6:	30 e0       	ldi	r19, 0x00	; 0
    19d8:	8a 81       	ldd	r24, Y+2	; 0x02
    19da:	9b 81       	ldd	r25, Y+3	; 0x03
    19dc:	fc 01       	movw	r30, r24
    19de:	e2 0f       	add	r30, r18
    19e0:	f3 1f       	adc	r31, r19
    19e2:	80 81       	ld	r24, Z
    19e4:	0e 94 53 0b 	call	0x16a6	; 0x16a6 <ClCD_VidSendData>
		i++;
    19e8:	89 81       	ldd	r24, Y+1	; 0x01
    19ea:	8f 5f       	subi	r24, 0xFF	; 255
    19ec:	89 83       	std	Y+1, r24	; 0x01
	ClCD_VidSendData(Copy_u8PatternNumber); /*Go to first address in CGRAM, Display output sequentially*/
}

void CLCD_VidSendString(u8 * Copy_Pu8Str){
	u8 i = 0;
	while(Copy_Pu8Str[i] != '\0'){
    19ee:	89 81       	ldd	r24, Y+1	; 0x01
    19f0:	28 2f       	mov	r18, r24
    19f2:	30 e0       	ldi	r19, 0x00	; 0
    19f4:	8a 81       	ldd	r24, Y+2	; 0x02
    19f6:	9b 81       	ldd	r25, Y+3	; 0x03
    19f8:	fc 01       	movw	r30, r24
    19fa:	e2 0f       	add	r30, r18
    19fc:	f3 1f       	adc	r31, r19
    19fe:	80 81       	ld	r24, Z
    1a00:	88 23       	and	r24, r24
    1a02:	39 f7       	brne	.-50     	; 0x19d2 <CLCD_VidSendString+0x14>

		ClCD_VidSendData(Copy_Pu8Str[i]);
		i++;
	}
}
    1a04:	0f 90       	pop	r0
    1a06:	0f 90       	pop	r0
    1a08:	0f 90       	pop	r0
    1a0a:	cf 91       	pop	r28
    1a0c:	df 91       	pop	r29
    1a0e:	08 95       	ret

00001a10 <CLCD_VidLcdClear>:
void CLCD_VidLcdClear(void){
    1a10:	df 93       	push	r29
    1a12:	cf 93       	push	r28
    1a14:	cd b7       	in	r28, 0x3d	; 61
    1a16:	de b7       	in	r29, 0x3e	; 62
	CLCD_VidSendCommand(1);
    1a18:	81 e0       	ldi	r24, 0x01	; 1
    1a1a:	0e 94 b5 0a 	call	0x156a	; 0x156a <CLCD_VidSendCommand>
}
    1a1e:	cf 91       	pop	r28
    1a20:	df 91       	pop	r29
    1a22:	08 95       	ret

00001a24 <CLCD_VidSendNumber>:
void CLCD_VidSendNumber(u16 CLCD_u16Number,u8 * CLCD_u8PCharArr){
    1a24:	df 93       	push	r29
    1a26:	cf 93       	push	r28
    1a28:	00 d0       	rcall	.+0      	; 0x1a2a <CLCD_VidSendNumber+0x6>
    1a2a:	00 d0       	rcall	.+0      	; 0x1a2c <CLCD_VidSendNumber+0x8>
    1a2c:	cd b7       	in	r28, 0x3d	; 61
    1a2e:	de b7       	in	r29, 0x3e	; 62
    1a30:	9a 83       	std	Y+2, r25	; 0x02
    1a32:	89 83       	std	Y+1, r24	; 0x01
    1a34:	7c 83       	std	Y+4, r23	; 0x04
    1a36:	6b 83       	std	Y+3, r22	; 0x03

	sprintf(CLCD_u8PCharArr,CLCD_u16Number);
    1a38:	29 81       	ldd	r18, Y+1	; 0x01
    1a3a:	3a 81       	ldd	r19, Y+2	; 0x02
    1a3c:	00 d0       	rcall	.+0      	; 0x1a3e <CLCD_VidSendNumber+0x1a>
    1a3e:	00 d0       	rcall	.+0      	; 0x1a40 <CLCD_VidSendNumber+0x1c>
    1a40:	ed b7       	in	r30, 0x3d	; 61
    1a42:	fe b7       	in	r31, 0x3e	; 62
    1a44:	31 96       	adiw	r30, 0x01	; 1
    1a46:	8b 81       	ldd	r24, Y+3	; 0x03
    1a48:	9c 81       	ldd	r25, Y+4	; 0x04
    1a4a:	91 83       	std	Z+1, r25	; 0x01
    1a4c:	80 83       	st	Z, r24
    1a4e:	33 83       	std	Z+3, r19	; 0x03
    1a50:	22 83       	std	Z+2, r18	; 0x02
    1a52:	0e 94 e0 0e 	call	0x1dc0	; 0x1dc0 <sprintf>
    1a56:	0f 90       	pop	r0
    1a58:	0f 90       	pop	r0
    1a5a:	0f 90       	pop	r0
    1a5c:	0f 90       	pop	r0
	CLCD_VidSendString(CLCD_u8PCharArr);
    1a5e:	8b 81       	ldd	r24, Y+3	; 0x03
    1a60:	9c 81       	ldd	r25, Y+4	; 0x04
    1a62:	0e 94 df 0c 	call	0x19be	; 0x19be <CLCD_VidSendString>

}
    1a66:	0f 90       	pop	r0
    1a68:	0f 90       	pop	r0
    1a6a:	0f 90       	pop	r0
    1a6c:	0f 90       	pop	r0
    1a6e:	cf 91       	pop	r28
    1a70:	df 91       	pop	r29
    1a72:	08 95       	ret

00001a74 <CLCD_VidSendFloatNumber>:
void CLCD_VidSendFloatNumber(f64 CLCD_u16Number,u8 * CLCD_u8PCharArr){
    1a74:	df 93       	push	r29
    1a76:	cf 93       	push	r28
    1a78:	00 d0       	rcall	.+0      	; 0x1a7a <CLCD_VidSendFloatNumber+0x6>
    1a7a:	00 d0       	rcall	.+0      	; 0x1a7c <CLCD_VidSendFloatNumber+0x8>
    1a7c:	00 d0       	rcall	.+0      	; 0x1a7e <CLCD_VidSendFloatNumber+0xa>
    1a7e:	cd b7       	in	r28, 0x3d	; 61
    1a80:	de b7       	in	r29, 0x3e	; 62
    1a82:	69 83       	std	Y+1, r22	; 0x01
    1a84:	7a 83       	std	Y+2, r23	; 0x02
    1a86:	8b 83       	std	Y+3, r24	; 0x03
    1a88:	9c 83       	std	Y+4, r25	; 0x04
    1a8a:	5e 83       	std	Y+6, r21	; 0x06
    1a8c:	4d 83       	std	Y+5, r20	; 0x05

	snprintf(CLCD_u8PCharArr,6,"%f",CLCD_u16Number);
    1a8e:	8d b7       	in	r24, 0x3d	; 61
    1a90:	9e b7       	in	r25, 0x3e	; 62
    1a92:	0a 97       	sbiw	r24, 0x0a	; 10
    1a94:	0f b6       	in	r0, 0x3f	; 63
    1a96:	f8 94       	cli
    1a98:	9e bf       	out	0x3e, r25	; 62
    1a9a:	0f be       	out	0x3f, r0	; 63
    1a9c:	8d bf       	out	0x3d, r24	; 61
    1a9e:	ed b7       	in	r30, 0x3d	; 61
    1aa0:	fe b7       	in	r31, 0x3e	; 62
    1aa2:	31 96       	adiw	r30, 0x01	; 1
    1aa4:	8d 81       	ldd	r24, Y+5	; 0x05
    1aa6:	9e 81       	ldd	r25, Y+6	; 0x06
    1aa8:	91 83       	std	Z+1, r25	; 0x01
    1aaa:	80 83       	st	Z, r24
    1aac:	86 e0       	ldi	r24, 0x06	; 6
    1aae:	90 e0       	ldi	r25, 0x00	; 0
    1ab0:	93 83       	std	Z+3, r25	; 0x03
    1ab2:	82 83       	std	Z+2, r24	; 0x02
    1ab4:	80 e6       	ldi	r24, 0x60	; 96
    1ab6:	90 e0       	ldi	r25, 0x00	; 0
    1ab8:	95 83       	std	Z+5, r25	; 0x05
    1aba:	84 83       	std	Z+4, r24	; 0x04
    1abc:	89 81       	ldd	r24, Y+1	; 0x01
    1abe:	9a 81       	ldd	r25, Y+2	; 0x02
    1ac0:	ab 81       	ldd	r26, Y+3	; 0x03
    1ac2:	bc 81       	ldd	r27, Y+4	; 0x04
    1ac4:	86 83       	std	Z+6, r24	; 0x06
    1ac6:	97 83       	std	Z+7, r25	; 0x07
    1ac8:	a0 87       	std	Z+8, r26	; 0x08
    1aca:	b1 87       	std	Z+9, r27	; 0x09
    1acc:	0e 94 af 0e 	call	0x1d5e	; 0x1d5e <snprintf>
    1ad0:	8d b7       	in	r24, 0x3d	; 61
    1ad2:	9e b7       	in	r25, 0x3e	; 62
    1ad4:	0a 96       	adiw	r24, 0x0a	; 10
    1ad6:	0f b6       	in	r0, 0x3f	; 63
    1ad8:	f8 94       	cli
    1ada:	9e bf       	out	0x3e, r25	; 62
    1adc:	0f be       	out	0x3f, r0	; 63
    1ade:	8d bf       	out	0x3d, r24	; 61
	CLCD_VidSendString(CLCD_u8PCharArr);
    1ae0:	8d 81       	ldd	r24, Y+5	; 0x05
    1ae2:	9e 81       	ldd	r25, Y+6	; 0x06
    1ae4:	0e 94 df 0c 	call	0x19be	; 0x19be <CLCD_VidSendString>

}
    1ae8:	26 96       	adiw	r28, 0x06	; 6
    1aea:	0f b6       	in	r0, 0x3f	; 63
    1aec:	f8 94       	cli
    1aee:	de bf       	out	0x3e, r29	; 62
    1af0:	0f be       	out	0x3f, r0	; 63
    1af2:	cd bf       	out	0x3d, r28	; 61
    1af4:	cf 91       	pop	r28
    1af6:	df 91       	pop	r29
    1af8:	08 95       	ret

00001afa <main>:

/*MCAL*/
#include "MCAL/DIO/DIO_Interface.h"
#include "MCAL/ADC/ADC_Interface.h"

void main(void){
    1afa:	df 93       	push	r29
    1afc:	cf 93       	push	r28
    1afe:	cd b7       	in	r28, 0x3d	; 61
    1b00:	de b7       	in	r29, 0x3e	; 62
    1b02:	69 97       	sbiw	r28, 0x19	; 25
    1b04:	0f b6       	in	r0, 0x3f	; 63
    1b06:	f8 94       	cli
    1b08:	de bf       	out	0x3e, r29	; 62
    1b0a:	0f be       	out	0x3f, r0	; 63
    1b0c:	cd bf       	out	0x3d, r28	; 61
	/*Setting LCD Directions*/
	DIO_VidSetPinDirection(CLCD_CTRL_PORT,CLCD_RS_PIN,output);
    1b0e:	84 e0       	ldi	r24, 0x04	; 4
    1b10:	65 e0       	ldi	r22, 0x05	; 5
    1b12:	41 e0       	ldi	r20, 0x01	; 1
    1b14:	0e 94 98 07 	call	0xf30	; 0xf30 <DIO_VidSetPinDirection>
	DIO_VidSetPinDirection(CLCD_CTRL_PORT,CLCD_RW_PIN,output);
    1b18:	84 e0       	ldi	r24, 0x04	; 4
    1b1a:	66 e0       	ldi	r22, 0x06	; 6
    1b1c:	41 e0       	ldi	r20, 0x01	; 1
    1b1e:	0e 94 98 07 	call	0xf30	; 0xf30 <DIO_VidSetPinDirection>
	DIO_VidSetPinDirection(CLCD_CTRL_PORT,CLCD_EN_PIN,output);
    1b22:	84 e0       	ldi	r24, 0x04	; 4
    1b24:	67 e0       	ldi	r22, 0x07	; 7
    1b26:	41 e0       	ldi	r20, 0x01	; 1
    1b28:	0e 94 98 07 	call	0xf30	; 0xf30 <DIO_VidSetPinDirection>
	DIO_VidSetPortDirection(CLCD_DATA_PORT, output);
    1b2c:	85 e0       	ldi	r24, 0x05	; 5
    1b2e:	61 e0       	ldi	r22, 0x01	; 1
    1b30:	0e 94 60 09 	call	0x12c0	; 0x12c0 <DIO_VidSetPortDirection>
	CLCD_VidInit(); /*Initializes the LCD*/
    1b34:	0e 94 f1 0b 	call	0x17e2	; 0x17e2 <CLCD_VidInit>

	DIO_VidSetPinDirection(Port_A,Pin_0,input); /*ADC0 pin*/
    1b38:	82 e0       	ldi	r24, 0x02	; 2
    1b3a:	60 e0       	ldi	r22, 0x00	; 0
    1b3c:	40 e0       	ldi	r20, 0x00	; 0
    1b3e:	0e 94 98 07 	call	0xf30	; 0xf30 <DIO_VidSetPinDirection>
	DIO_VidSetPinDirection(Port_C,Pin_1,output); /*For LED 1 */
    1b42:	84 e0       	ldi	r24, 0x04	; 4
    1b44:	61 e0       	ldi	r22, 0x01	; 1
    1b46:	41 e0       	ldi	r20, 0x01	; 1
    1b48:	0e 94 98 07 	call	0xf30	; 0xf30 <DIO_VidSetPinDirection>
	DIO_VidSetPinDirection(Port_C,Pin_2,output); /*For LED 2*/
    1b4c:	84 e0       	ldi	r24, 0x04	; 4
    1b4e:	62 e0       	ldi	r22, 0x02	; 2
    1b50:	41 e0       	ldi	r20, 0x01	; 1
    1b52:	0e 94 98 07 	call	0xf30	; 0xf30 <DIO_VidSetPinDirection>
	DIO_VidSetPinDirection(Port_C,Pin_3,output); /*For LED 3*/
    1b56:	84 e0       	ldi	r24, 0x04	; 4
    1b58:	63 e0       	ldi	r22, 0x03	; 3
    1b5a:	41 e0       	ldi	r20, 0x01	; 1
    1b5c:	0e 94 98 07 	call	0xf30	; 0xf30 <DIO_VidSetPinDirection>
	/*DIO_VidSetPortDirection(Port_C,output);*/
	ADC_VidInit();
    1b60:	0e 94 28 0a 	call	0x1450	; 0x1450 <ADC_VidInit>

	u8 read;
	u16 mv_read;
	u8 Local_u8CharArr[8];
	while(1){
		read = ADC_u8ReadChannel(ADC_0); /*Get ADC Values*/
    1b64:	80 e0       	ldi	r24, 0x00	; 0
    1b66:	0e 94 60 0a 	call	0x14c0	; 0x14c0 <ADC_u8ReadChannel>
    1b6a:	89 8b       	std	Y+17, r24	; 0x11
		mv_read = ADC_f32LCDVoltConv(read);
    1b6c:	89 89       	ldd	r24, Y+17	; 0x11
    1b6e:	0e 94 95 0a 	call	0x152a	; 0x152a <ADC_f32LCDVoltConv>
    1b72:	98 8b       	std	Y+16, r25	; 0x10
    1b74:	8f 87       	std	Y+15, r24	; 0x0f
		snprintf(Local_u8CharArr,7,"%d",mv_read);
    1b76:	8d b7       	in	r24, 0x3d	; 61
    1b78:	9e b7       	in	r25, 0x3e	; 62
    1b7a:	08 97       	sbiw	r24, 0x08	; 8
    1b7c:	0f b6       	in	r0, 0x3f	; 63
    1b7e:	f8 94       	cli
    1b80:	9e bf       	out	0x3e, r25	; 62
    1b82:	0f be       	out	0x3f, r0	; 63
    1b84:	8d bf       	out	0x3d, r24	; 61
    1b86:	ed b7       	in	r30, 0x3d	; 61
    1b88:	fe b7       	in	r31, 0x3e	; 62
    1b8a:	31 96       	adiw	r30, 0x01	; 1
    1b8c:	ce 01       	movw	r24, r28
    1b8e:	42 96       	adiw	r24, 0x12	; 18
    1b90:	91 83       	std	Z+1, r25	; 0x01
    1b92:	80 83       	st	Z, r24
    1b94:	87 e0       	ldi	r24, 0x07	; 7
    1b96:	90 e0       	ldi	r25, 0x00	; 0
    1b98:	93 83       	std	Z+3, r25	; 0x03
    1b9a:	82 83       	std	Z+2, r24	; 0x02
    1b9c:	83 e6       	ldi	r24, 0x63	; 99
    1b9e:	90 e0       	ldi	r25, 0x00	; 0
    1ba0:	95 83       	std	Z+5, r25	; 0x05
    1ba2:	84 83       	std	Z+4, r24	; 0x04
    1ba4:	8f 85       	ldd	r24, Y+15	; 0x0f
    1ba6:	98 89       	ldd	r25, Y+16	; 0x10
    1ba8:	97 83       	std	Z+7, r25	; 0x07
    1baa:	86 83       	std	Z+6, r24	; 0x06
    1bac:	0e 94 af 0e 	call	0x1d5e	; 0x1d5e <snprintf>
    1bb0:	8d b7       	in	r24, 0x3d	; 61
    1bb2:	9e b7       	in	r25, 0x3e	; 62
    1bb4:	08 96       	adiw	r24, 0x08	; 8
    1bb6:	0f b6       	in	r0, 0x3f	; 63
    1bb8:	f8 94       	cli
    1bba:	9e bf       	out	0x3e, r25	; 62
    1bbc:	0f be       	out	0x3f, r0	; 63
    1bbe:	8d bf       	out	0x3d, r24	; 61
		CLCD_VidSendString(Local_u8CharArr);
    1bc0:	ce 01       	movw	r24, r28
    1bc2:	42 96       	adiw	r24, 0x12	; 18
    1bc4:	0e 94 df 0c 	call	0x19be	; 0x19be <CLCD_VidSendString>
    1bc8:	80 e0       	ldi	r24, 0x00	; 0
    1bca:	90 e0       	ldi	r25, 0x00	; 0
    1bcc:	aa e7       	ldi	r26, 0x7A	; 122
    1bce:	b4 e4       	ldi	r27, 0x44	; 68
    1bd0:	8b 87       	std	Y+11, r24	; 0x0b
    1bd2:	9c 87       	std	Y+12, r25	; 0x0c
    1bd4:	ad 87       	std	Y+13, r26	; 0x0d
    1bd6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1bd8:	6b 85       	ldd	r22, Y+11	; 0x0b
    1bda:	7c 85       	ldd	r23, Y+12	; 0x0c
    1bdc:	8d 85       	ldd	r24, Y+13	; 0x0d
    1bde:	9e 85       	ldd	r25, Y+14	; 0x0e
    1be0:	20 e0       	ldi	r18, 0x00	; 0
    1be2:	30 e0       	ldi	r19, 0x00	; 0
    1be4:	4a ef       	ldi	r20, 0xFA	; 250
    1be6:	54 e4       	ldi	r21, 0x44	; 68
    1be8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bec:	dc 01       	movw	r26, r24
    1bee:	cb 01       	movw	r24, r22
    1bf0:	8f 83       	std	Y+7, r24	; 0x07
    1bf2:	98 87       	std	Y+8, r25	; 0x08
    1bf4:	a9 87       	std	Y+9, r26	; 0x09
    1bf6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1bf8:	6f 81       	ldd	r22, Y+7	; 0x07
    1bfa:	78 85       	ldd	r23, Y+8	; 0x08
    1bfc:	89 85       	ldd	r24, Y+9	; 0x09
    1bfe:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c00:	20 e0       	ldi	r18, 0x00	; 0
    1c02:	30 e0       	ldi	r19, 0x00	; 0
    1c04:	40 e8       	ldi	r20, 0x80	; 128
    1c06:	5f e3       	ldi	r21, 0x3F	; 63
    1c08:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1c0c:	88 23       	and	r24, r24
    1c0e:	2c f4       	brge	.+10     	; 0x1c1a <main+0x120>
		__ticks = 1;
    1c10:	81 e0       	ldi	r24, 0x01	; 1
    1c12:	90 e0       	ldi	r25, 0x00	; 0
    1c14:	9e 83       	std	Y+6, r25	; 0x06
    1c16:	8d 83       	std	Y+5, r24	; 0x05
    1c18:	3f c0       	rjmp	.+126    	; 0x1c98 <main+0x19e>
	else if (__tmp > 65535)
    1c1a:	6f 81       	ldd	r22, Y+7	; 0x07
    1c1c:	78 85       	ldd	r23, Y+8	; 0x08
    1c1e:	89 85       	ldd	r24, Y+9	; 0x09
    1c20:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c22:	20 e0       	ldi	r18, 0x00	; 0
    1c24:	3f ef       	ldi	r19, 0xFF	; 255
    1c26:	4f e7       	ldi	r20, 0x7F	; 127
    1c28:	57 e4       	ldi	r21, 0x47	; 71
    1c2a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1c2e:	18 16       	cp	r1, r24
    1c30:	4c f5       	brge	.+82     	; 0x1c84 <main+0x18a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c32:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c34:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c36:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c38:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c3a:	20 e0       	ldi	r18, 0x00	; 0
    1c3c:	30 e0       	ldi	r19, 0x00	; 0
    1c3e:	40 e2       	ldi	r20, 0x20	; 32
    1c40:	51 e4       	ldi	r21, 0x41	; 65
    1c42:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c46:	dc 01       	movw	r26, r24
    1c48:	cb 01       	movw	r24, r22
    1c4a:	bc 01       	movw	r22, r24
    1c4c:	cd 01       	movw	r24, r26
    1c4e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c52:	dc 01       	movw	r26, r24
    1c54:	cb 01       	movw	r24, r22
    1c56:	9e 83       	std	Y+6, r25	; 0x06
    1c58:	8d 83       	std	Y+5, r24	; 0x05
    1c5a:	0f c0       	rjmp	.+30     	; 0x1c7a <main+0x180>
    1c5c:	88 ec       	ldi	r24, 0xC8	; 200
    1c5e:	90 e0       	ldi	r25, 0x00	; 0
    1c60:	9c 83       	std	Y+4, r25	; 0x04
    1c62:	8b 83       	std	Y+3, r24	; 0x03
    1c64:	8b 81       	ldd	r24, Y+3	; 0x03
    1c66:	9c 81       	ldd	r25, Y+4	; 0x04
    1c68:	01 97       	sbiw	r24, 0x01	; 1
    1c6a:	f1 f7       	brne	.-4      	; 0x1c68 <main+0x16e>
    1c6c:	9c 83       	std	Y+4, r25	; 0x04
    1c6e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c70:	8d 81       	ldd	r24, Y+5	; 0x05
    1c72:	9e 81       	ldd	r25, Y+6	; 0x06
    1c74:	01 97       	sbiw	r24, 0x01	; 1
    1c76:	9e 83       	std	Y+6, r25	; 0x06
    1c78:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c7a:	8d 81       	ldd	r24, Y+5	; 0x05
    1c7c:	9e 81       	ldd	r25, Y+6	; 0x06
    1c7e:	00 97       	sbiw	r24, 0x00	; 0
    1c80:	69 f7       	brne	.-38     	; 0x1c5c <main+0x162>
    1c82:	14 c0       	rjmp	.+40     	; 0x1cac <main+0x1b2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c84:	6f 81       	ldd	r22, Y+7	; 0x07
    1c86:	78 85       	ldd	r23, Y+8	; 0x08
    1c88:	89 85       	ldd	r24, Y+9	; 0x09
    1c8a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c8c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c90:	dc 01       	movw	r26, r24
    1c92:	cb 01       	movw	r24, r22
    1c94:	9e 83       	std	Y+6, r25	; 0x06
    1c96:	8d 83       	std	Y+5, r24	; 0x05
    1c98:	8d 81       	ldd	r24, Y+5	; 0x05
    1c9a:	9e 81       	ldd	r25, Y+6	; 0x06
    1c9c:	9a 83       	std	Y+2, r25	; 0x02
    1c9e:	89 83       	std	Y+1, r24	; 0x01
    1ca0:	89 81       	ldd	r24, Y+1	; 0x01
    1ca2:	9a 81       	ldd	r25, Y+2	; 0x02
    1ca4:	01 97       	sbiw	r24, 0x01	; 1
    1ca6:	f1 f7       	brne	.-4      	; 0x1ca4 <main+0x1aa>
    1ca8:	9a 83       	std	Y+2, r25	; 0x02
    1caa:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(1000);
		CLCD_VidLcdClear();
    1cac:	0e 94 08 0d 	call	0x1a10	; 0x1a10 <CLCD_VidLcdClear>
    1cb0:	59 cf       	rjmp	.-334    	; 0x1b64 <main+0x6a>

00001cb2 <__mulsi3>:
    1cb2:	62 9f       	mul	r22, r18
    1cb4:	d0 01       	movw	r26, r0
    1cb6:	73 9f       	mul	r23, r19
    1cb8:	f0 01       	movw	r30, r0
    1cba:	82 9f       	mul	r24, r18
    1cbc:	e0 0d       	add	r30, r0
    1cbe:	f1 1d       	adc	r31, r1
    1cc0:	64 9f       	mul	r22, r20
    1cc2:	e0 0d       	add	r30, r0
    1cc4:	f1 1d       	adc	r31, r1
    1cc6:	92 9f       	mul	r25, r18
    1cc8:	f0 0d       	add	r31, r0
    1cca:	83 9f       	mul	r24, r19
    1ccc:	f0 0d       	add	r31, r0
    1cce:	74 9f       	mul	r23, r20
    1cd0:	f0 0d       	add	r31, r0
    1cd2:	65 9f       	mul	r22, r21
    1cd4:	f0 0d       	add	r31, r0
    1cd6:	99 27       	eor	r25, r25
    1cd8:	72 9f       	mul	r23, r18
    1cda:	b0 0d       	add	r27, r0
    1cdc:	e1 1d       	adc	r30, r1
    1cde:	f9 1f       	adc	r31, r25
    1ce0:	63 9f       	mul	r22, r19
    1ce2:	b0 0d       	add	r27, r0
    1ce4:	e1 1d       	adc	r30, r1
    1ce6:	f9 1f       	adc	r31, r25
    1ce8:	bd 01       	movw	r22, r26
    1cea:	cf 01       	movw	r24, r30
    1cec:	11 24       	eor	r1, r1
    1cee:	08 95       	ret

00001cf0 <__prologue_saves__>:
    1cf0:	2f 92       	push	r2
    1cf2:	3f 92       	push	r3
    1cf4:	4f 92       	push	r4
    1cf6:	5f 92       	push	r5
    1cf8:	6f 92       	push	r6
    1cfa:	7f 92       	push	r7
    1cfc:	8f 92       	push	r8
    1cfe:	9f 92       	push	r9
    1d00:	af 92       	push	r10
    1d02:	bf 92       	push	r11
    1d04:	cf 92       	push	r12
    1d06:	df 92       	push	r13
    1d08:	ef 92       	push	r14
    1d0a:	ff 92       	push	r15
    1d0c:	0f 93       	push	r16
    1d0e:	1f 93       	push	r17
    1d10:	cf 93       	push	r28
    1d12:	df 93       	push	r29
    1d14:	cd b7       	in	r28, 0x3d	; 61
    1d16:	de b7       	in	r29, 0x3e	; 62
    1d18:	ca 1b       	sub	r28, r26
    1d1a:	db 0b       	sbc	r29, r27
    1d1c:	0f b6       	in	r0, 0x3f	; 63
    1d1e:	f8 94       	cli
    1d20:	de bf       	out	0x3e, r29	; 62
    1d22:	0f be       	out	0x3f, r0	; 63
    1d24:	cd bf       	out	0x3d, r28	; 61
    1d26:	09 94       	ijmp

00001d28 <__epilogue_restores__>:
    1d28:	2a 88       	ldd	r2, Y+18	; 0x12
    1d2a:	39 88       	ldd	r3, Y+17	; 0x11
    1d2c:	48 88       	ldd	r4, Y+16	; 0x10
    1d2e:	5f 84       	ldd	r5, Y+15	; 0x0f
    1d30:	6e 84       	ldd	r6, Y+14	; 0x0e
    1d32:	7d 84       	ldd	r7, Y+13	; 0x0d
    1d34:	8c 84       	ldd	r8, Y+12	; 0x0c
    1d36:	9b 84       	ldd	r9, Y+11	; 0x0b
    1d38:	aa 84       	ldd	r10, Y+10	; 0x0a
    1d3a:	b9 84       	ldd	r11, Y+9	; 0x09
    1d3c:	c8 84       	ldd	r12, Y+8	; 0x08
    1d3e:	df 80       	ldd	r13, Y+7	; 0x07
    1d40:	ee 80       	ldd	r14, Y+6	; 0x06
    1d42:	fd 80       	ldd	r15, Y+5	; 0x05
    1d44:	0c 81       	ldd	r16, Y+4	; 0x04
    1d46:	1b 81       	ldd	r17, Y+3	; 0x03
    1d48:	aa 81       	ldd	r26, Y+2	; 0x02
    1d4a:	b9 81       	ldd	r27, Y+1	; 0x01
    1d4c:	ce 0f       	add	r28, r30
    1d4e:	d1 1d       	adc	r29, r1
    1d50:	0f b6       	in	r0, 0x3f	; 63
    1d52:	f8 94       	cli
    1d54:	de bf       	out	0x3e, r29	; 62
    1d56:	0f be       	out	0x3f, r0	; 63
    1d58:	cd bf       	out	0x3d, r28	; 61
    1d5a:	ed 01       	movw	r28, r26
    1d5c:	08 95       	ret

00001d5e <snprintf>:
    1d5e:	ae e0       	ldi	r26, 0x0E	; 14
    1d60:	b0 e0       	ldi	r27, 0x00	; 0
    1d62:	e5 eb       	ldi	r30, 0xB5	; 181
    1d64:	fe e0       	ldi	r31, 0x0E	; 14
    1d66:	0c 94 86 0e 	jmp	0x1d0c	; 0x1d0c <__prologue_saves__+0x1c>
    1d6a:	0d 89       	ldd	r16, Y+21	; 0x15
    1d6c:	1e 89       	ldd	r17, Y+22	; 0x16
    1d6e:	8f 89       	ldd	r24, Y+23	; 0x17
    1d70:	98 8d       	ldd	r25, Y+24	; 0x18
    1d72:	97 ff       	sbrs	r25, 7
    1d74:	02 c0       	rjmp	.+4      	; 0x1d7a <snprintf+0x1c>
    1d76:	80 e0       	ldi	r24, 0x00	; 0
    1d78:	90 e8       	ldi	r25, 0x80	; 128
    1d7a:	01 97       	sbiw	r24, 0x01	; 1
    1d7c:	9e 83       	std	Y+6, r25	; 0x06
    1d7e:	8d 83       	std	Y+5, r24	; 0x05
    1d80:	1a 83       	std	Y+2, r17	; 0x02
    1d82:	09 83       	std	Y+1, r16	; 0x01
    1d84:	86 e0       	ldi	r24, 0x06	; 6
    1d86:	8c 83       	std	Y+4, r24	; 0x04
    1d88:	9e 01       	movw	r18, r28
    1d8a:	25 5e       	subi	r18, 0xE5	; 229
    1d8c:	3f 4f       	sbci	r19, 0xFF	; 255
    1d8e:	ce 01       	movw	r24, r28
    1d90:	01 96       	adiw	r24, 0x01	; 1
    1d92:	69 8d       	ldd	r22, Y+25	; 0x19
    1d94:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1d96:	a9 01       	movw	r20, r18
    1d98:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <vfprintf>
    1d9c:	4d 81       	ldd	r20, Y+5	; 0x05
    1d9e:	5e 81       	ldd	r21, Y+6	; 0x06
    1da0:	57 fd       	sbrc	r21, 7
    1da2:	0a c0       	rjmp	.+20     	; 0x1db8 <snprintf+0x5a>
    1da4:	2f 81       	ldd	r18, Y+7	; 0x07
    1da6:	38 85       	ldd	r19, Y+8	; 0x08
    1da8:	42 17       	cp	r20, r18
    1daa:	53 07       	cpc	r21, r19
    1dac:	0c f4       	brge	.+2      	; 0x1db0 <snprintf+0x52>
    1dae:	9a 01       	movw	r18, r20
    1db0:	02 0f       	add	r16, r18
    1db2:	13 1f       	adc	r17, r19
    1db4:	f8 01       	movw	r30, r16
    1db6:	10 82       	st	Z, r1
    1db8:	2e 96       	adiw	r28, 0x0e	; 14
    1dba:	e4 e0       	ldi	r30, 0x04	; 4
    1dbc:	0c 94 a2 0e 	jmp	0x1d44	; 0x1d44 <__epilogue_restores__+0x1c>

00001dc0 <sprintf>:
    1dc0:	ae e0       	ldi	r26, 0x0E	; 14
    1dc2:	b0 e0       	ldi	r27, 0x00	; 0
    1dc4:	e6 ee       	ldi	r30, 0xE6	; 230
    1dc6:	fe e0       	ldi	r31, 0x0E	; 14
    1dc8:	0c 94 86 0e 	jmp	0x1d0c	; 0x1d0c <__prologue_saves__+0x1c>
    1dcc:	0d 89       	ldd	r16, Y+21	; 0x15
    1dce:	1e 89       	ldd	r17, Y+22	; 0x16
    1dd0:	86 e0       	ldi	r24, 0x06	; 6
    1dd2:	8c 83       	std	Y+4, r24	; 0x04
    1dd4:	1a 83       	std	Y+2, r17	; 0x02
    1dd6:	09 83       	std	Y+1, r16	; 0x01
    1dd8:	8f ef       	ldi	r24, 0xFF	; 255
    1dda:	9f e7       	ldi	r25, 0x7F	; 127
    1ddc:	9e 83       	std	Y+6, r25	; 0x06
    1dde:	8d 83       	std	Y+5, r24	; 0x05
    1de0:	9e 01       	movw	r18, r28
    1de2:	27 5e       	subi	r18, 0xE7	; 231
    1de4:	3f 4f       	sbci	r19, 0xFF	; 255
    1de6:	ce 01       	movw	r24, r28
    1de8:	01 96       	adiw	r24, 0x01	; 1
    1dea:	6f 89       	ldd	r22, Y+23	; 0x17
    1dec:	78 8d       	ldd	r23, Y+24	; 0x18
    1dee:	a9 01       	movw	r20, r18
    1df0:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <vfprintf>
    1df4:	2f 81       	ldd	r18, Y+7	; 0x07
    1df6:	38 85       	ldd	r19, Y+8	; 0x08
    1df8:	02 0f       	add	r16, r18
    1dfa:	13 1f       	adc	r17, r19
    1dfc:	f8 01       	movw	r30, r16
    1dfe:	10 82       	st	Z, r1
    1e00:	2e 96       	adiw	r28, 0x0e	; 14
    1e02:	e4 e0       	ldi	r30, 0x04	; 4
    1e04:	0c 94 a2 0e 	jmp	0x1d44	; 0x1d44 <__epilogue_restores__+0x1c>

00001e08 <vfprintf>:
    1e08:	ab e0       	ldi	r26, 0x0B	; 11
    1e0a:	b0 e0       	ldi	r27, 0x00	; 0
    1e0c:	ea e0       	ldi	r30, 0x0A	; 10
    1e0e:	ff e0       	ldi	r31, 0x0F	; 15
    1e10:	0c 94 78 0e 	jmp	0x1cf0	; 0x1cf0 <__prologue_saves__>
    1e14:	3c 01       	movw	r6, r24
    1e16:	2b 01       	movw	r4, r22
    1e18:	5a 01       	movw	r10, r20
    1e1a:	fc 01       	movw	r30, r24
    1e1c:	17 82       	std	Z+7, r1	; 0x07
    1e1e:	16 82       	std	Z+6, r1	; 0x06
    1e20:	83 81       	ldd	r24, Z+3	; 0x03
    1e22:	81 fd       	sbrc	r24, 1
    1e24:	03 c0       	rjmp	.+6      	; 0x1e2c <vfprintf+0x24>
    1e26:	6f ef       	ldi	r22, 0xFF	; 255
    1e28:	7f ef       	ldi	r23, 0xFF	; 255
    1e2a:	c6 c1       	rjmp	.+908    	; 0x21b8 <vfprintf+0x3b0>
    1e2c:	9a e0       	ldi	r25, 0x0A	; 10
    1e2e:	89 2e       	mov	r8, r25
    1e30:	1e 01       	movw	r2, r28
    1e32:	08 94       	sec
    1e34:	21 1c       	adc	r2, r1
    1e36:	31 1c       	adc	r3, r1
    1e38:	f3 01       	movw	r30, r6
    1e3a:	23 81       	ldd	r18, Z+3	; 0x03
    1e3c:	f2 01       	movw	r30, r4
    1e3e:	23 fd       	sbrc	r18, 3
    1e40:	85 91       	lpm	r24, Z+
    1e42:	23 ff       	sbrs	r18, 3
    1e44:	81 91       	ld	r24, Z+
    1e46:	2f 01       	movw	r4, r30
    1e48:	88 23       	and	r24, r24
    1e4a:	09 f4       	brne	.+2      	; 0x1e4e <vfprintf+0x46>
    1e4c:	b2 c1       	rjmp	.+868    	; 0x21b2 <vfprintf+0x3aa>
    1e4e:	85 32       	cpi	r24, 0x25	; 37
    1e50:	39 f4       	brne	.+14     	; 0x1e60 <vfprintf+0x58>
    1e52:	23 fd       	sbrc	r18, 3
    1e54:	85 91       	lpm	r24, Z+
    1e56:	23 ff       	sbrs	r18, 3
    1e58:	81 91       	ld	r24, Z+
    1e5a:	2f 01       	movw	r4, r30
    1e5c:	85 32       	cpi	r24, 0x25	; 37
    1e5e:	29 f4       	brne	.+10     	; 0x1e6a <vfprintf+0x62>
    1e60:	90 e0       	ldi	r25, 0x00	; 0
    1e62:	b3 01       	movw	r22, r6
    1e64:	0e 94 f7 10 	call	0x21ee	; 0x21ee <fputc>
    1e68:	e7 cf       	rjmp	.-50     	; 0x1e38 <vfprintf+0x30>
    1e6a:	98 2f       	mov	r25, r24
    1e6c:	ff 24       	eor	r15, r15
    1e6e:	ee 24       	eor	r14, r14
    1e70:	99 24       	eor	r9, r9
    1e72:	ff e1       	ldi	r31, 0x1F	; 31
    1e74:	ff 15       	cp	r31, r15
    1e76:	d0 f0       	brcs	.+52     	; 0x1eac <vfprintf+0xa4>
    1e78:	9b 32       	cpi	r25, 0x2B	; 43
    1e7a:	69 f0       	breq	.+26     	; 0x1e96 <vfprintf+0x8e>
    1e7c:	9c 32       	cpi	r25, 0x2C	; 44
    1e7e:	28 f4       	brcc	.+10     	; 0x1e8a <vfprintf+0x82>
    1e80:	90 32       	cpi	r25, 0x20	; 32
    1e82:	59 f0       	breq	.+22     	; 0x1e9a <vfprintf+0x92>
    1e84:	93 32       	cpi	r25, 0x23	; 35
    1e86:	91 f4       	brne	.+36     	; 0x1eac <vfprintf+0xa4>
    1e88:	0e c0       	rjmp	.+28     	; 0x1ea6 <vfprintf+0x9e>
    1e8a:	9d 32       	cpi	r25, 0x2D	; 45
    1e8c:	49 f0       	breq	.+18     	; 0x1ea0 <vfprintf+0x98>
    1e8e:	90 33       	cpi	r25, 0x30	; 48
    1e90:	69 f4       	brne	.+26     	; 0x1eac <vfprintf+0xa4>
    1e92:	41 e0       	ldi	r20, 0x01	; 1
    1e94:	24 c0       	rjmp	.+72     	; 0x1ede <vfprintf+0xd6>
    1e96:	52 e0       	ldi	r21, 0x02	; 2
    1e98:	f5 2a       	or	r15, r21
    1e9a:	84 e0       	ldi	r24, 0x04	; 4
    1e9c:	f8 2a       	or	r15, r24
    1e9e:	28 c0       	rjmp	.+80     	; 0x1ef0 <vfprintf+0xe8>
    1ea0:	98 e0       	ldi	r25, 0x08	; 8
    1ea2:	f9 2a       	or	r15, r25
    1ea4:	25 c0       	rjmp	.+74     	; 0x1ef0 <vfprintf+0xe8>
    1ea6:	e0 e1       	ldi	r30, 0x10	; 16
    1ea8:	fe 2a       	or	r15, r30
    1eaa:	22 c0       	rjmp	.+68     	; 0x1ef0 <vfprintf+0xe8>
    1eac:	f7 fc       	sbrc	r15, 7
    1eae:	29 c0       	rjmp	.+82     	; 0x1f02 <vfprintf+0xfa>
    1eb0:	89 2f       	mov	r24, r25
    1eb2:	80 53       	subi	r24, 0x30	; 48
    1eb4:	8a 30       	cpi	r24, 0x0A	; 10
    1eb6:	70 f4       	brcc	.+28     	; 0x1ed4 <vfprintf+0xcc>
    1eb8:	f6 fe       	sbrs	r15, 6
    1eba:	05 c0       	rjmp	.+10     	; 0x1ec6 <vfprintf+0xbe>
    1ebc:	98 9c       	mul	r9, r8
    1ebe:	90 2c       	mov	r9, r0
    1ec0:	11 24       	eor	r1, r1
    1ec2:	98 0e       	add	r9, r24
    1ec4:	15 c0       	rjmp	.+42     	; 0x1ef0 <vfprintf+0xe8>
    1ec6:	e8 9c       	mul	r14, r8
    1ec8:	e0 2c       	mov	r14, r0
    1eca:	11 24       	eor	r1, r1
    1ecc:	e8 0e       	add	r14, r24
    1ece:	f0 e2       	ldi	r31, 0x20	; 32
    1ed0:	ff 2a       	or	r15, r31
    1ed2:	0e c0       	rjmp	.+28     	; 0x1ef0 <vfprintf+0xe8>
    1ed4:	9e 32       	cpi	r25, 0x2E	; 46
    1ed6:	29 f4       	brne	.+10     	; 0x1ee2 <vfprintf+0xda>
    1ed8:	f6 fc       	sbrc	r15, 6
    1eda:	6b c1       	rjmp	.+726    	; 0x21b2 <vfprintf+0x3aa>
    1edc:	40 e4       	ldi	r20, 0x40	; 64
    1ede:	f4 2a       	or	r15, r20
    1ee0:	07 c0       	rjmp	.+14     	; 0x1ef0 <vfprintf+0xe8>
    1ee2:	9c 36       	cpi	r25, 0x6C	; 108
    1ee4:	19 f4       	brne	.+6      	; 0x1eec <vfprintf+0xe4>
    1ee6:	50 e8       	ldi	r21, 0x80	; 128
    1ee8:	f5 2a       	or	r15, r21
    1eea:	02 c0       	rjmp	.+4      	; 0x1ef0 <vfprintf+0xe8>
    1eec:	98 36       	cpi	r25, 0x68	; 104
    1eee:	49 f4       	brne	.+18     	; 0x1f02 <vfprintf+0xfa>
    1ef0:	f2 01       	movw	r30, r4
    1ef2:	23 fd       	sbrc	r18, 3
    1ef4:	95 91       	lpm	r25, Z+
    1ef6:	23 ff       	sbrs	r18, 3
    1ef8:	91 91       	ld	r25, Z+
    1efa:	2f 01       	movw	r4, r30
    1efc:	99 23       	and	r25, r25
    1efe:	09 f0       	breq	.+2      	; 0x1f02 <vfprintf+0xfa>
    1f00:	b8 cf       	rjmp	.-144    	; 0x1e72 <vfprintf+0x6a>
    1f02:	89 2f       	mov	r24, r25
    1f04:	85 54       	subi	r24, 0x45	; 69
    1f06:	83 30       	cpi	r24, 0x03	; 3
    1f08:	18 f0       	brcs	.+6      	; 0x1f10 <vfprintf+0x108>
    1f0a:	80 52       	subi	r24, 0x20	; 32
    1f0c:	83 30       	cpi	r24, 0x03	; 3
    1f0e:	38 f4       	brcc	.+14     	; 0x1f1e <vfprintf+0x116>
    1f10:	44 e0       	ldi	r20, 0x04	; 4
    1f12:	50 e0       	ldi	r21, 0x00	; 0
    1f14:	a4 0e       	add	r10, r20
    1f16:	b5 1e       	adc	r11, r21
    1f18:	5f e3       	ldi	r21, 0x3F	; 63
    1f1a:	59 83       	std	Y+1, r21	; 0x01
    1f1c:	0f c0       	rjmp	.+30     	; 0x1f3c <vfprintf+0x134>
    1f1e:	93 36       	cpi	r25, 0x63	; 99
    1f20:	31 f0       	breq	.+12     	; 0x1f2e <vfprintf+0x126>
    1f22:	93 37       	cpi	r25, 0x73	; 115
    1f24:	79 f0       	breq	.+30     	; 0x1f44 <vfprintf+0x13c>
    1f26:	93 35       	cpi	r25, 0x53	; 83
    1f28:	09 f0       	breq	.+2      	; 0x1f2c <vfprintf+0x124>
    1f2a:	56 c0       	rjmp	.+172    	; 0x1fd8 <vfprintf+0x1d0>
    1f2c:	20 c0       	rjmp	.+64     	; 0x1f6e <vfprintf+0x166>
    1f2e:	f5 01       	movw	r30, r10
    1f30:	80 81       	ld	r24, Z
    1f32:	89 83       	std	Y+1, r24	; 0x01
    1f34:	42 e0       	ldi	r20, 0x02	; 2
    1f36:	50 e0       	ldi	r21, 0x00	; 0
    1f38:	a4 0e       	add	r10, r20
    1f3a:	b5 1e       	adc	r11, r21
    1f3c:	61 01       	movw	r12, r2
    1f3e:	01 e0       	ldi	r16, 0x01	; 1
    1f40:	10 e0       	ldi	r17, 0x00	; 0
    1f42:	12 c0       	rjmp	.+36     	; 0x1f68 <vfprintf+0x160>
    1f44:	f5 01       	movw	r30, r10
    1f46:	c0 80       	ld	r12, Z
    1f48:	d1 80       	ldd	r13, Z+1	; 0x01
    1f4a:	f6 fc       	sbrc	r15, 6
    1f4c:	03 c0       	rjmp	.+6      	; 0x1f54 <vfprintf+0x14c>
    1f4e:	6f ef       	ldi	r22, 0xFF	; 255
    1f50:	7f ef       	ldi	r23, 0xFF	; 255
    1f52:	02 c0       	rjmp	.+4      	; 0x1f58 <vfprintf+0x150>
    1f54:	69 2d       	mov	r22, r9
    1f56:	70 e0       	ldi	r23, 0x00	; 0
    1f58:	42 e0       	ldi	r20, 0x02	; 2
    1f5a:	50 e0       	ldi	r21, 0x00	; 0
    1f5c:	a4 0e       	add	r10, r20
    1f5e:	b5 1e       	adc	r11, r21
    1f60:	c6 01       	movw	r24, r12
    1f62:	0e 94 ec 10 	call	0x21d8	; 0x21d8 <strnlen>
    1f66:	8c 01       	movw	r16, r24
    1f68:	5f e7       	ldi	r21, 0x7F	; 127
    1f6a:	f5 22       	and	r15, r21
    1f6c:	14 c0       	rjmp	.+40     	; 0x1f96 <vfprintf+0x18e>
    1f6e:	f5 01       	movw	r30, r10
    1f70:	c0 80       	ld	r12, Z
    1f72:	d1 80       	ldd	r13, Z+1	; 0x01
    1f74:	f6 fc       	sbrc	r15, 6
    1f76:	03 c0       	rjmp	.+6      	; 0x1f7e <vfprintf+0x176>
    1f78:	6f ef       	ldi	r22, 0xFF	; 255
    1f7a:	7f ef       	ldi	r23, 0xFF	; 255
    1f7c:	02 c0       	rjmp	.+4      	; 0x1f82 <vfprintf+0x17a>
    1f7e:	69 2d       	mov	r22, r9
    1f80:	70 e0       	ldi	r23, 0x00	; 0
    1f82:	42 e0       	ldi	r20, 0x02	; 2
    1f84:	50 e0       	ldi	r21, 0x00	; 0
    1f86:	a4 0e       	add	r10, r20
    1f88:	b5 1e       	adc	r11, r21
    1f8a:	c6 01       	movw	r24, r12
    1f8c:	0e 94 e1 10 	call	0x21c2	; 0x21c2 <strnlen_P>
    1f90:	8c 01       	movw	r16, r24
    1f92:	50 e8       	ldi	r21, 0x80	; 128
    1f94:	f5 2a       	or	r15, r21
    1f96:	f3 fe       	sbrs	r15, 3
    1f98:	07 c0       	rjmp	.+14     	; 0x1fa8 <vfprintf+0x1a0>
    1f9a:	1a c0       	rjmp	.+52     	; 0x1fd0 <vfprintf+0x1c8>
    1f9c:	80 e2       	ldi	r24, 0x20	; 32
    1f9e:	90 e0       	ldi	r25, 0x00	; 0
    1fa0:	b3 01       	movw	r22, r6
    1fa2:	0e 94 f7 10 	call	0x21ee	; 0x21ee <fputc>
    1fa6:	ea 94       	dec	r14
    1fa8:	8e 2d       	mov	r24, r14
    1faa:	90 e0       	ldi	r25, 0x00	; 0
    1fac:	08 17       	cp	r16, r24
    1fae:	19 07       	cpc	r17, r25
    1fb0:	a8 f3       	brcs	.-22     	; 0x1f9c <vfprintf+0x194>
    1fb2:	0e c0       	rjmp	.+28     	; 0x1fd0 <vfprintf+0x1c8>
    1fb4:	f6 01       	movw	r30, r12
    1fb6:	f7 fc       	sbrc	r15, 7
    1fb8:	85 91       	lpm	r24, Z+
    1fba:	f7 fe       	sbrs	r15, 7
    1fbc:	81 91       	ld	r24, Z+
    1fbe:	6f 01       	movw	r12, r30
    1fc0:	90 e0       	ldi	r25, 0x00	; 0
    1fc2:	b3 01       	movw	r22, r6
    1fc4:	0e 94 f7 10 	call	0x21ee	; 0x21ee <fputc>
    1fc8:	e1 10       	cpse	r14, r1
    1fca:	ea 94       	dec	r14
    1fcc:	01 50       	subi	r16, 0x01	; 1
    1fce:	10 40       	sbci	r17, 0x00	; 0
    1fd0:	01 15       	cp	r16, r1
    1fd2:	11 05       	cpc	r17, r1
    1fd4:	79 f7       	brne	.-34     	; 0x1fb4 <vfprintf+0x1ac>
    1fd6:	ea c0       	rjmp	.+468    	; 0x21ac <vfprintf+0x3a4>
    1fd8:	94 36       	cpi	r25, 0x64	; 100
    1fda:	11 f0       	breq	.+4      	; 0x1fe0 <vfprintf+0x1d8>
    1fdc:	99 36       	cpi	r25, 0x69	; 105
    1fde:	69 f5       	brne	.+90     	; 0x203a <vfprintf+0x232>
    1fe0:	f7 fe       	sbrs	r15, 7
    1fe2:	08 c0       	rjmp	.+16     	; 0x1ff4 <vfprintf+0x1ec>
    1fe4:	f5 01       	movw	r30, r10
    1fe6:	20 81       	ld	r18, Z
    1fe8:	31 81       	ldd	r19, Z+1	; 0x01
    1fea:	42 81       	ldd	r20, Z+2	; 0x02
    1fec:	53 81       	ldd	r21, Z+3	; 0x03
    1fee:	84 e0       	ldi	r24, 0x04	; 4
    1ff0:	90 e0       	ldi	r25, 0x00	; 0
    1ff2:	0a c0       	rjmp	.+20     	; 0x2008 <vfprintf+0x200>
    1ff4:	f5 01       	movw	r30, r10
    1ff6:	80 81       	ld	r24, Z
    1ff8:	91 81       	ldd	r25, Z+1	; 0x01
    1ffa:	9c 01       	movw	r18, r24
    1ffc:	44 27       	eor	r20, r20
    1ffe:	37 fd       	sbrc	r19, 7
    2000:	40 95       	com	r20
    2002:	54 2f       	mov	r21, r20
    2004:	82 e0       	ldi	r24, 0x02	; 2
    2006:	90 e0       	ldi	r25, 0x00	; 0
    2008:	a8 0e       	add	r10, r24
    200a:	b9 1e       	adc	r11, r25
    200c:	9f e6       	ldi	r25, 0x6F	; 111
    200e:	f9 22       	and	r15, r25
    2010:	57 ff       	sbrs	r21, 7
    2012:	09 c0       	rjmp	.+18     	; 0x2026 <vfprintf+0x21e>
    2014:	50 95       	com	r21
    2016:	40 95       	com	r20
    2018:	30 95       	com	r19
    201a:	21 95       	neg	r18
    201c:	3f 4f       	sbci	r19, 0xFF	; 255
    201e:	4f 4f       	sbci	r20, 0xFF	; 255
    2020:	5f 4f       	sbci	r21, 0xFF	; 255
    2022:	e0 e8       	ldi	r30, 0x80	; 128
    2024:	fe 2a       	or	r15, r30
    2026:	ca 01       	movw	r24, r20
    2028:	b9 01       	movw	r22, r18
    202a:	a1 01       	movw	r20, r2
    202c:	2a e0       	ldi	r18, 0x0A	; 10
    202e:	30 e0       	ldi	r19, 0x00	; 0
    2030:	0e 94 23 11 	call	0x2246	; 0x2246 <__ultoa_invert>
    2034:	d8 2e       	mov	r13, r24
    2036:	d2 18       	sub	r13, r2
    2038:	40 c0       	rjmp	.+128    	; 0x20ba <vfprintf+0x2b2>
    203a:	95 37       	cpi	r25, 0x75	; 117
    203c:	29 f4       	brne	.+10     	; 0x2048 <vfprintf+0x240>
    203e:	1f 2d       	mov	r17, r15
    2040:	1f 7e       	andi	r17, 0xEF	; 239
    2042:	2a e0       	ldi	r18, 0x0A	; 10
    2044:	30 e0       	ldi	r19, 0x00	; 0
    2046:	1d c0       	rjmp	.+58     	; 0x2082 <vfprintf+0x27a>
    2048:	1f 2d       	mov	r17, r15
    204a:	19 7f       	andi	r17, 0xF9	; 249
    204c:	9f 36       	cpi	r25, 0x6F	; 111
    204e:	61 f0       	breq	.+24     	; 0x2068 <vfprintf+0x260>
    2050:	90 37       	cpi	r25, 0x70	; 112
    2052:	20 f4       	brcc	.+8      	; 0x205c <vfprintf+0x254>
    2054:	98 35       	cpi	r25, 0x58	; 88
    2056:	09 f0       	breq	.+2      	; 0x205a <vfprintf+0x252>
    2058:	ac c0       	rjmp	.+344    	; 0x21b2 <vfprintf+0x3aa>
    205a:	0f c0       	rjmp	.+30     	; 0x207a <vfprintf+0x272>
    205c:	90 37       	cpi	r25, 0x70	; 112
    205e:	39 f0       	breq	.+14     	; 0x206e <vfprintf+0x266>
    2060:	98 37       	cpi	r25, 0x78	; 120
    2062:	09 f0       	breq	.+2      	; 0x2066 <vfprintf+0x25e>
    2064:	a6 c0       	rjmp	.+332    	; 0x21b2 <vfprintf+0x3aa>
    2066:	04 c0       	rjmp	.+8      	; 0x2070 <vfprintf+0x268>
    2068:	28 e0       	ldi	r18, 0x08	; 8
    206a:	30 e0       	ldi	r19, 0x00	; 0
    206c:	0a c0       	rjmp	.+20     	; 0x2082 <vfprintf+0x27a>
    206e:	10 61       	ori	r17, 0x10	; 16
    2070:	14 fd       	sbrc	r17, 4
    2072:	14 60       	ori	r17, 0x04	; 4
    2074:	20 e1       	ldi	r18, 0x10	; 16
    2076:	30 e0       	ldi	r19, 0x00	; 0
    2078:	04 c0       	rjmp	.+8      	; 0x2082 <vfprintf+0x27a>
    207a:	14 fd       	sbrc	r17, 4
    207c:	16 60       	ori	r17, 0x06	; 6
    207e:	20 e1       	ldi	r18, 0x10	; 16
    2080:	32 e0       	ldi	r19, 0x02	; 2
    2082:	17 ff       	sbrs	r17, 7
    2084:	08 c0       	rjmp	.+16     	; 0x2096 <vfprintf+0x28e>
    2086:	f5 01       	movw	r30, r10
    2088:	60 81       	ld	r22, Z
    208a:	71 81       	ldd	r23, Z+1	; 0x01
    208c:	82 81       	ldd	r24, Z+2	; 0x02
    208e:	93 81       	ldd	r25, Z+3	; 0x03
    2090:	44 e0       	ldi	r20, 0x04	; 4
    2092:	50 e0       	ldi	r21, 0x00	; 0
    2094:	08 c0       	rjmp	.+16     	; 0x20a6 <vfprintf+0x29e>
    2096:	f5 01       	movw	r30, r10
    2098:	80 81       	ld	r24, Z
    209a:	91 81       	ldd	r25, Z+1	; 0x01
    209c:	bc 01       	movw	r22, r24
    209e:	80 e0       	ldi	r24, 0x00	; 0
    20a0:	90 e0       	ldi	r25, 0x00	; 0
    20a2:	42 e0       	ldi	r20, 0x02	; 2
    20a4:	50 e0       	ldi	r21, 0x00	; 0
    20a6:	a4 0e       	add	r10, r20
    20a8:	b5 1e       	adc	r11, r21
    20aa:	a1 01       	movw	r20, r2
    20ac:	0e 94 23 11 	call	0x2246	; 0x2246 <__ultoa_invert>
    20b0:	d8 2e       	mov	r13, r24
    20b2:	d2 18       	sub	r13, r2
    20b4:	8f e7       	ldi	r24, 0x7F	; 127
    20b6:	f8 2e       	mov	r15, r24
    20b8:	f1 22       	and	r15, r17
    20ba:	f6 fe       	sbrs	r15, 6
    20bc:	0b c0       	rjmp	.+22     	; 0x20d4 <vfprintf+0x2cc>
    20be:	5e ef       	ldi	r21, 0xFE	; 254
    20c0:	f5 22       	and	r15, r21
    20c2:	d9 14       	cp	r13, r9
    20c4:	38 f4       	brcc	.+14     	; 0x20d4 <vfprintf+0x2cc>
    20c6:	f4 fe       	sbrs	r15, 4
    20c8:	07 c0       	rjmp	.+14     	; 0x20d8 <vfprintf+0x2d0>
    20ca:	f2 fc       	sbrc	r15, 2
    20cc:	05 c0       	rjmp	.+10     	; 0x20d8 <vfprintf+0x2d0>
    20ce:	8f ee       	ldi	r24, 0xEF	; 239
    20d0:	f8 22       	and	r15, r24
    20d2:	02 c0       	rjmp	.+4      	; 0x20d8 <vfprintf+0x2d0>
    20d4:	1d 2d       	mov	r17, r13
    20d6:	01 c0       	rjmp	.+2      	; 0x20da <vfprintf+0x2d2>
    20d8:	19 2d       	mov	r17, r9
    20da:	f4 fe       	sbrs	r15, 4
    20dc:	0d c0       	rjmp	.+26     	; 0x20f8 <vfprintf+0x2f0>
    20de:	fe 01       	movw	r30, r28
    20e0:	ed 0d       	add	r30, r13
    20e2:	f1 1d       	adc	r31, r1
    20e4:	80 81       	ld	r24, Z
    20e6:	80 33       	cpi	r24, 0x30	; 48
    20e8:	19 f4       	brne	.+6      	; 0x20f0 <vfprintf+0x2e8>
    20ea:	99 ee       	ldi	r25, 0xE9	; 233
    20ec:	f9 22       	and	r15, r25
    20ee:	08 c0       	rjmp	.+16     	; 0x2100 <vfprintf+0x2f8>
    20f0:	1f 5f       	subi	r17, 0xFF	; 255
    20f2:	f2 fe       	sbrs	r15, 2
    20f4:	05 c0       	rjmp	.+10     	; 0x2100 <vfprintf+0x2f8>
    20f6:	03 c0       	rjmp	.+6      	; 0x20fe <vfprintf+0x2f6>
    20f8:	8f 2d       	mov	r24, r15
    20fa:	86 78       	andi	r24, 0x86	; 134
    20fc:	09 f0       	breq	.+2      	; 0x2100 <vfprintf+0x2f8>
    20fe:	1f 5f       	subi	r17, 0xFF	; 255
    2100:	0f 2d       	mov	r16, r15
    2102:	f3 fc       	sbrc	r15, 3
    2104:	14 c0       	rjmp	.+40     	; 0x212e <vfprintf+0x326>
    2106:	f0 fe       	sbrs	r15, 0
    2108:	0f c0       	rjmp	.+30     	; 0x2128 <vfprintf+0x320>
    210a:	1e 15       	cp	r17, r14
    210c:	10 f0       	brcs	.+4      	; 0x2112 <vfprintf+0x30a>
    210e:	9d 2c       	mov	r9, r13
    2110:	0b c0       	rjmp	.+22     	; 0x2128 <vfprintf+0x320>
    2112:	9d 2c       	mov	r9, r13
    2114:	9e 0c       	add	r9, r14
    2116:	91 1a       	sub	r9, r17
    2118:	1e 2d       	mov	r17, r14
    211a:	06 c0       	rjmp	.+12     	; 0x2128 <vfprintf+0x320>
    211c:	80 e2       	ldi	r24, 0x20	; 32
    211e:	90 e0       	ldi	r25, 0x00	; 0
    2120:	b3 01       	movw	r22, r6
    2122:	0e 94 f7 10 	call	0x21ee	; 0x21ee <fputc>
    2126:	1f 5f       	subi	r17, 0xFF	; 255
    2128:	1e 15       	cp	r17, r14
    212a:	c0 f3       	brcs	.-16     	; 0x211c <vfprintf+0x314>
    212c:	04 c0       	rjmp	.+8      	; 0x2136 <vfprintf+0x32e>
    212e:	1e 15       	cp	r17, r14
    2130:	10 f4       	brcc	.+4      	; 0x2136 <vfprintf+0x32e>
    2132:	e1 1a       	sub	r14, r17
    2134:	01 c0       	rjmp	.+2      	; 0x2138 <vfprintf+0x330>
    2136:	ee 24       	eor	r14, r14
    2138:	04 ff       	sbrs	r16, 4
    213a:	0f c0       	rjmp	.+30     	; 0x215a <vfprintf+0x352>
    213c:	80 e3       	ldi	r24, 0x30	; 48
    213e:	90 e0       	ldi	r25, 0x00	; 0
    2140:	b3 01       	movw	r22, r6
    2142:	0e 94 f7 10 	call	0x21ee	; 0x21ee <fputc>
    2146:	02 ff       	sbrs	r16, 2
    2148:	1d c0       	rjmp	.+58     	; 0x2184 <vfprintf+0x37c>
    214a:	01 fd       	sbrc	r16, 1
    214c:	03 c0       	rjmp	.+6      	; 0x2154 <vfprintf+0x34c>
    214e:	88 e7       	ldi	r24, 0x78	; 120
    2150:	90 e0       	ldi	r25, 0x00	; 0
    2152:	0e c0       	rjmp	.+28     	; 0x2170 <vfprintf+0x368>
    2154:	88 e5       	ldi	r24, 0x58	; 88
    2156:	90 e0       	ldi	r25, 0x00	; 0
    2158:	0b c0       	rjmp	.+22     	; 0x2170 <vfprintf+0x368>
    215a:	80 2f       	mov	r24, r16
    215c:	86 78       	andi	r24, 0x86	; 134
    215e:	91 f0       	breq	.+36     	; 0x2184 <vfprintf+0x37c>
    2160:	01 ff       	sbrs	r16, 1
    2162:	02 c0       	rjmp	.+4      	; 0x2168 <vfprintf+0x360>
    2164:	8b e2       	ldi	r24, 0x2B	; 43
    2166:	01 c0       	rjmp	.+2      	; 0x216a <vfprintf+0x362>
    2168:	80 e2       	ldi	r24, 0x20	; 32
    216a:	f7 fc       	sbrc	r15, 7
    216c:	8d e2       	ldi	r24, 0x2D	; 45
    216e:	90 e0       	ldi	r25, 0x00	; 0
    2170:	b3 01       	movw	r22, r6
    2172:	0e 94 f7 10 	call	0x21ee	; 0x21ee <fputc>
    2176:	06 c0       	rjmp	.+12     	; 0x2184 <vfprintf+0x37c>
    2178:	80 e3       	ldi	r24, 0x30	; 48
    217a:	90 e0       	ldi	r25, 0x00	; 0
    217c:	b3 01       	movw	r22, r6
    217e:	0e 94 f7 10 	call	0x21ee	; 0x21ee <fputc>
    2182:	9a 94       	dec	r9
    2184:	d9 14       	cp	r13, r9
    2186:	c0 f3       	brcs	.-16     	; 0x2178 <vfprintf+0x370>
    2188:	da 94       	dec	r13
    218a:	f1 01       	movw	r30, r2
    218c:	ed 0d       	add	r30, r13
    218e:	f1 1d       	adc	r31, r1
    2190:	80 81       	ld	r24, Z
    2192:	90 e0       	ldi	r25, 0x00	; 0
    2194:	b3 01       	movw	r22, r6
    2196:	0e 94 f7 10 	call	0x21ee	; 0x21ee <fputc>
    219a:	dd 20       	and	r13, r13
    219c:	a9 f7       	brne	.-22     	; 0x2188 <vfprintf+0x380>
    219e:	06 c0       	rjmp	.+12     	; 0x21ac <vfprintf+0x3a4>
    21a0:	80 e2       	ldi	r24, 0x20	; 32
    21a2:	90 e0       	ldi	r25, 0x00	; 0
    21a4:	b3 01       	movw	r22, r6
    21a6:	0e 94 f7 10 	call	0x21ee	; 0x21ee <fputc>
    21aa:	ea 94       	dec	r14
    21ac:	ee 20       	and	r14, r14
    21ae:	c1 f7       	brne	.-16     	; 0x21a0 <vfprintf+0x398>
    21b0:	43 ce       	rjmp	.-890    	; 0x1e38 <vfprintf+0x30>
    21b2:	f3 01       	movw	r30, r6
    21b4:	66 81       	ldd	r22, Z+6	; 0x06
    21b6:	77 81       	ldd	r23, Z+7	; 0x07
    21b8:	cb 01       	movw	r24, r22
    21ba:	2b 96       	adiw	r28, 0x0b	; 11
    21bc:	e2 e1       	ldi	r30, 0x12	; 18
    21be:	0c 94 94 0e 	jmp	0x1d28	; 0x1d28 <__epilogue_restores__>

000021c2 <strnlen_P>:
    21c2:	fc 01       	movw	r30, r24
    21c4:	05 90       	lpm	r0, Z+
    21c6:	61 50       	subi	r22, 0x01	; 1
    21c8:	70 40       	sbci	r23, 0x00	; 0
    21ca:	01 10       	cpse	r0, r1
    21cc:	d8 f7       	brcc	.-10     	; 0x21c4 <strnlen_P+0x2>
    21ce:	80 95       	com	r24
    21d0:	90 95       	com	r25
    21d2:	8e 0f       	add	r24, r30
    21d4:	9f 1f       	adc	r25, r31
    21d6:	08 95       	ret

000021d8 <strnlen>:
    21d8:	fc 01       	movw	r30, r24
    21da:	61 50       	subi	r22, 0x01	; 1
    21dc:	70 40       	sbci	r23, 0x00	; 0
    21de:	01 90       	ld	r0, Z+
    21e0:	01 10       	cpse	r0, r1
    21e2:	d8 f7       	brcc	.-10     	; 0x21da <strnlen+0x2>
    21e4:	80 95       	com	r24
    21e6:	90 95       	com	r25
    21e8:	8e 0f       	add	r24, r30
    21ea:	9f 1f       	adc	r25, r31
    21ec:	08 95       	ret

000021ee <fputc>:
    21ee:	0f 93       	push	r16
    21f0:	1f 93       	push	r17
    21f2:	cf 93       	push	r28
    21f4:	df 93       	push	r29
    21f6:	8c 01       	movw	r16, r24
    21f8:	eb 01       	movw	r28, r22
    21fa:	8b 81       	ldd	r24, Y+3	; 0x03
    21fc:	81 ff       	sbrs	r24, 1
    21fe:	1b c0       	rjmp	.+54     	; 0x2236 <fputc+0x48>
    2200:	82 ff       	sbrs	r24, 2
    2202:	0d c0       	rjmp	.+26     	; 0x221e <fputc+0x30>
    2204:	2e 81       	ldd	r18, Y+6	; 0x06
    2206:	3f 81       	ldd	r19, Y+7	; 0x07
    2208:	8c 81       	ldd	r24, Y+4	; 0x04
    220a:	9d 81       	ldd	r25, Y+5	; 0x05
    220c:	28 17       	cp	r18, r24
    220e:	39 07       	cpc	r19, r25
    2210:	64 f4       	brge	.+24     	; 0x222a <fputc+0x3c>
    2212:	e8 81       	ld	r30, Y
    2214:	f9 81       	ldd	r31, Y+1	; 0x01
    2216:	01 93       	st	Z+, r16
    2218:	f9 83       	std	Y+1, r31	; 0x01
    221a:	e8 83       	st	Y, r30
    221c:	06 c0       	rjmp	.+12     	; 0x222a <fputc+0x3c>
    221e:	e8 85       	ldd	r30, Y+8	; 0x08
    2220:	f9 85       	ldd	r31, Y+9	; 0x09
    2222:	80 2f       	mov	r24, r16
    2224:	09 95       	icall
    2226:	89 2b       	or	r24, r25
    2228:	31 f4       	brne	.+12     	; 0x2236 <fputc+0x48>
    222a:	8e 81       	ldd	r24, Y+6	; 0x06
    222c:	9f 81       	ldd	r25, Y+7	; 0x07
    222e:	01 96       	adiw	r24, 0x01	; 1
    2230:	9f 83       	std	Y+7, r25	; 0x07
    2232:	8e 83       	std	Y+6, r24	; 0x06
    2234:	02 c0       	rjmp	.+4      	; 0x223a <fputc+0x4c>
    2236:	0f ef       	ldi	r16, 0xFF	; 255
    2238:	1f ef       	ldi	r17, 0xFF	; 255
    223a:	c8 01       	movw	r24, r16
    223c:	df 91       	pop	r29
    223e:	cf 91       	pop	r28
    2240:	1f 91       	pop	r17
    2242:	0f 91       	pop	r16
    2244:	08 95       	ret

00002246 <__ultoa_invert>:
    2246:	fa 01       	movw	r30, r20
    2248:	aa 27       	eor	r26, r26
    224a:	28 30       	cpi	r18, 0x08	; 8
    224c:	51 f1       	breq	.+84     	; 0x22a2 <__ultoa_invert+0x5c>
    224e:	20 31       	cpi	r18, 0x10	; 16
    2250:	81 f1       	breq	.+96     	; 0x22b2 <__ultoa_invert+0x6c>
    2252:	e8 94       	clt
    2254:	6f 93       	push	r22
    2256:	6e 7f       	andi	r22, 0xFE	; 254
    2258:	6e 5f       	subi	r22, 0xFE	; 254
    225a:	7f 4f       	sbci	r23, 0xFF	; 255
    225c:	8f 4f       	sbci	r24, 0xFF	; 255
    225e:	9f 4f       	sbci	r25, 0xFF	; 255
    2260:	af 4f       	sbci	r26, 0xFF	; 255
    2262:	b1 e0       	ldi	r27, 0x01	; 1
    2264:	3e d0       	rcall	.+124    	; 0x22e2 <__ultoa_invert+0x9c>
    2266:	b4 e0       	ldi	r27, 0x04	; 4
    2268:	3c d0       	rcall	.+120    	; 0x22e2 <__ultoa_invert+0x9c>
    226a:	67 0f       	add	r22, r23
    226c:	78 1f       	adc	r23, r24
    226e:	89 1f       	adc	r24, r25
    2270:	9a 1f       	adc	r25, r26
    2272:	a1 1d       	adc	r26, r1
    2274:	68 0f       	add	r22, r24
    2276:	79 1f       	adc	r23, r25
    2278:	8a 1f       	adc	r24, r26
    227a:	91 1d       	adc	r25, r1
    227c:	a1 1d       	adc	r26, r1
    227e:	6a 0f       	add	r22, r26
    2280:	71 1d       	adc	r23, r1
    2282:	81 1d       	adc	r24, r1
    2284:	91 1d       	adc	r25, r1
    2286:	a1 1d       	adc	r26, r1
    2288:	20 d0       	rcall	.+64     	; 0x22ca <__ultoa_invert+0x84>
    228a:	09 f4       	brne	.+2      	; 0x228e <__ultoa_invert+0x48>
    228c:	68 94       	set
    228e:	3f 91       	pop	r19
    2290:	2a e0       	ldi	r18, 0x0A	; 10
    2292:	26 9f       	mul	r18, r22
    2294:	11 24       	eor	r1, r1
    2296:	30 19       	sub	r19, r0
    2298:	30 5d       	subi	r19, 0xD0	; 208
    229a:	31 93       	st	Z+, r19
    229c:	de f6       	brtc	.-74     	; 0x2254 <__ultoa_invert+0xe>
    229e:	cf 01       	movw	r24, r30
    22a0:	08 95       	ret
    22a2:	46 2f       	mov	r20, r22
    22a4:	47 70       	andi	r20, 0x07	; 7
    22a6:	40 5d       	subi	r20, 0xD0	; 208
    22a8:	41 93       	st	Z+, r20
    22aa:	b3 e0       	ldi	r27, 0x03	; 3
    22ac:	0f d0       	rcall	.+30     	; 0x22cc <__ultoa_invert+0x86>
    22ae:	c9 f7       	brne	.-14     	; 0x22a2 <__ultoa_invert+0x5c>
    22b0:	f6 cf       	rjmp	.-20     	; 0x229e <__ultoa_invert+0x58>
    22b2:	46 2f       	mov	r20, r22
    22b4:	4f 70       	andi	r20, 0x0F	; 15
    22b6:	40 5d       	subi	r20, 0xD0	; 208
    22b8:	4a 33       	cpi	r20, 0x3A	; 58
    22ba:	18 f0       	brcs	.+6      	; 0x22c2 <__ultoa_invert+0x7c>
    22bc:	49 5d       	subi	r20, 0xD9	; 217
    22be:	31 fd       	sbrc	r19, 1
    22c0:	40 52       	subi	r20, 0x20	; 32
    22c2:	41 93       	st	Z+, r20
    22c4:	02 d0       	rcall	.+4      	; 0x22ca <__ultoa_invert+0x84>
    22c6:	a9 f7       	brne	.-22     	; 0x22b2 <__ultoa_invert+0x6c>
    22c8:	ea cf       	rjmp	.-44     	; 0x229e <__ultoa_invert+0x58>
    22ca:	b4 e0       	ldi	r27, 0x04	; 4
    22cc:	a6 95       	lsr	r26
    22ce:	97 95       	ror	r25
    22d0:	87 95       	ror	r24
    22d2:	77 95       	ror	r23
    22d4:	67 95       	ror	r22
    22d6:	ba 95       	dec	r27
    22d8:	c9 f7       	brne	.-14     	; 0x22cc <__ultoa_invert+0x86>
    22da:	00 97       	sbiw	r24, 0x00	; 0
    22dc:	61 05       	cpc	r22, r1
    22de:	71 05       	cpc	r23, r1
    22e0:	08 95       	ret
    22e2:	9b 01       	movw	r18, r22
    22e4:	ac 01       	movw	r20, r24
    22e6:	0a 2e       	mov	r0, r26
    22e8:	06 94       	lsr	r0
    22ea:	57 95       	ror	r21
    22ec:	47 95       	ror	r20
    22ee:	37 95       	ror	r19
    22f0:	27 95       	ror	r18
    22f2:	ba 95       	dec	r27
    22f4:	c9 f7       	brne	.-14     	; 0x22e8 <__ultoa_invert+0xa2>
    22f6:	62 0f       	add	r22, r18
    22f8:	73 1f       	adc	r23, r19
    22fa:	84 1f       	adc	r24, r20
    22fc:	95 1f       	adc	r25, r21
    22fe:	a0 1d       	adc	r26, r0
    2300:	08 95       	ret

00002302 <_exit>:
    2302:	f8 94       	cli

00002304 <__stop_program>:
    2304:	ff cf       	rjmp	.-2      	; 0x2304 <__stop_program>
