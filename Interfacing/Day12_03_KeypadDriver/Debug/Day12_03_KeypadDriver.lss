
Day12_03_KeypadDriver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002350  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000018  00800060  00002350  000023c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000018b4  00000000  00000000  000023dc  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000f3b  00000000  00000000  00003c90  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000140  00000000  00000000  00004bcb  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000170  00000000  00000000  00004d0b  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c49  00000000  00000000  00004e7b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000eeb  00000000  00000000  00006ac4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000dad  00000000  00000000  000079af  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000160  00000000  00000000  0000875c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000028d  00000000  00000000  000088bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007ce  00000000  00000000  00008b49  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  00009317  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 e5       	ldi	r30, 0x50	; 80
      68:	f3 e2       	ldi	r31, 0x23	; 35
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 37       	cpi	r26, 0x78	; 120
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 5e 0e 	call	0x1cbc	; 0x1cbc <main>
      7a:	0c 94 a6 11 	jmp	0x234c	; 0x234c <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 41 03 	call	0x682	; 0x682 <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 ce 0e 	jmp	0x1d9c	; 0x1d9c <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a0 e6       	ldi	r26, 0x60	; 96
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 ea 0e 	jmp	0x1dd4	; 0x1dd4 <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 da 0e 	jmp	0x1db4	; 0x1db4 <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 f6 0e 	jmp	0x1dec	; 0x1dec <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 da 0e 	jmp	0x1db4	; 0x1db4 <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 f6 0e 	jmp	0x1dec	; 0x1dec <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 ce 0e 	jmp	0x1d9c	; 0x1d9c <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	80 e6       	ldi	r24, 0x60	; 96
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 ea 0e 	jmp	0x1dd4	; 0x1dd4 <__epilogue_restores__>

00000622 <__gtsf2>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 da 0e 	jmp	0x1db4	; 0x1db4 <__prologue_saves__+0x18>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	89 e0       	ldi	r24, 0x09	; 9
     640:	e8 2e       	mov	r14, r24
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     662:	89 85       	ldd	r24, Y+9	; 0x09
     664:	82 30       	cpi	r24, 0x02	; 2
     666:	40 f0       	brcs	.+16     	; 0x678 <__gtsf2+0x56>
     668:	89 89       	ldd	r24, Y+17	; 0x11
     66a:	82 30       	cpi	r24, 0x02	; 2
     66c:	28 f0       	brcs	.+10     	; 0x678 <__gtsf2+0x56>
     66e:	c7 01       	movw	r24, r14
     670:	b8 01       	movw	r22, r16
     672:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     676:	01 c0       	rjmp	.+2      	; 0x67a <__gtsf2+0x58>
     678:	8f ef       	ldi	r24, 0xFF	; 255
     67a:	68 96       	adiw	r28, 0x18	; 24
     67c:	e6 e0       	ldi	r30, 0x06	; 6
     67e:	0c 94 f6 0e 	jmp	0x1dec	; 0x1dec <__epilogue_restores__+0x18>

00000682 <__gesf2>:
     682:	a8 e1       	ldi	r26, 0x18	; 24
     684:	b0 e0       	ldi	r27, 0x00	; 0
     686:	e7 e4       	ldi	r30, 0x47	; 71
     688:	f3 e0       	ldi	r31, 0x03	; 3
     68a:	0c 94 da 0e 	jmp	0x1db4	; 0x1db4 <__prologue_saves__+0x18>
     68e:	69 83       	std	Y+1, r22	; 0x01
     690:	7a 83       	std	Y+2, r23	; 0x02
     692:	8b 83       	std	Y+3, r24	; 0x03
     694:	9c 83       	std	Y+4, r25	; 0x04
     696:	2d 83       	std	Y+5, r18	; 0x05
     698:	3e 83       	std	Y+6, r19	; 0x06
     69a:	4f 83       	std	Y+7, r20	; 0x07
     69c:	58 87       	std	Y+8, r21	; 0x08
     69e:	89 e0       	ldi	r24, 0x09	; 9
     6a0:	e8 2e       	mov	r14, r24
     6a2:	f1 2c       	mov	r15, r1
     6a4:	ec 0e       	add	r14, r28
     6a6:	fd 1e       	adc	r15, r29
     6a8:	ce 01       	movw	r24, r28
     6aa:	01 96       	adiw	r24, 0x01	; 1
     6ac:	b7 01       	movw	r22, r14
     6ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6b2:	8e 01       	movw	r16, r28
     6b4:	0f 5e       	subi	r16, 0xEF	; 239
     6b6:	1f 4f       	sbci	r17, 0xFF	; 255
     6b8:	ce 01       	movw	r24, r28
     6ba:	05 96       	adiw	r24, 0x05	; 5
     6bc:	b8 01       	movw	r22, r16
     6be:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6c2:	89 85       	ldd	r24, Y+9	; 0x09
     6c4:	82 30       	cpi	r24, 0x02	; 2
     6c6:	40 f0       	brcs	.+16     	; 0x6d8 <__gesf2+0x56>
     6c8:	89 89       	ldd	r24, Y+17	; 0x11
     6ca:	82 30       	cpi	r24, 0x02	; 2
     6cc:	28 f0       	brcs	.+10     	; 0x6d8 <__gesf2+0x56>
     6ce:	c7 01       	movw	r24, r14
     6d0:	b8 01       	movw	r22, r16
     6d2:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     6d6:	01 c0       	rjmp	.+2      	; 0x6da <__gesf2+0x58>
     6d8:	8f ef       	ldi	r24, 0xFF	; 255
     6da:	68 96       	adiw	r28, 0x18	; 24
     6dc:	e6 e0       	ldi	r30, 0x06	; 6
     6de:	0c 94 f6 0e 	jmp	0x1dec	; 0x1dec <__epilogue_restores__+0x18>

000006e2 <__ltsf2>:
     6e2:	a8 e1       	ldi	r26, 0x18	; 24
     6e4:	b0 e0       	ldi	r27, 0x00	; 0
     6e6:	e7 e7       	ldi	r30, 0x77	; 119
     6e8:	f3 e0       	ldi	r31, 0x03	; 3
     6ea:	0c 94 da 0e 	jmp	0x1db4	; 0x1db4 <__prologue_saves__+0x18>
     6ee:	69 83       	std	Y+1, r22	; 0x01
     6f0:	7a 83       	std	Y+2, r23	; 0x02
     6f2:	8b 83       	std	Y+3, r24	; 0x03
     6f4:	9c 83       	std	Y+4, r25	; 0x04
     6f6:	2d 83       	std	Y+5, r18	; 0x05
     6f8:	3e 83       	std	Y+6, r19	; 0x06
     6fa:	4f 83       	std	Y+7, r20	; 0x07
     6fc:	58 87       	std	Y+8, r21	; 0x08
     6fe:	89 e0       	ldi	r24, 0x09	; 9
     700:	e8 2e       	mov	r14, r24
     702:	f1 2c       	mov	r15, r1
     704:	ec 0e       	add	r14, r28
     706:	fd 1e       	adc	r15, r29
     708:	ce 01       	movw	r24, r28
     70a:	01 96       	adiw	r24, 0x01	; 1
     70c:	b7 01       	movw	r22, r14
     70e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     712:	8e 01       	movw	r16, r28
     714:	0f 5e       	subi	r16, 0xEF	; 239
     716:	1f 4f       	sbci	r17, 0xFF	; 255
     718:	ce 01       	movw	r24, r28
     71a:	05 96       	adiw	r24, 0x05	; 5
     71c:	b8 01       	movw	r22, r16
     71e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     722:	89 85       	ldd	r24, Y+9	; 0x09
     724:	82 30       	cpi	r24, 0x02	; 2
     726:	40 f0       	brcs	.+16     	; 0x738 <__ltsf2+0x56>
     728:	89 89       	ldd	r24, Y+17	; 0x11
     72a:	82 30       	cpi	r24, 0x02	; 2
     72c:	28 f0       	brcs	.+10     	; 0x738 <__ltsf2+0x56>
     72e:	c7 01       	movw	r24, r14
     730:	b8 01       	movw	r22, r16
     732:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     736:	01 c0       	rjmp	.+2      	; 0x73a <__ltsf2+0x58>
     738:	81 e0       	ldi	r24, 0x01	; 1
     73a:	68 96       	adiw	r28, 0x18	; 24
     73c:	e6 e0       	ldi	r30, 0x06	; 6
     73e:	0c 94 f6 0e 	jmp	0x1dec	; 0x1dec <__epilogue_restores__+0x18>

00000742 <__fixsfsi>:
     742:	ac e0       	ldi	r26, 0x0C	; 12
     744:	b0 e0       	ldi	r27, 0x00	; 0
     746:	e7 ea       	ldi	r30, 0xA7	; 167
     748:	f3 e0       	ldi	r31, 0x03	; 3
     74a:	0c 94 de 0e 	jmp	0x1dbc	; 0x1dbc <__prologue_saves__+0x20>
     74e:	69 83       	std	Y+1, r22	; 0x01
     750:	7a 83       	std	Y+2, r23	; 0x02
     752:	8b 83       	std	Y+3, r24	; 0x03
     754:	9c 83       	std	Y+4, r25	; 0x04
     756:	ce 01       	movw	r24, r28
     758:	01 96       	adiw	r24, 0x01	; 1
     75a:	be 01       	movw	r22, r28
     75c:	6b 5f       	subi	r22, 0xFB	; 251
     75e:	7f 4f       	sbci	r23, 0xFF	; 255
     760:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     764:	8d 81       	ldd	r24, Y+5	; 0x05
     766:	82 30       	cpi	r24, 0x02	; 2
     768:	61 f1       	breq	.+88     	; 0x7c2 <__fixsfsi+0x80>
     76a:	82 30       	cpi	r24, 0x02	; 2
     76c:	50 f1       	brcs	.+84     	; 0x7c2 <__fixsfsi+0x80>
     76e:	84 30       	cpi	r24, 0x04	; 4
     770:	21 f4       	brne	.+8      	; 0x77a <__fixsfsi+0x38>
     772:	8e 81       	ldd	r24, Y+6	; 0x06
     774:	88 23       	and	r24, r24
     776:	51 f1       	breq	.+84     	; 0x7cc <__fixsfsi+0x8a>
     778:	2e c0       	rjmp	.+92     	; 0x7d6 <__fixsfsi+0x94>
     77a:	2f 81       	ldd	r18, Y+7	; 0x07
     77c:	38 85       	ldd	r19, Y+8	; 0x08
     77e:	37 fd       	sbrc	r19, 7
     780:	20 c0       	rjmp	.+64     	; 0x7c2 <__fixsfsi+0x80>
     782:	6e 81       	ldd	r22, Y+6	; 0x06
     784:	2f 31       	cpi	r18, 0x1F	; 31
     786:	31 05       	cpc	r19, r1
     788:	1c f0       	brlt	.+6      	; 0x790 <__fixsfsi+0x4e>
     78a:	66 23       	and	r22, r22
     78c:	f9 f0       	breq	.+62     	; 0x7cc <__fixsfsi+0x8a>
     78e:	23 c0       	rjmp	.+70     	; 0x7d6 <__fixsfsi+0x94>
     790:	8e e1       	ldi	r24, 0x1E	; 30
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	82 1b       	sub	r24, r18
     796:	93 0b       	sbc	r25, r19
     798:	29 85       	ldd	r18, Y+9	; 0x09
     79a:	3a 85       	ldd	r19, Y+10	; 0x0a
     79c:	4b 85       	ldd	r20, Y+11	; 0x0b
     79e:	5c 85       	ldd	r21, Y+12	; 0x0c
     7a0:	04 c0       	rjmp	.+8      	; 0x7aa <__fixsfsi+0x68>
     7a2:	56 95       	lsr	r21
     7a4:	47 95       	ror	r20
     7a6:	37 95       	ror	r19
     7a8:	27 95       	ror	r18
     7aa:	8a 95       	dec	r24
     7ac:	d2 f7       	brpl	.-12     	; 0x7a2 <__fixsfsi+0x60>
     7ae:	66 23       	and	r22, r22
     7b0:	b1 f0       	breq	.+44     	; 0x7de <__fixsfsi+0x9c>
     7b2:	50 95       	com	r21
     7b4:	40 95       	com	r20
     7b6:	30 95       	com	r19
     7b8:	21 95       	neg	r18
     7ba:	3f 4f       	sbci	r19, 0xFF	; 255
     7bc:	4f 4f       	sbci	r20, 0xFF	; 255
     7be:	5f 4f       	sbci	r21, 0xFF	; 255
     7c0:	0e c0       	rjmp	.+28     	; 0x7de <__fixsfsi+0x9c>
     7c2:	20 e0       	ldi	r18, 0x00	; 0
     7c4:	30 e0       	ldi	r19, 0x00	; 0
     7c6:	40 e0       	ldi	r20, 0x00	; 0
     7c8:	50 e0       	ldi	r21, 0x00	; 0
     7ca:	09 c0       	rjmp	.+18     	; 0x7de <__fixsfsi+0x9c>
     7cc:	2f ef       	ldi	r18, 0xFF	; 255
     7ce:	3f ef       	ldi	r19, 0xFF	; 255
     7d0:	4f ef       	ldi	r20, 0xFF	; 255
     7d2:	5f e7       	ldi	r21, 0x7F	; 127
     7d4:	04 c0       	rjmp	.+8      	; 0x7de <__fixsfsi+0x9c>
     7d6:	20 e0       	ldi	r18, 0x00	; 0
     7d8:	30 e0       	ldi	r19, 0x00	; 0
     7da:	40 e0       	ldi	r20, 0x00	; 0
     7dc:	50 e8       	ldi	r21, 0x80	; 128
     7de:	b9 01       	movw	r22, r18
     7e0:	ca 01       	movw	r24, r20
     7e2:	2c 96       	adiw	r28, 0x0c	; 12
     7e4:	e2 e0       	ldi	r30, 0x02	; 2
     7e6:	0c 94 fa 0e 	jmp	0x1df4	; 0x1df4 <__epilogue_restores__+0x20>

000007ea <__pack_f>:
     7ea:	df 92       	push	r13
     7ec:	ef 92       	push	r14
     7ee:	ff 92       	push	r15
     7f0:	0f 93       	push	r16
     7f2:	1f 93       	push	r17
     7f4:	fc 01       	movw	r30, r24
     7f6:	e4 80       	ldd	r14, Z+4	; 0x04
     7f8:	f5 80       	ldd	r15, Z+5	; 0x05
     7fa:	06 81       	ldd	r16, Z+6	; 0x06
     7fc:	17 81       	ldd	r17, Z+7	; 0x07
     7fe:	d1 80       	ldd	r13, Z+1	; 0x01
     800:	80 81       	ld	r24, Z
     802:	82 30       	cpi	r24, 0x02	; 2
     804:	48 f4       	brcc	.+18     	; 0x818 <__pack_f+0x2e>
     806:	80 e0       	ldi	r24, 0x00	; 0
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	a0 e1       	ldi	r26, 0x10	; 16
     80c:	b0 e0       	ldi	r27, 0x00	; 0
     80e:	e8 2a       	or	r14, r24
     810:	f9 2a       	or	r15, r25
     812:	0a 2b       	or	r16, r26
     814:	1b 2b       	or	r17, r27
     816:	a5 c0       	rjmp	.+330    	; 0x962 <__stack+0x103>
     818:	84 30       	cpi	r24, 0x04	; 4
     81a:	09 f4       	brne	.+2      	; 0x81e <__pack_f+0x34>
     81c:	9f c0       	rjmp	.+318    	; 0x95c <__stack+0xfd>
     81e:	82 30       	cpi	r24, 0x02	; 2
     820:	21 f4       	brne	.+8      	; 0x82a <__pack_f+0x40>
     822:	ee 24       	eor	r14, r14
     824:	ff 24       	eor	r15, r15
     826:	87 01       	movw	r16, r14
     828:	05 c0       	rjmp	.+10     	; 0x834 <__pack_f+0x4a>
     82a:	e1 14       	cp	r14, r1
     82c:	f1 04       	cpc	r15, r1
     82e:	01 05       	cpc	r16, r1
     830:	11 05       	cpc	r17, r1
     832:	19 f4       	brne	.+6      	; 0x83a <__pack_f+0x50>
     834:	e0 e0       	ldi	r30, 0x00	; 0
     836:	f0 e0       	ldi	r31, 0x00	; 0
     838:	96 c0       	rjmp	.+300    	; 0x966 <__stack+0x107>
     83a:	62 81       	ldd	r22, Z+2	; 0x02
     83c:	73 81       	ldd	r23, Z+3	; 0x03
     83e:	9f ef       	ldi	r25, 0xFF	; 255
     840:	62 38       	cpi	r22, 0x82	; 130
     842:	79 07       	cpc	r23, r25
     844:	0c f0       	brlt	.+2      	; 0x848 <__pack_f+0x5e>
     846:	5b c0       	rjmp	.+182    	; 0x8fe <__stack+0x9f>
     848:	22 e8       	ldi	r18, 0x82	; 130
     84a:	3f ef       	ldi	r19, 0xFF	; 255
     84c:	26 1b       	sub	r18, r22
     84e:	37 0b       	sbc	r19, r23
     850:	2a 31       	cpi	r18, 0x1A	; 26
     852:	31 05       	cpc	r19, r1
     854:	2c f0       	brlt	.+10     	; 0x860 <__stack+0x1>
     856:	20 e0       	ldi	r18, 0x00	; 0
     858:	30 e0       	ldi	r19, 0x00	; 0
     85a:	40 e0       	ldi	r20, 0x00	; 0
     85c:	50 e0       	ldi	r21, 0x00	; 0
     85e:	2a c0       	rjmp	.+84     	; 0x8b4 <__stack+0x55>
     860:	b8 01       	movw	r22, r16
     862:	a7 01       	movw	r20, r14
     864:	02 2e       	mov	r0, r18
     866:	04 c0       	rjmp	.+8      	; 0x870 <__stack+0x11>
     868:	76 95       	lsr	r23
     86a:	67 95       	ror	r22
     86c:	57 95       	ror	r21
     86e:	47 95       	ror	r20
     870:	0a 94       	dec	r0
     872:	d2 f7       	brpl	.-12     	; 0x868 <__stack+0x9>
     874:	81 e0       	ldi	r24, 0x01	; 1
     876:	90 e0       	ldi	r25, 0x00	; 0
     878:	a0 e0       	ldi	r26, 0x00	; 0
     87a:	b0 e0       	ldi	r27, 0x00	; 0
     87c:	04 c0       	rjmp	.+8      	; 0x886 <__stack+0x27>
     87e:	88 0f       	add	r24, r24
     880:	99 1f       	adc	r25, r25
     882:	aa 1f       	adc	r26, r26
     884:	bb 1f       	adc	r27, r27
     886:	2a 95       	dec	r18
     888:	d2 f7       	brpl	.-12     	; 0x87e <__stack+0x1f>
     88a:	01 97       	sbiw	r24, 0x01	; 1
     88c:	a1 09       	sbc	r26, r1
     88e:	b1 09       	sbc	r27, r1
     890:	8e 21       	and	r24, r14
     892:	9f 21       	and	r25, r15
     894:	a0 23       	and	r26, r16
     896:	b1 23       	and	r27, r17
     898:	00 97       	sbiw	r24, 0x00	; 0
     89a:	a1 05       	cpc	r26, r1
     89c:	b1 05       	cpc	r27, r1
     89e:	21 f0       	breq	.+8      	; 0x8a8 <__stack+0x49>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	90 e0       	ldi	r25, 0x00	; 0
     8a4:	a0 e0       	ldi	r26, 0x00	; 0
     8a6:	b0 e0       	ldi	r27, 0x00	; 0
     8a8:	9a 01       	movw	r18, r20
     8aa:	ab 01       	movw	r20, r22
     8ac:	28 2b       	or	r18, r24
     8ae:	39 2b       	or	r19, r25
     8b0:	4a 2b       	or	r20, r26
     8b2:	5b 2b       	or	r21, r27
     8b4:	da 01       	movw	r26, r20
     8b6:	c9 01       	movw	r24, r18
     8b8:	8f 77       	andi	r24, 0x7F	; 127
     8ba:	90 70       	andi	r25, 0x00	; 0
     8bc:	a0 70       	andi	r26, 0x00	; 0
     8be:	b0 70       	andi	r27, 0x00	; 0
     8c0:	80 34       	cpi	r24, 0x40	; 64
     8c2:	91 05       	cpc	r25, r1
     8c4:	a1 05       	cpc	r26, r1
     8c6:	b1 05       	cpc	r27, r1
     8c8:	39 f4       	brne	.+14     	; 0x8d8 <__stack+0x79>
     8ca:	27 ff       	sbrs	r18, 7
     8cc:	09 c0       	rjmp	.+18     	; 0x8e0 <__stack+0x81>
     8ce:	20 5c       	subi	r18, 0xC0	; 192
     8d0:	3f 4f       	sbci	r19, 0xFF	; 255
     8d2:	4f 4f       	sbci	r20, 0xFF	; 255
     8d4:	5f 4f       	sbci	r21, 0xFF	; 255
     8d6:	04 c0       	rjmp	.+8      	; 0x8e0 <__stack+0x81>
     8d8:	21 5c       	subi	r18, 0xC1	; 193
     8da:	3f 4f       	sbci	r19, 0xFF	; 255
     8dc:	4f 4f       	sbci	r20, 0xFF	; 255
     8de:	5f 4f       	sbci	r21, 0xFF	; 255
     8e0:	e0 e0       	ldi	r30, 0x00	; 0
     8e2:	f0 e0       	ldi	r31, 0x00	; 0
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	a0 e0       	ldi	r26, 0x00	; 0
     8e8:	3a 07       	cpc	r19, r26
     8ea:	a0 e0       	ldi	r26, 0x00	; 0
     8ec:	4a 07       	cpc	r20, r26
     8ee:	a0 e4       	ldi	r26, 0x40	; 64
     8f0:	5a 07       	cpc	r21, r26
     8f2:	10 f0       	brcs	.+4      	; 0x8f8 <__stack+0x99>
     8f4:	e1 e0       	ldi	r30, 0x01	; 1
     8f6:	f0 e0       	ldi	r31, 0x00	; 0
     8f8:	79 01       	movw	r14, r18
     8fa:	8a 01       	movw	r16, r20
     8fc:	27 c0       	rjmp	.+78     	; 0x94c <__stack+0xed>
     8fe:	60 38       	cpi	r22, 0x80	; 128
     900:	71 05       	cpc	r23, r1
     902:	64 f5       	brge	.+88     	; 0x95c <__stack+0xfd>
     904:	fb 01       	movw	r30, r22
     906:	e1 58       	subi	r30, 0x81	; 129
     908:	ff 4f       	sbci	r31, 0xFF	; 255
     90a:	d8 01       	movw	r26, r16
     90c:	c7 01       	movw	r24, r14
     90e:	8f 77       	andi	r24, 0x7F	; 127
     910:	90 70       	andi	r25, 0x00	; 0
     912:	a0 70       	andi	r26, 0x00	; 0
     914:	b0 70       	andi	r27, 0x00	; 0
     916:	80 34       	cpi	r24, 0x40	; 64
     918:	91 05       	cpc	r25, r1
     91a:	a1 05       	cpc	r26, r1
     91c:	b1 05       	cpc	r27, r1
     91e:	39 f4       	brne	.+14     	; 0x92e <__stack+0xcf>
     920:	e7 fe       	sbrs	r14, 7
     922:	0d c0       	rjmp	.+26     	; 0x93e <__stack+0xdf>
     924:	80 e4       	ldi	r24, 0x40	; 64
     926:	90 e0       	ldi	r25, 0x00	; 0
     928:	a0 e0       	ldi	r26, 0x00	; 0
     92a:	b0 e0       	ldi	r27, 0x00	; 0
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__stack+0xd7>
     92e:	8f e3       	ldi	r24, 0x3F	; 63
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	a0 e0       	ldi	r26, 0x00	; 0
     934:	b0 e0       	ldi	r27, 0x00	; 0
     936:	e8 0e       	add	r14, r24
     938:	f9 1e       	adc	r15, r25
     93a:	0a 1f       	adc	r16, r26
     93c:	1b 1f       	adc	r17, r27
     93e:	17 ff       	sbrs	r17, 7
     940:	05 c0       	rjmp	.+10     	; 0x94c <__stack+0xed>
     942:	16 95       	lsr	r17
     944:	07 95       	ror	r16
     946:	f7 94       	ror	r15
     948:	e7 94       	ror	r14
     94a:	31 96       	adiw	r30, 0x01	; 1
     94c:	87 e0       	ldi	r24, 0x07	; 7
     94e:	16 95       	lsr	r17
     950:	07 95       	ror	r16
     952:	f7 94       	ror	r15
     954:	e7 94       	ror	r14
     956:	8a 95       	dec	r24
     958:	d1 f7       	brne	.-12     	; 0x94e <__stack+0xef>
     95a:	05 c0       	rjmp	.+10     	; 0x966 <__stack+0x107>
     95c:	ee 24       	eor	r14, r14
     95e:	ff 24       	eor	r15, r15
     960:	87 01       	movw	r16, r14
     962:	ef ef       	ldi	r30, 0xFF	; 255
     964:	f0 e0       	ldi	r31, 0x00	; 0
     966:	6e 2f       	mov	r22, r30
     968:	67 95       	ror	r22
     96a:	66 27       	eor	r22, r22
     96c:	67 95       	ror	r22
     96e:	90 2f       	mov	r25, r16
     970:	9f 77       	andi	r25, 0x7F	; 127
     972:	d7 94       	ror	r13
     974:	dd 24       	eor	r13, r13
     976:	d7 94       	ror	r13
     978:	8e 2f       	mov	r24, r30
     97a:	86 95       	lsr	r24
     97c:	49 2f       	mov	r20, r25
     97e:	46 2b       	or	r20, r22
     980:	58 2f       	mov	r21, r24
     982:	5d 29       	or	r21, r13
     984:	b7 01       	movw	r22, r14
     986:	ca 01       	movw	r24, r20
     988:	1f 91       	pop	r17
     98a:	0f 91       	pop	r16
     98c:	ff 90       	pop	r15
     98e:	ef 90       	pop	r14
     990:	df 90       	pop	r13
     992:	08 95       	ret

00000994 <__unpack_f>:
     994:	fc 01       	movw	r30, r24
     996:	db 01       	movw	r26, r22
     998:	40 81       	ld	r20, Z
     99a:	51 81       	ldd	r21, Z+1	; 0x01
     99c:	22 81       	ldd	r18, Z+2	; 0x02
     99e:	62 2f       	mov	r22, r18
     9a0:	6f 77       	andi	r22, 0x7F	; 127
     9a2:	70 e0       	ldi	r23, 0x00	; 0
     9a4:	22 1f       	adc	r18, r18
     9a6:	22 27       	eor	r18, r18
     9a8:	22 1f       	adc	r18, r18
     9aa:	93 81       	ldd	r25, Z+3	; 0x03
     9ac:	89 2f       	mov	r24, r25
     9ae:	88 0f       	add	r24, r24
     9b0:	82 2b       	or	r24, r18
     9b2:	28 2f       	mov	r18, r24
     9b4:	30 e0       	ldi	r19, 0x00	; 0
     9b6:	99 1f       	adc	r25, r25
     9b8:	99 27       	eor	r25, r25
     9ba:	99 1f       	adc	r25, r25
     9bc:	11 96       	adiw	r26, 0x01	; 1
     9be:	9c 93       	st	X, r25
     9c0:	11 97       	sbiw	r26, 0x01	; 1
     9c2:	21 15       	cp	r18, r1
     9c4:	31 05       	cpc	r19, r1
     9c6:	a9 f5       	brne	.+106    	; 0xa32 <__unpack_f+0x9e>
     9c8:	41 15       	cp	r20, r1
     9ca:	51 05       	cpc	r21, r1
     9cc:	61 05       	cpc	r22, r1
     9ce:	71 05       	cpc	r23, r1
     9d0:	11 f4       	brne	.+4      	; 0x9d6 <__unpack_f+0x42>
     9d2:	82 e0       	ldi	r24, 0x02	; 2
     9d4:	37 c0       	rjmp	.+110    	; 0xa44 <__unpack_f+0xb0>
     9d6:	82 e8       	ldi	r24, 0x82	; 130
     9d8:	9f ef       	ldi	r25, 0xFF	; 255
     9da:	13 96       	adiw	r26, 0x03	; 3
     9dc:	9c 93       	st	X, r25
     9de:	8e 93       	st	-X, r24
     9e0:	12 97       	sbiw	r26, 0x02	; 2
     9e2:	9a 01       	movw	r18, r20
     9e4:	ab 01       	movw	r20, r22
     9e6:	67 e0       	ldi	r22, 0x07	; 7
     9e8:	22 0f       	add	r18, r18
     9ea:	33 1f       	adc	r19, r19
     9ec:	44 1f       	adc	r20, r20
     9ee:	55 1f       	adc	r21, r21
     9f0:	6a 95       	dec	r22
     9f2:	d1 f7       	brne	.-12     	; 0x9e8 <__unpack_f+0x54>
     9f4:	83 e0       	ldi	r24, 0x03	; 3
     9f6:	8c 93       	st	X, r24
     9f8:	0d c0       	rjmp	.+26     	; 0xa14 <__unpack_f+0x80>
     9fa:	22 0f       	add	r18, r18
     9fc:	33 1f       	adc	r19, r19
     9fe:	44 1f       	adc	r20, r20
     a00:	55 1f       	adc	r21, r21
     a02:	12 96       	adiw	r26, 0x02	; 2
     a04:	8d 91       	ld	r24, X+
     a06:	9c 91       	ld	r25, X
     a08:	13 97       	sbiw	r26, 0x03	; 3
     a0a:	01 97       	sbiw	r24, 0x01	; 1
     a0c:	13 96       	adiw	r26, 0x03	; 3
     a0e:	9c 93       	st	X, r25
     a10:	8e 93       	st	-X, r24
     a12:	12 97       	sbiw	r26, 0x02	; 2
     a14:	20 30       	cpi	r18, 0x00	; 0
     a16:	80 e0       	ldi	r24, 0x00	; 0
     a18:	38 07       	cpc	r19, r24
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	48 07       	cpc	r20, r24
     a1e:	80 e4       	ldi	r24, 0x40	; 64
     a20:	58 07       	cpc	r21, r24
     a22:	58 f3       	brcs	.-42     	; 0x9fa <__unpack_f+0x66>
     a24:	14 96       	adiw	r26, 0x04	; 4
     a26:	2d 93       	st	X+, r18
     a28:	3d 93       	st	X+, r19
     a2a:	4d 93       	st	X+, r20
     a2c:	5c 93       	st	X, r21
     a2e:	17 97       	sbiw	r26, 0x07	; 7
     a30:	08 95       	ret
     a32:	2f 3f       	cpi	r18, 0xFF	; 255
     a34:	31 05       	cpc	r19, r1
     a36:	79 f4       	brne	.+30     	; 0xa56 <__unpack_f+0xc2>
     a38:	41 15       	cp	r20, r1
     a3a:	51 05       	cpc	r21, r1
     a3c:	61 05       	cpc	r22, r1
     a3e:	71 05       	cpc	r23, r1
     a40:	19 f4       	brne	.+6      	; 0xa48 <__unpack_f+0xb4>
     a42:	84 e0       	ldi	r24, 0x04	; 4
     a44:	8c 93       	st	X, r24
     a46:	08 95       	ret
     a48:	64 ff       	sbrs	r22, 4
     a4a:	03 c0       	rjmp	.+6      	; 0xa52 <__unpack_f+0xbe>
     a4c:	81 e0       	ldi	r24, 0x01	; 1
     a4e:	8c 93       	st	X, r24
     a50:	12 c0       	rjmp	.+36     	; 0xa76 <__unpack_f+0xe2>
     a52:	1c 92       	st	X, r1
     a54:	10 c0       	rjmp	.+32     	; 0xa76 <__unpack_f+0xe2>
     a56:	2f 57       	subi	r18, 0x7F	; 127
     a58:	30 40       	sbci	r19, 0x00	; 0
     a5a:	13 96       	adiw	r26, 0x03	; 3
     a5c:	3c 93       	st	X, r19
     a5e:	2e 93       	st	-X, r18
     a60:	12 97       	sbiw	r26, 0x02	; 2
     a62:	83 e0       	ldi	r24, 0x03	; 3
     a64:	8c 93       	st	X, r24
     a66:	87 e0       	ldi	r24, 0x07	; 7
     a68:	44 0f       	add	r20, r20
     a6a:	55 1f       	adc	r21, r21
     a6c:	66 1f       	adc	r22, r22
     a6e:	77 1f       	adc	r23, r23
     a70:	8a 95       	dec	r24
     a72:	d1 f7       	brne	.-12     	; 0xa68 <__unpack_f+0xd4>
     a74:	70 64       	ori	r23, 0x40	; 64
     a76:	14 96       	adiw	r26, 0x04	; 4
     a78:	4d 93       	st	X+, r20
     a7a:	5d 93       	st	X+, r21
     a7c:	6d 93       	st	X+, r22
     a7e:	7c 93       	st	X, r23
     a80:	17 97       	sbiw	r26, 0x07	; 7
     a82:	08 95       	ret

00000a84 <__fpcmp_parts_f>:
     a84:	1f 93       	push	r17
     a86:	dc 01       	movw	r26, r24
     a88:	fb 01       	movw	r30, r22
     a8a:	9c 91       	ld	r25, X
     a8c:	92 30       	cpi	r25, 0x02	; 2
     a8e:	08 f4       	brcc	.+2      	; 0xa92 <__fpcmp_parts_f+0xe>
     a90:	47 c0       	rjmp	.+142    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a92:	80 81       	ld	r24, Z
     a94:	82 30       	cpi	r24, 0x02	; 2
     a96:	08 f4       	brcc	.+2      	; 0xa9a <__fpcmp_parts_f+0x16>
     a98:	43 c0       	rjmp	.+134    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a9a:	94 30       	cpi	r25, 0x04	; 4
     a9c:	51 f4       	brne	.+20     	; 0xab2 <__fpcmp_parts_f+0x2e>
     a9e:	11 96       	adiw	r26, 0x01	; 1
     aa0:	1c 91       	ld	r17, X
     aa2:	84 30       	cpi	r24, 0x04	; 4
     aa4:	99 f5       	brne	.+102    	; 0xb0c <__fpcmp_parts_f+0x88>
     aa6:	81 81       	ldd	r24, Z+1	; 0x01
     aa8:	68 2f       	mov	r22, r24
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	61 1b       	sub	r22, r17
     aae:	71 09       	sbc	r23, r1
     ab0:	3f c0       	rjmp	.+126    	; 0xb30 <__fpcmp_parts_f+0xac>
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	21 f0       	breq	.+8      	; 0xabe <__fpcmp_parts_f+0x3a>
     ab6:	92 30       	cpi	r25, 0x02	; 2
     ab8:	31 f4       	brne	.+12     	; 0xac6 <__fpcmp_parts_f+0x42>
     aba:	82 30       	cpi	r24, 0x02	; 2
     abc:	b9 f1       	breq	.+110    	; 0xb2c <__fpcmp_parts_f+0xa8>
     abe:	81 81       	ldd	r24, Z+1	; 0x01
     ac0:	88 23       	and	r24, r24
     ac2:	89 f1       	breq	.+98     	; 0xb26 <__fpcmp_parts_f+0xa2>
     ac4:	2d c0       	rjmp	.+90     	; 0xb20 <__fpcmp_parts_f+0x9c>
     ac6:	11 96       	adiw	r26, 0x01	; 1
     ac8:	1c 91       	ld	r17, X
     aca:	11 97       	sbiw	r26, 0x01	; 1
     acc:	82 30       	cpi	r24, 0x02	; 2
     ace:	f1 f0       	breq	.+60     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad0:	81 81       	ldd	r24, Z+1	; 0x01
     ad2:	18 17       	cp	r17, r24
     ad4:	d9 f4       	brne	.+54     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad6:	12 96       	adiw	r26, 0x02	; 2
     ad8:	2d 91       	ld	r18, X+
     ada:	3c 91       	ld	r19, X
     adc:	13 97       	sbiw	r26, 0x03	; 3
     ade:	82 81       	ldd	r24, Z+2	; 0x02
     ae0:	93 81       	ldd	r25, Z+3	; 0x03
     ae2:	82 17       	cp	r24, r18
     ae4:	93 07       	cpc	r25, r19
     ae6:	94 f0       	brlt	.+36     	; 0xb0c <__fpcmp_parts_f+0x88>
     ae8:	28 17       	cp	r18, r24
     aea:	39 07       	cpc	r19, r25
     aec:	bc f0       	brlt	.+46     	; 0xb1c <__fpcmp_parts_f+0x98>
     aee:	14 96       	adiw	r26, 0x04	; 4
     af0:	8d 91       	ld	r24, X+
     af2:	9d 91       	ld	r25, X+
     af4:	0d 90       	ld	r0, X+
     af6:	bc 91       	ld	r27, X
     af8:	a0 2d       	mov	r26, r0
     afa:	24 81       	ldd	r18, Z+4	; 0x04
     afc:	35 81       	ldd	r19, Z+5	; 0x05
     afe:	46 81       	ldd	r20, Z+6	; 0x06
     b00:	57 81       	ldd	r21, Z+7	; 0x07
     b02:	28 17       	cp	r18, r24
     b04:	39 07       	cpc	r19, r25
     b06:	4a 07       	cpc	r20, r26
     b08:	5b 07       	cpc	r21, r27
     b0a:	18 f4       	brcc	.+6      	; 0xb12 <__fpcmp_parts_f+0x8e>
     b0c:	11 23       	and	r17, r17
     b0e:	41 f0       	breq	.+16     	; 0xb20 <__fpcmp_parts_f+0x9c>
     b10:	0a c0       	rjmp	.+20     	; 0xb26 <__fpcmp_parts_f+0xa2>
     b12:	82 17       	cp	r24, r18
     b14:	93 07       	cpc	r25, r19
     b16:	a4 07       	cpc	r26, r20
     b18:	b5 07       	cpc	r27, r21
     b1a:	40 f4       	brcc	.+16     	; 0xb2c <__fpcmp_parts_f+0xa8>
     b1c:	11 23       	and	r17, r17
     b1e:	19 f0       	breq	.+6      	; 0xb26 <__fpcmp_parts_f+0xa2>
     b20:	61 e0       	ldi	r22, 0x01	; 1
     b22:	70 e0       	ldi	r23, 0x00	; 0
     b24:	05 c0       	rjmp	.+10     	; 0xb30 <__fpcmp_parts_f+0xac>
     b26:	6f ef       	ldi	r22, 0xFF	; 255
     b28:	7f ef       	ldi	r23, 0xFF	; 255
     b2a:	02 c0       	rjmp	.+4      	; 0xb30 <__fpcmp_parts_f+0xac>
     b2c:	60 e0       	ldi	r22, 0x00	; 0
     b2e:	70 e0       	ldi	r23, 0x00	; 0
     b30:	cb 01       	movw	r24, r22
     b32:	1f 91       	pop	r17
     b34:	08 95       	ret

00000b36 <DIO_VidSetPinValue>:
/*-------------------------------------------------------------------------------------------------------------------------*/
								/**************************set pin*****************************/
/*-------------------------------------------------------------------------------------------------------------------------*/


void DIO_VidSetPinValue(u8 Copy_u8Port, u8 Copy_u8PinNumber, u8 Copy_u8State ){
     b36:	df 93       	push	r29
     b38:	cf 93       	push	r28
     b3a:	cd b7       	in	r28, 0x3d	; 61
     b3c:	de b7       	in	r29, 0x3e	; 62
     b3e:	27 97       	sbiw	r28, 0x07	; 7
     b40:	0f b6       	in	r0, 0x3f	; 63
     b42:	f8 94       	cli
     b44:	de bf       	out	0x3e, r29	; 62
     b46:	0f be       	out	0x3f, r0	; 63
     b48:	cd bf       	out	0x3d, r28	; 61
     b4a:	89 83       	std	Y+1, r24	; 0x01
     b4c:	6a 83       	std	Y+2, r22	; 0x02
     b4e:	4b 83       	std	Y+3, r20	; 0x03

	/****************** set pin as input***********************/
	if(Copy_u8State == low){
     b50:	8b 81       	ldd	r24, Y+3	; 0x03
     b52:	88 23       	and	r24, r24
     b54:	09 f0       	breq	.+2      	; 0xb58 <DIO_VidSetPinValue+0x22>
     b56:	75 c0       	rjmp	.+234    	; 0xc42 <DIO_VidSetPinValue+0x10c>
		switch (Copy_u8Port) {
     b58:	89 81       	ldd	r24, Y+1	; 0x01
     b5a:	28 2f       	mov	r18, r24
     b5c:	30 e0       	ldi	r19, 0x00	; 0
     b5e:	3f 83       	std	Y+7, r19	; 0x07
     b60:	2e 83       	std	Y+6, r18	; 0x06
     b62:	8e 81       	ldd	r24, Y+6	; 0x06
     b64:	9f 81       	ldd	r25, Y+7	; 0x07
     b66:	83 30       	cpi	r24, 0x03	; 3
     b68:	91 05       	cpc	r25, r1
     b6a:	61 f1       	breq	.+88     	; 0xbc4 <DIO_VidSetPinValue+0x8e>
     b6c:	2e 81       	ldd	r18, Y+6	; 0x06
     b6e:	3f 81       	ldd	r19, Y+7	; 0x07
     b70:	24 30       	cpi	r18, 0x04	; 4
     b72:	31 05       	cpc	r19, r1
     b74:	34 f4       	brge	.+12     	; 0xb82 <DIO_VidSetPinValue+0x4c>
     b76:	8e 81       	ldd	r24, Y+6	; 0x06
     b78:	9f 81       	ldd	r25, Y+7	; 0x07
     b7a:	82 30       	cpi	r24, 0x02	; 2
     b7c:	91 05       	cpc	r25, r1
     b7e:	69 f0       	breq	.+26     	; 0xb9a <DIO_VidSetPinValue+0x64>
     b80:	d3 c0       	rjmp	.+422    	; 0xd28 <DIO_VidSetPinValue+0x1f2>
     b82:	2e 81       	ldd	r18, Y+6	; 0x06
     b84:	3f 81       	ldd	r19, Y+7	; 0x07
     b86:	24 30       	cpi	r18, 0x04	; 4
     b88:	31 05       	cpc	r19, r1
     b8a:	89 f1       	breq	.+98     	; 0xbee <DIO_VidSetPinValue+0xb8>
     b8c:	8e 81       	ldd	r24, Y+6	; 0x06
     b8e:	9f 81       	ldd	r25, Y+7	; 0x07
     b90:	85 30       	cpi	r24, 0x05	; 5
     b92:	91 05       	cpc	r25, r1
     b94:	09 f4       	brne	.+2      	; 0xb98 <DIO_VidSetPinValue+0x62>
     b96:	40 c0       	rjmp	.+128    	; 0xc18 <DIO_VidSetPinValue+0xe2>
     b98:	c7 c0       	rjmp	.+398    	; 0xd28 <DIO_VidSetPinValue+0x1f2>
			case (Port_A) : CLR_Bit(PORTA,Copy_u8PinNumber);break;
     b9a:	ab e3       	ldi	r26, 0x3B	; 59
     b9c:	b0 e0       	ldi	r27, 0x00	; 0
     b9e:	eb e3       	ldi	r30, 0x3B	; 59
     ba0:	f0 e0       	ldi	r31, 0x00	; 0
     ba2:	80 81       	ld	r24, Z
     ba4:	48 2f       	mov	r20, r24
     ba6:	8a 81       	ldd	r24, Y+2	; 0x02
     ba8:	28 2f       	mov	r18, r24
     baa:	30 e0       	ldi	r19, 0x00	; 0
     bac:	81 e0       	ldi	r24, 0x01	; 1
     bae:	90 e0       	ldi	r25, 0x00	; 0
     bb0:	02 2e       	mov	r0, r18
     bb2:	02 c0       	rjmp	.+4      	; 0xbb8 <DIO_VidSetPinValue+0x82>
     bb4:	88 0f       	add	r24, r24
     bb6:	99 1f       	adc	r25, r25
     bb8:	0a 94       	dec	r0
     bba:	e2 f7       	brpl	.-8      	; 0xbb4 <DIO_VidSetPinValue+0x7e>
     bbc:	80 95       	com	r24
     bbe:	84 23       	and	r24, r20
     bc0:	8c 93       	st	X, r24
     bc2:	b2 c0       	rjmp	.+356    	; 0xd28 <DIO_VidSetPinValue+0x1f2>
			case (Port_B) : CLR_Bit(PORTB,Copy_u8PinNumber);break;
     bc4:	a8 e3       	ldi	r26, 0x38	; 56
     bc6:	b0 e0       	ldi	r27, 0x00	; 0
     bc8:	e8 e3       	ldi	r30, 0x38	; 56
     bca:	f0 e0       	ldi	r31, 0x00	; 0
     bcc:	80 81       	ld	r24, Z
     bce:	48 2f       	mov	r20, r24
     bd0:	8a 81       	ldd	r24, Y+2	; 0x02
     bd2:	28 2f       	mov	r18, r24
     bd4:	30 e0       	ldi	r19, 0x00	; 0
     bd6:	81 e0       	ldi	r24, 0x01	; 1
     bd8:	90 e0       	ldi	r25, 0x00	; 0
     bda:	02 2e       	mov	r0, r18
     bdc:	02 c0       	rjmp	.+4      	; 0xbe2 <DIO_VidSetPinValue+0xac>
     bde:	88 0f       	add	r24, r24
     be0:	99 1f       	adc	r25, r25
     be2:	0a 94       	dec	r0
     be4:	e2 f7       	brpl	.-8      	; 0xbde <DIO_VidSetPinValue+0xa8>
     be6:	80 95       	com	r24
     be8:	84 23       	and	r24, r20
     bea:	8c 93       	st	X, r24
     bec:	9d c0       	rjmp	.+314    	; 0xd28 <DIO_VidSetPinValue+0x1f2>
			case (Port_C) : CLR_Bit(PORTC,Copy_u8PinNumber);break;
     bee:	a5 e3       	ldi	r26, 0x35	; 53
     bf0:	b0 e0       	ldi	r27, 0x00	; 0
     bf2:	e5 e3       	ldi	r30, 0x35	; 53
     bf4:	f0 e0       	ldi	r31, 0x00	; 0
     bf6:	80 81       	ld	r24, Z
     bf8:	48 2f       	mov	r20, r24
     bfa:	8a 81       	ldd	r24, Y+2	; 0x02
     bfc:	28 2f       	mov	r18, r24
     bfe:	30 e0       	ldi	r19, 0x00	; 0
     c00:	81 e0       	ldi	r24, 0x01	; 1
     c02:	90 e0       	ldi	r25, 0x00	; 0
     c04:	02 2e       	mov	r0, r18
     c06:	02 c0       	rjmp	.+4      	; 0xc0c <DIO_VidSetPinValue+0xd6>
     c08:	88 0f       	add	r24, r24
     c0a:	99 1f       	adc	r25, r25
     c0c:	0a 94       	dec	r0
     c0e:	e2 f7       	brpl	.-8      	; 0xc08 <DIO_VidSetPinValue+0xd2>
     c10:	80 95       	com	r24
     c12:	84 23       	and	r24, r20
     c14:	8c 93       	st	X, r24
     c16:	88 c0       	rjmp	.+272    	; 0xd28 <DIO_VidSetPinValue+0x1f2>
			case (Port_D) : CLR_Bit(PORTD,Copy_u8PinNumber);break;
     c18:	a2 e3       	ldi	r26, 0x32	; 50
     c1a:	b0 e0       	ldi	r27, 0x00	; 0
     c1c:	e2 e3       	ldi	r30, 0x32	; 50
     c1e:	f0 e0       	ldi	r31, 0x00	; 0
     c20:	80 81       	ld	r24, Z
     c22:	48 2f       	mov	r20, r24
     c24:	8a 81       	ldd	r24, Y+2	; 0x02
     c26:	28 2f       	mov	r18, r24
     c28:	30 e0       	ldi	r19, 0x00	; 0
     c2a:	81 e0       	ldi	r24, 0x01	; 1
     c2c:	90 e0       	ldi	r25, 0x00	; 0
     c2e:	02 2e       	mov	r0, r18
     c30:	02 c0       	rjmp	.+4      	; 0xc36 <DIO_VidSetPinValue+0x100>
     c32:	88 0f       	add	r24, r24
     c34:	99 1f       	adc	r25, r25
     c36:	0a 94       	dec	r0
     c38:	e2 f7       	brpl	.-8      	; 0xc32 <DIO_VidSetPinValue+0xfc>
     c3a:	80 95       	com	r24
     c3c:	84 23       	and	r24, r20
     c3e:	8c 93       	st	X, r24
     c40:	73 c0       	rjmp	.+230    	; 0xd28 <DIO_VidSetPinValue+0x1f2>
		}
	}
	/****************** set pin as output***********************/
	else if(Copy_u8State == high){
     c42:	8b 81       	ldd	r24, Y+3	; 0x03
     c44:	81 30       	cpi	r24, 0x01	; 1
     c46:	09 f0       	breq	.+2      	; 0xc4a <DIO_VidSetPinValue+0x114>
     c48:	6f c0       	rjmp	.+222    	; 0xd28 <DIO_VidSetPinValue+0x1f2>
		switch (Copy_u8Port) {
     c4a:	89 81       	ldd	r24, Y+1	; 0x01
     c4c:	28 2f       	mov	r18, r24
     c4e:	30 e0       	ldi	r19, 0x00	; 0
     c50:	3d 83       	std	Y+5, r19	; 0x05
     c52:	2c 83       	std	Y+4, r18	; 0x04
     c54:	8c 81       	ldd	r24, Y+4	; 0x04
     c56:	9d 81       	ldd	r25, Y+5	; 0x05
     c58:	83 30       	cpi	r24, 0x03	; 3
     c5a:	91 05       	cpc	r25, r1
     c5c:	51 f1       	breq	.+84     	; 0xcb2 <DIO_VidSetPinValue+0x17c>
     c5e:	2c 81       	ldd	r18, Y+4	; 0x04
     c60:	3d 81       	ldd	r19, Y+5	; 0x05
     c62:	24 30       	cpi	r18, 0x04	; 4
     c64:	31 05       	cpc	r19, r1
     c66:	34 f4       	brge	.+12     	; 0xc74 <DIO_VidSetPinValue+0x13e>
     c68:	8c 81       	ldd	r24, Y+4	; 0x04
     c6a:	9d 81       	ldd	r25, Y+5	; 0x05
     c6c:	82 30       	cpi	r24, 0x02	; 2
     c6e:	91 05       	cpc	r25, r1
     c70:	61 f0       	breq	.+24     	; 0xc8a <DIO_VidSetPinValue+0x154>
     c72:	5a c0       	rjmp	.+180    	; 0xd28 <DIO_VidSetPinValue+0x1f2>
     c74:	2c 81       	ldd	r18, Y+4	; 0x04
     c76:	3d 81       	ldd	r19, Y+5	; 0x05
     c78:	24 30       	cpi	r18, 0x04	; 4
     c7a:	31 05       	cpc	r19, r1
     c7c:	71 f1       	breq	.+92     	; 0xcda <DIO_VidSetPinValue+0x1a4>
     c7e:	8c 81       	ldd	r24, Y+4	; 0x04
     c80:	9d 81       	ldd	r25, Y+5	; 0x05
     c82:	85 30       	cpi	r24, 0x05	; 5
     c84:	91 05       	cpc	r25, r1
     c86:	e9 f1       	breq	.+122    	; 0xd02 <DIO_VidSetPinValue+0x1cc>
     c88:	4f c0       	rjmp	.+158    	; 0xd28 <DIO_VidSetPinValue+0x1f2>
			case (Port_A) : Set_Bit(PORTA,Copy_u8PinNumber);break;
     c8a:	ab e3       	ldi	r26, 0x3B	; 59
     c8c:	b0 e0       	ldi	r27, 0x00	; 0
     c8e:	eb e3       	ldi	r30, 0x3B	; 59
     c90:	f0 e0       	ldi	r31, 0x00	; 0
     c92:	80 81       	ld	r24, Z
     c94:	48 2f       	mov	r20, r24
     c96:	8a 81       	ldd	r24, Y+2	; 0x02
     c98:	28 2f       	mov	r18, r24
     c9a:	30 e0       	ldi	r19, 0x00	; 0
     c9c:	81 e0       	ldi	r24, 0x01	; 1
     c9e:	90 e0       	ldi	r25, 0x00	; 0
     ca0:	02 2e       	mov	r0, r18
     ca2:	02 c0       	rjmp	.+4      	; 0xca8 <DIO_VidSetPinValue+0x172>
     ca4:	88 0f       	add	r24, r24
     ca6:	99 1f       	adc	r25, r25
     ca8:	0a 94       	dec	r0
     caa:	e2 f7       	brpl	.-8      	; 0xca4 <DIO_VidSetPinValue+0x16e>
     cac:	84 2b       	or	r24, r20
     cae:	8c 93       	st	X, r24
     cb0:	3b c0       	rjmp	.+118    	; 0xd28 <DIO_VidSetPinValue+0x1f2>
			case (Port_B) : Set_Bit(PORTB,Copy_u8PinNumber);break;
     cb2:	a8 e3       	ldi	r26, 0x38	; 56
     cb4:	b0 e0       	ldi	r27, 0x00	; 0
     cb6:	e8 e3       	ldi	r30, 0x38	; 56
     cb8:	f0 e0       	ldi	r31, 0x00	; 0
     cba:	80 81       	ld	r24, Z
     cbc:	48 2f       	mov	r20, r24
     cbe:	8a 81       	ldd	r24, Y+2	; 0x02
     cc0:	28 2f       	mov	r18, r24
     cc2:	30 e0       	ldi	r19, 0x00	; 0
     cc4:	81 e0       	ldi	r24, 0x01	; 1
     cc6:	90 e0       	ldi	r25, 0x00	; 0
     cc8:	02 2e       	mov	r0, r18
     cca:	02 c0       	rjmp	.+4      	; 0xcd0 <DIO_VidSetPinValue+0x19a>
     ccc:	88 0f       	add	r24, r24
     cce:	99 1f       	adc	r25, r25
     cd0:	0a 94       	dec	r0
     cd2:	e2 f7       	brpl	.-8      	; 0xccc <DIO_VidSetPinValue+0x196>
     cd4:	84 2b       	or	r24, r20
     cd6:	8c 93       	st	X, r24
     cd8:	27 c0       	rjmp	.+78     	; 0xd28 <DIO_VidSetPinValue+0x1f2>
			case (Port_C) : Set_Bit(PORTC,Copy_u8PinNumber);break;
     cda:	a5 e3       	ldi	r26, 0x35	; 53
     cdc:	b0 e0       	ldi	r27, 0x00	; 0
     cde:	e5 e3       	ldi	r30, 0x35	; 53
     ce0:	f0 e0       	ldi	r31, 0x00	; 0
     ce2:	80 81       	ld	r24, Z
     ce4:	48 2f       	mov	r20, r24
     ce6:	8a 81       	ldd	r24, Y+2	; 0x02
     ce8:	28 2f       	mov	r18, r24
     cea:	30 e0       	ldi	r19, 0x00	; 0
     cec:	81 e0       	ldi	r24, 0x01	; 1
     cee:	90 e0       	ldi	r25, 0x00	; 0
     cf0:	02 2e       	mov	r0, r18
     cf2:	02 c0       	rjmp	.+4      	; 0xcf8 <DIO_VidSetPinValue+0x1c2>
     cf4:	88 0f       	add	r24, r24
     cf6:	99 1f       	adc	r25, r25
     cf8:	0a 94       	dec	r0
     cfa:	e2 f7       	brpl	.-8      	; 0xcf4 <DIO_VidSetPinValue+0x1be>
     cfc:	84 2b       	or	r24, r20
     cfe:	8c 93       	st	X, r24
     d00:	13 c0       	rjmp	.+38     	; 0xd28 <DIO_VidSetPinValue+0x1f2>
			case (Port_D) : Set_Bit(PORTD,Copy_u8PinNumber);break;
     d02:	a2 e3       	ldi	r26, 0x32	; 50
     d04:	b0 e0       	ldi	r27, 0x00	; 0
     d06:	e2 e3       	ldi	r30, 0x32	; 50
     d08:	f0 e0       	ldi	r31, 0x00	; 0
     d0a:	80 81       	ld	r24, Z
     d0c:	48 2f       	mov	r20, r24
     d0e:	8a 81       	ldd	r24, Y+2	; 0x02
     d10:	28 2f       	mov	r18, r24
     d12:	30 e0       	ldi	r19, 0x00	; 0
     d14:	81 e0       	ldi	r24, 0x01	; 1
     d16:	90 e0       	ldi	r25, 0x00	; 0
     d18:	02 2e       	mov	r0, r18
     d1a:	02 c0       	rjmp	.+4      	; 0xd20 <DIO_VidSetPinValue+0x1ea>
     d1c:	88 0f       	add	r24, r24
     d1e:	99 1f       	adc	r25, r25
     d20:	0a 94       	dec	r0
     d22:	e2 f7       	brpl	.-8      	; 0xd1c <DIO_VidSetPinValue+0x1e6>
     d24:	84 2b       	or	r24, r20
     d26:	8c 93       	st	X, r24
		}
	}
}
     d28:	27 96       	adiw	r28, 0x07	; 7
     d2a:	0f b6       	in	r0, 0x3f	; 63
     d2c:	f8 94       	cli
     d2e:	de bf       	out	0x3e, r29	; 62
     d30:	0f be       	out	0x3f, r0	; 63
     d32:	cd bf       	out	0x3d, r28	; 61
     d34:	cf 91       	pop	r28
     d36:	df 91       	pop	r29
     d38:	08 95       	ret

00000d3a <DIO_VidSetPinDirection>:

void DIO_VidSetPinDirection(u8 Copy_u8Port, u8 Copy_u8PinNumber,u8 Copy_u8PinDirection)
{
     d3a:	df 93       	push	r29
     d3c:	cf 93       	push	r28
     d3e:	cd b7       	in	r28, 0x3d	; 61
     d40:	de b7       	in	r29, 0x3e	; 62
     d42:	27 97       	sbiw	r28, 0x07	; 7
     d44:	0f b6       	in	r0, 0x3f	; 63
     d46:	f8 94       	cli
     d48:	de bf       	out	0x3e, r29	; 62
     d4a:	0f be       	out	0x3f, r0	; 63
     d4c:	cd bf       	out	0x3d, r28	; 61
     d4e:	89 83       	std	Y+1, r24	; 0x01
     d50:	6a 83       	std	Y+2, r22	; 0x02
     d52:	4b 83       	std	Y+3, r20	; 0x03
	/****************** set pin as input***********************/
	if(Copy_u8PinDirection == input){
     d54:	8b 81       	ldd	r24, Y+3	; 0x03
     d56:	88 23       	and	r24, r24
     d58:	09 f0       	breq	.+2      	; 0xd5c <DIO_VidSetPinDirection+0x22>
     d5a:	75 c0       	rjmp	.+234    	; 0xe46 <DIO_VidSetPinDirection+0x10c>
		switch (Copy_u8Port) {
     d5c:	89 81       	ldd	r24, Y+1	; 0x01
     d5e:	28 2f       	mov	r18, r24
     d60:	30 e0       	ldi	r19, 0x00	; 0
     d62:	3f 83       	std	Y+7, r19	; 0x07
     d64:	2e 83       	std	Y+6, r18	; 0x06
     d66:	8e 81       	ldd	r24, Y+6	; 0x06
     d68:	9f 81       	ldd	r25, Y+7	; 0x07
     d6a:	83 30       	cpi	r24, 0x03	; 3
     d6c:	91 05       	cpc	r25, r1
     d6e:	61 f1       	breq	.+88     	; 0xdc8 <DIO_VidSetPinDirection+0x8e>
     d70:	2e 81       	ldd	r18, Y+6	; 0x06
     d72:	3f 81       	ldd	r19, Y+7	; 0x07
     d74:	24 30       	cpi	r18, 0x04	; 4
     d76:	31 05       	cpc	r19, r1
     d78:	34 f4       	brge	.+12     	; 0xd86 <DIO_VidSetPinDirection+0x4c>
     d7a:	8e 81       	ldd	r24, Y+6	; 0x06
     d7c:	9f 81       	ldd	r25, Y+7	; 0x07
     d7e:	82 30       	cpi	r24, 0x02	; 2
     d80:	91 05       	cpc	r25, r1
     d82:	69 f0       	breq	.+26     	; 0xd9e <DIO_VidSetPinDirection+0x64>
     d84:	d3 c0       	rjmp	.+422    	; 0xf2c <DIO_VidSetPinDirection+0x1f2>
     d86:	2e 81       	ldd	r18, Y+6	; 0x06
     d88:	3f 81       	ldd	r19, Y+7	; 0x07
     d8a:	24 30       	cpi	r18, 0x04	; 4
     d8c:	31 05       	cpc	r19, r1
     d8e:	89 f1       	breq	.+98     	; 0xdf2 <DIO_VidSetPinDirection+0xb8>
     d90:	8e 81       	ldd	r24, Y+6	; 0x06
     d92:	9f 81       	ldd	r25, Y+7	; 0x07
     d94:	85 30       	cpi	r24, 0x05	; 5
     d96:	91 05       	cpc	r25, r1
     d98:	09 f4       	brne	.+2      	; 0xd9c <DIO_VidSetPinDirection+0x62>
     d9a:	40 c0       	rjmp	.+128    	; 0xe1c <DIO_VidSetPinDirection+0xe2>
     d9c:	c7 c0       	rjmp	.+398    	; 0xf2c <DIO_VidSetPinDirection+0x1f2>
			case (Port_A) : CLR_Bit(DDRA,Copy_u8PinNumber);break;
     d9e:	aa e3       	ldi	r26, 0x3A	; 58
     da0:	b0 e0       	ldi	r27, 0x00	; 0
     da2:	ea e3       	ldi	r30, 0x3A	; 58
     da4:	f0 e0       	ldi	r31, 0x00	; 0
     da6:	80 81       	ld	r24, Z
     da8:	48 2f       	mov	r20, r24
     daa:	8a 81       	ldd	r24, Y+2	; 0x02
     dac:	28 2f       	mov	r18, r24
     dae:	30 e0       	ldi	r19, 0x00	; 0
     db0:	81 e0       	ldi	r24, 0x01	; 1
     db2:	90 e0       	ldi	r25, 0x00	; 0
     db4:	02 2e       	mov	r0, r18
     db6:	02 c0       	rjmp	.+4      	; 0xdbc <DIO_VidSetPinDirection+0x82>
     db8:	88 0f       	add	r24, r24
     dba:	99 1f       	adc	r25, r25
     dbc:	0a 94       	dec	r0
     dbe:	e2 f7       	brpl	.-8      	; 0xdb8 <DIO_VidSetPinDirection+0x7e>
     dc0:	80 95       	com	r24
     dc2:	84 23       	and	r24, r20
     dc4:	8c 93       	st	X, r24
     dc6:	b2 c0       	rjmp	.+356    	; 0xf2c <DIO_VidSetPinDirection+0x1f2>
			case (Port_B) : CLR_Bit(DDRB,Copy_u8PinNumber);break;
     dc8:	a7 e3       	ldi	r26, 0x37	; 55
     dca:	b0 e0       	ldi	r27, 0x00	; 0
     dcc:	e7 e3       	ldi	r30, 0x37	; 55
     dce:	f0 e0       	ldi	r31, 0x00	; 0
     dd0:	80 81       	ld	r24, Z
     dd2:	48 2f       	mov	r20, r24
     dd4:	8a 81       	ldd	r24, Y+2	; 0x02
     dd6:	28 2f       	mov	r18, r24
     dd8:	30 e0       	ldi	r19, 0x00	; 0
     dda:	81 e0       	ldi	r24, 0x01	; 1
     ddc:	90 e0       	ldi	r25, 0x00	; 0
     dde:	02 2e       	mov	r0, r18
     de0:	02 c0       	rjmp	.+4      	; 0xde6 <DIO_VidSetPinDirection+0xac>
     de2:	88 0f       	add	r24, r24
     de4:	99 1f       	adc	r25, r25
     de6:	0a 94       	dec	r0
     de8:	e2 f7       	brpl	.-8      	; 0xde2 <DIO_VidSetPinDirection+0xa8>
     dea:	80 95       	com	r24
     dec:	84 23       	and	r24, r20
     dee:	8c 93       	st	X, r24
     df0:	9d c0       	rjmp	.+314    	; 0xf2c <DIO_VidSetPinDirection+0x1f2>
			case (Port_C) : CLR_Bit(DDRC,Copy_u8PinNumber);break;
     df2:	a4 e3       	ldi	r26, 0x34	; 52
     df4:	b0 e0       	ldi	r27, 0x00	; 0
     df6:	e4 e3       	ldi	r30, 0x34	; 52
     df8:	f0 e0       	ldi	r31, 0x00	; 0
     dfa:	80 81       	ld	r24, Z
     dfc:	48 2f       	mov	r20, r24
     dfe:	8a 81       	ldd	r24, Y+2	; 0x02
     e00:	28 2f       	mov	r18, r24
     e02:	30 e0       	ldi	r19, 0x00	; 0
     e04:	81 e0       	ldi	r24, 0x01	; 1
     e06:	90 e0       	ldi	r25, 0x00	; 0
     e08:	02 2e       	mov	r0, r18
     e0a:	02 c0       	rjmp	.+4      	; 0xe10 <DIO_VidSetPinDirection+0xd6>
     e0c:	88 0f       	add	r24, r24
     e0e:	99 1f       	adc	r25, r25
     e10:	0a 94       	dec	r0
     e12:	e2 f7       	brpl	.-8      	; 0xe0c <DIO_VidSetPinDirection+0xd2>
     e14:	80 95       	com	r24
     e16:	84 23       	and	r24, r20
     e18:	8c 93       	st	X, r24
     e1a:	88 c0       	rjmp	.+272    	; 0xf2c <DIO_VidSetPinDirection+0x1f2>
			case (Port_D) : CLR_Bit(DDRD,Copy_u8PinNumber);break;
     e1c:	a1 e3       	ldi	r26, 0x31	; 49
     e1e:	b0 e0       	ldi	r27, 0x00	; 0
     e20:	e1 e3       	ldi	r30, 0x31	; 49
     e22:	f0 e0       	ldi	r31, 0x00	; 0
     e24:	80 81       	ld	r24, Z
     e26:	48 2f       	mov	r20, r24
     e28:	8a 81       	ldd	r24, Y+2	; 0x02
     e2a:	28 2f       	mov	r18, r24
     e2c:	30 e0       	ldi	r19, 0x00	; 0
     e2e:	81 e0       	ldi	r24, 0x01	; 1
     e30:	90 e0       	ldi	r25, 0x00	; 0
     e32:	02 2e       	mov	r0, r18
     e34:	02 c0       	rjmp	.+4      	; 0xe3a <DIO_VidSetPinDirection+0x100>
     e36:	88 0f       	add	r24, r24
     e38:	99 1f       	adc	r25, r25
     e3a:	0a 94       	dec	r0
     e3c:	e2 f7       	brpl	.-8      	; 0xe36 <DIO_VidSetPinDirection+0xfc>
     e3e:	80 95       	com	r24
     e40:	84 23       	and	r24, r20
     e42:	8c 93       	st	X, r24
     e44:	73 c0       	rjmp	.+230    	; 0xf2c <DIO_VidSetPinDirection+0x1f2>
		}
	}
	/****************** set pin as output***********************/
	else if(Copy_u8PinDirection == output){
     e46:	8b 81       	ldd	r24, Y+3	; 0x03
     e48:	81 30       	cpi	r24, 0x01	; 1
     e4a:	09 f0       	breq	.+2      	; 0xe4e <DIO_VidSetPinDirection+0x114>
     e4c:	6f c0       	rjmp	.+222    	; 0xf2c <DIO_VidSetPinDirection+0x1f2>
		switch (Copy_u8Port) {
     e4e:	89 81       	ldd	r24, Y+1	; 0x01
     e50:	28 2f       	mov	r18, r24
     e52:	30 e0       	ldi	r19, 0x00	; 0
     e54:	3d 83       	std	Y+5, r19	; 0x05
     e56:	2c 83       	std	Y+4, r18	; 0x04
     e58:	8c 81       	ldd	r24, Y+4	; 0x04
     e5a:	9d 81       	ldd	r25, Y+5	; 0x05
     e5c:	83 30       	cpi	r24, 0x03	; 3
     e5e:	91 05       	cpc	r25, r1
     e60:	51 f1       	breq	.+84     	; 0xeb6 <DIO_VidSetPinDirection+0x17c>
     e62:	2c 81       	ldd	r18, Y+4	; 0x04
     e64:	3d 81       	ldd	r19, Y+5	; 0x05
     e66:	24 30       	cpi	r18, 0x04	; 4
     e68:	31 05       	cpc	r19, r1
     e6a:	34 f4       	brge	.+12     	; 0xe78 <DIO_VidSetPinDirection+0x13e>
     e6c:	8c 81       	ldd	r24, Y+4	; 0x04
     e6e:	9d 81       	ldd	r25, Y+5	; 0x05
     e70:	82 30       	cpi	r24, 0x02	; 2
     e72:	91 05       	cpc	r25, r1
     e74:	61 f0       	breq	.+24     	; 0xe8e <DIO_VidSetPinDirection+0x154>
     e76:	5a c0       	rjmp	.+180    	; 0xf2c <DIO_VidSetPinDirection+0x1f2>
     e78:	2c 81       	ldd	r18, Y+4	; 0x04
     e7a:	3d 81       	ldd	r19, Y+5	; 0x05
     e7c:	24 30       	cpi	r18, 0x04	; 4
     e7e:	31 05       	cpc	r19, r1
     e80:	71 f1       	breq	.+92     	; 0xede <DIO_VidSetPinDirection+0x1a4>
     e82:	8c 81       	ldd	r24, Y+4	; 0x04
     e84:	9d 81       	ldd	r25, Y+5	; 0x05
     e86:	85 30       	cpi	r24, 0x05	; 5
     e88:	91 05       	cpc	r25, r1
     e8a:	e9 f1       	breq	.+122    	; 0xf06 <DIO_VidSetPinDirection+0x1cc>
     e8c:	4f c0       	rjmp	.+158    	; 0xf2c <DIO_VidSetPinDirection+0x1f2>
			case (Port_A) : Set_Bit(DDRA,Copy_u8PinNumber);break;
     e8e:	aa e3       	ldi	r26, 0x3A	; 58
     e90:	b0 e0       	ldi	r27, 0x00	; 0
     e92:	ea e3       	ldi	r30, 0x3A	; 58
     e94:	f0 e0       	ldi	r31, 0x00	; 0
     e96:	80 81       	ld	r24, Z
     e98:	48 2f       	mov	r20, r24
     e9a:	8a 81       	ldd	r24, Y+2	; 0x02
     e9c:	28 2f       	mov	r18, r24
     e9e:	30 e0       	ldi	r19, 0x00	; 0
     ea0:	81 e0       	ldi	r24, 0x01	; 1
     ea2:	90 e0       	ldi	r25, 0x00	; 0
     ea4:	02 2e       	mov	r0, r18
     ea6:	02 c0       	rjmp	.+4      	; 0xeac <DIO_VidSetPinDirection+0x172>
     ea8:	88 0f       	add	r24, r24
     eaa:	99 1f       	adc	r25, r25
     eac:	0a 94       	dec	r0
     eae:	e2 f7       	brpl	.-8      	; 0xea8 <DIO_VidSetPinDirection+0x16e>
     eb0:	84 2b       	or	r24, r20
     eb2:	8c 93       	st	X, r24
     eb4:	3b c0       	rjmp	.+118    	; 0xf2c <DIO_VidSetPinDirection+0x1f2>
			case (Port_B) : Set_Bit(DDRB,Copy_u8PinNumber);break;
     eb6:	a7 e3       	ldi	r26, 0x37	; 55
     eb8:	b0 e0       	ldi	r27, 0x00	; 0
     eba:	e7 e3       	ldi	r30, 0x37	; 55
     ebc:	f0 e0       	ldi	r31, 0x00	; 0
     ebe:	80 81       	ld	r24, Z
     ec0:	48 2f       	mov	r20, r24
     ec2:	8a 81       	ldd	r24, Y+2	; 0x02
     ec4:	28 2f       	mov	r18, r24
     ec6:	30 e0       	ldi	r19, 0x00	; 0
     ec8:	81 e0       	ldi	r24, 0x01	; 1
     eca:	90 e0       	ldi	r25, 0x00	; 0
     ecc:	02 2e       	mov	r0, r18
     ece:	02 c0       	rjmp	.+4      	; 0xed4 <DIO_VidSetPinDirection+0x19a>
     ed0:	88 0f       	add	r24, r24
     ed2:	99 1f       	adc	r25, r25
     ed4:	0a 94       	dec	r0
     ed6:	e2 f7       	brpl	.-8      	; 0xed0 <DIO_VidSetPinDirection+0x196>
     ed8:	84 2b       	or	r24, r20
     eda:	8c 93       	st	X, r24
     edc:	27 c0       	rjmp	.+78     	; 0xf2c <DIO_VidSetPinDirection+0x1f2>
			case (Port_C) : Set_Bit(DDRC,Copy_u8PinNumber);break;
     ede:	a4 e3       	ldi	r26, 0x34	; 52
     ee0:	b0 e0       	ldi	r27, 0x00	; 0
     ee2:	e4 e3       	ldi	r30, 0x34	; 52
     ee4:	f0 e0       	ldi	r31, 0x00	; 0
     ee6:	80 81       	ld	r24, Z
     ee8:	48 2f       	mov	r20, r24
     eea:	8a 81       	ldd	r24, Y+2	; 0x02
     eec:	28 2f       	mov	r18, r24
     eee:	30 e0       	ldi	r19, 0x00	; 0
     ef0:	81 e0       	ldi	r24, 0x01	; 1
     ef2:	90 e0       	ldi	r25, 0x00	; 0
     ef4:	02 2e       	mov	r0, r18
     ef6:	02 c0       	rjmp	.+4      	; 0xefc <DIO_VidSetPinDirection+0x1c2>
     ef8:	88 0f       	add	r24, r24
     efa:	99 1f       	adc	r25, r25
     efc:	0a 94       	dec	r0
     efe:	e2 f7       	brpl	.-8      	; 0xef8 <DIO_VidSetPinDirection+0x1be>
     f00:	84 2b       	or	r24, r20
     f02:	8c 93       	st	X, r24
     f04:	13 c0       	rjmp	.+38     	; 0xf2c <DIO_VidSetPinDirection+0x1f2>
			case (Port_D) : Set_Bit(DDRD,Copy_u8PinNumber);break;
     f06:	a1 e3       	ldi	r26, 0x31	; 49
     f08:	b0 e0       	ldi	r27, 0x00	; 0
     f0a:	e1 e3       	ldi	r30, 0x31	; 49
     f0c:	f0 e0       	ldi	r31, 0x00	; 0
     f0e:	80 81       	ld	r24, Z
     f10:	48 2f       	mov	r20, r24
     f12:	8a 81       	ldd	r24, Y+2	; 0x02
     f14:	28 2f       	mov	r18, r24
     f16:	30 e0       	ldi	r19, 0x00	; 0
     f18:	81 e0       	ldi	r24, 0x01	; 1
     f1a:	90 e0       	ldi	r25, 0x00	; 0
     f1c:	02 2e       	mov	r0, r18
     f1e:	02 c0       	rjmp	.+4      	; 0xf24 <DIO_VidSetPinDirection+0x1ea>
     f20:	88 0f       	add	r24, r24
     f22:	99 1f       	adc	r25, r25
     f24:	0a 94       	dec	r0
     f26:	e2 f7       	brpl	.-8      	; 0xf20 <DIO_VidSetPinDirection+0x1e6>
     f28:	84 2b       	or	r24, r20
     f2a:	8c 93       	st	X, r24
		}
	}
}
     f2c:	27 96       	adiw	r28, 0x07	; 7
     f2e:	0f b6       	in	r0, 0x3f	; 63
     f30:	f8 94       	cli
     f32:	de bf       	out	0x3e, r29	; 62
     f34:	0f be       	out	0x3f, r0	; 63
     f36:	cd bf       	out	0x3d, r28	; 61
     f38:	cf 91       	pop	r28
     f3a:	df 91       	pop	r29
     f3c:	08 95       	ret

00000f3e <DIO_VidGetPinValue>:


void DIO_VidGetPinValue(u8 Copy_u8Port, u8 Copy_u8PinNumber, u8* Copy_Pu8PinValue)
{
     f3e:	df 93       	push	r29
     f40:	cf 93       	push	r28
     f42:	00 d0       	rcall	.+0      	; 0xf44 <DIO_VidGetPinValue+0x6>
     f44:	00 d0       	rcall	.+0      	; 0xf46 <DIO_VidGetPinValue+0x8>
     f46:	00 d0       	rcall	.+0      	; 0xf48 <DIO_VidGetPinValue+0xa>
     f48:	cd b7       	in	r28, 0x3d	; 61
     f4a:	de b7       	in	r29, 0x3e	; 62
     f4c:	89 83       	std	Y+1, r24	; 0x01
     f4e:	6a 83       	std	Y+2, r22	; 0x02
     f50:	5c 83       	std	Y+4, r21	; 0x04
     f52:	4b 83       	std	Y+3, r20	; 0x03
	/****************** set pin as input***********************/
		switch (Copy_u8Port) {
     f54:	89 81       	ldd	r24, Y+1	; 0x01
     f56:	28 2f       	mov	r18, r24
     f58:	30 e0       	ldi	r19, 0x00	; 0
     f5a:	3e 83       	std	Y+6, r19	; 0x06
     f5c:	2d 83       	std	Y+5, r18	; 0x05
     f5e:	4d 81       	ldd	r20, Y+5	; 0x05
     f60:	5e 81       	ldd	r21, Y+6	; 0x06
     f62:	43 30       	cpi	r20, 0x03	; 3
     f64:	51 05       	cpc	r21, r1
     f66:	59 f1       	breq	.+86     	; 0xfbe <DIO_VidGetPinValue+0x80>
     f68:	8d 81       	ldd	r24, Y+5	; 0x05
     f6a:	9e 81       	ldd	r25, Y+6	; 0x06
     f6c:	84 30       	cpi	r24, 0x04	; 4
     f6e:	91 05       	cpc	r25, r1
     f70:	34 f4       	brge	.+12     	; 0xf7e <DIO_VidGetPinValue+0x40>
     f72:	2d 81       	ldd	r18, Y+5	; 0x05
     f74:	3e 81       	ldd	r19, Y+6	; 0x06
     f76:	22 30       	cpi	r18, 0x02	; 2
     f78:	31 05       	cpc	r19, r1
     f7a:	69 f0       	breq	.+26     	; 0xf96 <DIO_VidGetPinValue+0x58>
     f7c:	5b c0       	rjmp	.+182    	; 0x1034 <DIO_VidGetPinValue+0xf6>
     f7e:	4d 81       	ldd	r20, Y+5	; 0x05
     f80:	5e 81       	ldd	r21, Y+6	; 0x06
     f82:	44 30       	cpi	r20, 0x04	; 4
     f84:	51 05       	cpc	r21, r1
     f86:	79 f1       	breq	.+94     	; 0xfe6 <DIO_VidGetPinValue+0xa8>
     f88:	8d 81       	ldd	r24, Y+5	; 0x05
     f8a:	9e 81       	ldd	r25, Y+6	; 0x06
     f8c:	85 30       	cpi	r24, 0x05	; 5
     f8e:	91 05       	cpc	r25, r1
     f90:	09 f4       	brne	.+2      	; 0xf94 <DIO_VidGetPinValue+0x56>
     f92:	3d c0       	rjmp	.+122    	; 0x100e <DIO_VidGetPinValue+0xd0>
     f94:	4f c0       	rjmp	.+158    	; 0x1034 <DIO_VidGetPinValue+0xf6>
			case (Port_A) : *Copy_Pu8PinValue = Get_Bit(PINA,Copy_u8PinNumber);break;
     f96:	e9 e3       	ldi	r30, 0x39	; 57
     f98:	f0 e0       	ldi	r31, 0x00	; 0
     f9a:	80 81       	ld	r24, Z
     f9c:	28 2f       	mov	r18, r24
     f9e:	30 e0       	ldi	r19, 0x00	; 0
     fa0:	8a 81       	ldd	r24, Y+2	; 0x02
     fa2:	88 2f       	mov	r24, r24
     fa4:	90 e0       	ldi	r25, 0x00	; 0
     fa6:	a9 01       	movw	r20, r18
     fa8:	02 c0       	rjmp	.+4      	; 0xfae <DIO_VidGetPinValue+0x70>
     faa:	55 95       	asr	r21
     fac:	47 95       	ror	r20
     fae:	8a 95       	dec	r24
     fb0:	e2 f7       	brpl	.-8      	; 0xfaa <DIO_VidGetPinValue+0x6c>
     fb2:	ca 01       	movw	r24, r20
     fb4:	81 70       	andi	r24, 0x01	; 1
     fb6:	eb 81       	ldd	r30, Y+3	; 0x03
     fb8:	fc 81       	ldd	r31, Y+4	; 0x04
     fba:	80 83       	st	Z, r24
     fbc:	3b c0       	rjmp	.+118    	; 0x1034 <DIO_VidGetPinValue+0xf6>
			case (Port_B) : *Copy_Pu8PinValue = Get_Bit(PINB,Copy_u8PinNumber);break;
     fbe:	e6 e3       	ldi	r30, 0x36	; 54
     fc0:	f0 e0       	ldi	r31, 0x00	; 0
     fc2:	80 81       	ld	r24, Z
     fc4:	28 2f       	mov	r18, r24
     fc6:	30 e0       	ldi	r19, 0x00	; 0
     fc8:	8a 81       	ldd	r24, Y+2	; 0x02
     fca:	88 2f       	mov	r24, r24
     fcc:	90 e0       	ldi	r25, 0x00	; 0
     fce:	a9 01       	movw	r20, r18
     fd0:	02 c0       	rjmp	.+4      	; 0xfd6 <DIO_VidGetPinValue+0x98>
     fd2:	55 95       	asr	r21
     fd4:	47 95       	ror	r20
     fd6:	8a 95       	dec	r24
     fd8:	e2 f7       	brpl	.-8      	; 0xfd2 <DIO_VidGetPinValue+0x94>
     fda:	ca 01       	movw	r24, r20
     fdc:	81 70       	andi	r24, 0x01	; 1
     fde:	eb 81       	ldd	r30, Y+3	; 0x03
     fe0:	fc 81       	ldd	r31, Y+4	; 0x04
     fe2:	80 83       	st	Z, r24
     fe4:	27 c0       	rjmp	.+78     	; 0x1034 <DIO_VidGetPinValue+0xf6>
			case (Port_C) : *Copy_Pu8PinValue = Get_Bit(PINC,Copy_u8PinNumber);break;
     fe6:	e3 e3       	ldi	r30, 0x33	; 51
     fe8:	f0 e0       	ldi	r31, 0x00	; 0
     fea:	80 81       	ld	r24, Z
     fec:	28 2f       	mov	r18, r24
     fee:	30 e0       	ldi	r19, 0x00	; 0
     ff0:	8a 81       	ldd	r24, Y+2	; 0x02
     ff2:	88 2f       	mov	r24, r24
     ff4:	90 e0       	ldi	r25, 0x00	; 0
     ff6:	a9 01       	movw	r20, r18
     ff8:	02 c0       	rjmp	.+4      	; 0xffe <DIO_VidGetPinValue+0xc0>
     ffa:	55 95       	asr	r21
     ffc:	47 95       	ror	r20
     ffe:	8a 95       	dec	r24
    1000:	e2 f7       	brpl	.-8      	; 0xffa <DIO_VidGetPinValue+0xbc>
    1002:	ca 01       	movw	r24, r20
    1004:	81 70       	andi	r24, 0x01	; 1
    1006:	eb 81       	ldd	r30, Y+3	; 0x03
    1008:	fc 81       	ldd	r31, Y+4	; 0x04
    100a:	80 83       	st	Z, r24
    100c:	13 c0       	rjmp	.+38     	; 0x1034 <DIO_VidGetPinValue+0xf6>
			case (Port_D) : *Copy_Pu8PinValue = Get_Bit(PIND,Copy_u8PinNumber);break;
    100e:	e0 e3       	ldi	r30, 0x30	; 48
    1010:	f0 e0       	ldi	r31, 0x00	; 0
    1012:	80 81       	ld	r24, Z
    1014:	28 2f       	mov	r18, r24
    1016:	30 e0       	ldi	r19, 0x00	; 0
    1018:	8a 81       	ldd	r24, Y+2	; 0x02
    101a:	88 2f       	mov	r24, r24
    101c:	90 e0       	ldi	r25, 0x00	; 0
    101e:	a9 01       	movw	r20, r18
    1020:	02 c0       	rjmp	.+4      	; 0x1026 <DIO_VidGetPinValue+0xe8>
    1022:	55 95       	asr	r21
    1024:	47 95       	ror	r20
    1026:	8a 95       	dec	r24
    1028:	e2 f7       	brpl	.-8      	; 0x1022 <DIO_VidGetPinValue+0xe4>
    102a:	ca 01       	movw	r24, r20
    102c:	81 70       	andi	r24, 0x01	; 1
    102e:	eb 81       	ldd	r30, Y+3	; 0x03
    1030:	fc 81       	ldd	r31, Y+4	; 0x04
    1032:	80 83       	st	Z, r24
		}
}
    1034:	26 96       	adiw	r28, 0x06	; 6
    1036:	0f b6       	in	r0, 0x3f	; 63
    1038:	f8 94       	cli
    103a:	de bf       	out	0x3e, r29	; 62
    103c:	0f be       	out	0x3f, r0	; 63
    103e:	cd bf       	out	0x3d, r28	; 61
    1040:	cf 91       	pop	r28
    1042:	df 91       	pop	r29
    1044:	08 95       	ret

00001046 <DIO_VidSetPortVal>:
/*---------------------------------------------------------------------------------------------------------------------------------*/
									/************************set port************************/
/*---------------------------------------------------------------------------------------------------------------------------------*/


void DIO_VidSetPortVal(u8 Copy_u8Port, u8 Copy_u8Val){
    1046:	df 93       	push	r29
    1048:	cf 93       	push	r28
    104a:	00 d0       	rcall	.+0      	; 0x104c <DIO_VidSetPortVal+0x6>
    104c:	00 d0       	rcall	.+0      	; 0x104e <DIO_VidSetPortVal+0x8>
    104e:	cd b7       	in	r28, 0x3d	; 61
    1050:	de b7       	in	r29, 0x3e	; 62
    1052:	89 83       	std	Y+1, r24	; 0x01
    1054:	6a 83       	std	Y+2, r22	; 0x02

		switch (Copy_u8Port) {
    1056:	89 81       	ldd	r24, Y+1	; 0x01
    1058:	28 2f       	mov	r18, r24
    105a:	30 e0       	ldi	r19, 0x00	; 0
    105c:	3c 83       	std	Y+4, r19	; 0x04
    105e:	2b 83       	std	Y+3, r18	; 0x03
    1060:	8b 81       	ldd	r24, Y+3	; 0x03
    1062:	9c 81       	ldd	r25, Y+4	; 0x04
    1064:	83 30       	cpi	r24, 0x03	; 3
    1066:	91 05       	cpc	r25, r1
    1068:	d9 f0       	breq	.+54     	; 0x10a0 <DIO_VidSetPortVal+0x5a>
    106a:	2b 81       	ldd	r18, Y+3	; 0x03
    106c:	3c 81       	ldd	r19, Y+4	; 0x04
    106e:	24 30       	cpi	r18, 0x04	; 4
    1070:	31 05       	cpc	r19, r1
    1072:	34 f4       	brge	.+12     	; 0x1080 <DIO_VidSetPortVal+0x3a>
    1074:	8b 81       	ldd	r24, Y+3	; 0x03
    1076:	9c 81       	ldd	r25, Y+4	; 0x04
    1078:	82 30       	cpi	r24, 0x02	; 2
    107a:	91 05       	cpc	r25, r1
    107c:	61 f0       	breq	.+24     	; 0x1096 <DIO_VidSetPortVal+0x50>
    107e:	1e c0       	rjmp	.+60     	; 0x10bc <DIO_VidSetPortVal+0x76>
    1080:	2b 81       	ldd	r18, Y+3	; 0x03
    1082:	3c 81       	ldd	r19, Y+4	; 0x04
    1084:	24 30       	cpi	r18, 0x04	; 4
    1086:	31 05       	cpc	r19, r1
    1088:	81 f0       	breq	.+32     	; 0x10aa <DIO_VidSetPortVal+0x64>
    108a:	8b 81       	ldd	r24, Y+3	; 0x03
    108c:	9c 81       	ldd	r25, Y+4	; 0x04
    108e:	85 30       	cpi	r24, 0x05	; 5
    1090:	91 05       	cpc	r25, r1
    1092:	81 f0       	breq	.+32     	; 0x10b4 <DIO_VidSetPortVal+0x6e>
    1094:	13 c0       	rjmp	.+38     	; 0x10bc <DIO_VidSetPortVal+0x76>
			case (Port_A) : PORTA = Copy_u8Val;break;
    1096:	eb e3       	ldi	r30, 0x3B	; 59
    1098:	f0 e0       	ldi	r31, 0x00	; 0
    109a:	8a 81       	ldd	r24, Y+2	; 0x02
    109c:	80 83       	st	Z, r24
    109e:	0e c0       	rjmp	.+28     	; 0x10bc <DIO_VidSetPortVal+0x76>
			case (Port_B) : PORTB = Copy_u8Val;break;
    10a0:	e8 e3       	ldi	r30, 0x38	; 56
    10a2:	f0 e0       	ldi	r31, 0x00	; 0
    10a4:	8a 81       	ldd	r24, Y+2	; 0x02
    10a6:	80 83       	st	Z, r24
    10a8:	09 c0       	rjmp	.+18     	; 0x10bc <DIO_VidSetPortVal+0x76>
			case (Port_C) : PORTC = Copy_u8Val;break;
    10aa:	e5 e3       	ldi	r30, 0x35	; 53
    10ac:	f0 e0       	ldi	r31, 0x00	; 0
    10ae:	8a 81       	ldd	r24, Y+2	; 0x02
    10b0:	80 83       	st	Z, r24
    10b2:	04 c0       	rjmp	.+8      	; 0x10bc <DIO_VidSetPortVal+0x76>
			case (Port_D) : PORTD = Copy_u8Val;break;
    10b4:	e2 e3       	ldi	r30, 0x32	; 50
    10b6:	f0 e0       	ldi	r31, 0x00	; 0
    10b8:	8a 81       	ldd	r24, Y+2	; 0x02
    10ba:	80 83       	st	Z, r24
		}
}
    10bc:	0f 90       	pop	r0
    10be:	0f 90       	pop	r0
    10c0:	0f 90       	pop	r0
    10c2:	0f 90       	pop	r0
    10c4:	cf 91       	pop	r28
    10c6:	df 91       	pop	r29
    10c8:	08 95       	ret

000010ca <DIO_VidSetPortDirection>:



void DIO_VidSetPortDirection(u8 Copy_u8Port, u8 Copy_u8Direction)
{
    10ca:	df 93       	push	r29
    10cc:	cf 93       	push	r28
    10ce:	00 d0       	rcall	.+0      	; 0x10d0 <DIO_VidSetPortDirection+0x6>
    10d0:	00 d0       	rcall	.+0      	; 0x10d2 <DIO_VidSetPortDirection+0x8>
    10d2:	00 d0       	rcall	.+0      	; 0x10d4 <DIO_VidSetPortDirection+0xa>
    10d4:	cd b7       	in	r28, 0x3d	; 61
    10d6:	de b7       	in	r29, 0x3e	; 62
    10d8:	89 83       	std	Y+1, r24	; 0x01
    10da:	6a 83       	std	Y+2, r22	; 0x02
	/****************** set Port as input***********************/
	if(Copy_u8Direction == input){
    10dc:	8a 81       	ldd	r24, Y+2	; 0x02
    10de:	88 23       	and	r24, r24
    10e0:	81 f5       	brne	.+96     	; 0x1142 <DIO_VidSetPortDirection+0x78>
		switch (Copy_u8Port) {
    10e2:	89 81       	ldd	r24, Y+1	; 0x01
    10e4:	28 2f       	mov	r18, r24
    10e6:	30 e0       	ldi	r19, 0x00	; 0
    10e8:	3e 83       	std	Y+6, r19	; 0x06
    10ea:	2d 83       	std	Y+5, r18	; 0x05
    10ec:	8d 81       	ldd	r24, Y+5	; 0x05
    10ee:	9e 81       	ldd	r25, Y+6	; 0x06
    10f0:	83 30       	cpi	r24, 0x03	; 3
    10f2:	91 05       	cpc	r25, r1
    10f4:	d1 f0       	breq	.+52     	; 0x112a <DIO_VidSetPortDirection+0x60>
    10f6:	2d 81       	ldd	r18, Y+5	; 0x05
    10f8:	3e 81       	ldd	r19, Y+6	; 0x06
    10fa:	24 30       	cpi	r18, 0x04	; 4
    10fc:	31 05       	cpc	r19, r1
    10fe:	34 f4       	brge	.+12     	; 0x110c <DIO_VidSetPortDirection+0x42>
    1100:	8d 81       	ldd	r24, Y+5	; 0x05
    1102:	9e 81       	ldd	r25, Y+6	; 0x06
    1104:	82 30       	cpi	r24, 0x02	; 2
    1106:	91 05       	cpc	r25, r1
    1108:	61 f0       	breq	.+24     	; 0x1122 <DIO_VidSetPortDirection+0x58>
    110a:	51 c0       	rjmp	.+162    	; 0x11ae <DIO_VidSetPortDirection+0xe4>
    110c:	2d 81       	ldd	r18, Y+5	; 0x05
    110e:	3e 81       	ldd	r19, Y+6	; 0x06
    1110:	24 30       	cpi	r18, 0x04	; 4
    1112:	31 05       	cpc	r19, r1
    1114:	71 f0       	breq	.+28     	; 0x1132 <DIO_VidSetPortDirection+0x68>
    1116:	8d 81       	ldd	r24, Y+5	; 0x05
    1118:	9e 81       	ldd	r25, Y+6	; 0x06
    111a:	85 30       	cpi	r24, 0x05	; 5
    111c:	91 05       	cpc	r25, r1
    111e:	69 f0       	breq	.+26     	; 0x113a <DIO_VidSetPortDirection+0x70>
    1120:	46 c0       	rjmp	.+140    	; 0x11ae <DIO_VidSetPortDirection+0xe4>
			case (Port_A) : DDRA = 0x00 ;break;
    1122:	ea e3       	ldi	r30, 0x3A	; 58
    1124:	f0 e0       	ldi	r31, 0x00	; 0
    1126:	10 82       	st	Z, r1
    1128:	42 c0       	rjmp	.+132    	; 0x11ae <DIO_VidSetPortDirection+0xe4>
			case (Port_B) : DDRB = 0x00 ;break;
    112a:	e7 e3       	ldi	r30, 0x37	; 55
    112c:	f0 e0       	ldi	r31, 0x00	; 0
    112e:	10 82       	st	Z, r1
    1130:	3e c0       	rjmp	.+124    	; 0x11ae <DIO_VidSetPortDirection+0xe4>
			case (Port_C) : DDRC = 0x00 ;break;
    1132:	e4 e3       	ldi	r30, 0x34	; 52
    1134:	f0 e0       	ldi	r31, 0x00	; 0
    1136:	10 82       	st	Z, r1
    1138:	3a c0       	rjmp	.+116    	; 0x11ae <DIO_VidSetPortDirection+0xe4>
			case (Port_D) : DDRD = 0x00 ;break;
    113a:	e1 e3       	ldi	r30, 0x31	; 49
    113c:	f0 e0       	ldi	r31, 0x00	; 0
    113e:	10 82       	st	Z, r1
    1140:	36 c0       	rjmp	.+108    	; 0x11ae <DIO_VidSetPortDirection+0xe4>
		}
	}

	/****************** set Port as output***********************/
	else if(Copy_u8Direction == output){
    1142:	8a 81       	ldd	r24, Y+2	; 0x02
    1144:	81 30       	cpi	r24, 0x01	; 1
    1146:	99 f5       	brne	.+102    	; 0x11ae <DIO_VidSetPortDirection+0xe4>
		switch (Copy_u8Port) {
    1148:	89 81       	ldd	r24, Y+1	; 0x01
    114a:	28 2f       	mov	r18, r24
    114c:	30 e0       	ldi	r19, 0x00	; 0
    114e:	3c 83       	std	Y+4, r19	; 0x04
    1150:	2b 83       	std	Y+3, r18	; 0x03
    1152:	8b 81       	ldd	r24, Y+3	; 0x03
    1154:	9c 81       	ldd	r25, Y+4	; 0x04
    1156:	83 30       	cpi	r24, 0x03	; 3
    1158:	91 05       	cpc	r25, r1
    115a:	d9 f0       	breq	.+54     	; 0x1192 <DIO_VidSetPortDirection+0xc8>
    115c:	2b 81       	ldd	r18, Y+3	; 0x03
    115e:	3c 81       	ldd	r19, Y+4	; 0x04
    1160:	24 30       	cpi	r18, 0x04	; 4
    1162:	31 05       	cpc	r19, r1
    1164:	34 f4       	brge	.+12     	; 0x1172 <DIO_VidSetPortDirection+0xa8>
    1166:	8b 81       	ldd	r24, Y+3	; 0x03
    1168:	9c 81       	ldd	r25, Y+4	; 0x04
    116a:	82 30       	cpi	r24, 0x02	; 2
    116c:	91 05       	cpc	r25, r1
    116e:	61 f0       	breq	.+24     	; 0x1188 <DIO_VidSetPortDirection+0xbe>
    1170:	1e c0       	rjmp	.+60     	; 0x11ae <DIO_VidSetPortDirection+0xe4>
    1172:	2b 81       	ldd	r18, Y+3	; 0x03
    1174:	3c 81       	ldd	r19, Y+4	; 0x04
    1176:	24 30       	cpi	r18, 0x04	; 4
    1178:	31 05       	cpc	r19, r1
    117a:	81 f0       	breq	.+32     	; 0x119c <DIO_VidSetPortDirection+0xd2>
    117c:	8b 81       	ldd	r24, Y+3	; 0x03
    117e:	9c 81       	ldd	r25, Y+4	; 0x04
    1180:	85 30       	cpi	r24, 0x05	; 5
    1182:	91 05       	cpc	r25, r1
    1184:	81 f0       	breq	.+32     	; 0x11a6 <DIO_VidSetPortDirection+0xdc>
    1186:	13 c0       	rjmp	.+38     	; 0x11ae <DIO_VidSetPortDirection+0xe4>
			case (Port_A) : DDRA = 0xff ;break;
    1188:	ea e3       	ldi	r30, 0x3A	; 58
    118a:	f0 e0       	ldi	r31, 0x00	; 0
    118c:	8f ef       	ldi	r24, 0xFF	; 255
    118e:	80 83       	st	Z, r24
    1190:	0e c0       	rjmp	.+28     	; 0x11ae <DIO_VidSetPortDirection+0xe4>
			case (Port_B) : DDRB = 0xff ;break;
    1192:	e7 e3       	ldi	r30, 0x37	; 55
    1194:	f0 e0       	ldi	r31, 0x00	; 0
    1196:	8f ef       	ldi	r24, 0xFF	; 255
    1198:	80 83       	st	Z, r24
    119a:	09 c0       	rjmp	.+18     	; 0x11ae <DIO_VidSetPortDirection+0xe4>
			case (Port_C) : DDRC = 0xff ;break;
    119c:	e4 e3       	ldi	r30, 0x34	; 52
    119e:	f0 e0       	ldi	r31, 0x00	; 0
    11a0:	8f ef       	ldi	r24, 0xFF	; 255
    11a2:	80 83       	st	Z, r24
    11a4:	04 c0       	rjmp	.+8      	; 0x11ae <DIO_VidSetPortDirection+0xe4>
			case (Port_D) : DDRD = 0xff ;break;
    11a6:	e1 e3       	ldi	r30, 0x31	; 49
    11a8:	f0 e0       	ldi	r31, 0x00	; 0
    11aa:	8f ef       	ldi	r24, 0xFF	; 255
    11ac:	80 83       	st	Z, r24
		}
	}
}
    11ae:	26 96       	adiw	r28, 0x06	; 6
    11b0:	0f b6       	in	r0, 0x3f	; 63
    11b2:	f8 94       	cli
    11b4:	de bf       	out	0x3e, r29	; 62
    11b6:	0f be       	out	0x3f, r0	; 63
    11b8:	cd bf       	out	0x3d, r28	; 61
    11ba:	cf 91       	pop	r28
    11bc:	df 91       	pop	r29
    11be:	08 95       	ret

000011c0 <DIO_VidGetPortValue>:

void DIO_VidGetPortValue(u8 Copy_u8Port, u8* Copy_Pu8Value)
{
    11c0:	df 93       	push	r29
    11c2:	cf 93       	push	r28
    11c4:	00 d0       	rcall	.+0      	; 0x11c6 <DIO_VidGetPortValue+0x6>
    11c6:	00 d0       	rcall	.+0      	; 0x11c8 <DIO_VidGetPortValue+0x8>
    11c8:	0f 92       	push	r0
    11ca:	cd b7       	in	r28, 0x3d	; 61
    11cc:	de b7       	in	r29, 0x3e	; 62
    11ce:	89 83       	std	Y+1, r24	; 0x01
    11d0:	7b 83       	std	Y+3, r23	; 0x03
    11d2:	6a 83       	std	Y+2, r22	; 0x02
	switch (Copy_u8Port) {
    11d4:	89 81       	ldd	r24, Y+1	; 0x01
    11d6:	28 2f       	mov	r18, r24
    11d8:	30 e0       	ldi	r19, 0x00	; 0
    11da:	3d 83       	std	Y+5, r19	; 0x05
    11dc:	2c 83       	std	Y+4, r18	; 0x04
    11de:	8c 81       	ldd	r24, Y+4	; 0x04
    11e0:	9d 81       	ldd	r25, Y+5	; 0x05
    11e2:	83 30       	cpi	r24, 0x03	; 3
    11e4:	91 05       	cpc	r25, r1
    11e6:	e9 f0       	breq	.+58     	; 0x1222 <DIO_VidGetPortValue+0x62>
    11e8:	2c 81       	ldd	r18, Y+4	; 0x04
    11ea:	3d 81       	ldd	r19, Y+5	; 0x05
    11ec:	24 30       	cpi	r18, 0x04	; 4
    11ee:	31 05       	cpc	r19, r1
    11f0:	34 f4       	brge	.+12     	; 0x11fe <DIO_VidGetPortValue+0x3e>
    11f2:	8c 81       	ldd	r24, Y+4	; 0x04
    11f4:	9d 81       	ldd	r25, Y+5	; 0x05
    11f6:	82 30       	cpi	r24, 0x02	; 2
    11f8:	91 05       	cpc	r25, r1
    11fa:	61 f0       	breq	.+24     	; 0x1214 <DIO_VidGetPortValue+0x54>
    11fc:	26 c0       	rjmp	.+76     	; 0x124a <DIO_VidGetPortValue+0x8a>
    11fe:	2c 81       	ldd	r18, Y+4	; 0x04
    1200:	3d 81       	ldd	r19, Y+5	; 0x05
    1202:	24 30       	cpi	r18, 0x04	; 4
    1204:	31 05       	cpc	r19, r1
    1206:	a1 f0       	breq	.+40     	; 0x1230 <DIO_VidGetPortValue+0x70>
    1208:	8c 81       	ldd	r24, Y+4	; 0x04
    120a:	9d 81       	ldd	r25, Y+5	; 0x05
    120c:	85 30       	cpi	r24, 0x05	; 5
    120e:	91 05       	cpc	r25, r1
    1210:	b1 f0       	breq	.+44     	; 0x123e <DIO_VidGetPortValue+0x7e>
    1212:	1b c0       	rjmp	.+54     	; 0x124a <DIO_VidGetPortValue+0x8a>
		case (Port_A) : *Copy_Pu8Value = PINA; break;
    1214:	e9 e3       	ldi	r30, 0x39	; 57
    1216:	f0 e0       	ldi	r31, 0x00	; 0
    1218:	80 81       	ld	r24, Z
    121a:	ea 81       	ldd	r30, Y+2	; 0x02
    121c:	fb 81       	ldd	r31, Y+3	; 0x03
    121e:	80 83       	st	Z, r24
    1220:	14 c0       	rjmp	.+40     	; 0x124a <DIO_VidGetPortValue+0x8a>
		case (Port_B) : *Copy_Pu8Value = PINB; break;
    1222:	e6 e3       	ldi	r30, 0x36	; 54
    1224:	f0 e0       	ldi	r31, 0x00	; 0
    1226:	80 81       	ld	r24, Z
    1228:	ea 81       	ldd	r30, Y+2	; 0x02
    122a:	fb 81       	ldd	r31, Y+3	; 0x03
    122c:	80 83       	st	Z, r24
    122e:	0d c0       	rjmp	.+26     	; 0x124a <DIO_VidGetPortValue+0x8a>
		case (Port_C) : *Copy_Pu8Value = PINC; break;
    1230:	e3 e3       	ldi	r30, 0x33	; 51
    1232:	f0 e0       	ldi	r31, 0x00	; 0
    1234:	80 81       	ld	r24, Z
    1236:	ea 81       	ldd	r30, Y+2	; 0x02
    1238:	fb 81       	ldd	r31, Y+3	; 0x03
    123a:	80 83       	st	Z, r24
    123c:	06 c0       	rjmp	.+12     	; 0x124a <DIO_VidGetPortValue+0x8a>
		case (Port_D) : *Copy_Pu8Value = PIND; break;
    123e:	e0 e3       	ldi	r30, 0x30	; 48
    1240:	f0 e0       	ldi	r31, 0x00	; 0
    1242:	80 81       	ld	r24, Z
    1244:	ea 81       	ldd	r30, Y+2	; 0x02
    1246:	fb 81       	ldd	r31, Y+3	; 0x03
    1248:	80 83       	st	Z, r24
	}
}
    124a:	0f 90       	pop	r0
    124c:	0f 90       	pop	r0
    124e:	0f 90       	pop	r0
    1250:	0f 90       	pop	r0
    1252:	0f 90       	pop	r0
    1254:	cf 91       	pop	r28
    1256:	df 91       	pop	r29
    1258:	08 95       	ret

0000125a <CLCD_VidSendCommand>:





void CLCD_VidSendCommand(u8 Copy_u8Command){
    125a:	df 93       	push	r29
    125c:	cf 93       	push	r28
    125e:	cd b7       	in	r28, 0x3d	; 61
    1260:	de b7       	in	r29, 0x3e	; 62
    1262:	2f 97       	sbiw	r28, 0x0f	; 15
    1264:	0f b6       	in	r0, 0x3f	; 63
    1266:	f8 94       	cli
    1268:	de bf       	out	0x3e, r29	; 62
    126a:	0f be       	out	0x3f, r0	; 63
    126c:	cd bf       	out	0x3d, r28	; 61
    126e:	8f 87       	std	Y+15, r24	; 0x0f

	/*set RS pin as low*/
	DIO_VidSetPinValue(CLCD_CTRL_PORT, CLCD_RS_PIN,low );
    1270:	84 e0       	ldi	r24, 0x04	; 4
    1272:	60 e0       	ldi	r22, 0x00	; 0
    1274:	40 e0       	ldi	r20, 0x00	; 0
    1276:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_VidSetPinValue>
	/*set RW pin low to write*/
	DIO_VidSetPinValue(CLCD_CTRL_PORT, CLCD_RW_PIN,low );
    127a:	84 e0       	ldi	r24, 0x04	; 4
    127c:	61 e0       	ldi	r22, 0x01	; 1
    127e:	40 e0       	ldi	r20, 0x00	; 0
    1280:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_VidSetPinValue>
	/*send commands to data pins */
	DIO_VidSetPortVal(CLCD_DATA_PORT, Copy_u8Command);
    1284:	82 e0       	ldi	r24, 0x02	; 2
    1286:	6f 85       	ldd	r22, Y+15	; 0x0f
    1288:	0e 94 23 08 	call	0x1046	; 0x1046 <DIO_VidSetPortVal>
	/*send enable pulse*/
	DIO_VidSetPinValue(CLCD_CTRL_PORT,CLCD_EN_PIN,high);
    128c:	84 e0       	ldi	r24, 0x04	; 4
    128e:	62 e0       	ldi	r22, 0x02	; 2
    1290:	41 e0       	ldi	r20, 0x01	; 1
    1292:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_VidSetPinValue>
    1296:	80 e0       	ldi	r24, 0x00	; 0
    1298:	90 e0       	ldi	r25, 0x00	; 0
    129a:	a0 e4       	ldi	r26, 0x40	; 64
    129c:	b0 e4       	ldi	r27, 0x40	; 64
    129e:	8b 87       	std	Y+11, r24	; 0x0b
    12a0:	9c 87       	std	Y+12, r25	; 0x0c
    12a2:	ad 87       	std	Y+13, r26	; 0x0d
    12a4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    12a6:	6b 85       	ldd	r22, Y+11	; 0x0b
    12a8:	7c 85       	ldd	r23, Y+12	; 0x0c
    12aa:	8d 85       	ldd	r24, Y+13	; 0x0d
    12ac:	9e 85       	ldd	r25, Y+14	; 0x0e
    12ae:	20 e0       	ldi	r18, 0x00	; 0
    12b0:	30 e0       	ldi	r19, 0x00	; 0
    12b2:	4a ef       	ldi	r20, 0xFA	; 250
    12b4:	54 e4       	ldi	r21, 0x44	; 68
    12b6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    12ba:	dc 01       	movw	r26, r24
    12bc:	cb 01       	movw	r24, r22
    12be:	8f 83       	std	Y+7, r24	; 0x07
    12c0:	98 87       	std	Y+8, r25	; 0x08
    12c2:	a9 87       	std	Y+9, r26	; 0x09
    12c4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    12c6:	6f 81       	ldd	r22, Y+7	; 0x07
    12c8:	78 85       	ldd	r23, Y+8	; 0x08
    12ca:	89 85       	ldd	r24, Y+9	; 0x09
    12cc:	9a 85       	ldd	r25, Y+10	; 0x0a
    12ce:	20 e0       	ldi	r18, 0x00	; 0
    12d0:	30 e0       	ldi	r19, 0x00	; 0
    12d2:	40 e8       	ldi	r20, 0x80	; 128
    12d4:	5f e3       	ldi	r21, 0x3F	; 63
    12d6:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    12da:	88 23       	and	r24, r24
    12dc:	2c f4       	brge	.+10     	; 0x12e8 <CLCD_VidSendCommand+0x8e>
		__ticks = 1;
    12de:	81 e0       	ldi	r24, 0x01	; 1
    12e0:	90 e0       	ldi	r25, 0x00	; 0
    12e2:	9e 83       	std	Y+6, r25	; 0x06
    12e4:	8d 83       	std	Y+5, r24	; 0x05
    12e6:	3f c0       	rjmp	.+126    	; 0x1366 <CLCD_VidSendCommand+0x10c>
	else if (__tmp > 65535)
    12e8:	6f 81       	ldd	r22, Y+7	; 0x07
    12ea:	78 85       	ldd	r23, Y+8	; 0x08
    12ec:	89 85       	ldd	r24, Y+9	; 0x09
    12ee:	9a 85       	ldd	r25, Y+10	; 0x0a
    12f0:	20 e0       	ldi	r18, 0x00	; 0
    12f2:	3f ef       	ldi	r19, 0xFF	; 255
    12f4:	4f e7       	ldi	r20, 0x7F	; 127
    12f6:	57 e4       	ldi	r21, 0x47	; 71
    12f8:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    12fc:	18 16       	cp	r1, r24
    12fe:	4c f5       	brge	.+82     	; 0x1352 <CLCD_VidSendCommand+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1300:	6b 85       	ldd	r22, Y+11	; 0x0b
    1302:	7c 85       	ldd	r23, Y+12	; 0x0c
    1304:	8d 85       	ldd	r24, Y+13	; 0x0d
    1306:	9e 85       	ldd	r25, Y+14	; 0x0e
    1308:	20 e0       	ldi	r18, 0x00	; 0
    130a:	30 e0       	ldi	r19, 0x00	; 0
    130c:	40 e2       	ldi	r20, 0x20	; 32
    130e:	51 e4       	ldi	r21, 0x41	; 65
    1310:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1314:	dc 01       	movw	r26, r24
    1316:	cb 01       	movw	r24, r22
    1318:	bc 01       	movw	r22, r24
    131a:	cd 01       	movw	r24, r26
    131c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1320:	dc 01       	movw	r26, r24
    1322:	cb 01       	movw	r24, r22
    1324:	9e 83       	std	Y+6, r25	; 0x06
    1326:	8d 83       	std	Y+5, r24	; 0x05
    1328:	0f c0       	rjmp	.+30     	; 0x1348 <CLCD_VidSendCommand+0xee>
    132a:	88 ec       	ldi	r24, 0xC8	; 200
    132c:	90 e0       	ldi	r25, 0x00	; 0
    132e:	9c 83       	std	Y+4, r25	; 0x04
    1330:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1332:	8b 81       	ldd	r24, Y+3	; 0x03
    1334:	9c 81       	ldd	r25, Y+4	; 0x04
    1336:	01 97       	sbiw	r24, 0x01	; 1
    1338:	f1 f7       	brne	.-4      	; 0x1336 <CLCD_VidSendCommand+0xdc>
    133a:	9c 83       	std	Y+4, r25	; 0x04
    133c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    133e:	8d 81       	ldd	r24, Y+5	; 0x05
    1340:	9e 81       	ldd	r25, Y+6	; 0x06
    1342:	01 97       	sbiw	r24, 0x01	; 1
    1344:	9e 83       	std	Y+6, r25	; 0x06
    1346:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1348:	8d 81       	ldd	r24, Y+5	; 0x05
    134a:	9e 81       	ldd	r25, Y+6	; 0x06
    134c:	00 97       	sbiw	r24, 0x00	; 0
    134e:	69 f7       	brne	.-38     	; 0x132a <CLCD_VidSendCommand+0xd0>
    1350:	14 c0       	rjmp	.+40     	; 0x137a <CLCD_VidSendCommand+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1352:	6f 81       	ldd	r22, Y+7	; 0x07
    1354:	78 85       	ldd	r23, Y+8	; 0x08
    1356:	89 85       	ldd	r24, Y+9	; 0x09
    1358:	9a 85       	ldd	r25, Y+10	; 0x0a
    135a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    135e:	dc 01       	movw	r26, r24
    1360:	cb 01       	movw	r24, r22
    1362:	9e 83       	std	Y+6, r25	; 0x06
    1364:	8d 83       	std	Y+5, r24	; 0x05
    1366:	8d 81       	ldd	r24, Y+5	; 0x05
    1368:	9e 81       	ldd	r25, Y+6	; 0x06
    136a:	9a 83       	std	Y+2, r25	; 0x02
    136c:	89 83       	std	Y+1, r24	; 0x01
    136e:	89 81       	ldd	r24, Y+1	; 0x01
    1370:	9a 81       	ldd	r25, Y+2	; 0x02
    1372:	01 97       	sbiw	r24, 0x01	; 1
    1374:	f1 f7       	brne	.-4      	; 0x1372 <CLCD_VidSendCommand+0x118>
    1376:	9a 83       	std	Y+2, r25	; 0x02
    1378:	89 83       	std	Y+1, r24	; 0x01
	/*delay*/
	_delay_ms(3);
	/*Clear enable pin (Pulse Complete)*/
	DIO_VidSetPinValue(CLCD_CTRL_PORT,CLCD_EN_PIN,low);
    137a:	84 e0       	ldi	r24, 0x04	; 4
    137c:	62 e0       	ldi	r22, 0x02	; 2
    137e:	40 e0       	ldi	r20, 0x00	; 0
    1380:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_VidSetPinValue>
}
    1384:	2f 96       	adiw	r28, 0x0f	; 15
    1386:	0f b6       	in	r0, 0x3f	; 63
    1388:	f8 94       	cli
    138a:	de bf       	out	0x3e, r29	; 62
    138c:	0f be       	out	0x3f, r0	; 63
    138e:	cd bf       	out	0x3d, r28	; 61
    1390:	cf 91       	pop	r28
    1392:	df 91       	pop	r29
    1394:	08 95       	ret

00001396 <ClCD_VidSendData>:

void ClCD_VidSendData(u8 Copy_u8Data ){
    1396:	df 93       	push	r29
    1398:	cf 93       	push	r28
    139a:	cd b7       	in	r28, 0x3d	; 61
    139c:	de b7       	in	r29, 0x3e	; 62
    139e:	2f 97       	sbiw	r28, 0x0f	; 15
    13a0:	0f b6       	in	r0, 0x3f	; 63
    13a2:	f8 94       	cli
    13a4:	de bf       	out	0x3e, r29	; 62
    13a6:	0f be       	out	0x3f, r0	; 63
    13a8:	cd bf       	out	0x3d, r28	; 61
    13aa:	8f 87       	std	Y+15, r24	; 0x0f

	/*set RS pin as high*/
	DIO_VidSetPinValue(CLCD_CTRL_PORT, CLCD_RS_PIN,high );
    13ac:	84 e0       	ldi	r24, 0x04	; 4
    13ae:	60 e0       	ldi	r22, 0x00	; 0
    13b0:	41 e0       	ldi	r20, 0x01	; 1
    13b2:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_VidSetPinValue>
	/*set RW pin low to write*/
	DIO_VidSetPinValue(CLCD_CTRL_PORT, CLCD_RW_PIN,low );
    13b6:	84 e0       	ldi	r24, 0x04	; 4
    13b8:	61 e0       	ldi	r22, 0x01	; 1
    13ba:	40 e0       	ldi	r20, 0x00	; 0
    13bc:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_VidSetPinValue>
	/*send commands to data pins */
	DIO_VidSetPortVal(CLCD_DATA_PORT, Copy_u8Data);
    13c0:	82 e0       	ldi	r24, 0x02	; 2
    13c2:	6f 85       	ldd	r22, Y+15	; 0x0f
    13c4:	0e 94 23 08 	call	0x1046	; 0x1046 <DIO_VidSetPortVal>
	/*send enable pulse*/
	DIO_VidSetPinValue(CLCD_CTRL_PORT,CLCD_EN_PIN,high);
    13c8:	84 e0       	ldi	r24, 0x04	; 4
    13ca:	62 e0       	ldi	r22, 0x02	; 2
    13cc:	41 e0       	ldi	r20, 0x01	; 1
    13ce:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_VidSetPinValue>
    13d2:	80 e0       	ldi	r24, 0x00	; 0
    13d4:	90 e0       	ldi	r25, 0x00	; 0
    13d6:	a0 e4       	ldi	r26, 0x40	; 64
    13d8:	b0 e4       	ldi	r27, 0x40	; 64
    13da:	8b 87       	std	Y+11, r24	; 0x0b
    13dc:	9c 87       	std	Y+12, r25	; 0x0c
    13de:	ad 87       	std	Y+13, r26	; 0x0d
    13e0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    13e2:	6b 85       	ldd	r22, Y+11	; 0x0b
    13e4:	7c 85       	ldd	r23, Y+12	; 0x0c
    13e6:	8d 85       	ldd	r24, Y+13	; 0x0d
    13e8:	9e 85       	ldd	r25, Y+14	; 0x0e
    13ea:	20 e0       	ldi	r18, 0x00	; 0
    13ec:	30 e0       	ldi	r19, 0x00	; 0
    13ee:	4a ef       	ldi	r20, 0xFA	; 250
    13f0:	54 e4       	ldi	r21, 0x44	; 68
    13f2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    13f6:	dc 01       	movw	r26, r24
    13f8:	cb 01       	movw	r24, r22
    13fa:	8f 83       	std	Y+7, r24	; 0x07
    13fc:	98 87       	std	Y+8, r25	; 0x08
    13fe:	a9 87       	std	Y+9, r26	; 0x09
    1400:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1402:	6f 81       	ldd	r22, Y+7	; 0x07
    1404:	78 85       	ldd	r23, Y+8	; 0x08
    1406:	89 85       	ldd	r24, Y+9	; 0x09
    1408:	9a 85       	ldd	r25, Y+10	; 0x0a
    140a:	20 e0       	ldi	r18, 0x00	; 0
    140c:	30 e0       	ldi	r19, 0x00	; 0
    140e:	40 e8       	ldi	r20, 0x80	; 128
    1410:	5f e3       	ldi	r21, 0x3F	; 63
    1412:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1416:	88 23       	and	r24, r24
    1418:	2c f4       	brge	.+10     	; 0x1424 <ClCD_VidSendData+0x8e>
		__ticks = 1;
    141a:	81 e0       	ldi	r24, 0x01	; 1
    141c:	90 e0       	ldi	r25, 0x00	; 0
    141e:	9e 83       	std	Y+6, r25	; 0x06
    1420:	8d 83       	std	Y+5, r24	; 0x05
    1422:	3f c0       	rjmp	.+126    	; 0x14a2 <ClCD_VidSendData+0x10c>
	else if (__tmp > 65535)
    1424:	6f 81       	ldd	r22, Y+7	; 0x07
    1426:	78 85       	ldd	r23, Y+8	; 0x08
    1428:	89 85       	ldd	r24, Y+9	; 0x09
    142a:	9a 85       	ldd	r25, Y+10	; 0x0a
    142c:	20 e0       	ldi	r18, 0x00	; 0
    142e:	3f ef       	ldi	r19, 0xFF	; 255
    1430:	4f e7       	ldi	r20, 0x7F	; 127
    1432:	57 e4       	ldi	r21, 0x47	; 71
    1434:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1438:	18 16       	cp	r1, r24
    143a:	4c f5       	brge	.+82     	; 0x148e <ClCD_VidSendData+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    143c:	6b 85       	ldd	r22, Y+11	; 0x0b
    143e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1440:	8d 85       	ldd	r24, Y+13	; 0x0d
    1442:	9e 85       	ldd	r25, Y+14	; 0x0e
    1444:	20 e0       	ldi	r18, 0x00	; 0
    1446:	30 e0       	ldi	r19, 0x00	; 0
    1448:	40 e2       	ldi	r20, 0x20	; 32
    144a:	51 e4       	ldi	r21, 0x41	; 65
    144c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1450:	dc 01       	movw	r26, r24
    1452:	cb 01       	movw	r24, r22
    1454:	bc 01       	movw	r22, r24
    1456:	cd 01       	movw	r24, r26
    1458:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    145c:	dc 01       	movw	r26, r24
    145e:	cb 01       	movw	r24, r22
    1460:	9e 83       	std	Y+6, r25	; 0x06
    1462:	8d 83       	std	Y+5, r24	; 0x05
    1464:	0f c0       	rjmp	.+30     	; 0x1484 <ClCD_VidSendData+0xee>
    1466:	88 ec       	ldi	r24, 0xC8	; 200
    1468:	90 e0       	ldi	r25, 0x00	; 0
    146a:	9c 83       	std	Y+4, r25	; 0x04
    146c:	8b 83       	std	Y+3, r24	; 0x03
    146e:	8b 81       	ldd	r24, Y+3	; 0x03
    1470:	9c 81       	ldd	r25, Y+4	; 0x04
    1472:	01 97       	sbiw	r24, 0x01	; 1
    1474:	f1 f7       	brne	.-4      	; 0x1472 <ClCD_VidSendData+0xdc>
    1476:	9c 83       	std	Y+4, r25	; 0x04
    1478:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    147a:	8d 81       	ldd	r24, Y+5	; 0x05
    147c:	9e 81       	ldd	r25, Y+6	; 0x06
    147e:	01 97       	sbiw	r24, 0x01	; 1
    1480:	9e 83       	std	Y+6, r25	; 0x06
    1482:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1484:	8d 81       	ldd	r24, Y+5	; 0x05
    1486:	9e 81       	ldd	r25, Y+6	; 0x06
    1488:	00 97       	sbiw	r24, 0x00	; 0
    148a:	69 f7       	brne	.-38     	; 0x1466 <ClCD_VidSendData+0xd0>
    148c:	14 c0       	rjmp	.+40     	; 0x14b6 <ClCD_VidSendData+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    148e:	6f 81       	ldd	r22, Y+7	; 0x07
    1490:	78 85       	ldd	r23, Y+8	; 0x08
    1492:	89 85       	ldd	r24, Y+9	; 0x09
    1494:	9a 85       	ldd	r25, Y+10	; 0x0a
    1496:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    149a:	dc 01       	movw	r26, r24
    149c:	cb 01       	movw	r24, r22
    149e:	9e 83       	std	Y+6, r25	; 0x06
    14a0:	8d 83       	std	Y+5, r24	; 0x05
    14a2:	8d 81       	ldd	r24, Y+5	; 0x05
    14a4:	9e 81       	ldd	r25, Y+6	; 0x06
    14a6:	9a 83       	std	Y+2, r25	; 0x02
    14a8:	89 83       	std	Y+1, r24	; 0x01
    14aa:	89 81       	ldd	r24, Y+1	; 0x01
    14ac:	9a 81       	ldd	r25, Y+2	; 0x02
    14ae:	01 97       	sbiw	r24, 0x01	; 1
    14b0:	f1 f7       	brne	.-4      	; 0x14ae <ClCD_VidSendData+0x118>
    14b2:	9a 83       	std	Y+2, r25	; 0x02
    14b4:	89 83       	std	Y+1, r24	; 0x01
	/*delay*/
	_delay_ms(3);
	/*Clear enable pin (Pulse Complete)*/
	DIO_VidSetPinValue(CLCD_CTRL_PORT,CLCD_EN_PIN,low);
    14b6:	84 e0       	ldi	r24, 0x04	; 4
    14b8:	62 e0       	ldi	r22, 0x02	; 2
    14ba:	40 e0       	ldi	r20, 0x00	; 0
    14bc:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_VidSetPinValue>
}
    14c0:	2f 96       	adiw	r28, 0x0f	; 15
    14c2:	0f b6       	in	r0, 0x3f	; 63
    14c4:	f8 94       	cli
    14c6:	de bf       	out	0x3e, r29	; 62
    14c8:	0f be       	out	0x3f, r0	; 63
    14ca:	cd bf       	out	0x3d, r28	; 61
    14cc:	cf 91       	pop	r28
    14ce:	df 91       	pop	r29
    14d0:	08 95       	ret

000014d2 <CLCD_VidInit>:
void CLCD_VidInit(void){
    14d2:	df 93       	push	r29
    14d4:	cf 93       	push	r28
    14d6:	cd b7       	in	r28, 0x3d	; 61
    14d8:	de b7       	in	r29, 0x3e	; 62
    14da:	2e 97       	sbiw	r28, 0x0e	; 14
    14dc:	0f b6       	in	r0, 0x3f	; 63
    14de:	f8 94       	cli
    14e0:	de bf       	out	0x3e, r29	; 62
    14e2:	0f be       	out	0x3f, r0	; 63
    14e4:	cd bf       	out	0x3d, r28	; 61
    14e6:	80 e0       	ldi	r24, 0x00	; 0
    14e8:	90 e0       	ldi	r25, 0x00	; 0
    14ea:	a0 e2       	ldi	r26, 0x20	; 32
    14ec:	b2 e4       	ldi	r27, 0x42	; 66
    14ee:	8b 87       	std	Y+11, r24	; 0x0b
    14f0:	9c 87       	std	Y+12, r25	; 0x0c
    14f2:	ad 87       	std	Y+13, r26	; 0x0d
    14f4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    14f6:	6b 85       	ldd	r22, Y+11	; 0x0b
    14f8:	7c 85       	ldd	r23, Y+12	; 0x0c
    14fa:	8d 85       	ldd	r24, Y+13	; 0x0d
    14fc:	9e 85       	ldd	r25, Y+14	; 0x0e
    14fe:	20 e0       	ldi	r18, 0x00	; 0
    1500:	30 e0       	ldi	r19, 0x00	; 0
    1502:	4a ef       	ldi	r20, 0xFA	; 250
    1504:	54 e4       	ldi	r21, 0x44	; 68
    1506:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    150a:	dc 01       	movw	r26, r24
    150c:	cb 01       	movw	r24, r22
    150e:	8f 83       	std	Y+7, r24	; 0x07
    1510:	98 87       	std	Y+8, r25	; 0x08
    1512:	a9 87       	std	Y+9, r26	; 0x09
    1514:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1516:	6f 81       	ldd	r22, Y+7	; 0x07
    1518:	78 85       	ldd	r23, Y+8	; 0x08
    151a:	89 85       	ldd	r24, Y+9	; 0x09
    151c:	9a 85       	ldd	r25, Y+10	; 0x0a
    151e:	20 e0       	ldi	r18, 0x00	; 0
    1520:	30 e0       	ldi	r19, 0x00	; 0
    1522:	40 e8       	ldi	r20, 0x80	; 128
    1524:	5f e3       	ldi	r21, 0x3F	; 63
    1526:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    152a:	88 23       	and	r24, r24
    152c:	2c f4       	brge	.+10     	; 0x1538 <CLCD_VidInit+0x66>
		__ticks = 1;
    152e:	81 e0       	ldi	r24, 0x01	; 1
    1530:	90 e0       	ldi	r25, 0x00	; 0
    1532:	9e 83       	std	Y+6, r25	; 0x06
    1534:	8d 83       	std	Y+5, r24	; 0x05
    1536:	3f c0       	rjmp	.+126    	; 0x15b6 <CLCD_VidInit+0xe4>
	else if (__tmp > 65535)
    1538:	6f 81       	ldd	r22, Y+7	; 0x07
    153a:	78 85       	ldd	r23, Y+8	; 0x08
    153c:	89 85       	ldd	r24, Y+9	; 0x09
    153e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1540:	20 e0       	ldi	r18, 0x00	; 0
    1542:	3f ef       	ldi	r19, 0xFF	; 255
    1544:	4f e7       	ldi	r20, 0x7F	; 127
    1546:	57 e4       	ldi	r21, 0x47	; 71
    1548:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    154c:	18 16       	cp	r1, r24
    154e:	4c f5       	brge	.+82     	; 0x15a2 <CLCD_VidInit+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1550:	6b 85       	ldd	r22, Y+11	; 0x0b
    1552:	7c 85       	ldd	r23, Y+12	; 0x0c
    1554:	8d 85       	ldd	r24, Y+13	; 0x0d
    1556:	9e 85       	ldd	r25, Y+14	; 0x0e
    1558:	20 e0       	ldi	r18, 0x00	; 0
    155a:	30 e0       	ldi	r19, 0x00	; 0
    155c:	40 e2       	ldi	r20, 0x20	; 32
    155e:	51 e4       	ldi	r21, 0x41	; 65
    1560:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1564:	dc 01       	movw	r26, r24
    1566:	cb 01       	movw	r24, r22
    1568:	bc 01       	movw	r22, r24
    156a:	cd 01       	movw	r24, r26
    156c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1570:	dc 01       	movw	r26, r24
    1572:	cb 01       	movw	r24, r22
    1574:	9e 83       	std	Y+6, r25	; 0x06
    1576:	8d 83       	std	Y+5, r24	; 0x05
    1578:	0f c0       	rjmp	.+30     	; 0x1598 <CLCD_VidInit+0xc6>
    157a:	88 ec       	ldi	r24, 0xC8	; 200
    157c:	90 e0       	ldi	r25, 0x00	; 0
    157e:	9c 83       	std	Y+4, r25	; 0x04
    1580:	8b 83       	std	Y+3, r24	; 0x03
    1582:	8b 81       	ldd	r24, Y+3	; 0x03
    1584:	9c 81       	ldd	r25, Y+4	; 0x04
    1586:	01 97       	sbiw	r24, 0x01	; 1
    1588:	f1 f7       	brne	.-4      	; 0x1586 <CLCD_VidInit+0xb4>
    158a:	9c 83       	std	Y+4, r25	; 0x04
    158c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    158e:	8d 81       	ldd	r24, Y+5	; 0x05
    1590:	9e 81       	ldd	r25, Y+6	; 0x06
    1592:	01 97       	sbiw	r24, 0x01	; 1
    1594:	9e 83       	std	Y+6, r25	; 0x06
    1596:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1598:	8d 81       	ldd	r24, Y+5	; 0x05
    159a:	9e 81       	ldd	r25, Y+6	; 0x06
    159c:	00 97       	sbiw	r24, 0x00	; 0
    159e:	69 f7       	brne	.-38     	; 0x157a <CLCD_VidInit+0xa8>
    15a0:	14 c0       	rjmp	.+40     	; 0x15ca <CLCD_VidInit+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    15a2:	6f 81       	ldd	r22, Y+7	; 0x07
    15a4:	78 85       	ldd	r23, Y+8	; 0x08
    15a6:	89 85       	ldd	r24, Y+9	; 0x09
    15a8:	9a 85       	ldd	r25, Y+10	; 0x0a
    15aa:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    15ae:	dc 01       	movw	r26, r24
    15b0:	cb 01       	movw	r24, r22
    15b2:	9e 83       	std	Y+6, r25	; 0x06
    15b4:	8d 83       	std	Y+5, r24	; 0x05
    15b6:	8d 81       	ldd	r24, Y+5	; 0x05
    15b8:	9e 81       	ldd	r25, Y+6	; 0x06
    15ba:	9a 83       	std	Y+2, r25	; 0x02
    15bc:	89 83       	std	Y+1, r24	; 0x01
    15be:	89 81       	ldd	r24, Y+1	; 0x01
    15c0:	9a 81       	ldd	r25, Y+2	; 0x02
    15c2:	01 97       	sbiw	r24, 0x01	; 1
    15c4:	f1 f7       	brne	.-4      	; 0x15c2 <CLCD_VidInit+0xf0>
    15c6:	9a 83       	std	Y+2, r25	; 0x02
    15c8:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(40);
	/*Function Set Command*/
	CLCD_VidSendCommand(0b00111111);
    15ca:	8f e3       	ldi	r24, 0x3F	; 63
    15cc:	0e 94 2d 09 	call	0x125a	; 0x125a <CLCD_VidSendCommand>
	/*Display on/off control command*/
	CLCD_VidSendCommand(0b00001111);
    15d0:	8f e0       	ldi	r24, 0x0F	; 15
    15d2:	0e 94 2d 09 	call	0x125a	; 0x125a <CLCD_VidSendCommand>
	/*Display Clear command*/
	CLCD_VidSendCommand(1);
    15d6:	81 e0       	ldi	r24, 0x01	; 1
    15d8:	0e 94 2d 09 	call	0x125a	; 0x125a <CLCD_VidSendCommand>
}
    15dc:	2e 96       	adiw	r28, 0x0e	; 14
    15de:	0f b6       	in	r0, 0x3f	; 63
    15e0:	f8 94       	cli
    15e2:	de bf       	out	0x3e, r29	; 62
    15e4:	0f be       	out	0x3f, r0	; 63
    15e6:	cd bf       	out	0x3d, r28	; 61
    15e8:	cf 91       	pop	r28
    15ea:	df 91       	pop	r29
    15ec:	08 95       	ret

000015ee <CLCD_VidGotoXY>:
void CLCD_VidGotoXY (u8 Copy_u8XPos,u8 Copy_u8YPos){ /*x from 0 to 1 -------- y from 0 to 16*/
    15ee:	df 93       	push	r29
    15f0:	cf 93       	push	r28
    15f2:	00 d0       	rcall	.+0      	; 0x15f4 <CLCD_VidGotoXY+0x6>
    15f4:	0f 92       	push	r0
    15f6:	cd b7       	in	r28, 0x3d	; 61
    15f8:	de b7       	in	r29, 0x3e	; 62
    15fa:	8a 83       	std	Y+2, r24	; 0x02
    15fc:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8Address = 0 ;
    15fe:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8XPos ==0){
    1600:	8a 81       	ldd	r24, Y+2	; 0x02
    1602:	88 23       	and	r24, r24
    1604:	19 f4       	brne	.+6      	; 0x160c <CLCD_VidGotoXY+0x1e>
		Local_u8Address = Copy_u8YPos;
    1606:	8b 81       	ldd	r24, Y+3	; 0x03
    1608:	89 83       	std	Y+1, r24	; 0x01
    160a:	06 c0       	rjmp	.+12     	; 0x1618 <CLCD_VidGotoXY+0x2a>
	}
	else if(Copy_u8XPos==1 ){
    160c:	8a 81       	ldd	r24, Y+2	; 0x02
    160e:	81 30       	cpi	r24, 0x01	; 1
    1610:	19 f4       	brne	.+6      	; 0x1618 <CLCD_VidGotoXY+0x2a>
		Local_u8Address = 0x40 + Copy_u8YPos;
    1612:	8b 81       	ldd	r24, Y+3	; 0x03
    1614:	80 5c       	subi	r24, 0xC0	; 192
    1616:	89 83       	std	Y+1, r24	; 0x01
	}
	/*0b1000000 ----> 128 */
	CLCD_VidSendCommand(128+Local_u8Address);
    1618:	89 81       	ldd	r24, Y+1	; 0x01
    161a:	80 58       	subi	r24, 0x80	; 128
    161c:	0e 94 2d 09 	call	0x125a	; 0x125a <CLCD_VidSendCommand>

}
    1620:	0f 90       	pop	r0
    1622:	0f 90       	pop	r0
    1624:	0f 90       	pop	r0
    1626:	cf 91       	pop	r28
    1628:	df 91       	pop	r29
    162a:	08 95       	ret

0000162c <CLCD_VidWriteSpecialChar>:
void CLCD_VidWriteSpecialChar(u8 * Copy_Pu8Pattern, u8 Copy_u8PatternNumber,u8 Copy_u8XPos,u8 Copy_u8YPos ){
    162c:	df 93       	push	r29
    162e:	cf 93       	push	r28
    1630:	cd b7       	in	r28, 0x3d	; 61
    1632:	de b7       	in	r29, 0x3e	; 62
    1634:	27 97       	sbiw	r28, 0x07	; 7
    1636:	0f b6       	in	r0, 0x3f	; 63
    1638:	f8 94       	cli
    163a:	de bf       	out	0x3e, r29	; 62
    163c:	0f be       	out	0x3f, r0	; 63
    163e:	cd bf       	out	0x3d, r28	; 61
    1640:	9c 83       	std	Y+4, r25	; 0x04
    1642:	8b 83       	std	Y+3, r24	; 0x03
    1644:	6d 83       	std	Y+5, r22	; 0x05
    1646:	4e 83       	std	Y+6, r20	; 0x06
    1648:	2f 83       	std	Y+7, r18	; 0x07

	u8 Local_u8Address = 0;
    164a:	1a 82       	std	Y+2, r1	; 0x02

	Local_u8Address = 8* Copy_u8PatternNumber; /*Generate the wanted location*/
    164c:	8d 81       	ldd	r24, Y+5	; 0x05
    164e:	88 2f       	mov	r24, r24
    1650:	90 e0       	ldi	r25, 0x00	; 0
    1652:	88 0f       	add	r24, r24
    1654:	99 1f       	adc	r25, r25
    1656:	88 0f       	add	r24, r24
    1658:	99 1f       	adc	r25, r25
    165a:	88 0f       	add	r24, r24
    165c:	99 1f       	adc	r25, r25
    165e:	8a 83       	std	Y+2, r24	; 0x02

	CLCD_VidSendCommand(64+Local_u8Address); /*Access the wanted location*/
    1660:	8a 81       	ldd	r24, Y+2	; 0x02
    1662:	80 5c       	subi	r24, 0xC0	; 192
    1664:	0e 94 2d 09 	call	0x125a	; 0x125a <CLCD_VidSendCommand>

	for (u8 i = 0 ; i<8;i++){
    1668:	19 82       	std	Y+1, r1	; 0x01
    166a:	0e c0       	rjmp	.+28     	; 0x1688 <CLCD_VidWriteSpecialChar+0x5c>
		ClCD_VidSendData(Copy_Pu8Pattern[i]);  /*store data in the location*/
    166c:	89 81       	ldd	r24, Y+1	; 0x01
    166e:	28 2f       	mov	r18, r24
    1670:	30 e0       	ldi	r19, 0x00	; 0
    1672:	8b 81       	ldd	r24, Y+3	; 0x03
    1674:	9c 81       	ldd	r25, Y+4	; 0x04
    1676:	fc 01       	movw	r30, r24
    1678:	e2 0f       	add	r30, r18
    167a:	f3 1f       	adc	r31, r19
    167c:	80 81       	ld	r24, Z
    167e:	0e 94 cb 09 	call	0x1396	; 0x1396 <ClCD_VidSendData>

	Local_u8Address = 8* Copy_u8PatternNumber; /*Generate the wanted location*/

	CLCD_VidSendCommand(64+Local_u8Address); /*Access the wanted location*/

	for (u8 i = 0 ; i<8;i++){
    1682:	89 81       	ldd	r24, Y+1	; 0x01
    1684:	8f 5f       	subi	r24, 0xFF	; 255
    1686:	89 83       	std	Y+1, r24	; 0x01
    1688:	89 81       	ldd	r24, Y+1	; 0x01
    168a:	88 30       	cpi	r24, 0x08	; 8
    168c:	78 f3       	brcs	.-34     	; 0x166c <CLCD_VidWriteSpecialChar+0x40>
		ClCD_VidSendData(Copy_Pu8Pattern[i]);  /*store data in the location*/
	}
	CLCD_VidGotoXY(Copy_u8XPos,Copy_u8YPos);  /*GO TO RAM*/
    168e:	8e 81       	ldd	r24, Y+6	; 0x06
    1690:	6f 81       	ldd	r22, Y+7	; 0x07
    1692:	0e 94 f7 0a 	call	0x15ee	; 0x15ee <CLCD_VidGotoXY>
	ClCD_VidSendData(Copy_u8PatternNumber); /*Go to first address in CGRAM, Display output sequentially*/
    1696:	8d 81       	ldd	r24, Y+5	; 0x05
    1698:	0e 94 cb 09 	call	0x1396	; 0x1396 <ClCD_VidSendData>
}
    169c:	27 96       	adiw	r28, 0x07	; 7
    169e:	0f b6       	in	r0, 0x3f	; 63
    16a0:	f8 94       	cli
    16a2:	de bf       	out	0x3e, r29	; 62
    16a4:	0f be       	out	0x3f, r0	; 63
    16a6:	cd bf       	out	0x3d, r28	; 61
    16a8:	cf 91       	pop	r28
    16aa:	df 91       	pop	r29
    16ac:	08 95       	ret

000016ae <CLCD_VidSendString>:

void CLCD_VidSendString(u8 * Copy_Pu8Str){
    16ae:	df 93       	push	r29
    16b0:	cf 93       	push	r28
    16b2:	00 d0       	rcall	.+0      	; 0x16b4 <CLCD_VidSendString+0x6>
    16b4:	0f 92       	push	r0
    16b6:	cd b7       	in	r28, 0x3d	; 61
    16b8:	de b7       	in	r29, 0x3e	; 62
    16ba:	9b 83       	std	Y+3, r25	; 0x03
    16bc:	8a 83       	std	Y+2, r24	; 0x02
	u8 i = 0;
    16be:	19 82       	std	Y+1, r1	; 0x01
    16c0:	0e c0       	rjmp	.+28     	; 0x16de <CLCD_VidSendString+0x30>
	while(Copy_Pu8Str[i] != '\0'){

		ClCD_VidSendData(Copy_Pu8Str[i]);
    16c2:	89 81       	ldd	r24, Y+1	; 0x01
    16c4:	28 2f       	mov	r18, r24
    16c6:	30 e0       	ldi	r19, 0x00	; 0
    16c8:	8a 81       	ldd	r24, Y+2	; 0x02
    16ca:	9b 81       	ldd	r25, Y+3	; 0x03
    16cc:	fc 01       	movw	r30, r24
    16ce:	e2 0f       	add	r30, r18
    16d0:	f3 1f       	adc	r31, r19
    16d2:	80 81       	ld	r24, Z
    16d4:	0e 94 cb 09 	call	0x1396	; 0x1396 <ClCD_VidSendData>
		i++;
    16d8:	89 81       	ldd	r24, Y+1	; 0x01
    16da:	8f 5f       	subi	r24, 0xFF	; 255
    16dc:	89 83       	std	Y+1, r24	; 0x01
	ClCD_VidSendData(Copy_u8PatternNumber); /*Go to first address in CGRAM, Display output sequentially*/
}

void CLCD_VidSendString(u8 * Copy_Pu8Str){
	u8 i = 0;
	while(Copy_Pu8Str[i] != '\0'){
    16de:	89 81       	ldd	r24, Y+1	; 0x01
    16e0:	28 2f       	mov	r18, r24
    16e2:	30 e0       	ldi	r19, 0x00	; 0
    16e4:	8a 81       	ldd	r24, Y+2	; 0x02
    16e6:	9b 81       	ldd	r25, Y+3	; 0x03
    16e8:	fc 01       	movw	r30, r24
    16ea:	e2 0f       	add	r30, r18
    16ec:	f3 1f       	adc	r31, r19
    16ee:	80 81       	ld	r24, Z
    16f0:	88 23       	and	r24, r24
    16f2:	39 f7       	brne	.-50     	; 0x16c2 <CLCD_VidSendString+0x14>

		ClCD_VidSendData(Copy_Pu8Str[i]);
		i++;
	}
}
    16f4:	0f 90       	pop	r0
    16f6:	0f 90       	pop	r0
    16f8:	0f 90       	pop	r0
    16fa:	cf 91       	pop	r28
    16fc:	df 91       	pop	r29
    16fe:	08 95       	ret

00001700 <CLCD_VidLcdClear>:
void CLCD_VidLcdClear(void){
    1700:	df 93       	push	r29
    1702:	cf 93       	push	r28
    1704:	cd b7       	in	r28, 0x3d	; 61
    1706:	de b7       	in	r29, 0x3e	; 62
	CLCD_VidSendCommand(1);
    1708:	81 e0       	ldi	r24, 0x01	; 1
    170a:	0e 94 2d 09 	call	0x125a	; 0x125a <CLCD_VidSendCommand>
}
    170e:	cf 91       	pop	r28
    1710:	df 91       	pop	r29
    1712:	08 95       	ret

00001714 <CLCD_VidSendNumber>:
void CLCD_VidSendNumber(u16 CLCD_u16Number,u8 * CLCD_u8PCharArr){
    1714:	df 93       	push	r29
    1716:	cf 93       	push	r28
    1718:	00 d0       	rcall	.+0      	; 0x171a <CLCD_VidSendNumber+0x6>
    171a:	00 d0       	rcall	.+0      	; 0x171c <CLCD_VidSendNumber+0x8>
    171c:	cd b7       	in	r28, 0x3d	; 61
    171e:	de b7       	in	r29, 0x3e	; 62
    1720:	9a 83       	std	Y+2, r25	; 0x02
    1722:	89 83       	std	Y+1, r24	; 0x01
    1724:	7c 83       	std	Y+4, r23	; 0x04
    1726:	6b 83       	std	Y+3, r22	; 0x03

	sprintf(CLCD_u8PCharArr,CLCD_u16Number);
    1728:	29 81       	ldd	r18, Y+1	; 0x01
    172a:	3a 81       	ldd	r19, Y+2	; 0x02
    172c:	00 d0       	rcall	.+0      	; 0x172e <CLCD_VidSendNumber+0x1a>
    172e:	00 d0       	rcall	.+0      	; 0x1730 <CLCD_VidSendNumber+0x1c>
    1730:	ed b7       	in	r30, 0x3d	; 61
    1732:	fe b7       	in	r31, 0x3e	; 62
    1734:	31 96       	adiw	r30, 0x01	; 1
    1736:	8b 81       	ldd	r24, Y+3	; 0x03
    1738:	9c 81       	ldd	r25, Y+4	; 0x04
    173a:	91 83       	std	Z+1, r25	; 0x01
    173c:	80 83       	st	Z, r24
    173e:	33 83       	std	Z+3, r19	; 0x03
    1740:	22 83       	std	Z+2, r18	; 0x02
    1742:	0e 94 05 0f 	call	0x1e0a	; 0x1e0a <sprintf>
    1746:	0f 90       	pop	r0
    1748:	0f 90       	pop	r0
    174a:	0f 90       	pop	r0
    174c:	0f 90       	pop	r0
	CLCD_VidSendString(CLCD_u8PCharArr);
    174e:	8b 81       	ldd	r24, Y+3	; 0x03
    1750:	9c 81       	ldd	r25, Y+4	; 0x04
    1752:	0e 94 57 0b 	call	0x16ae	; 0x16ae <CLCD_VidSendString>

}
    1756:	0f 90       	pop	r0
    1758:	0f 90       	pop	r0
    175a:	0f 90       	pop	r0
    175c:	0f 90       	pop	r0
    175e:	cf 91       	pop	r28
    1760:	df 91       	pop	r29
    1762:	08 95       	ret

00001764 <KPD_u8GetPressedKey>:
#include "../LCD/CLCD_Interface.h"
/*KPD Own LIB*/
#include "Keypad_Interface.h"
#include "Keypad_config.h"

u8 KPD_u8GetPressedKey(void){
    1764:	df 93       	push	r29
    1766:	cf 93       	push	r28
    1768:	cd b7       	in	r28, 0x3d	; 61
    176a:	de b7       	in	r29, 0x3e	; 62
    176c:	a2 97       	sbiw	r28, 0x22	; 34
    176e:	0f b6       	in	r0, 0x3f	; 63
    1770:	f8 94       	cli
    1772:	de bf       	out	0x3e, r29	; 62
    1774:	0f be       	out	0x3f, r0	; 63
    1776:	cd bf       	out	0x3d, r28	; 61
	u8 Local_KeyPressed =NOT_PRESSED; /*abitrary value*/
    1778:	85 e6       	ldi	r24, 0x65	; 101
    177a:	8b 83       	std	Y+3, r24	; 0x03
	u8 Local_u8KPDArr[4][4] = KPD_U8ARR ;
    177c:	ce 01       	movw	r24, r28
    177e:	04 96       	adiw	r24, 0x04	; 4
    1780:	9f 8f       	std	Y+31, r25	; 0x1f
    1782:	8e 8f       	std	Y+30, r24	; 0x1e
    1784:	e8 e6       	ldi	r30, 0x68	; 104
    1786:	f0 e0       	ldi	r31, 0x00	; 0
    1788:	f9 a3       	std	Y+33, r31	; 0x21
    178a:	e8 a3       	std	Y+32, r30	; 0x20
    178c:	f0 e1       	ldi	r31, 0x10	; 16
    178e:	fa a3       	std	Y+34, r31	; 0x22
    1790:	e8 a1       	ldd	r30, Y+32	; 0x20
    1792:	f9 a1       	ldd	r31, Y+33	; 0x21
    1794:	00 80       	ld	r0, Z
    1796:	88 a1       	ldd	r24, Y+32	; 0x20
    1798:	99 a1       	ldd	r25, Y+33	; 0x21
    179a:	01 96       	adiw	r24, 0x01	; 1
    179c:	99 a3       	std	Y+33, r25	; 0x21
    179e:	88 a3       	std	Y+32, r24	; 0x20
    17a0:	ee 8d       	ldd	r30, Y+30	; 0x1e
    17a2:	ff 8d       	ldd	r31, Y+31	; 0x1f
    17a4:	00 82       	st	Z, r0
    17a6:	8e 8d       	ldd	r24, Y+30	; 0x1e
    17a8:	9f 8d       	ldd	r25, Y+31	; 0x1f
    17aa:	01 96       	adiw	r24, 0x01	; 1
    17ac:	9f 8f       	std	Y+31, r25	; 0x1f
    17ae:	8e 8f       	std	Y+30, r24	; 0x1e
    17b0:	9a a1       	ldd	r25, Y+34	; 0x22
    17b2:	91 50       	subi	r25, 0x01	; 1
    17b4:	9a a3       	std	Y+34, r25	; 0x22
    17b6:	ea a1       	ldd	r30, Y+34	; 0x22
    17b8:	ee 23       	and	r30, r30
    17ba:	51 f7       	brne	.-44     	; 0x1790 <KPD_u8GetPressedKey+0x2c>
	u8 Local_u8ColumnIdx = 0;
    17bc:	1a 82       	std	Y+2, r1	; 0x02
	u8 Local_u8RowIdx	 = 0;
    17be:	19 82       	std	Y+1, r1	; 0x01
	u8 Local_u8Status 	 = 1;
    17c0:	81 e0       	ldi	r24, 0x01	; 1
    17c2:	8c 8b       	std	Y+20, r24	; 0x14
	u8 Local_u8ColumnnArr[] = {KPD_u8COLUMN_PIN0,KPD_u8COLUMN_PIN1,
							KPD_u8COLUMN_PIN2,KPD_u8COLUMN_PIN3};
    17c4:	1d 8a       	std	Y+21, r1	; 0x15
    17c6:	81 e0       	ldi	r24, 0x01	; 1
    17c8:	8e 8b       	std	Y+22, r24	; 0x16
    17ca:	82 e0       	ldi	r24, 0x02	; 2
    17cc:	8f 8b       	std	Y+23, r24	; 0x17
    17ce:	83 e0       	ldi	r24, 0x03	; 3
    17d0:	88 8f       	std	Y+24, r24	; 0x18
	u8 Local_u8RowArr[]	= {KPD_u8ROW_PIN0,KPD_u8ROW_PIN1,
							KPD_u8ROW_PIN2,KPD_u8ROW_PIN3};
    17d2:	84 e0       	ldi	r24, 0x04	; 4
    17d4:	89 8f       	std	Y+25, r24	; 0x19
    17d6:	85 e0       	ldi	r24, 0x05	; 5
    17d8:	8a 8f       	std	Y+26, r24	; 0x1a
    17da:	86 e0       	ldi	r24, 0x06	; 6
    17dc:	8b 8f       	std	Y+27, r24	; 0x1b
    17de:	87 e0       	ldi	r24, 0x07	; 7
    17e0:	8c 8f       	std	Y+28, r24	; 0x1c

	/*Loop through Columns*/
	for(Local_u8ColumnIdx=0 ; Local_u8ColumnIdx<4;Local_u8ColumnIdx++){
    17e2:	1a 82       	std	Y+2, r1	; 0x02
    17e4:	76 c0       	rjmp	.+236    	; 0x18d2 <KPD_u8GetPressedKey+0x16e>
		/*Set each Column with 0 one time per loop*/
		DIO_VidSetPinValue(KPD_u8PORT,Local_u8ColumnnArr[Local_u8ColumnIdx],low);
    17e6:	8a 81       	ldd	r24, Y+2	; 0x02
    17e8:	28 2f       	mov	r18, r24
    17ea:	30 e0       	ldi	r19, 0x00	; 0
    17ec:	ce 01       	movw	r24, r28
    17ee:	45 96       	adiw	r24, 0x15	; 21
    17f0:	fc 01       	movw	r30, r24
    17f2:	e2 0f       	add	r30, r18
    17f4:	f3 1f       	adc	r31, r19
    17f6:	90 81       	ld	r25, Z
    17f8:	85 e0       	ldi	r24, 0x05	; 5
    17fa:	69 2f       	mov	r22, r25
    17fc:	40 e0       	ldi	r20, 0x00	; 0
    17fe:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_VidSetPinValue>
		/*check each row according to column statue*/
		for (Local_u8RowIdx=0; Local_u8RowIdx<4;Local_u8RowIdx++){
    1802:	19 82       	std	Y+1, r1	; 0x01
    1804:	51 c0       	rjmp	.+162    	; 0x18a8 <KPD_u8GetPressedKey+0x144>
			/*check if row value is 0*/
			DIO_VidGetPinValue(KPD_u8PORT,Local_u8RowArr[Local_u8RowIdx],&Local_u8Status);
    1806:	89 81       	ldd	r24, Y+1	; 0x01
    1808:	28 2f       	mov	r18, r24
    180a:	30 e0       	ldi	r19, 0x00	; 0
    180c:	ce 01       	movw	r24, r28
    180e:	49 96       	adiw	r24, 0x19	; 25
    1810:	fc 01       	movw	r30, r24
    1812:	e2 0f       	add	r30, r18
    1814:	f3 1f       	adc	r31, r19
    1816:	90 81       	ld	r25, Z
    1818:	9e 01       	movw	r18, r28
    181a:	2c 5e       	subi	r18, 0xEC	; 236
    181c:	3f 4f       	sbci	r19, 0xFF	; 255
    181e:	85 e0       	ldi	r24, 0x05	; 5
    1820:	69 2f       	mov	r22, r25
    1822:	a9 01       	movw	r20, r18
    1824:	0e 94 9f 07 	call	0xf3e	; 0xf3e <DIO_VidGetPinValue>
			/*check if key is pressed*/
			if(Local_u8Status==low){
    1828:	8c 89       	ldd	r24, Y+20	; 0x14
    182a:	88 23       	and	r24, r24
    182c:	d1 f5       	brne	.+116    	; 0x18a2 <KPD_u8GetPressedKey+0x13e>
				/*get number which represents column and row indices*/
				Local_KeyPressed = Local_u8KPDArr[Local_u8ColumnIdx][Local_u8RowIdx];
    182e:	8a 81       	ldd	r24, Y+2	; 0x02
    1830:	28 2f       	mov	r18, r24
    1832:	30 e0       	ldi	r19, 0x00	; 0
    1834:	89 81       	ldd	r24, Y+1	; 0x01
    1836:	48 2f       	mov	r20, r24
    1838:	50 e0       	ldi	r21, 0x00	; 0
    183a:	22 0f       	add	r18, r18
    183c:	33 1f       	adc	r19, r19
    183e:	22 0f       	add	r18, r18
    1840:	33 1f       	adc	r19, r19
    1842:	ce 01       	movw	r24, r28
    1844:	01 96       	adiw	r24, 0x01	; 1
    1846:	82 0f       	add	r24, r18
    1848:	93 1f       	adc	r25, r19
    184a:	84 0f       	add	r24, r20
    184c:	95 1f       	adc	r25, r21
    184e:	fc 01       	movw	r30, r24
    1850:	33 96       	adiw	r30, 0x03	; 3
    1852:	80 81       	ld	r24, Z
    1854:	8b 83       	std	Y+3, r24	; 0x03
    1856:	11 c0       	rjmp	.+34     	; 0x187a <KPD_u8GetPressedKey+0x116>
				/*check if someone press hold on the key, stay in while loop until key is unpressed */
				while(Local_u8Status==low){
					DIO_VidGetPinValue(KPD_u8PORT,Local_u8RowArr[Local_u8RowIdx],&Local_u8Status);
    1858:	89 81       	ldd	r24, Y+1	; 0x01
    185a:	28 2f       	mov	r18, r24
    185c:	30 e0       	ldi	r19, 0x00	; 0
    185e:	ce 01       	movw	r24, r28
    1860:	49 96       	adiw	r24, 0x19	; 25
    1862:	fc 01       	movw	r30, r24
    1864:	e2 0f       	add	r30, r18
    1866:	f3 1f       	adc	r31, r19
    1868:	90 81       	ld	r25, Z
    186a:	9e 01       	movw	r18, r28
    186c:	2c 5e       	subi	r18, 0xEC	; 236
    186e:	3f 4f       	sbci	r19, 0xFF	; 255
    1870:	85 e0       	ldi	r24, 0x05	; 5
    1872:	69 2f       	mov	r22, r25
    1874:	a9 01       	movw	r20, r18
    1876:	0e 94 9f 07 	call	0xf3e	; 0xf3e <DIO_VidGetPinValue>
			/*check if key is pressed*/
			if(Local_u8Status==low){
				/*get number which represents column and row indices*/
				Local_KeyPressed = Local_u8KPDArr[Local_u8ColumnIdx][Local_u8RowIdx];
				/*check if someone press hold on the key, stay in while loop until key is unpressed */
				while(Local_u8Status==low){
    187a:	8c 89       	ldd	r24, Y+20	; 0x14
    187c:	88 23       	and	r24, r24
    187e:	61 f3       	breq	.-40     	; 0x1858 <KPD_u8GetPressedKey+0xf4>
					DIO_VidGetPinValue(KPD_u8PORT,Local_u8RowArr[Local_u8RowIdx],&Local_u8Status);
				}
				/*before returning keypad value and exiting the function, resest column value to high*/
				DIO_VidSetPinValue(KPD_u8PORT,Local_u8ColumnnArr[Local_u8ColumnIdx],high);
    1880:	8a 81       	ldd	r24, Y+2	; 0x02
    1882:	28 2f       	mov	r18, r24
    1884:	30 e0       	ldi	r19, 0x00	; 0
    1886:	ce 01       	movw	r24, r28
    1888:	45 96       	adiw	r24, 0x15	; 21
    188a:	fc 01       	movw	r30, r24
    188c:	e2 0f       	add	r30, r18
    188e:	f3 1f       	adc	r31, r19
    1890:	90 81       	ld	r25, Z
    1892:	85 e0       	ldi	r24, 0x05	; 5
    1894:	69 2f       	mov	r22, r25
    1896:	41 e0       	ldi	r20, 0x01	; 1
    1898:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_VidSetPinValue>
				return Local_KeyPressed;
    189c:	fb 81       	ldd	r31, Y+3	; 0x03
    189e:	fd 8f       	std	Y+29, r31	; 0x1d
    18a0:	1e c0       	rjmp	.+60     	; 0x18de <KPD_u8GetPressedKey+0x17a>
	/*Loop through Columns*/
	for(Local_u8ColumnIdx=0 ; Local_u8ColumnIdx<4;Local_u8ColumnIdx++){
		/*Set each Column with 0 one time per loop*/
		DIO_VidSetPinValue(KPD_u8PORT,Local_u8ColumnnArr[Local_u8ColumnIdx],low);
		/*check each row according to column statue*/
		for (Local_u8RowIdx=0; Local_u8RowIdx<4;Local_u8RowIdx++){
    18a2:	89 81       	ldd	r24, Y+1	; 0x01
    18a4:	8f 5f       	subi	r24, 0xFF	; 255
    18a6:	89 83       	std	Y+1, r24	; 0x01
    18a8:	89 81       	ldd	r24, Y+1	; 0x01
    18aa:	84 30       	cpi	r24, 0x04	; 4
    18ac:	08 f4       	brcc	.+2      	; 0x18b0 <KPD_u8GetPressedKey+0x14c>
    18ae:	ab cf       	rjmp	.-170    	; 0x1806 <KPD_u8GetPressedKey+0xa2>
				DIO_VidSetPinValue(KPD_u8PORT,Local_u8ColumnnArr[Local_u8ColumnIdx],high);
				return Local_KeyPressed;
			}
		}
		/*if key is not found, reset column value before exiting the function*/
		DIO_VidSetPinValue(KPD_u8PORT,Local_u8ColumnnArr[Local_u8ColumnIdx],high);
    18b0:	8a 81       	ldd	r24, Y+2	; 0x02
    18b2:	28 2f       	mov	r18, r24
    18b4:	30 e0       	ldi	r19, 0x00	; 0
    18b6:	ce 01       	movw	r24, r28
    18b8:	45 96       	adiw	r24, 0x15	; 21
    18ba:	fc 01       	movw	r30, r24
    18bc:	e2 0f       	add	r30, r18
    18be:	f3 1f       	adc	r31, r19
    18c0:	90 81       	ld	r25, Z
    18c2:	85 e0       	ldi	r24, 0x05	; 5
    18c4:	69 2f       	mov	r22, r25
    18c6:	41 e0       	ldi	r20, 0x01	; 1
    18c8:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_VidSetPinValue>
							KPD_u8COLUMN_PIN2,KPD_u8COLUMN_PIN3};
	u8 Local_u8RowArr[]	= {KPD_u8ROW_PIN0,KPD_u8ROW_PIN1,
							KPD_u8ROW_PIN2,KPD_u8ROW_PIN3};

	/*Loop through Columns*/
	for(Local_u8ColumnIdx=0 ; Local_u8ColumnIdx<4;Local_u8ColumnIdx++){
    18cc:	8a 81       	ldd	r24, Y+2	; 0x02
    18ce:	8f 5f       	subi	r24, 0xFF	; 255
    18d0:	8a 83       	std	Y+2, r24	; 0x02
    18d2:	8a 81       	ldd	r24, Y+2	; 0x02
    18d4:	84 30       	cpi	r24, 0x04	; 4
    18d6:	08 f4       	brcc	.+2      	; 0x18da <KPD_u8GetPressedKey+0x176>
    18d8:	86 cf       	rjmp	.-244    	; 0x17e6 <KPD_u8GetPressedKey+0x82>
		}
		/*if key is not found, reset column value before exiting the function*/
		DIO_VidSetPinValue(KPD_u8PORT,Local_u8ColumnnArr[Local_u8ColumnIdx],high);

	}
	return Local_KeyPressed;
    18da:	8b 81       	ldd	r24, Y+3	; 0x03
    18dc:	8d 8f       	std	Y+29, r24	; 0x1d
    18de:	8d 8d       	ldd	r24, Y+29	; 0x1d
}
    18e0:	a2 96       	adiw	r28, 0x22	; 34
    18e2:	0f b6       	in	r0, 0x3f	; 63
    18e4:	f8 94       	cli
    18e6:	de bf       	out	0x3e, r29	; 62
    18e8:	0f be       	out	0x3f, r0	; 63
    18ea:	cd bf       	out	0x3d, r28	; 61
    18ec:	cf 91       	pop	r28
    18ee:	df 91       	pop	r29
    18f0:	08 95       	ret

000018f2 <KPD_u8ReturnOperationIndx>:

u8 KPD_u8ReturnOperationIndx(u8 * KPD_Pu8CharArr){
    18f2:	df 93       	push	r29
    18f4:	cf 93       	push	r28
    18f6:	00 d0       	rcall	.+0      	; 0x18f8 <KPD_u8ReturnOperationIndx+0x6>
    18f8:	0f 92       	push	r0
    18fa:	cd b7       	in	r28, 0x3d	; 61
    18fc:	de b7       	in	r29, 0x3e	; 62
    18fe:	9b 83       	std	Y+3, r25	; 0x03
    1900:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8Indx = 0 ;
    1902:	19 82       	std	Y+1, r1	; 0x01
    1904:	03 c0       	rjmp	.+6      	; 0x190c <KPD_u8ReturnOperationIndx+0x1a>
	while(KPD_Pu8CharArr[Local_u8Indx] != ('+'||'-'||'*'||'/')){
		Local_u8Indx++;
    1906:	89 81       	ldd	r24, Y+1	; 0x01
    1908:	8f 5f       	subi	r24, 0xFF	; 255
    190a:	89 83       	std	Y+1, r24	; 0x01
	return Local_KeyPressed;
}

u8 KPD_u8ReturnOperationIndx(u8 * KPD_Pu8CharArr){
	u8 Local_u8Indx = 0 ;
	while(KPD_Pu8CharArr[Local_u8Indx] != ('+'||'-'||'*'||'/')){
    190c:	89 81       	ldd	r24, Y+1	; 0x01
    190e:	28 2f       	mov	r18, r24
    1910:	30 e0       	ldi	r19, 0x00	; 0
    1912:	8a 81       	ldd	r24, Y+2	; 0x02
    1914:	9b 81       	ldd	r25, Y+3	; 0x03
    1916:	fc 01       	movw	r30, r24
    1918:	e2 0f       	add	r30, r18
    191a:	f3 1f       	adc	r31, r19
    191c:	80 81       	ld	r24, Z
    191e:	81 30       	cpi	r24, 0x01	; 1
    1920:	91 f7       	brne	.-28     	; 0x1906 <KPD_u8ReturnOperationIndx+0x14>
		Local_u8Indx++;
	}
	return Local_u8Indx;
    1922:	89 81       	ldd	r24, Y+1	; 0x01
}
    1924:	0f 90       	pop	r0
    1926:	0f 90       	pop	r0
    1928:	0f 90       	pop	r0
    192a:	cf 91       	pop	r28
    192c:	df 91       	pop	r29
    192e:	08 95       	ret

00001930 <KPD_u8ReturnNOfElements>:
u8 KPD_u8ReturnNOfElements(u8 * KPD_Pu8CharArr){
    1930:	df 93       	push	r29
    1932:	cf 93       	push	r28
    1934:	00 d0       	rcall	.+0      	; 0x1936 <KPD_u8ReturnNOfElements+0x6>
    1936:	0f 92       	push	r0
    1938:	cd b7       	in	r28, 0x3d	; 61
    193a:	de b7       	in	r29, 0x3e	; 62
    193c:	9b 83       	std	Y+3, r25	; 0x03
    193e:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8Elements = 0 ;
    1940:	19 82       	std	Y+1, r1	; 0x01
    1942:	03 c0       	rjmp	.+6      	; 0x194a <KPD_u8ReturnNOfElements+0x1a>
	while(KPD_Pu8CharArr[Local_u8Elements] != '\0'){
		Local_u8Elements++;
    1944:	89 81       	ldd	r24, Y+1	; 0x01
    1946:	8f 5f       	subi	r24, 0xFF	; 255
    1948:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8Indx;
}
u8 KPD_u8ReturnNOfElements(u8 * KPD_Pu8CharArr){
	u8 Local_u8Elements = 0 ;
	while(KPD_Pu8CharArr[Local_u8Elements] != '\0'){
    194a:	89 81       	ldd	r24, Y+1	; 0x01
    194c:	28 2f       	mov	r18, r24
    194e:	30 e0       	ldi	r19, 0x00	; 0
    1950:	8a 81       	ldd	r24, Y+2	; 0x02
    1952:	9b 81       	ldd	r25, Y+3	; 0x03
    1954:	fc 01       	movw	r30, r24
    1956:	e2 0f       	add	r30, r18
    1958:	f3 1f       	adc	r31, r19
    195a:	80 81       	ld	r24, Z
    195c:	88 23       	and	r24, r24
    195e:	91 f7       	brne	.-28     	; 0x1944 <KPD_u8ReturnNOfElements+0x14>
		Local_u8Elements++;
	}
	return Local_u8Elements;
    1960:	89 81       	ldd	r24, Y+1	; 0x01
}
    1962:	0f 90       	pop	r0
    1964:	0f 90       	pop	r0
    1966:	0f 90       	pop	r0
    1968:	cf 91       	pop	r28
    196a:	df 91       	pop	r29
    196c:	08 95       	ret

0000196e <KPD_u8RetrunOperationType>:
u8 KPD_u8RetrunOperationType(u8 * KPD_Pu8CharArr){
    196e:	df 93       	push	r29
    1970:	cf 93       	push	r28
    1972:	00 d0       	rcall	.+0      	; 0x1974 <KPD_u8RetrunOperationType+0x6>
    1974:	00 d0       	rcall	.+0      	; 0x1976 <KPD_u8RetrunOperationType+0x8>
    1976:	cd b7       	in	r28, 0x3d	; 61
    1978:	de b7       	in	r29, 0x3e	; 62
    197a:	9b 83       	std	Y+3, r25	; 0x03
    197c:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8OP = 0 ;
    197e:	19 82       	std	Y+1, r1	; 0x01
    1980:	19 c0       	rjmp	.+50     	; 0x19b4 <KPD_u8RetrunOperationType+0x46>
		while(KPD_Pu8CharArr[Local_u8OP] != '\0'){
			if(KPD_Pu8CharArr[Local_u8OP] == ('+'||'-'||'*'||'/')){
    1982:	89 81       	ldd	r24, Y+1	; 0x01
    1984:	28 2f       	mov	r18, r24
    1986:	30 e0       	ldi	r19, 0x00	; 0
    1988:	8a 81       	ldd	r24, Y+2	; 0x02
    198a:	9b 81       	ldd	r25, Y+3	; 0x03
    198c:	fc 01       	movw	r30, r24
    198e:	e2 0f       	add	r30, r18
    1990:	f3 1f       	adc	r31, r19
    1992:	80 81       	ld	r24, Z
    1994:	81 30       	cpi	r24, 0x01	; 1
    1996:	59 f4       	brne	.+22     	; 0x19ae <KPD_u8RetrunOperationType+0x40>
				return KPD_Pu8CharArr[Local_u8OP];
    1998:	89 81       	ldd	r24, Y+1	; 0x01
    199a:	28 2f       	mov	r18, r24
    199c:	30 e0       	ldi	r19, 0x00	; 0
    199e:	8a 81       	ldd	r24, Y+2	; 0x02
    19a0:	9b 81       	ldd	r25, Y+3	; 0x03
    19a2:	fc 01       	movw	r30, r24
    19a4:	e2 0f       	add	r30, r18
    19a6:	f3 1f       	adc	r31, r19
    19a8:	80 81       	ld	r24, Z
    19aa:	8c 83       	std	Y+4, r24	; 0x04
    19ac:	0f c0       	rjmp	.+30     	; 0x19cc <KPD_u8RetrunOperationType+0x5e>
			}
				Local_u8OP++;
    19ae:	89 81       	ldd	r24, Y+1	; 0x01
    19b0:	8f 5f       	subi	r24, 0xFF	; 255
    19b2:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8Elements;
}
u8 KPD_u8RetrunOperationType(u8 * KPD_Pu8CharArr){
	u8 Local_u8OP = 0 ;
		while(KPD_Pu8CharArr[Local_u8OP] != '\0'){
    19b4:	89 81       	ldd	r24, Y+1	; 0x01
    19b6:	28 2f       	mov	r18, r24
    19b8:	30 e0       	ldi	r19, 0x00	; 0
    19ba:	8a 81       	ldd	r24, Y+2	; 0x02
    19bc:	9b 81       	ldd	r25, Y+3	; 0x03
    19be:	fc 01       	movw	r30, r24
    19c0:	e2 0f       	add	r30, r18
    19c2:	f3 1f       	adc	r31, r19
    19c4:	80 81       	ld	r24, Z
    19c6:	88 23       	and	r24, r24
    19c8:	e1 f6       	brne	.-72     	; 0x1982 <KPD_u8RetrunOperationType+0x14>
			if(KPD_Pu8CharArr[Local_u8OP] == ('+'||'-'||'*'||'/')){
				return KPD_Pu8CharArr[Local_u8OP];
			}
				Local_u8OP++;
		}
		return 0 ;
    19ca:	1c 82       	std	Y+4, r1	; 0x04
    19cc:	8c 81       	ldd	r24, Y+4	; 0x04
}
    19ce:	0f 90       	pop	r0
    19d0:	0f 90       	pop	r0
    19d2:	0f 90       	pop	r0
    19d4:	0f 90       	pop	r0
    19d6:	cf 91       	pop	r28
    19d8:	df 91       	pop	r29
    19da:	08 95       	ret

000019dc <KPD_u16KPDCalc>:


u16 KPD_u16KPDCalc (u8* KPD_Pu8CharArr){
    19dc:	df 93       	push	r29
    19de:	cf 93       	push	r28
    19e0:	cd b7       	in	r28, 0x3d	; 61
    19e2:	de b7       	in	r29, 0x3e	; 62
    19e4:	6a 97       	sbiw	r28, 0x1a	; 26
    19e6:	0f b6       	in	r0, 0x3f	; 63
    19e8:	f8 94       	cli
    19ea:	de bf       	out	0x3e, r29	; 62
    19ec:	0f be       	out	0x3f, r0	; 63
    19ee:	cd bf       	out	0x3d, r28	; 61
    19f0:	98 8b       	std	Y+16, r25	; 0x10
    19f2:	8f 87       	std	Y+15, r24	; 0x0f
			break;
	}
	ClCD_VidSendData(Local_u16Res+48);
	return Local_u16Res;

}
    19f4:	2d b7       	in	r18, 0x3d	; 61
    19f6:	3e b7       	in	r19, 0x3e	; 62
    19f8:	3a 8f       	std	Y+26, r19	; 0x1a
    19fa:	29 8f       	std	Y+25, r18	; 0x19
		}
		return 0 ;
}


u16 KPD_u16KPDCalc (u8* KPD_Pu8CharArr){
    19fc:	8d b7       	in	r24, 0x3d	; 61
    19fe:	9e b7       	in	r25, 0x3e	; 62
    1a00:	9a 8b       	std	Y+18, r25	; 0x12
    1a02:	89 8b       	std	Y+17, r24	; 0x11
	u8 Local_u8LeftOpSum = 0;
    1a04:	1a 86       	std	Y+10, r1	; 0x0a
	u8 Local_u8RightOpSum = 0;
    1a06:	19 86       	std	Y+9, r1	; 0x09
	u8 Local_u16Res =0;
    1a08:	18 86       	std	Y+8, r1	; 0x08
	u8 Local_u8KPDNum1 = KPD_u8GetPressedKey();
    1a0a:	0e 94 b2 0b 	call	0x1764	; 0x1764 <KPD_u8GetPressedKey>
    1a0e:	8f 83       	std	Y+7, r24	; 0x07
	/*storing inputs into a char array and num array*/
	u8 i = 0;
    1a10:	1e 82       	std	Y+6, r1	; 0x06
    1a12:	13 c0       	rjmp	.+38     	; 0x1a3a <KPD_u16KPDCalc+0x5e>
	while(Local_u8KPDNum1 != '='){
		if(Local_u8KPDNum1 != NOT_PRESSED){
    1a14:	8f 81       	ldd	r24, Y+7	; 0x07
    1a16:	85 36       	cpi	r24, 0x65	; 101
    1a18:	81 f0       	breq	.+32     	; 0x1a3a <KPD_u16KPDCalc+0x5e>
			ClCD_VidSendData(Local_u8KPDNum1);
    1a1a:	8f 81       	ldd	r24, Y+7	; 0x07
    1a1c:	0e 94 cb 09 	call	0x1396	; 0x1396 <ClCD_VidSendData>
			KPD_Pu8CharArr[i]=  Local_u8KPDNum1;
    1a20:	8e 81       	ldd	r24, Y+6	; 0x06
    1a22:	28 2f       	mov	r18, r24
    1a24:	30 e0       	ldi	r19, 0x00	; 0
    1a26:	8f 85       	ldd	r24, Y+15	; 0x0f
    1a28:	98 89       	ldd	r25, Y+16	; 0x10
    1a2a:	fc 01       	movw	r30, r24
    1a2c:	e2 0f       	add	r30, r18
    1a2e:	f3 1f       	adc	r31, r19
    1a30:	8f 81       	ldd	r24, Y+7	; 0x07
    1a32:	80 83       	st	Z, r24
			i++;
    1a34:	8e 81       	ldd	r24, Y+6	; 0x06
    1a36:	8f 5f       	subi	r24, 0xFF	; 255
    1a38:	8e 83       	std	Y+6, r24	; 0x06
	u8 Local_u8RightOpSum = 0;
	u8 Local_u16Res =0;
	u8 Local_u8KPDNum1 = KPD_u8GetPressedKey();
	/*storing inputs into a char array and num array*/
	u8 i = 0;
	while(Local_u8KPDNum1 != '='){
    1a3a:	8f 81       	ldd	r24, Y+7	; 0x07
    1a3c:	8d 33       	cpi	r24, 0x3D	; 61
    1a3e:	51 f7       	brne	.-44     	; 0x1a14 <KPD_u16KPDCalc+0x38>
			ClCD_VidSendData(Local_u8KPDNum1);
			KPD_Pu8CharArr[i]=  Local_u8KPDNum1;
			i++;
		}
	}
	KPD_Pu8CharArr[i] = '='; /*adding the '=' sign as the last element manually*/
    1a40:	8e 81       	ldd	r24, Y+6	; 0x06
    1a42:	28 2f       	mov	r18, r24
    1a44:	30 e0       	ldi	r19, 0x00	; 0
    1a46:	8f 85       	ldd	r24, Y+15	; 0x0f
    1a48:	98 89       	ldd	r25, Y+16	; 0x10
    1a4a:	fc 01       	movw	r30, r24
    1a4c:	e2 0f       	add	r30, r18
    1a4e:	f3 1f       	adc	r31, r19
    1a50:	8d e3       	ldi	r24, 0x3D	; 61
    1a52:	80 83       	st	Z, r24
	KPD_Pu8CharArr[i+1] = '\0'; /*adding NULL terminator*/
    1a54:	8e 81       	ldd	r24, Y+6	; 0x06
    1a56:	88 2f       	mov	r24, r24
    1a58:	90 e0       	ldi	r25, 0x00	; 0
    1a5a:	9c 01       	movw	r18, r24
    1a5c:	2f 5f       	subi	r18, 0xFF	; 255
    1a5e:	3f 4f       	sbci	r19, 0xFF	; 255
    1a60:	8f 85       	ldd	r24, Y+15	; 0x0f
    1a62:	98 89       	ldd	r25, Y+16	; 0x10
    1a64:	fc 01       	movw	r30, r24
    1a66:	e2 0f       	add	r30, r18
    1a68:	f3 1f       	adc	r31, r19
    1a6a:	10 82       	st	Z, r1

	/*Calculation*/
	u8 Local_u8Elements = KPD_u8ReturnNOfElements(KPD_Pu8CharArr)-2; /*storing the no. of char array elements
    1a6c:	8f 85       	ldd	r24, Y+15	; 0x0f
    1a6e:	98 89       	ldd	r25, Y+16	; 0x10
    1a70:	0e 94 98 0c 	call	0x1930	; 0x1930 <KPD_u8ReturnNOfElements>
    1a74:	82 50       	subi	r24, 0x02	; 2
    1a76:	8d 83       	std	Y+5, r24	; 0x05
	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	except for '=' and '\0' */
	u8 Local_u8Indx 	= KPD_u8ReturnOperationIndx(KPD_Pu8CharArr); /*storing the index of the operand
    1a78:	8f 85       	ldd	r24, Y+15	; 0x0f
    1a7a:	98 89       	ldd	r25, Y+16	; 0x10
    1a7c:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <KPD_u8ReturnOperationIndx>
    1a80:	8c 83       	std	Y+4, r24	; 0x04
	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	in a u8 var*/
	u8 Local_u8LeftOperand[Local_u8Indx]; /*Array to store the left side of the operation*/
    1a82:	8c 81       	ldd	r24, Y+4	; 0x04
    1a84:	88 2f       	mov	r24, r24
    1a86:	90 e0       	ldi	r25, 0x00	; 0
    1a88:	4d b7       	in	r20, 0x3d	; 61
    1a8a:	5e b7       	in	r21, 0x3e	; 62
    1a8c:	48 1b       	sub	r20, r24
    1a8e:	59 0b       	sbc	r21, r25
    1a90:	0f b6       	in	r0, 0x3f	; 63
    1a92:	f8 94       	cli
    1a94:	5e bf       	out	0x3e, r21	; 62
    1a96:	0f be       	out	0x3f, r0	; 63
    1a98:	4d bf       	out	0x3d, r20	; 61
    1a9a:	8d b7       	in	r24, 0x3d	; 61
    1a9c:	9e b7       	in	r25, 0x3e	; 62
    1a9e:	01 96       	adiw	r24, 0x01	; 1
    1aa0:	98 8f       	std	Y+24, r25	; 0x18
    1aa2:	8f 8b       	std	Y+23, r24	; 0x17
    1aa4:	8f 89       	ldd	r24, Y+23	; 0x17
    1aa6:	98 8d       	ldd	r25, Y+24	; 0x18
    1aa8:	00 96       	adiw	r24, 0x00	; 0
    1aaa:	98 8f       	std	Y+24, r25	; 0x18
    1aac:	8f 8b       	std	Y+23, r24	; 0x17
    1aae:	2f 89       	ldd	r18, Y+23	; 0x17
    1ab0:	38 8d       	ldd	r19, Y+24	; 0x18
    1ab2:	3e 87       	std	Y+14, r19	; 0x0e
    1ab4:	2d 87       	std	Y+13, r18	; 0x0d
	u8 Local_u8RightOperand[Local_u8Elements-Local_u8Indx]; /*Array to store the right side of the operation*/
    1ab6:	8d 81       	ldd	r24, Y+5	; 0x05
    1ab8:	28 2f       	mov	r18, r24
    1aba:	30 e0       	ldi	r19, 0x00	; 0
    1abc:	8c 81       	ldd	r24, Y+4	; 0x04
    1abe:	88 2f       	mov	r24, r24
    1ac0:	90 e0       	ldi	r25, 0x00	; 0
    1ac2:	a9 01       	movw	r20, r18
    1ac4:	48 1b       	sub	r20, r24
    1ac6:	59 0b       	sbc	r21, r25
    1ac8:	ca 01       	movw	r24, r20
    1aca:	2d b7       	in	r18, 0x3d	; 61
    1acc:	3e b7       	in	r19, 0x3e	; 62
    1ace:	28 1b       	sub	r18, r24
    1ad0:	39 0b       	sbc	r19, r25
    1ad2:	0f b6       	in	r0, 0x3f	; 63
    1ad4:	f8 94       	cli
    1ad6:	3e bf       	out	0x3e, r19	; 62
    1ad8:	0f be       	out	0x3f, r0	; 63
    1ada:	2d bf       	out	0x3d, r18	; 61
    1adc:	4d b7       	in	r20, 0x3d	; 61
    1ade:	5e b7       	in	r21, 0x3e	; 62
    1ae0:	4f 5f       	subi	r20, 0xFF	; 255
    1ae2:	5f 4f       	sbci	r21, 0xFF	; 255
    1ae4:	5e 8b       	std	Y+22, r21	; 0x16
    1ae6:	4d 8b       	std	Y+21, r20	; 0x15
    1ae8:	8d 89       	ldd	r24, Y+21	; 0x15
    1aea:	9e 89       	ldd	r25, Y+22	; 0x16
    1aec:	00 96       	adiw	r24, 0x00	; 0
    1aee:	9e 8b       	std	Y+22, r25	; 0x16
    1af0:	8d 8b       	std	Y+21, r24	; 0x15
    1af2:	8d 89       	ldd	r24, Y+21	; 0x15
    1af4:	9e 89       	ldd	r25, Y+22	; 0x16
    1af6:	9c 87       	std	Y+12, r25	; 0x0c
    1af8:	8b 87       	std	Y+11, r24	; 0x0b


	/*storing the char arr in two new operation arrays*/

	/*left op*/
	for(u8 j= 0 ; j<Local_u8Indx;j++){
    1afa:	1a 82       	std	Y+2, r1	; 0x02
    1afc:	3b c0       	rjmp	.+118    	; 0x1b74 <KPD_u16KPDCalc+0x198>
		Local_u8LeftOperand[j]= KPD_Pu8CharArr[j]; /*storing the left op chars*/
    1afe:	8a 81       	ldd	r24, Y+2	; 0x02
    1b00:	48 2f       	mov	r20, r24
    1b02:	50 e0       	ldi	r21, 0x00	; 0
    1b04:	8a 81       	ldd	r24, Y+2	; 0x02
    1b06:	28 2f       	mov	r18, r24
    1b08:	30 e0       	ldi	r19, 0x00	; 0
    1b0a:	8f 85       	ldd	r24, Y+15	; 0x0f
    1b0c:	98 89       	ldd	r25, Y+16	; 0x10
    1b0e:	fc 01       	movw	r30, r24
    1b10:	e2 0f       	add	r30, r18
    1b12:	f3 1f       	adc	r31, r19
    1b14:	20 81       	ld	r18, Z
    1b16:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b18:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b1a:	fc 01       	movw	r30, r24
    1b1c:	e4 0f       	add	r30, r20
    1b1e:	f5 1f       	adc	r31, r21
    1b20:	20 83       	st	Z, r18
		Local_u8LeftOperand[j]=Local_u8LeftOperand[j]-CharNum;/*Converting Chars into nums*/
    1b22:	8a 81       	ldd	r24, Y+2	; 0x02
    1b24:	48 2f       	mov	r20, r24
    1b26:	50 e0       	ldi	r21, 0x00	; 0
    1b28:	8a 81       	ldd	r24, Y+2	; 0x02
    1b2a:	28 2f       	mov	r18, r24
    1b2c:	30 e0       	ldi	r19, 0x00	; 0
    1b2e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b30:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b32:	fc 01       	movw	r30, r24
    1b34:	e2 0f       	add	r30, r18
    1b36:	f3 1f       	adc	r31, r19
    1b38:	80 81       	ld	r24, Z
    1b3a:	28 2f       	mov	r18, r24
    1b3c:	20 53       	subi	r18, 0x30	; 48
    1b3e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b40:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b42:	fc 01       	movw	r30, r24
    1b44:	e4 0f       	add	r30, r20
    1b46:	f5 1f       	adc	r31, r21
    1b48:	20 83       	st	Z, r18
		Local_u8LeftOpSum = Local_u8LeftOpSum + Local_u8LeftOperand[j]*((10)^j); /*storing the sum in one variable*/
    1b4a:	8a 81       	ldd	r24, Y+2	; 0x02
    1b4c:	28 2f       	mov	r18, r24
    1b4e:	30 e0       	ldi	r19, 0x00	; 0
    1b50:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b52:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b54:	fc 01       	movw	r30, r24
    1b56:	e2 0f       	add	r30, r18
    1b58:	f3 1f       	adc	r31, r19
    1b5a:	20 81       	ld	r18, Z
    1b5c:	9a 81       	ldd	r25, Y+2	; 0x02
    1b5e:	8a e0       	ldi	r24, 0x0A	; 10
    1b60:	89 27       	eor	r24, r25
    1b62:	28 9f       	mul	r18, r24
    1b64:	90 2d       	mov	r25, r0
    1b66:	11 24       	eor	r1, r1
    1b68:	8a 85       	ldd	r24, Y+10	; 0x0a
    1b6a:	89 0f       	add	r24, r25
    1b6c:	8a 87       	std	Y+10, r24	; 0x0a


	/*storing the char arr in two new operation arrays*/

	/*left op*/
	for(u8 j= 0 ; j<Local_u8Indx;j++){
    1b6e:	8a 81       	ldd	r24, Y+2	; 0x02
    1b70:	8f 5f       	subi	r24, 0xFF	; 255
    1b72:	8a 83       	std	Y+2, r24	; 0x02
    1b74:	9a 81       	ldd	r25, Y+2	; 0x02
    1b76:	8c 81       	ldd	r24, Y+4	; 0x04
    1b78:	98 17       	cp	r25, r24
    1b7a:	08 f2       	brcs	.-126    	; 0x1afe <KPD_u16KPDCalc+0x122>

	}

	/*right op*/

	u8 Local_u8RightOpIndx =0;
    1b7c:	1b 82       	std	Y+3, r1	; 0x03
	for(u8 j = Local_u8Indx+1; j<=Local_u8Elements;j++){
    1b7e:	8c 81       	ldd	r24, Y+4	; 0x04
    1b80:	8f 5f       	subi	r24, 0xFF	; 255
    1b82:	89 83       	std	Y+1, r24	; 0x01
    1b84:	3e c0       	rjmp	.+124    	; 0x1c02 <KPD_u16KPDCalc+0x226>
		Local_u8RightOperand[Local_u8RightOpIndx]= KPD_Pu8CharArr[j]; /*storing the right op chars*/
    1b86:	8b 81       	ldd	r24, Y+3	; 0x03
    1b88:	48 2f       	mov	r20, r24
    1b8a:	50 e0       	ldi	r21, 0x00	; 0
    1b8c:	89 81       	ldd	r24, Y+1	; 0x01
    1b8e:	28 2f       	mov	r18, r24
    1b90:	30 e0       	ldi	r19, 0x00	; 0
    1b92:	8f 85       	ldd	r24, Y+15	; 0x0f
    1b94:	98 89       	ldd	r25, Y+16	; 0x10
    1b96:	fc 01       	movw	r30, r24
    1b98:	e2 0f       	add	r30, r18
    1b9a:	f3 1f       	adc	r31, r19
    1b9c:	20 81       	ld	r18, Z
    1b9e:	8b 85       	ldd	r24, Y+11	; 0x0b
    1ba0:	9c 85       	ldd	r25, Y+12	; 0x0c
    1ba2:	fc 01       	movw	r30, r24
    1ba4:	e4 0f       	add	r30, r20
    1ba6:	f5 1f       	adc	r31, r21
    1ba8:	20 83       	st	Z, r18
		Local_u8RightOperand[Local_u8RightOpIndx]=Local_u8RightOperand[Local_u8RightOpIndx]-CharNum;/*Converting Chars into nums*/
    1baa:	8b 81       	ldd	r24, Y+3	; 0x03
    1bac:	48 2f       	mov	r20, r24
    1bae:	50 e0       	ldi	r21, 0x00	; 0
    1bb0:	8b 81       	ldd	r24, Y+3	; 0x03
    1bb2:	28 2f       	mov	r18, r24
    1bb4:	30 e0       	ldi	r19, 0x00	; 0
    1bb6:	8b 85       	ldd	r24, Y+11	; 0x0b
    1bb8:	9c 85       	ldd	r25, Y+12	; 0x0c
    1bba:	fc 01       	movw	r30, r24
    1bbc:	e2 0f       	add	r30, r18
    1bbe:	f3 1f       	adc	r31, r19
    1bc0:	80 81       	ld	r24, Z
    1bc2:	28 2f       	mov	r18, r24
    1bc4:	20 53       	subi	r18, 0x30	; 48
    1bc6:	8b 85       	ldd	r24, Y+11	; 0x0b
    1bc8:	9c 85       	ldd	r25, Y+12	; 0x0c
    1bca:	fc 01       	movw	r30, r24
    1bcc:	e4 0f       	add	r30, r20
    1bce:	f5 1f       	adc	r31, r21
    1bd0:	20 83       	st	Z, r18
		Local_u8RightOpSum = Local_u8RightOpSum + Local_u8RightOperand[Local_u8RightOpIndx]*((10)^Local_u8RightOpIndx); /*storing the sum in one variable*/
    1bd2:	8b 81       	ldd	r24, Y+3	; 0x03
    1bd4:	28 2f       	mov	r18, r24
    1bd6:	30 e0       	ldi	r19, 0x00	; 0
    1bd8:	8b 85       	ldd	r24, Y+11	; 0x0b
    1bda:	9c 85       	ldd	r25, Y+12	; 0x0c
    1bdc:	fc 01       	movw	r30, r24
    1bde:	e2 0f       	add	r30, r18
    1be0:	f3 1f       	adc	r31, r19
    1be2:	20 81       	ld	r18, Z
    1be4:	9b 81       	ldd	r25, Y+3	; 0x03
    1be6:	8a e0       	ldi	r24, 0x0A	; 10
    1be8:	89 27       	eor	r24, r25
    1bea:	28 9f       	mul	r18, r24
    1bec:	90 2d       	mov	r25, r0
    1bee:	11 24       	eor	r1, r1
    1bf0:	89 85       	ldd	r24, Y+9	; 0x09
    1bf2:	89 0f       	add	r24, r25
    1bf4:	89 87       	std	Y+9, r24	; 0x09
		Local_u8RightOpIndx++;
    1bf6:	8b 81       	ldd	r24, Y+3	; 0x03
    1bf8:	8f 5f       	subi	r24, 0xFF	; 255
    1bfa:	8b 83       	std	Y+3, r24	; 0x03
	}

	/*right op*/

	u8 Local_u8RightOpIndx =0;
	for(u8 j = Local_u8Indx+1; j<=Local_u8Elements;j++){
    1bfc:	89 81       	ldd	r24, Y+1	; 0x01
    1bfe:	8f 5f       	subi	r24, 0xFF	; 255
    1c00:	89 83       	std	Y+1, r24	; 0x01
    1c02:	99 81       	ldd	r25, Y+1	; 0x01
    1c04:	8d 81       	ldd	r24, Y+5	; 0x05
    1c06:	89 17       	cp	r24, r25
    1c08:	08 f0       	brcs	.+2      	; 0x1c0c <KPD_u16KPDCalc+0x230>
    1c0a:	bd cf       	rjmp	.-134    	; 0x1b86 <KPD_u16KPDCalc+0x1aa>
		Local_u8RightOpSum = Local_u8RightOpSum + Local_u8RightOperand[Local_u8RightOpIndx]*((10)^Local_u8RightOpIndx); /*storing the sum in one variable*/
		Local_u8RightOpIndx++;
	}

	/*Calculating*/
	switch(KPD_u8RetrunOperationType(KPD_Pu8CharArr)){ /*switching on operation type*/
    1c0c:	8f 85       	ldd	r24, Y+15	; 0x0f
    1c0e:	98 89       	ldd	r25, Y+16	; 0x10
    1c10:	0e 94 b7 0c 	call	0x196e	; 0x196e <KPD_u8RetrunOperationType>
    1c14:	28 2f       	mov	r18, r24
    1c16:	30 e0       	ldi	r19, 0x00	; 0
    1c18:	3c 8b       	std	Y+20, r19	; 0x14
    1c1a:	2b 8b       	std	Y+19, r18	; 0x13
    1c1c:	4b 89       	ldd	r20, Y+19	; 0x13
    1c1e:	5c 89       	ldd	r21, Y+20	; 0x14
    1c20:	4b 32       	cpi	r20, 0x2B	; 43
    1c22:	51 05       	cpc	r21, r1
    1c24:	b1 f0       	breq	.+44     	; 0x1c52 <KPD_u16KPDCalc+0x276>
    1c26:	8b 89       	ldd	r24, Y+19	; 0x13
    1c28:	9c 89       	ldd	r25, Y+20	; 0x14
    1c2a:	8c 32       	cpi	r24, 0x2C	; 44
    1c2c:	91 05       	cpc	r25, r1
    1c2e:	34 f4       	brge	.+12     	; 0x1c3c <KPD_u16KPDCalc+0x260>
    1c30:	2b 89       	ldd	r18, Y+19	; 0x13
    1c32:	3c 89       	ldd	r19, Y+20	; 0x14
    1c34:	2a 32       	cpi	r18, 0x2A	; 42
    1c36:	31 05       	cpc	r19, r1
    1c38:	b1 f0       	breq	.+44     	; 0x1c66 <KPD_u16KPDCalc+0x28a>
    1c3a:	22 c0       	rjmp	.+68     	; 0x1c80 <KPD_u16KPDCalc+0x2a4>
    1c3c:	4b 89       	ldd	r20, Y+19	; 0x13
    1c3e:	5c 89       	ldd	r21, Y+20	; 0x14
    1c40:	4d 32       	cpi	r20, 0x2D	; 45
    1c42:	51 05       	cpc	r21, r1
    1c44:	59 f0       	breq	.+22     	; 0x1c5c <KPD_u16KPDCalc+0x280>
    1c46:	8b 89       	ldd	r24, Y+19	; 0x13
    1c48:	9c 89       	ldd	r25, Y+20	; 0x14
    1c4a:	8f 32       	cpi	r24, 0x2F	; 47
    1c4c:	91 05       	cpc	r25, r1
    1c4e:	91 f0       	breq	.+36     	; 0x1c74 <KPD_u16KPDCalc+0x298>
    1c50:	17 c0       	rjmp	.+46     	; 0x1c80 <KPD_u16KPDCalc+0x2a4>
		case '+':
			Local_u16Res = Local_u8LeftOpSum+Local_u8RightOpSum;
    1c52:	8a 85       	ldd	r24, Y+10	; 0x0a
    1c54:	99 85       	ldd	r25, Y+9	; 0x09
    1c56:	89 0f       	add	r24, r25
    1c58:	88 87       	std	Y+8, r24	; 0x08
    1c5a:	12 c0       	rjmp	.+36     	; 0x1c80 <KPD_u16KPDCalc+0x2a4>
			break;
		case '-':
			Local_u16Res = Local_u8LeftOpSum-Local_u8RightOpSum;
    1c5c:	8a 85       	ldd	r24, Y+10	; 0x0a
    1c5e:	99 85       	ldd	r25, Y+9	; 0x09
    1c60:	89 1b       	sub	r24, r25
    1c62:	88 87       	std	Y+8, r24	; 0x08
    1c64:	0d c0       	rjmp	.+26     	; 0x1c80 <KPD_u16KPDCalc+0x2a4>
			break;
		case '*':
			Local_u16Res = Local_u8LeftOpSum*Local_u8RightOpSum;
    1c66:	8a 85       	ldd	r24, Y+10	; 0x0a
    1c68:	99 85       	ldd	r25, Y+9	; 0x09
    1c6a:	89 9f       	mul	r24, r25
    1c6c:	80 2d       	mov	r24, r0
    1c6e:	11 24       	eor	r1, r1
    1c70:	88 87       	std	Y+8, r24	; 0x08
    1c72:	06 c0       	rjmp	.+12     	; 0x1c80 <KPD_u16KPDCalc+0x2a4>
			break;
		case '/':
			Local_u16Res = Local_u8LeftOpSum/Local_u8RightOpSum;
    1c74:	8a 85       	ldd	r24, Y+10	; 0x0a
    1c76:	99 85       	ldd	r25, Y+9	; 0x09
    1c78:	69 2f       	mov	r22, r25
    1c7a:	0e 94 c2 0e 	call	0x1d84	; 0x1d84 <__udivmodqi4>
    1c7e:	88 87       	std	Y+8, r24	; 0x08
			break;
	}
	ClCD_VidSendData(Local_u16Res+48);
    1c80:	88 85       	ldd	r24, Y+8	; 0x08
    1c82:	80 5d       	subi	r24, 0xD0	; 208
    1c84:	0e 94 cb 09 	call	0x1396	; 0x1396 <ClCD_VidSendData>
	return Local_u16Res;
    1c88:	88 85       	ldd	r24, Y+8	; 0x08
    1c8a:	88 2f       	mov	r24, r24
    1c8c:	90 e0       	ldi	r25, 0x00	; 0
    1c8e:	29 89       	ldd	r18, Y+17	; 0x11
    1c90:	3a 89       	ldd	r19, Y+18	; 0x12
    1c92:	0f b6       	in	r0, 0x3f	; 63
    1c94:	f8 94       	cli
    1c96:	3e bf       	out	0x3e, r19	; 62
    1c98:	0f be       	out	0x3f, r0	; 63
    1c9a:	2d bf       	out	0x3d, r18	; 61

}
    1c9c:	49 8d       	ldd	r20, Y+25	; 0x19
    1c9e:	5a 8d       	ldd	r21, Y+26	; 0x1a
    1ca0:	0f b6       	in	r0, 0x3f	; 63
    1ca2:	f8 94       	cli
    1ca4:	5e bf       	out	0x3e, r21	; 62
    1ca6:	0f be       	out	0x3f, r0	; 63
    1ca8:	4d bf       	out	0x3d, r20	; 61
    1caa:	6a 96       	adiw	r28, 0x1a	; 26
    1cac:	0f b6       	in	r0, 0x3f	; 63
    1cae:	f8 94       	cli
    1cb0:	de bf       	out	0x3e, r29	; 62
    1cb2:	0f be       	out	0x3f, r0	; 63
    1cb4:	cd bf       	out	0x3d, r28	; 61
    1cb6:	cf 91       	pop	r28
    1cb8:	df 91       	pop	r29
    1cba:	08 95       	ret

00001cbc <main>:
#include "HAL/LCD/CLCD_Config.h"

#include "HAL/Keypad/Keypad_Interface.h"
#include "HAL/Keypad/Keypad_config.h"

void main(void){
    1cbc:	df 93       	push	r29
    1cbe:	cf 93       	push	r28
    1cc0:	cd b7       	in	r28, 0x3d	; 61
    1cc2:	de b7       	in	r29, 0x3e	; 62
    1cc4:	66 97       	sbiw	r28, 0x16	; 22
    1cc6:	0f b6       	in	r0, 0x3f	; 63
    1cc8:	f8 94       	cli
    1cca:	de bf       	out	0x3e, r29	; 62
    1ccc:	0f be       	out	0x3f, r0	; 63
    1cce:	cd bf       	out	0x3d, r28	; 61
	/*Char Array to store and print*/
	u8 Local_u8CharArr[20];
	/* Variable to store Result*/
	u16 Local_u16Res =0;
    1cd0:	1a 82       	std	Y+2, r1	; 0x02
    1cd2:	19 82       	std	Y+1, r1	; 0x01
	/*Setting LCD Directions*/
	DIO_VidSetPinDirection(CLCD_CTRL_PORT,CLCD_RS_PIN,output);
    1cd4:	84 e0       	ldi	r24, 0x04	; 4
    1cd6:	60 e0       	ldi	r22, 0x00	; 0
    1cd8:	41 e0       	ldi	r20, 0x01	; 1
    1cda:	0e 94 9d 06 	call	0xd3a	; 0xd3a <DIO_VidSetPinDirection>
	DIO_VidSetPinDirection(CLCD_CTRL_PORT,CLCD_RW_PIN,output);
    1cde:	84 e0       	ldi	r24, 0x04	; 4
    1ce0:	61 e0       	ldi	r22, 0x01	; 1
    1ce2:	41 e0       	ldi	r20, 0x01	; 1
    1ce4:	0e 94 9d 06 	call	0xd3a	; 0xd3a <DIO_VidSetPinDirection>
	DIO_VidSetPinDirection(CLCD_CTRL_PORT,CLCD_EN_PIN,output);
    1ce8:	84 e0       	ldi	r24, 0x04	; 4
    1cea:	62 e0       	ldi	r22, 0x02	; 2
    1cec:	41 e0       	ldi	r20, 0x01	; 1
    1cee:	0e 94 9d 06 	call	0xd3a	; 0xd3a <DIO_VidSetPinDirection>
	DIO_VidSetPortDirection(CLCD_DATA_PORT, output);
    1cf2:	82 e0       	ldi	r24, 0x02	; 2
    1cf4:	61 e0       	ldi	r22, 0x01	; 1
    1cf6:	0e 94 65 08 	call	0x10ca	; 0x10ca <DIO_VidSetPortDirection>

	/*set Keypad Port Direction*/
	DIO_VidSetPinDirection(KPD_u8PORT,KPD_u8COLUMN_PIN0,output);
    1cfa:	85 e0       	ldi	r24, 0x05	; 5
    1cfc:	60 e0       	ldi	r22, 0x00	; 0
    1cfe:	41 e0       	ldi	r20, 0x01	; 1
    1d00:	0e 94 9d 06 	call	0xd3a	; 0xd3a <DIO_VidSetPinDirection>
	DIO_VidSetPinDirection(KPD_u8PORT,KPD_u8COLUMN_PIN1,output);
    1d04:	85 e0       	ldi	r24, 0x05	; 5
    1d06:	61 e0       	ldi	r22, 0x01	; 1
    1d08:	41 e0       	ldi	r20, 0x01	; 1
    1d0a:	0e 94 9d 06 	call	0xd3a	; 0xd3a <DIO_VidSetPinDirection>
	DIO_VidSetPinDirection(KPD_u8PORT,KPD_u8COLUMN_PIN2,output);
    1d0e:	85 e0       	ldi	r24, 0x05	; 5
    1d10:	62 e0       	ldi	r22, 0x02	; 2
    1d12:	41 e0       	ldi	r20, 0x01	; 1
    1d14:	0e 94 9d 06 	call	0xd3a	; 0xd3a <DIO_VidSetPinDirection>
	DIO_VidSetPinDirection(KPD_u8PORT,KPD_u8COLUMN_PIN3,output);
    1d18:	85 e0       	ldi	r24, 0x05	; 5
    1d1a:	63 e0       	ldi	r22, 0x03	; 3
    1d1c:	41 e0       	ldi	r20, 0x01	; 1
    1d1e:	0e 94 9d 06 	call	0xd3a	; 0xd3a <DIO_VidSetPinDirection>
	DIO_VidSetPinDirection(KPD_u8PORT,KPD_u8ROW_PIN0,input);
    1d22:	85 e0       	ldi	r24, 0x05	; 5
    1d24:	64 e0       	ldi	r22, 0x04	; 4
    1d26:	40 e0       	ldi	r20, 0x00	; 0
    1d28:	0e 94 9d 06 	call	0xd3a	; 0xd3a <DIO_VidSetPinDirection>
	DIO_VidSetPinDirection(KPD_u8PORT,KPD_u8ROW_PIN1,input);
    1d2c:	85 e0       	ldi	r24, 0x05	; 5
    1d2e:	65 e0       	ldi	r22, 0x05	; 5
    1d30:	40 e0       	ldi	r20, 0x00	; 0
    1d32:	0e 94 9d 06 	call	0xd3a	; 0xd3a <DIO_VidSetPinDirection>
	DIO_VidSetPinDirection(KPD_u8PORT,KPD_u8ROW_PIN2,input);
    1d36:	85 e0       	ldi	r24, 0x05	; 5
    1d38:	66 e0       	ldi	r22, 0x06	; 6
    1d3a:	40 e0       	ldi	r20, 0x00	; 0
    1d3c:	0e 94 9d 06 	call	0xd3a	; 0xd3a <DIO_VidSetPinDirection>
	DIO_VidSetPinDirection(KPD_u8PORT,KPD_u8ROW_PIN3,input);
    1d40:	85 e0       	ldi	r24, 0x05	; 5
    1d42:	67 e0       	ldi	r22, 0x07	; 7
    1d44:	40 e0       	ldi	r20, 0x00	; 0
    1d46:	0e 94 9d 06 	call	0xd3a	; 0xd3a <DIO_VidSetPinDirection>
	DIO_VidSetPinValue(KPD_u8PORT,KPD_u8ROW_PIN0,high);
    1d4a:	85 e0       	ldi	r24, 0x05	; 5
    1d4c:	64 e0       	ldi	r22, 0x04	; 4
    1d4e:	41 e0       	ldi	r20, 0x01	; 1
    1d50:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_VidSetPinValue>
	DIO_VidSetPinValue(KPD_u8PORT,KPD_u8ROW_PIN1,high);
    1d54:	85 e0       	ldi	r24, 0x05	; 5
    1d56:	65 e0       	ldi	r22, 0x05	; 5
    1d58:	41 e0       	ldi	r20, 0x01	; 1
    1d5a:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_VidSetPinValue>
	DIO_VidSetPinValue(KPD_u8PORT,KPD_u8ROW_PIN2,high);
    1d5e:	85 e0       	ldi	r24, 0x05	; 5
    1d60:	66 e0       	ldi	r22, 0x06	; 6
    1d62:	41 e0       	ldi	r20, 0x01	; 1
    1d64:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_VidSetPinValue>
	DIO_VidSetPinValue(KPD_u8PORT,KPD_u8ROW_PIN3,high);
    1d68:	85 e0       	ldi	r24, 0x05	; 5
    1d6a:	67 e0       	ldi	r22, 0x07	; 7
    1d6c:	41 e0       	ldi	r20, 0x01	; 1
    1d6e:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_VidSetPinValue>

	/*Initializes the LCD*/
	CLCD_VidInit();
    1d72:	0e 94 69 0a 	call	0x14d2	; 0x14d2 <CLCD_VidInit>
			ClCD_VidSendData(Local_u8KPDResult);
		}
*/


	Local_u16Res = KPD_u16KPDCalc(Local_u8CharArr);
    1d76:	ce 01       	movw	r24, r28
    1d78:	03 96       	adiw	r24, 0x03	; 3
    1d7a:	0e 94 ee 0c 	call	0x19dc	; 0x19dc <KPD_u16KPDCalc>
    1d7e:	9a 83       	std	Y+2, r25	; 0x02
    1d80:	89 83       	std	Y+1, r24	; 0x01
    1d82:	f9 cf       	rjmp	.-14     	; 0x1d76 <main+0xba>

00001d84 <__udivmodqi4>:
    1d84:	99 1b       	sub	r25, r25
    1d86:	79 e0       	ldi	r23, 0x09	; 9
    1d88:	04 c0       	rjmp	.+8      	; 0x1d92 <__udivmodqi4_ep>

00001d8a <__udivmodqi4_loop>:
    1d8a:	99 1f       	adc	r25, r25
    1d8c:	96 17       	cp	r25, r22
    1d8e:	08 f0       	brcs	.+2      	; 0x1d92 <__udivmodqi4_ep>
    1d90:	96 1b       	sub	r25, r22

00001d92 <__udivmodqi4_ep>:
    1d92:	88 1f       	adc	r24, r24
    1d94:	7a 95       	dec	r23
    1d96:	c9 f7       	brne	.-14     	; 0x1d8a <__udivmodqi4_loop>
    1d98:	80 95       	com	r24
    1d9a:	08 95       	ret

00001d9c <__prologue_saves__>:
    1d9c:	2f 92       	push	r2
    1d9e:	3f 92       	push	r3
    1da0:	4f 92       	push	r4
    1da2:	5f 92       	push	r5
    1da4:	6f 92       	push	r6
    1da6:	7f 92       	push	r7
    1da8:	8f 92       	push	r8
    1daa:	9f 92       	push	r9
    1dac:	af 92       	push	r10
    1dae:	bf 92       	push	r11
    1db0:	cf 92       	push	r12
    1db2:	df 92       	push	r13
    1db4:	ef 92       	push	r14
    1db6:	ff 92       	push	r15
    1db8:	0f 93       	push	r16
    1dba:	1f 93       	push	r17
    1dbc:	cf 93       	push	r28
    1dbe:	df 93       	push	r29
    1dc0:	cd b7       	in	r28, 0x3d	; 61
    1dc2:	de b7       	in	r29, 0x3e	; 62
    1dc4:	ca 1b       	sub	r28, r26
    1dc6:	db 0b       	sbc	r29, r27
    1dc8:	0f b6       	in	r0, 0x3f	; 63
    1dca:	f8 94       	cli
    1dcc:	de bf       	out	0x3e, r29	; 62
    1dce:	0f be       	out	0x3f, r0	; 63
    1dd0:	cd bf       	out	0x3d, r28	; 61
    1dd2:	09 94       	ijmp

00001dd4 <__epilogue_restores__>:
    1dd4:	2a 88       	ldd	r2, Y+18	; 0x12
    1dd6:	39 88       	ldd	r3, Y+17	; 0x11
    1dd8:	48 88       	ldd	r4, Y+16	; 0x10
    1dda:	5f 84       	ldd	r5, Y+15	; 0x0f
    1ddc:	6e 84       	ldd	r6, Y+14	; 0x0e
    1dde:	7d 84       	ldd	r7, Y+13	; 0x0d
    1de0:	8c 84       	ldd	r8, Y+12	; 0x0c
    1de2:	9b 84       	ldd	r9, Y+11	; 0x0b
    1de4:	aa 84       	ldd	r10, Y+10	; 0x0a
    1de6:	b9 84       	ldd	r11, Y+9	; 0x09
    1de8:	c8 84       	ldd	r12, Y+8	; 0x08
    1dea:	df 80       	ldd	r13, Y+7	; 0x07
    1dec:	ee 80       	ldd	r14, Y+6	; 0x06
    1dee:	fd 80       	ldd	r15, Y+5	; 0x05
    1df0:	0c 81       	ldd	r16, Y+4	; 0x04
    1df2:	1b 81       	ldd	r17, Y+3	; 0x03
    1df4:	aa 81       	ldd	r26, Y+2	; 0x02
    1df6:	b9 81       	ldd	r27, Y+1	; 0x01
    1df8:	ce 0f       	add	r28, r30
    1dfa:	d1 1d       	adc	r29, r1
    1dfc:	0f b6       	in	r0, 0x3f	; 63
    1dfe:	f8 94       	cli
    1e00:	de bf       	out	0x3e, r29	; 62
    1e02:	0f be       	out	0x3f, r0	; 63
    1e04:	cd bf       	out	0x3d, r28	; 61
    1e06:	ed 01       	movw	r28, r26
    1e08:	08 95       	ret

00001e0a <sprintf>:
    1e0a:	ae e0       	ldi	r26, 0x0E	; 14
    1e0c:	b0 e0       	ldi	r27, 0x00	; 0
    1e0e:	eb e0       	ldi	r30, 0x0B	; 11
    1e10:	ff e0       	ldi	r31, 0x0F	; 15
    1e12:	0c 94 dc 0e 	jmp	0x1db8	; 0x1db8 <__prologue_saves__+0x1c>
    1e16:	0d 89       	ldd	r16, Y+21	; 0x15
    1e18:	1e 89       	ldd	r17, Y+22	; 0x16
    1e1a:	86 e0       	ldi	r24, 0x06	; 6
    1e1c:	8c 83       	std	Y+4, r24	; 0x04
    1e1e:	1a 83       	std	Y+2, r17	; 0x02
    1e20:	09 83       	std	Y+1, r16	; 0x01
    1e22:	8f ef       	ldi	r24, 0xFF	; 255
    1e24:	9f e7       	ldi	r25, 0x7F	; 127
    1e26:	9e 83       	std	Y+6, r25	; 0x06
    1e28:	8d 83       	std	Y+5, r24	; 0x05
    1e2a:	9e 01       	movw	r18, r28
    1e2c:	27 5e       	subi	r18, 0xE7	; 231
    1e2e:	3f 4f       	sbci	r19, 0xFF	; 255
    1e30:	ce 01       	movw	r24, r28
    1e32:	01 96       	adiw	r24, 0x01	; 1
    1e34:	6f 89       	ldd	r22, Y+23	; 0x17
    1e36:	78 8d       	ldd	r23, Y+24	; 0x18
    1e38:	a9 01       	movw	r20, r18
    1e3a:	0e 94 29 0f 	call	0x1e52	; 0x1e52 <vfprintf>
    1e3e:	2f 81       	ldd	r18, Y+7	; 0x07
    1e40:	38 85       	ldd	r19, Y+8	; 0x08
    1e42:	02 0f       	add	r16, r18
    1e44:	13 1f       	adc	r17, r19
    1e46:	f8 01       	movw	r30, r16
    1e48:	10 82       	st	Z, r1
    1e4a:	2e 96       	adiw	r28, 0x0e	; 14
    1e4c:	e4 e0       	ldi	r30, 0x04	; 4
    1e4e:	0c 94 f8 0e 	jmp	0x1df0	; 0x1df0 <__epilogue_restores__+0x1c>

00001e52 <vfprintf>:
    1e52:	ab e0       	ldi	r26, 0x0B	; 11
    1e54:	b0 e0       	ldi	r27, 0x00	; 0
    1e56:	ef e2       	ldi	r30, 0x2F	; 47
    1e58:	ff e0       	ldi	r31, 0x0F	; 15
    1e5a:	0c 94 ce 0e 	jmp	0x1d9c	; 0x1d9c <__prologue_saves__>
    1e5e:	3c 01       	movw	r6, r24
    1e60:	2b 01       	movw	r4, r22
    1e62:	5a 01       	movw	r10, r20
    1e64:	fc 01       	movw	r30, r24
    1e66:	17 82       	std	Z+7, r1	; 0x07
    1e68:	16 82       	std	Z+6, r1	; 0x06
    1e6a:	83 81       	ldd	r24, Z+3	; 0x03
    1e6c:	81 fd       	sbrc	r24, 1
    1e6e:	03 c0       	rjmp	.+6      	; 0x1e76 <vfprintf+0x24>
    1e70:	6f ef       	ldi	r22, 0xFF	; 255
    1e72:	7f ef       	ldi	r23, 0xFF	; 255
    1e74:	c6 c1       	rjmp	.+908    	; 0x2202 <vfprintf+0x3b0>
    1e76:	9a e0       	ldi	r25, 0x0A	; 10
    1e78:	89 2e       	mov	r8, r25
    1e7a:	1e 01       	movw	r2, r28
    1e7c:	08 94       	sec
    1e7e:	21 1c       	adc	r2, r1
    1e80:	31 1c       	adc	r3, r1
    1e82:	f3 01       	movw	r30, r6
    1e84:	23 81       	ldd	r18, Z+3	; 0x03
    1e86:	f2 01       	movw	r30, r4
    1e88:	23 fd       	sbrc	r18, 3
    1e8a:	85 91       	lpm	r24, Z+
    1e8c:	23 ff       	sbrs	r18, 3
    1e8e:	81 91       	ld	r24, Z+
    1e90:	2f 01       	movw	r4, r30
    1e92:	88 23       	and	r24, r24
    1e94:	09 f4       	brne	.+2      	; 0x1e98 <vfprintf+0x46>
    1e96:	b2 c1       	rjmp	.+868    	; 0x21fc <vfprintf+0x3aa>
    1e98:	85 32       	cpi	r24, 0x25	; 37
    1e9a:	39 f4       	brne	.+14     	; 0x1eaa <vfprintf+0x58>
    1e9c:	23 fd       	sbrc	r18, 3
    1e9e:	85 91       	lpm	r24, Z+
    1ea0:	23 ff       	sbrs	r18, 3
    1ea2:	81 91       	ld	r24, Z+
    1ea4:	2f 01       	movw	r4, r30
    1ea6:	85 32       	cpi	r24, 0x25	; 37
    1ea8:	29 f4       	brne	.+10     	; 0x1eb4 <vfprintf+0x62>
    1eaa:	90 e0       	ldi	r25, 0x00	; 0
    1eac:	b3 01       	movw	r22, r6
    1eae:	0e 94 1c 11 	call	0x2238	; 0x2238 <fputc>
    1eb2:	e7 cf       	rjmp	.-50     	; 0x1e82 <vfprintf+0x30>
    1eb4:	98 2f       	mov	r25, r24
    1eb6:	ff 24       	eor	r15, r15
    1eb8:	ee 24       	eor	r14, r14
    1eba:	99 24       	eor	r9, r9
    1ebc:	ff e1       	ldi	r31, 0x1F	; 31
    1ebe:	ff 15       	cp	r31, r15
    1ec0:	d0 f0       	brcs	.+52     	; 0x1ef6 <vfprintf+0xa4>
    1ec2:	9b 32       	cpi	r25, 0x2B	; 43
    1ec4:	69 f0       	breq	.+26     	; 0x1ee0 <vfprintf+0x8e>
    1ec6:	9c 32       	cpi	r25, 0x2C	; 44
    1ec8:	28 f4       	brcc	.+10     	; 0x1ed4 <vfprintf+0x82>
    1eca:	90 32       	cpi	r25, 0x20	; 32
    1ecc:	59 f0       	breq	.+22     	; 0x1ee4 <vfprintf+0x92>
    1ece:	93 32       	cpi	r25, 0x23	; 35
    1ed0:	91 f4       	brne	.+36     	; 0x1ef6 <vfprintf+0xa4>
    1ed2:	0e c0       	rjmp	.+28     	; 0x1ef0 <vfprintf+0x9e>
    1ed4:	9d 32       	cpi	r25, 0x2D	; 45
    1ed6:	49 f0       	breq	.+18     	; 0x1eea <vfprintf+0x98>
    1ed8:	90 33       	cpi	r25, 0x30	; 48
    1eda:	69 f4       	brne	.+26     	; 0x1ef6 <vfprintf+0xa4>
    1edc:	41 e0       	ldi	r20, 0x01	; 1
    1ede:	24 c0       	rjmp	.+72     	; 0x1f28 <vfprintf+0xd6>
    1ee0:	52 e0       	ldi	r21, 0x02	; 2
    1ee2:	f5 2a       	or	r15, r21
    1ee4:	84 e0       	ldi	r24, 0x04	; 4
    1ee6:	f8 2a       	or	r15, r24
    1ee8:	28 c0       	rjmp	.+80     	; 0x1f3a <vfprintf+0xe8>
    1eea:	98 e0       	ldi	r25, 0x08	; 8
    1eec:	f9 2a       	or	r15, r25
    1eee:	25 c0       	rjmp	.+74     	; 0x1f3a <vfprintf+0xe8>
    1ef0:	e0 e1       	ldi	r30, 0x10	; 16
    1ef2:	fe 2a       	or	r15, r30
    1ef4:	22 c0       	rjmp	.+68     	; 0x1f3a <vfprintf+0xe8>
    1ef6:	f7 fc       	sbrc	r15, 7
    1ef8:	29 c0       	rjmp	.+82     	; 0x1f4c <vfprintf+0xfa>
    1efa:	89 2f       	mov	r24, r25
    1efc:	80 53       	subi	r24, 0x30	; 48
    1efe:	8a 30       	cpi	r24, 0x0A	; 10
    1f00:	70 f4       	brcc	.+28     	; 0x1f1e <vfprintf+0xcc>
    1f02:	f6 fe       	sbrs	r15, 6
    1f04:	05 c0       	rjmp	.+10     	; 0x1f10 <vfprintf+0xbe>
    1f06:	98 9c       	mul	r9, r8
    1f08:	90 2c       	mov	r9, r0
    1f0a:	11 24       	eor	r1, r1
    1f0c:	98 0e       	add	r9, r24
    1f0e:	15 c0       	rjmp	.+42     	; 0x1f3a <vfprintf+0xe8>
    1f10:	e8 9c       	mul	r14, r8
    1f12:	e0 2c       	mov	r14, r0
    1f14:	11 24       	eor	r1, r1
    1f16:	e8 0e       	add	r14, r24
    1f18:	f0 e2       	ldi	r31, 0x20	; 32
    1f1a:	ff 2a       	or	r15, r31
    1f1c:	0e c0       	rjmp	.+28     	; 0x1f3a <vfprintf+0xe8>
    1f1e:	9e 32       	cpi	r25, 0x2E	; 46
    1f20:	29 f4       	brne	.+10     	; 0x1f2c <vfprintf+0xda>
    1f22:	f6 fc       	sbrc	r15, 6
    1f24:	6b c1       	rjmp	.+726    	; 0x21fc <vfprintf+0x3aa>
    1f26:	40 e4       	ldi	r20, 0x40	; 64
    1f28:	f4 2a       	or	r15, r20
    1f2a:	07 c0       	rjmp	.+14     	; 0x1f3a <vfprintf+0xe8>
    1f2c:	9c 36       	cpi	r25, 0x6C	; 108
    1f2e:	19 f4       	brne	.+6      	; 0x1f36 <vfprintf+0xe4>
    1f30:	50 e8       	ldi	r21, 0x80	; 128
    1f32:	f5 2a       	or	r15, r21
    1f34:	02 c0       	rjmp	.+4      	; 0x1f3a <vfprintf+0xe8>
    1f36:	98 36       	cpi	r25, 0x68	; 104
    1f38:	49 f4       	brne	.+18     	; 0x1f4c <vfprintf+0xfa>
    1f3a:	f2 01       	movw	r30, r4
    1f3c:	23 fd       	sbrc	r18, 3
    1f3e:	95 91       	lpm	r25, Z+
    1f40:	23 ff       	sbrs	r18, 3
    1f42:	91 91       	ld	r25, Z+
    1f44:	2f 01       	movw	r4, r30
    1f46:	99 23       	and	r25, r25
    1f48:	09 f0       	breq	.+2      	; 0x1f4c <vfprintf+0xfa>
    1f4a:	b8 cf       	rjmp	.-144    	; 0x1ebc <vfprintf+0x6a>
    1f4c:	89 2f       	mov	r24, r25
    1f4e:	85 54       	subi	r24, 0x45	; 69
    1f50:	83 30       	cpi	r24, 0x03	; 3
    1f52:	18 f0       	brcs	.+6      	; 0x1f5a <vfprintf+0x108>
    1f54:	80 52       	subi	r24, 0x20	; 32
    1f56:	83 30       	cpi	r24, 0x03	; 3
    1f58:	38 f4       	brcc	.+14     	; 0x1f68 <vfprintf+0x116>
    1f5a:	44 e0       	ldi	r20, 0x04	; 4
    1f5c:	50 e0       	ldi	r21, 0x00	; 0
    1f5e:	a4 0e       	add	r10, r20
    1f60:	b5 1e       	adc	r11, r21
    1f62:	5f e3       	ldi	r21, 0x3F	; 63
    1f64:	59 83       	std	Y+1, r21	; 0x01
    1f66:	0f c0       	rjmp	.+30     	; 0x1f86 <vfprintf+0x134>
    1f68:	93 36       	cpi	r25, 0x63	; 99
    1f6a:	31 f0       	breq	.+12     	; 0x1f78 <vfprintf+0x126>
    1f6c:	93 37       	cpi	r25, 0x73	; 115
    1f6e:	79 f0       	breq	.+30     	; 0x1f8e <vfprintf+0x13c>
    1f70:	93 35       	cpi	r25, 0x53	; 83
    1f72:	09 f0       	breq	.+2      	; 0x1f76 <vfprintf+0x124>
    1f74:	56 c0       	rjmp	.+172    	; 0x2022 <vfprintf+0x1d0>
    1f76:	20 c0       	rjmp	.+64     	; 0x1fb8 <vfprintf+0x166>
    1f78:	f5 01       	movw	r30, r10
    1f7a:	80 81       	ld	r24, Z
    1f7c:	89 83       	std	Y+1, r24	; 0x01
    1f7e:	42 e0       	ldi	r20, 0x02	; 2
    1f80:	50 e0       	ldi	r21, 0x00	; 0
    1f82:	a4 0e       	add	r10, r20
    1f84:	b5 1e       	adc	r11, r21
    1f86:	61 01       	movw	r12, r2
    1f88:	01 e0       	ldi	r16, 0x01	; 1
    1f8a:	10 e0       	ldi	r17, 0x00	; 0
    1f8c:	12 c0       	rjmp	.+36     	; 0x1fb2 <vfprintf+0x160>
    1f8e:	f5 01       	movw	r30, r10
    1f90:	c0 80       	ld	r12, Z
    1f92:	d1 80       	ldd	r13, Z+1	; 0x01
    1f94:	f6 fc       	sbrc	r15, 6
    1f96:	03 c0       	rjmp	.+6      	; 0x1f9e <vfprintf+0x14c>
    1f98:	6f ef       	ldi	r22, 0xFF	; 255
    1f9a:	7f ef       	ldi	r23, 0xFF	; 255
    1f9c:	02 c0       	rjmp	.+4      	; 0x1fa2 <vfprintf+0x150>
    1f9e:	69 2d       	mov	r22, r9
    1fa0:	70 e0       	ldi	r23, 0x00	; 0
    1fa2:	42 e0       	ldi	r20, 0x02	; 2
    1fa4:	50 e0       	ldi	r21, 0x00	; 0
    1fa6:	a4 0e       	add	r10, r20
    1fa8:	b5 1e       	adc	r11, r21
    1faa:	c6 01       	movw	r24, r12
    1fac:	0e 94 11 11 	call	0x2222	; 0x2222 <strnlen>
    1fb0:	8c 01       	movw	r16, r24
    1fb2:	5f e7       	ldi	r21, 0x7F	; 127
    1fb4:	f5 22       	and	r15, r21
    1fb6:	14 c0       	rjmp	.+40     	; 0x1fe0 <vfprintf+0x18e>
    1fb8:	f5 01       	movw	r30, r10
    1fba:	c0 80       	ld	r12, Z
    1fbc:	d1 80       	ldd	r13, Z+1	; 0x01
    1fbe:	f6 fc       	sbrc	r15, 6
    1fc0:	03 c0       	rjmp	.+6      	; 0x1fc8 <vfprintf+0x176>
    1fc2:	6f ef       	ldi	r22, 0xFF	; 255
    1fc4:	7f ef       	ldi	r23, 0xFF	; 255
    1fc6:	02 c0       	rjmp	.+4      	; 0x1fcc <vfprintf+0x17a>
    1fc8:	69 2d       	mov	r22, r9
    1fca:	70 e0       	ldi	r23, 0x00	; 0
    1fcc:	42 e0       	ldi	r20, 0x02	; 2
    1fce:	50 e0       	ldi	r21, 0x00	; 0
    1fd0:	a4 0e       	add	r10, r20
    1fd2:	b5 1e       	adc	r11, r21
    1fd4:	c6 01       	movw	r24, r12
    1fd6:	0e 94 06 11 	call	0x220c	; 0x220c <strnlen_P>
    1fda:	8c 01       	movw	r16, r24
    1fdc:	50 e8       	ldi	r21, 0x80	; 128
    1fde:	f5 2a       	or	r15, r21
    1fe0:	f3 fe       	sbrs	r15, 3
    1fe2:	07 c0       	rjmp	.+14     	; 0x1ff2 <vfprintf+0x1a0>
    1fe4:	1a c0       	rjmp	.+52     	; 0x201a <vfprintf+0x1c8>
    1fe6:	80 e2       	ldi	r24, 0x20	; 32
    1fe8:	90 e0       	ldi	r25, 0x00	; 0
    1fea:	b3 01       	movw	r22, r6
    1fec:	0e 94 1c 11 	call	0x2238	; 0x2238 <fputc>
    1ff0:	ea 94       	dec	r14
    1ff2:	8e 2d       	mov	r24, r14
    1ff4:	90 e0       	ldi	r25, 0x00	; 0
    1ff6:	08 17       	cp	r16, r24
    1ff8:	19 07       	cpc	r17, r25
    1ffa:	a8 f3       	brcs	.-22     	; 0x1fe6 <vfprintf+0x194>
    1ffc:	0e c0       	rjmp	.+28     	; 0x201a <vfprintf+0x1c8>
    1ffe:	f6 01       	movw	r30, r12
    2000:	f7 fc       	sbrc	r15, 7
    2002:	85 91       	lpm	r24, Z+
    2004:	f7 fe       	sbrs	r15, 7
    2006:	81 91       	ld	r24, Z+
    2008:	6f 01       	movw	r12, r30
    200a:	90 e0       	ldi	r25, 0x00	; 0
    200c:	b3 01       	movw	r22, r6
    200e:	0e 94 1c 11 	call	0x2238	; 0x2238 <fputc>
    2012:	e1 10       	cpse	r14, r1
    2014:	ea 94       	dec	r14
    2016:	01 50       	subi	r16, 0x01	; 1
    2018:	10 40       	sbci	r17, 0x00	; 0
    201a:	01 15       	cp	r16, r1
    201c:	11 05       	cpc	r17, r1
    201e:	79 f7       	brne	.-34     	; 0x1ffe <vfprintf+0x1ac>
    2020:	ea c0       	rjmp	.+468    	; 0x21f6 <vfprintf+0x3a4>
    2022:	94 36       	cpi	r25, 0x64	; 100
    2024:	11 f0       	breq	.+4      	; 0x202a <vfprintf+0x1d8>
    2026:	99 36       	cpi	r25, 0x69	; 105
    2028:	69 f5       	brne	.+90     	; 0x2084 <vfprintf+0x232>
    202a:	f7 fe       	sbrs	r15, 7
    202c:	08 c0       	rjmp	.+16     	; 0x203e <vfprintf+0x1ec>
    202e:	f5 01       	movw	r30, r10
    2030:	20 81       	ld	r18, Z
    2032:	31 81       	ldd	r19, Z+1	; 0x01
    2034:	42 81       	ldd	r20, Z+2	; 0x02
    2036:	53 81       	ldd	r21, Z+3	; 0x03
    2038:	84 e0       	ldi	r24, 0x04	; 4
    203a:	90 e0       	ldi	r25, 0x00	; 0
    203c:	0a c0       	rjmp	.+20     	; 0x2052 <vfprintf+0x200>
    203e:	f5 01       	movw	r30, r10
    2040:	80 81       	ld	r24, Z
    2042:	91 81       	ldd	r25, Z+1	; 0x01
    2044:	9c 01       	movw	r18, r24
    2046:	44 27       	eor	r20, r20
    2048:	37 fd       	sbrc	r19, 7
    204a:	40 95       	com	r20
    204c:	54 2f       	mov	r21, r20
    204e:	82 e0       	ldi	r24, 0x02	; 2
    2050:	90 e0       	ldi	r25, 0x00	; 0
    2052:	a8 0e       	add	r10, r24
    2054:	b9 1e       	adc	r11, r25
    2056:	9f e6       	ldi	r25, 0x6F	; 111
    2058:	f9 22       	and	r15, r25
    205a:	57 ff       	sbrs	r21, 7
    205c:	09 c0       	rjmp	.+18     	; 0x2070 <vfprintf+0x21e>
    205e:	50 95       	com	r21
    2060:	40 95       	com	r20
    2062:	30 95       	com	r19
    2064:	21 95       	neg	r18
    2066:	3f 4f       	sbci	r19, 0xFF	; 255
    2068:	4f 4f       	sbci	r20, 0xFF	; 255
    206a:	5f 4f       	sbci	r21, 0xFF	; 255
    206c:	e0 e8       	ldi	r30, 0x80	; 128
    206e:	fe 2a       	or	r15, r30
    2070:	ca 01       	movw	r24, r20
    2072:	b9 01       	movw	r22, r18
    2074:	a1 01       	movw	r20, r2
    2076:	2a e0       	ldi	r18, 0x0A	; 10
    2078:	30 e0       	ldi	r19, 0x00	; 0
    207a:	0e 94 48 11 	call	0x2290	; 0x2290 <__ultoa_invert>
    207e:	d8 2e       	mov	r13, r24
    2080:	d2 18       	sub	r13, r2
    2082:	40 c0       	rjmp	.+128    	; 0x2104 <vfprintf+0x2b2>
    2084:	95 37       	cpi	r25, 0x75	; 117
    2086:	29 f4       	brne	.+10     	; 0x2092 <vfprintf+0x240>
    2088:	1f 2d       	mov	r17, r15
    208a:	1f 7e       	andi	r17, 0xEF	; 239
    208c:	2a e0       	ldi	r18, 0x0A	; 10
    208e:	30 e0       	ldi	r19, 0x00	; 0
    2090:	1d c0       	rjmp	.+58     	; 0x20cc <vfprintf+0x27a>
    2092:	1f 2d       	mov	r17, r15
    2094:	19 7f       	andi	r17, 0xF9	; 249
    2096:	9f 36       	cpi	r25, 0x6F	; 111
    2098:	61 f0       	breq	.+24     	; 0x20b2 <vfprintf+0x260>
    209a:	90 37       	cpi	r25, 0x70	; 112
    209c:	20 f4       	brcc	.+8      	; 0x20a6 <vfprintf+0x254>
    209e:	98 35       	cpi	r25, 0x58	; 88
    20a0:	09 f0       	breq	.+2      	; 0x20a4 <vfprintf+0x252>
    20a2:	ac c0       	rjmp	.+344    	; 0x21fc <vfprintf+0x3aa>
    20a4:	0f c0       	rjmp	.+30     	; 0x20c4 <vfprintf+0x272>
    20a6:	90 37       	cpi	r25, 0x70	; 112
    20a8:	39 f0       	breq	.+14     	; 0x20b8 <vfprintf+0x266>
    20aa:	98 37       	cpi	r25, 0x78	; 120
    20ac:	09 f0       	breq	.+2      	; 0x20b0 <vfprintf+0x25e>
    20ae:	a6 c0       	rjmp	.+332    	; 0x21fc <vfprintf+0x3aa>
    20b0:	04 c0       	rjmp	.+8      	; 0x20ba <vfprintf+0x268>
    20b2:	28 e0       	ldi	r18, 0x08	; 8
    20b4:	30 e0       	ldi	r19, 0x00	; 0
    20b6:	0a c0       	rjmp	.+20     	; 0x20cc <vfprintf+0x27a>
    20b8:	10 61       	ori	r17, 0x10	; 16
    20ba:	14 fd       	sbrc	r17, 4
    20bc:	14 60       	ori	r17, 0x04	; 4
    20be:	20 e1       	ldi	r18, 0x10	; 16
    20c0:	30 e0       	ldi	r19, 0x00	; 0
    20c2:	04 c0       	rjmp	.+8      	; 0x20cc <vfprintf+0x27a>
    20c4:	14 fd       	sbrc	r17, 4
    20c6:	16 60       	ori	r17, 0x06	; 6
    20c8:	20 e1       	ldi	r18, 0x10	; 16
    20ca:	32 e0       	ldi	r19, 0x02	; 2
    20cc:	17 ff       	sbrs	r17, 7
    20ce:	08 c0       	rjmp	.+16     	; 0x20e0 <vfprintf+0x28e>
    20d0:	f5 01       	movw	r30, r10
    20d2:	60 81       	ld	r22, Z
    20d4:	71 81       	ldd	r23, Z+1	; 0x01
    20d6:	82 81       	ldd	r24, Z+2	; 0x02
    20d8:	93 81       	ldd	r25, Z+3	; 0x03
    20da:	44 e0       	ldi	r20, 0x04	; 4
    20dc:	50 e0       	ldi	r21, 0x00	; 0
    20de:	08 c0       	rjmp	.+16     	; 0x20f0 <vfprintf+0x29e>
    20e0:	f5 01       	movw	r30, r10
    20e2:	80 81       	ld	r24, Z
    20e4:	91 81       	ldd	r25, Z+1	; 0x01
    20e6:	bc 01       	movw	r22, r24
    20e8:	80 e0       	ldi	r24, 0x00	; 0
    20ea:	90 e0       	ldi	r25, 0x00	; 0
    20ec:	42 e0       	ldi	r20, 0x02	; 2
    20ee:	50 e0       	ldi	r21, 0x00	; 0
    20f0:	a4 0e       	add	r10, r20
    20f2:	b5 1e       	adc	r11, r21
    20f4:	a1 01       	movw	r20, r2
    20f6:	0e 94 48 11 	call	0x2290	; 0x2290 <__ultoa_invert>
    20fa:	d8 2e       	mov	r13, r24
    20fc:	d2 18       	sub	r13, r2
    20fe:	8f e7       	ldi	r24, 0x7F	; 127
    2100:	f8 2e       	mov	r15, r24
    2102:	f1 22       	and	r15, r17
    2104:	f6 fe       	sbrs	r15, 6
    2106:	0b c0       	rjmp	.+22     	; 0x211e <vfprintf+0x2cc>
    2108:	5e ef       	ldi	r21, 0xFE	; 254
    210a:	f5 22       	and	r15, r21
    210c:	d9 14       	cp	r13, r9
    210e:	38 f4       	brcc	.+14     	; 0x211e <vfprintf+0x2cc>
    2110:	f4 fe       	sbrs	r15, 4
    2112:	07 c0       	rjmp	.+14     	; 0x2122 <vfprintf+0x2d0>
    2114:	f2 fc       	sbrc	r15, 2
    2116:	05 c0       	rjmp	.+10     	; 0x2122 <vfprintf+0x2d0>
    2118:	8f ee       	ldi	r24, 0xEF	; 239
    211a:	f8 22       	and	r15, r24
    211c:	02 c0       	rjmp	.+4      	; 0x2122 <vfprintf+0x2d0>
    211e:	1d 2d       	mov	r17, r13
    2120:	01 c0       	rjmp	.+2      	; 0x2124 <vfprintf+0x2d2>
    2122:	19 2d       	mov	r17, r9
    2124:	f4 fe       	sbrs	r15, 4
    2126:	0d c0       	rjmp	.+26     	; 0x2142 <vfprintf+0x2f0>
    2128:	fe 01       	movw	r30, r28
    212a:	ed 0d       	add	r30, r13
    212c:	f1 1d       	adc	r31, r1
    212e:	80 81       	ld	r24, Z
    2130:	80 33       	cpi	r24, 0x30	; 48
    2132:	19 f4       	brne	.+6      	; 0x213a <vfprintf+0x2e8>
    2134:	99 ee       	ldi	r25, 0xE9	; 233
    2136:	f9 22       	and	r15, r25
    2138:	08 c0       	rjmp	.+16     	; 0x214a <vfprintf+0x2f8>
    213a:	1f 5f       	subi	r17, 0xFF	; 255
    213c:	f2 fe       	sbrs	r15, 2
    213e:	05 c0       	rjmp	.+10     	; 0x214a <vfprintf+0x2f8>
    2140:	03 c0       	rjmp	.+6      	; 0x2148 <vfprintf+0x2f6>
    2142:	8f 2d       	mov	r24, r15
    2144:	86 78       	andi	r24, 0x86	; 134
    2146:	09 f0       	breq	.+2      	; 0x214a <vfprintf+0x2f8>
    2148:	1f 5f       	subi	r17, 0xFF	; 255
    214a:	0f 2d       	mov	r16, r15
    214c:	f3 fc       	sbrc	r15, 3
    214e:	14 c0       	rjmp	.+40     	; 0x2178 <vfprintf+0x326>
    2150:	f0 fe       	sbrs	r15, 0
    2152:	0f c0       	rjmp	.+30     	; 0x2172 <vfprintf+0x320>
    2154:	1e 15       	cp	r17, r14
    2156:	10 f0       	brcs	.+4      	; 0x215c <vfprintf+0x30a>
    2158:	9d 2c       	mov	r9, r13
    215a:	0b c0       	rjmp	.+22     	; 0x2172 <vfprintf+0x320>
    215c:	9d 2c       	mov	r9, r13
    215e:	9e 0c       	add	r9, r14
    2160:	91 1a       	sub	r9, r17
    2162:	1e 2d       	mov	r17, r14
    2164:	06 c0       	rjmp	.+12     	; 0x2172 <vfprintf+0x320>
    2166:	80 e2       	ldi	r24, 0x20	; 32
    2168:	90 e0       	ldi	r25, 0x00	; 0
    216a:	b3 01       	movw	r22, r6
    216c:	0e 94 1c 11 	call	0x2238	; 0x2238 <fputc>
    2170:	1f 5f       	subi	r17, 0xFF	; 255
    2172:	1e 15       	cp	r17, r14
    2174:	c0 f3       	brcs	.-16     	; 0x2166 <vfprintf+0x314>
    2176:	04 c0       	rjmp	.+8      	; 0x2180 <vfprintf+0x32e>
    2178:	1e 15       	cp	r17, r14
    217a:	10 f4       	brcc	.+4      	; 0x2180 <vfprintf+0x32e>
    217c:	e1 1a       	sub	r14, r17
    217e:	01 c0       	rjmp	.+2      	; 0x2182 <vfprintf+0x330>
    2180:	ee 24       	eor	r14, r14
    2182:	04 ff       	sbrs	r16, 4
    2184:	0f c0       	rjmp	.+30     	; 0x21a4 <vfprintf+0x352>
    2186:	80 e3       	ldi	r24, 0x30	; 48
    2188:	90 e0       	ldi	r25, 0x00	; 0
    218a:	b3 01       	movw	r22, r6
    218c:	0e 94 1c 11 	call	0x2238	; 0x2238 <fputc>
    2190:	02 ff       	sbrs	r16, 2
    2192:	1d c0       	rjmp	.+58     	; 0x21ce <vfprintf+0x37c>
    2194:	01 fd       	sbrc	r16, 1
    2196:	03 c0       	rjmp	.+6      	; 0x219e <vfprintf+0x34c>
    2198:	88 e7       	ldi	r24, 0x78	; 120
    219a:	90 e0       	ldi	r25, 0x00	; 0
    219c:	0e c0       	rjmp	.+28     	; 0x21ba <vfprintf+0x368>
    219e:	88 e5       	ldi	r24, 0x58	; 88
    21a0:	90 e0       	ldi	r25, 0x00	; 0
    21a2:	0b c0       	rjmp	.+22     	; 0x21ba <vfprintf+0x368>
    21a4:	80 2f       	mov	r24, r16
    21a6:	86 78       	andi	r24, 0x86	; 134
    21a8:	91 f0       	breq	.+36     	; 0x21ce <vfprintf+0x37c>
    21aa:	01 ff       	sbrs	r16, 1
    21ac:	02 c0       	rjmp	.+4      	; 0x21b2 <vfprintf+0x360>
    21ae:	8b e2       	ldi	r24, 0x2B	; 43
    21b0:	01 c0       	rjmp	.+2      	; 0x21b4 <vfprintf+0x362>
    21b2:	80 e2       	ldi	r24, 0x20	; 32
    21b4:	f7 fc       	sbrc	r15, 7
    21b6:	8d e2       	ldi	r24, 0x2D	; 45
    21b8:	90 e0       	ldi	r25, 0x00	; 0
    21ba:	b3 01       	movw	r22, r6
    21bc:	0e 94 1c 11 	call	0x2238	; 0x2238 <fputc>
    21c0:	06 c0       	rjmp	.+12     	; 0x21ce <vfprintf+0x37c>
    21c2:	80 e3       	ldi	r24, 0x30	; 48
    21c4:	90 e0       	ldi	r25, 0x00	; 0
    21c6:	b3 01       	movw	r22, r6
    21c8:	0e 94 1c 11 	call	0x2238	; 0x2238 <fputc>
    21cc:	9a 94       	dec	r9
    21ce:	d9 14       	cp	r13, r9
    21d0:	c0 f3       	brcs	.-16     	; 0x21c2 <vfprintf+0x370>
    21d2:	da 94       	dec	r13
    21d4:	f1 01       	movw	r30, r2
    21d6:	ed 0d       	add	r30, r13
    21d8:	f1 1d       	adc	r31, r1
    21da:	80 81       	ld	r24, Z
    21dc:	90 e0       	ldi	r25, 0x00	; 0
    21de:	b3 01       	movw	r22, r6
    21e0:	0e 94 1c 11 	call	0x2238	; 0x2238 <fputc>
    21e4:	dd 20       	and	r13, r13
    21e6:	a9 f7       	brne	.-22     	; 0x21d2 <vfprintf+0x380>
    21e8:	06 c0       	rjmp	.+12     	; 0x21f6 <vfprintf+0x3a4>
    21ea:	80 e2       	ldi	r24, 0x20	; 32
    21ec:	90 e0       	ldi	r25, 0x00	; 0
    21ee:	b3 01       	movw	r22, r6
    21f0:	0e 94 1c 11 	call	0x2238	; 0x2238 <fputc>
    21f4:	ea 94       	dec	r14
    21f6:	ee 20       	and	r14, r14
    21f8:	c1 f7       	brne	.-16     	; 0x21ea <vfprintf+0x398>
    21fa:	43 ce       	rjmp	.-890    	; 0x1e82 <vfprintf+0x30>
    21fc:	f3 01       	movw	r30, r6
    21fe:	66 81       	ldd	r22, Z+6	; 0x06
    2200:	77 81       	ldd	r23, Z+7	; 0x07
    2202:	cb 01       	movw	r24, r22
    2204:	2b 96       	adiw	r28, 0x0b	; 11
    2206:	e2 e1       	ldi	r30, 0x12	; 18
    2208:	0c 94 ea 0e 	jmp	0x1dd4	; 0x1dd4 <__epilogue_restores__>

0000220c <strnlen_P>:
    220c:	fc 01       	movw	r30, r24
    220e:	05 90       	lpm	r0, Z+
    2210:	61 50       	subi	r22, 0x01	; 1
    2212:	70 40       	sbci	r23, 0x00	; 0
    2214:	01 10       	cpse	r0, r1
    2216:	d8 f7       	brcc	.-10     	; 0x220e <strnlen_P+0x2>
    2218:	80 95       	com	r24
    221a:	90 95       	com	r25
    221c:	8e 0f       	add	r24, r30
    221e:	9f 1f       	adc	r25, r31
    2220:	08 95       	ret

00002222 <strnlen>:
    2222:	fc 01       	movw	r30, r24
    2224:	61 50       	subi	r22, 0x01	; 1
    2226:	70 40       	sbci	r23, 0x00	; 0
    2228:	01 90       	ld	r0, Z+
    222a:	01 10       	cpse	r0, r1
    222c:	d8 f7       	brcc	.-10     	; 0x2224 <strnlen+0x2>
    222e:	80 95       	com	r24
    2230:	90 95       	com	r25
    2232:	8e 0f       	add	r24, r30
    2234:	9f 1f       	adc	r25, r31
    2236:	08 95       	ret

00002238 <fputc>:
    2238:	0f 93       	push	r16
    223a:	1f 93       	push	r17
    223c:	cf 93       	push	r28
    223e:	df 93       	push	r29
    2240:	8c 01       	movw	r16, r24
    2242:	eb 01       	movw	r28, r22
    2244:	8b 81       	ldd	r24, Y+3	; 0x03
    2246:	81 ff       	sbrs	r24, 1
    2248:	1b c0       	rjmp	.+54     	; 0x2280 <fputc+0x48>
    224a:	82 ff       	sbrs	r24, 2
    224c:	0d c0       	rjmp	.+26     	; 0x2268 <fputc+0x30>
    224e:	2e 81       	ldd	r18, Y+6	; 0x06
    2250:	3f 81       	ldd	r19, Y+7	; 0x07
    2252:	8c 81       	ldd	r24, Y+4	; 0x04
    2254:	9d 81       	ldd	r25, Y+5	; 0x05
    2256:	28 17       	cp	r18, r24
    2258:	39 07       	cpc	r19, r25
    225a:	64 f4       	brge	.+24     	; 0x2274 <fputc+0x3c>
    225c:	e8 81       	ld	r30, Y
    225e:	f9 81       	ldd	r31, Y+1	; 0x01
    2260:	01 93       	st	Z+, r16
    2262:	f9 83       	std	Y+1, r31	; 0x01
    2264:	e8 83       	st	Y, r30
    2266:	06 c0       	rjmp	.+12     	; 0x2274 <fputc+0x3c>
    2268:	e8 85       	ldd	r30, Y+8	; 0x08
    226a:	f9 85       	ldd	r31, Y+9	; 0x09
    226c:	80 2f       	mov	r24, r16
    226e:	09 95       	icall
    2270:	89 2b       	or	r24, r25
    2272:	31 f4       	brne	.+12     	; 0x2280 <fputc+0x48>
    2274:	8e 81       	ldd	r24, Y+6	; 0x06
    2276:	9f 81       	ldd	r25, Y+7	; 0x07
    2278:	01 96       	adiw	r24, 0x01	; 1
    227a:	9f 83       	std	Y+7, r25	; 0x07
    227c:	8e 83       	std	Y+6, r24	; 0x06
    227e:	02 c0       	rjmp	.+4      	; 0x2284 <fputc+0x4c>
    2280:	0f ef       	ldi	r16, 0xFF	; 255
    2282:	1f ef       	ldi	r17, 0xFF	; 255
    2284:	c8 01       	movw	r24, r16
    2286:	df 91       	pop	r29
    2288:	cf 91       	pop	r28
    228a:	1f 91       	pop	r17
    228c:	0f 91       	pop	r16
    228e:	08 95       	ret

00002290 <__ultoa_invert>:
    2290:	fa 01       	movw	r30, r20
    2292:	aa 27       	eor	r26, r26
    2294:	28 30       	cpi	r18, 0x08	; 8
    2296:	51 f1       	breq	.+84     	; 0x22ec <__ultoa_invert+0x5c>
    2298:	20 31       	cpi	r18, 0x10	; 16
    229a:	81 f1       	breq	.+96     	; 0x22fc <__ultoa_invert+0x6c>
    229c:	e8 94       	clt
    229e:	6f 93       	push	r22
    22a0:	6e 7f       	andi	r22, 0xFE	; 254
    22a2:	6e 5f       	subi	r22, 0xFE	; 254
    22a4:	7f 4f       	sbci	r23, 0xFF	; 255
    22a6:	8f 4f       	sbci	r24, 0xFF	; 255
    22a8:	9f 4f       	sbci	r25, 0xFF	; 255
    22aa:	af 4f       	sbci	r26, 0xFF	; 255
    22ac:	b1 e0       	ldi	r27, 0x01	; 1
    22ae:	3e d0       	rcall	.+124    	; 0x232c <__ultoa_invert+0x9c>
    22b0:	b4 e0       	ldi	r27, 0x04	; 4
    22b2:	3c d0       	rcall	.+120    	; 0x232c <__ultoa_invert+0x9c>
    22b4:	67 0f       	add	r22, r23
    22b6:	78 1f       	adc	r23, r24
    22b8:	89 1f       	adc	r24, r25
    22ba:	9a 1f       	adc	r25, r26
    22bc:	a1 1d       	adc	r26, r1
    22be:	68 0f       	add	r22, r24
    22c0:	79 1f       	adc	r23, r25
    22c2:	8a 1f       	adc	r24, r26
    22c4:	91 1d       	adc	r25, r1
    22c6:	a1 1d       	adc	r26, r1
    22c8:	6a 0f       	add	r22, r26
    22ca:	71 1d       	adc	r23, r1
    22cc:	81 1d       	adc	r24, r1
    22ce:	91 1d       	adc	r25, r1
    22d0:	a1 1d       	adc	r26, r1
    22d2:	20 d0       	rcall	.+64     	; 0x2314 <__ultoa_invert+0x84>
    22d4:	09 f4       	brne	.+2      	; 0x22d8 <__ultoa_invert+0x48>
    22d6:	68 94       	set
    22d8:	3f 91       	pop	r19
    22da:	2a e0       	ldi	r18, 0x0A	; 10
    22dc:	26 9f       	mul	r18, r22
    22de:	11 24       	eor	r1, r1
    22e0:	30 19       	sub	r19, r0
    22e2:	30 5d       	subi	r19, 0xD0	; 208
    22e4:	31 93       	st	Z+, r19
    22e6:	de f6       	brtc	.-74     	; 0x229e <__ultoa_invert+0xe>
    22e8:	cf 01       	movw	r24, r30
    22ea:	08 95       	ret
    22ec:	46 2f       	mov	r20, r22
    22ee:	47 70       	andi	r20, 0x07	; 7
    22f0:	40 5d       	subi	r20, 0xD0	; 208
    22f2:	41 93       	st	Z+, r20
    22f4:	b3 e0       	ldi	r27, 0x03	; 3
    22f6:	0f d0       	rcall	.+30     	; 0x2316 <__ultoa_invert+0x86>
    22f8:	c9 f7       	brne	.-14     	; 0x22ec <__ultoa_invert+0x5c>
    22fa:	f6 cf       	rjmp	.-20     	; 0x22e8 <__ultoa_invert+0x58>
    22fc:	46 2f       	mov	r20, r22
    22fe:	4f 70       	andi	r20, 0x0F	; 15
    2300:	40 5d       	subi	r20, 0xD0	; 208
    2302:	4a 33       	cpi	r20, 0x3A	; 58
    2304:	18 f0       	brcs	.+6      	; 0x230c <__ultoa_invert+0x7c>
    2306:	49 5d       	subi	r20, 0xD9	; 217
    2308:	31 fd       	sbrc	r19, 1
    230a:	40 52       	subi	r20, 0x20	; 32
    230c:	41 93       	st	Z+, r20
    230e:	02 d0       	rcall	.+4      	; 0x2314 <__ultoa_invert+0x84>
    2310:	a9 f7       	brne	.-22     	; 0x22fc <__ultoa_invert+0x6c>
    2312:	ea cf       	rjmp	.-44     	; 0x22e8 <__ultoa_invert+0x58>
    2314:	b4 e0       	ldi	r27, 0x04	; 4
    2316:	a6 95       	lsr	r26
    2318:	97 95       	ror	r25
    231a:	87 95       	ror	r24
    231c:	77 95       	ror	r23
    231e:	67 95       	ror	r22
    2320:	ba 95       	dec	r27
    2322:	c9 f7       	brne	.-14     	; 0x2316 <__ultoa_invert+0x86>
    2324:	00 97       	sbiw	r24, 0x00	; 0
    2326:	61 05       	cpc	r22, r1
    2328:	71 05       	cpc	r23, r1
    232a:	08 95       	ret
    232c:	9b 01       	movw	r18, r22
    232e:	ac 01       	movw	r20, r24
    2330:	0a 2e       	mov	r0, r26
    2332:	06 94       	lsr	r0
    2334:	57 95       	ror	r21
    2336:	47 95       	ror	r20
    2338:	37 95       	ror	r19
    233a:	27 95       	ror	r18
    233c:	ba 95       	dec	r27
    233e:	c9 f7       	brne	.-14     	; 0x2332 <__ultoa_invert+0xa2>
    2340:	62 0f       	add	r22, r18
    2342:	73 1f       	adc	r23, r19
    2344:	84 1f       	adc	r24, r20
    2346:	95 1f       	adc	r25, r21
    2348:	a0 1d       	adc	r26, r0
    234a:	08 95       	ret

0000234c <_exit>:
    234c:	f8 94       	cli

0000234e <__stop_program>:
    234e:	ff cf       	rjmp	.-2      	; 0x234e <__stop_program>
