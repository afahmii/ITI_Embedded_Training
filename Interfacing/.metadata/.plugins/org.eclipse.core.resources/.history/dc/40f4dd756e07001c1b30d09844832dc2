#include "../../LIB/Bit_Operations.h"
#include "../../LIB/Datatypes.h"

#include "Timer_Private.h"
#include "Timer_Config.h"
#include "Timer_Interface.h"

st_TIMER0  timer_0 = {TIMER0_MODE,INTERRUPT_STATUS,COMPARE_MATCH_OUTPUT_MODE,COMPARE_MATCH_VALUE,DUTY_CYCLE,PRESCALER_SECLECTOR};
st_TIMER1  timer_1;
void TIMER0_VidInit(st_TIMER0* TIMER0){

	/*			Mode Select	w/Interrupt		*/
	/*					CTC					*/
	if(TIMER0->Timer_Mode == TIMER0_CTC){
		CLR_Bit(TCCR0,TCCR0_WGM00);
		Set_Bit(TCCR0,TCCR0_WGM01);
		if(TIMER0->Interrupt_status == Enable){
			TIMSK |= (1<<TIMSK_OCIE0);
		}
		else if (TIMER0->Interrupt_status == Disable){
			TIMSK &= (~(1<<TIMSK_OCIE0));
		}
	}
	/*					PWM					*/
	else if (TIMER0->Timer_Mode == TIMER0_PWM){
		Set_Bit(TCCR0,TCCR0_WGM00);
		Set_Bit(TCCR0,TCCR0_WGM01);
		if(TIMER0->Interrupt_status == Enable){
			TIMSK |= (1<<TIMSK_OCIE0);
		}
		else if (TIMER0->Interrupt_status == Disable){
			TIMSK &= (~(1<<TIMSK_OCIE0));
		}
	}
	/*				PHASE CORRECT			*/
	else if(TIMER0->Timer_Mode == TIMER0_PHASECORRECT ){
		Set_Bit(TCCR0,TCCR0_WGM00);
		CLR_Bit(TCCR0,TCCR0_WGM01);
		if(TIMER0->Interrupt_status == Enable){
			TIMSK |= (1<<TIMSK_OCIE0);
		}
		else if (TIMER0->Interrupt_status == Disable){
			TIMSK &= (~(1<<TIMSK_OCIE0));
		}
	}
	/*				NORMAL MODE				*/
	else if(TIMER0->Timer_Mode == TIMER0_NORMAL){
		CLR_Bit(TCCR0,TCCR0_WGM00);
		CLR_Bit(TCCR0,TCCR0_WGM01);
		if(TIMER0->Interrupt_status == Enable){
			TIMSK |= (1<<TIMSK_TOIE0);
		}
		else if (TIMER0->Interrupt_status == Disable){
			TIMSK &= (~(1<<TIMSK_TOIE0));
		}
	}
	/*======================================*/
	/*		Compare Match OUTPUT Mode "OC0"	*/
	/*				Duty Cycle				*/
	/*					CTC					*/
	if(TIMER0->Timer_Mode == TIMER0_CTC){
		TCCR0 &= ~(3<<TCCR0_COM00); 							/*Clear Bits*/
		TCCR0 |= (TIMER0->CompareMatchOutputMode<<TCCR0_COM00);	/*Set Bits*/
		OCR0 = TIMER0->CompareMatchValue;
	}
	/*				PhaseCorrect			*/
	else if ( TIMER0->Timer_Mode == TIMER0_PHASECORRECT){
		TCCR0 &= ~(3<<TCCR0_COM00); 							/*Clear Bits*/
		TCCR0 |= (TIMER0->CompareMatchOutputMode<<TCCR0_COM00);	/*Set Bits*/
		if(TIMER0->CompareMatchOutputMode == TIMER0PC_Set_OC0_Upcounting){
			OCR0 = 256-((TIMER0->Duty_Cycle*256)/100);
		}
		else if(TIMER0->CompareMatchOutputMode == TIMER0PC_Clear_OC0_Upcounting){
			OCR0 = (256*TIMER0->Duty_Cycle)/100;
		}
	}
	/*					PWM					*/
	else if ( TIMER0->Timer_Mode == TIMER0_PWM){
		TCCR0 &= ~(3<<TCCR0_COM00); 							/*Clear Bits*/
		TCCR0 |= (TIMER0->CompareMatchOutputMode<<TCCR0_COM00);	/*Set Bits*/
		if(TIMER0->CompareMatchOutputMode == TIMER0PWM_Clear_OC0_On_Compare_Match){
			OCR0 = (256*TIMER0->Duty_Cycle)/100;
		}
		else if(TIMER0->CompareMatchOutputMode == TIMER0PWM_Set_OC0_On_Compare_Match){
			OCR0 = 256-((TIMER0->Duty_Cycle*256)/100);
		}
	}
	/*======================================*/
	/*				Prescaling				*/
	TCCR0 &= ~(0b00000111);				/*Clear Bits*/
	TCCR0 |= TIMER0->Prescaler;			/*Set Bits*/

}/*End of TIMER0_VidINIT Function*/
void TIMER0_VidDutyCycleSelector_Standard(u8 Copy_Local_Duty){
	OCR0 = (256*Copy_Local_Duty)/100;
}
void TIMER0_VidDutyCycleSelector_Reversed(u8 Copy_Local_Duty){
	OCR0 = 256-((Copy_Local_Duty*256)/100);
}

void TIMER1_VidInit(st_TIMER1* TIMER1){

	/*======================================*/
	/*				Mode Select				*/
	/*======================================*/
	TCCR1A &= ~(0b00000011); /*Clear the first two bits in TCCR1A Register*/
	/*Mask Bits no 2 and 3 in "Timer_Mode", then assign the results "bit 0 and 1" values to TCCR1A Register*/
	TCCR1A |= (TIMER1->Timer_Mode&0b11110011);
	TCCR1B &= ~(0b00011000); /*Clear the 4th and 5th bits*/
	/*Mask the 1st and 2nd bits in "Timer_Mode", Shift the result by "WGM12" or "3", then assign the values in TCCR1B Register*/
	TCCR1B |= ((TIMER1->Timer_Mode&0b11111100)<<TCCR1B_WGM12);
	/*======================================*/
	/*				INTERRUPT				*/
	/*======================================*/

	if(TIMER1->Interrupt_status == Output_Compare_A_INT){
		if(TIMER1->Interrupt_type == TIMER1_INT_Enable){
			Set_Bit(TIMSK,TIMSK_OCIE1A);
		}
		else if(TIMER1->Interrupt_type == TIMER1_INT_Disable){
			CLR_Bit(TIMSK,TIMSK_OCIE1A);
		}
	}
	else if(TIMER1->Interrupt_status == Output_Compare_B_INT){
			if(TIMER1->Interrupt_type == TIMER1_INT_Enable){
				Set_Bit(TIMSK,TIMSK_OCIE1B);
			}
			else if(TIMER1->Interrupt_type == TIMER1_INT_Disable){
				CLR_Bit(TIMSK,TIMSK_OCIE1B);
			}
		}
	else if(TIMER1->Interrupt_status == Both_Output_Compare_A_B_INT){
			if(TIMER1->Interrupt_type == TIMER1_INT_Enable){
				Set_Bit(TIMSK,TIMSK_OCIE1A);
				Set_Bit(TIMSK,TIMSK_OCIE1B);
			}
			else if(TIMER1->Interrupt_type == TIMER1_INT_Disable){
				CLR_Bit(TIMSK,TIMSK_OCIE1A);
				CLR_Bit(TIMSK,TIMSK_OCIE1B);
			}
		}
	else if(TIMER1->Interrupt_status == Over_FLOW_INT){
			if(TIMER1->Interrupt_type == TIMER1_INT_Enable){
				Set_Bit(TIMSK,TIMSK_TOIE1);
			}
			else if(TIMER1->Interrupt_type == TIMER1_INT_Disable){
				CLR_Bit(TIMSK,TIMSK_TOIE1);
			}
		}

	/*======================================*/
	/*				Prescaling				*/
	/*======================================*/
	TCCR0 &= ~(0b00000111);				/*Clear Bits*/
	TCCR0 |= TIMER1->Prescaler;			/*Set Bits*/
}
void TIMER1_VidSetCompareMatchOutputMode(st_TIMER1_CompareMatch * TIMER1){
	/*======================================*/
	/*		Compare Match Output Mode		*/
	/*======================================*/
	if(TIMER1->Timer_Mode == CTC || CTC_ICR1_TOP){
		if(TIMER1->CompareMatchUnitType == UnitA)
	}
}
void TIMER1_VidSetDutyCycle(void){

}
void TIMER1_VidSetTopOVF(u16 Copy_SetTop){
	/*Set ICR1H/ICR1L Top Value*/
	ICR1L = Copy_SetTop;
}
void TIMER1_VidSetCompareVal(u16 Copy_SetCompareVal){
	/*Set OCRA1L/OCRA1H Clear ON Compare value*/
	OCR1AL = Copy_SetCompareVal;
}

static void (*TIMER0_SetCallBackFunc)(void) = NULL;

void TIMER0_SetCallBack(void(*Copy_pCallBackFunction)(void)){
	if(Copy_pCallBackFunction != NULL){
		TIMER0_SetCallBackFunc = Copy_pCallBackFunction;
	}
}


void __vector_10(void) __attribute__ ((signal));
void __vector_10(void){
	if(TIMER0_SetCallBackFunc != NULL){
		TIMER0_SetCallBackFunc();
	}

}
