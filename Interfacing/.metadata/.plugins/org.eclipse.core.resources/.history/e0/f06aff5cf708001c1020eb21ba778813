#include "../../LIB/Datatypes.h"
#include "../../LIB/Bit_Operations.h"

#include "UART_Config.h"
#include "UART_Private.h"
#include "UART_Interface.h"

st_uart_init UART_INIT = {UART_MODE,
		UART_Parity,
		UART_StopBit,
		UART_DataBits,
		UART_CLKPolarity,
		UART_DoubleSpeed,
		UART_MultiProcessing};

void UART_Vidinit(st_uart_init * PtrUART){

	u8 Local_u8temp =0 ;

	/*	Select Mode of Operation - UCSRC*/
	/*==================================*/
	if(PtrUART->STM_UART_MODE == UART_Async){
		CLR_Bit(Local_u8temp,UCSRC_UMSEL); /*Clear Bit*/
	}
	else if(PtrUART->STM_UART_MODE == USART_Sync){
		Set_Bit(Local_u8temp,UCSRC_UMSEL); /*Set Bit*/
	}
	/*		Set Parity - UCSRC			*/
	/*==================================*/
	if(PtrUART->STM_UART_Parity == UART_ParityDisable){
		CLR_Bit(Local_u8temp,UCSRC_UPM0);
		CLR_Bit(Local_u8temp,UCSRC_UPM1);	/*Clear Bits*/
	}
	else if(PtrUART->STM_UART_Parity == UART_PartiyEven){
		CLR_Bit(Local_u8temp,UCSRC_UPM0);
		Set_Bit(Local_u8temp,UCSRC_UPM1);
	}
	else if(PtrUART->STM_UART_Parity == UART_PartiyOdd){
		Set_Bit(Local_u8temp,UCSRC_UPM0);
		Set_Bit(Local_u8temp,UCSRC_UPM1);
	}
	/*	Set No of Stop Bits - UCSRC		*/
	/*==================================*/
	if(PtrUART->STM_UART_StopBit == UART_OneStopBit){
		CLR_Bit(Local_u8temp,UCSRC_USBS);
	}
	else if(PtrUART->STM_UART_StopBit == UART_TwoStopBits){
		Set_Bit(Local_u8temp,UCSRC_USBS);
	}
	/*Character Size (5~9) - UCSRC/UCSRB*/
	/*==================================*/
	if(PtrUART->STM_UART_DataBits == UART_Data_5Bit){
		CLR_Bit(Local_u8temp,UCSRC_UCSZ0);
		CLR_Bit(Local_u8temp,UCSRC_UCSZ1);
		CLR_Bit(UCSRB,UCSRB_UCSZ2);
	}
	else if(PtrUART->STM_UART_DataBits == UART_Data_6Bit){
		Set_Bit(Local_u8temp,UCSRC_UCSZ0);
		CLR_Bit(Local_u8temp,UCSRC_UCSZ1);
		CLR_Bit(UCSRB,UCSRB_UCSZ2);
	}
	else if(PtrUART->STM_UART_DataBits == UART_Data_7Bit){
		CLR_Bit(Local_u8temp,UCSRC_UCSZ0);
		Set_Bit(Local_u8temp,UCSRC_UCSZ1);
		CLR_Bit(UCSRB,UCSRB_UCSZ2);
	}
	else if(PtrUART->STM_UART_DataBits == UART_Data_8Bit){
		Set_Bit(Local_u8temp,UCSRC_UCSZ0);
		Set_Bit(Local_u8temp,UCSRC_UCSZ1);
		CLR_Bit(UCSRB,UCSRB_UCSZ2);
	}
	else if(PtrUART->STM_UART_DataBits == UART_Data_9Bit){
		Set_Bit(Local_u8temp,UCSRC_UCSZ0);
		Set_Bit(Local_u8temp,UCSRC_UCSZ1);
		Set_Bit(UCSRB,UCSRB_UCSZ2);
	}

	/*		Clock Polarity- UCSRC		*/
	/*==================================*/
	if(PtrUART->STM_UART_CLKPolarity == UART_Sampling_RX_Falling){
		CLR_Bit(Local_u8temp,UCSRC_UCPOL);
	}
	else if(PtrUART->STM_UART_CLKPolarity == UART_Sampling_RX_Rising){
		Set_Bit(Local_u8temp,UCSRC_UCPOL);
	}

	UCSRC = Local_u8temp ;
	/*Enable/Disable Double Transmission Speed*/
	/*==================================*/
	if(PtrUART->STM_UART_DoubleSpeed == UART_DoubleSpeedDisabled){
		CLR_Bit(UCSRA,UCSRA_U2X);
	}
	else if(PtrUART->STM_UART_DoubleSpeed == UART_DoubleSpeedEnabled){
		Set_Bit(UCSRA,UCSRA_U2X);
	}

	/*Enable/Disable Double Processing Mode*/
	/*==================================*/
	if(PtrUART->STM_UART_MultiProcessing == UART_MultiProcessingDisabled){
		CLR_Bit(UCSRA,UCSRA_MPCM);
	}
	else if(PtrUART->STM_UART_MultiProcessing == UART_MultiProcessingEnabled){
		Set_Bit(UCSRA,UCSRA_MPCM);
	}
}/*End of UART_INIT Function*/
void UART_VidReceiverEnable(void){
	UCSRB |= (1<<UCSRB_RXEN);
}
void UART_VidReceiverDisable(void){
	UCSRB &= ~(1<<UCSRB_RXEN);
}
void UART_VidTransmitterEnable(void){
	UCSRB |= (1<<UCSRB_TXEN);
}
void UART_VidTransmitterDisable(void){
	UCSRB &= ~(1<<UCSRB_TXEN);
}
void UART_VidInterruptInit(void){

	/*Enable/Disable RX Complete interrupt*/

	/*Enable/Disable TX Complete Interrupt*/

	/*Enable/Disable Data Register Empty Interrupt*/

}

void UART_VidTransmit(u8 Copy_u8Data){

}

u8 UART_u8Receive(void){

}

