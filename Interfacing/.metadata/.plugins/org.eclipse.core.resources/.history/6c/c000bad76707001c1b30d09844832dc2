#ifndef _Timer_INTERFACE_H_
#define _Timer_INTERFACE_H_

typedef enum Timer0_init{

	/*Timer0_mode*/
	TIMER0_NORMAL,
	TIMER0_CTC,
	TIMER0_PWM ,
	TIMER0_PHASECORRECT,
	/* CTC OC0*/
	TIMER0CTC_OC0_Disconnected = 0,
	TIMER0CTC_Toggle_OC0,
	TIMER0CTC_Clear_OC0,
	TIMER0CTC_Set_OC0,
	/*PWM OC0	*/
	TIMER0PWM_OC0_Disconnected = 0,
	TIMER0PWM_Clear_OC0_On_Compare_Match = 2,
	TIMER0PWM_Set_OC0_On_Compare_Match,
	/*PhaseCorrect OC0*/
	TIMER0PC_OC0_Disconnected = 0,
	TIMER0PC_Clear_OC0_Upcounting  = 2,
	TIMER0PC_Set_OC0_Upcounting,
	/*Timer0_Interrupts*/
	Disable = 0 ,
	Enable,
	/*Prescaling*/
	Stop_Timer =0,
	No_Prescaling,
	P_8,
	P_64,
	P_256,
	P_1024

}en_Timer;
typedef enum Timer1_init{
	/*TIMER 1 MODES*/
	Normal,
	Phase_Correct_8bit,
	Phase_Correct_9bit,
	Phase_Correct_10bit,
	CTC,
	PWM_8Bit,
	PWM_9Bit,
	PWM_10Bit,
	Phase_Frequency_Correct_ICR1_TOP,
	Phase_Frequency_Correct_OCR1A_TOP,
	Phase_Correct_ICR1_TOP,
	Phase_Correct_OCR1ATOP,
	CTC_ICR1_TOP,
	PWM_ICR1_TOP = 14,
	PWM_OCR1A_TOP,
	/*INTERRUPT Type*/
	Output_Compare_A_INT =0,
	Output_Compare_B_INT,
	Over_FLOW_INT,
	/*INTERRUPT STATUS*/
	Disable = 0,
	Enable,
	/*Compare output mode - CTC*/
	OC1A_OC1B_Disconnected = 0,
	OC1A_OC1B_Toggle,
	OC1A_OC1B_Clear,
	OC1A_OC1B_Set,
	/*Compare output mode PWM*/
	OC1A_OC1B_Disconnected = 0,
	OC1A_Toggle_OnCompareMatch,
	OC1A_OC1B_Clear_OnCompareMatch,
	OC1A_OC1B_Set_OnCompareMatch,
	/*Compare output mode PhaseCorrect - Phase and Frequency Correct*/
	OC1A_OC1B_Disconnected = 0,
	OC1A_Toggle_OnCompareMatch,
	OC1A_OC1B_Clear_OnCompareMatch_UpCounting,
	OC1A_OC1B_Set_OnCompareMatch_UpCounting,
	/*Prescaler*/
	Stop_Timer =0,
	No_Prescaling,
	P_8,
	P_64,
	P_256,
	P_1024
};
typedef struct TIMER_INIT{
	u8 Timer_Mode;
	u8 Interrupt_status;
	u8 CompareMatchOutputMode;
	u8 CompareMatchValue;
	u8 Duty_Cycle;
	u8 Prescaler;
}st_TIMER;
typedef struct TIMER1_INIT{
	u8 Timer_Mode;
	u8 Interrupt_type;
	u8 Interrupt_status;
	u8 CompareMatchOutputMode;
	u8 CompareMatchValue;
	u8 Duty_Cycle;
	u8 Prescaler;
}st_TIMER1;


/*Function Prototypes*/
void TIMER0_VidInit(st_TIMER * TIMER0);
void TIMER0_SetCallBack(void(*Copy_pCallBackFunction)(void));
void TIMER0_VidDutyCycleSelector_Standard(u8 Copy_Local_Duty);
void TIMER0_VidDutyCycleSelector_Reversed(u8 Copy_Local_Duty);
void TIMER1_VidInit(void);
void TIMER1_VidSetTopOVF(u16 Copy_SetTop);
void TIMER1_VidSetCompareVal(u16 Copy_SetCompareVal);

#endif /*_Timer_INTERFACE_H_*/
