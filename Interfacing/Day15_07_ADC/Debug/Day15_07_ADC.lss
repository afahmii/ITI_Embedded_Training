
Day15_07_ADC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000b1c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000004  00800060  00800060  00000b90  2**0
                  ALLOC
  2 .stab         00001128  00000000  00000000  00000b90  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000bd3  00000000  00000000  00001cb8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 b9 00 	jmp	0x172	; 0x172 <__vector_1>
   8:	0c 94 fe 00 	jmp	0x1fc	; 0x1fc <__vector_2>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a4 36       	cpi	r26, 0x64	; 100
  6c:	b1 07       	cpc	r27, r17
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 30 05 	call	0xa60	; 0xa60 <main>
  74:	0c 94 8c 05 	jmp	0xb18	; 0xb18 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <GIE_VidEnable>:
#include "GIE_Interface.h"
#include "GIE_Private.h"

/*GIE Enable*/

void GIE_VidEnable(void){
  7c:	df 93       	push	r29
  7e:	cf 93       	push	r28
  80:	cd b7       	in	r28, 0x3d	; 61
  82:	de b7       	in	r29, 0x3e	; 62
	Set_Bit(SREG,SREG_I_BIT);
  84:	af e5       	ldi	r26, 0x5F	; 95
  86:	b0 e0       	ldi	r27, 0x00	; 0
  88:	ef e5       	ldi	r30, 0x5F	; 95
  8a:	f0 e0       	ldi	r31, 0x00	; 0
  8c:	80 81       	ld	r24, Z
  8e:	80 68       	ori	r24, 0x80	; 128
  90:	8c 93       	st	X, r24
}
  92:	cf 91       	pop	r28
  94:	df 91       	pop	r29
  96:	08 95       	ret

00000098 <GIE_VidDisable>:

/*GIE Disable*/

void GIE_VidDisable(void){
  98:	df 93       	push	r29
  9a:	cf 93       	push	r28
  9c:	cd b7       	in	r28, 0x3d	; 61
  9e:	de b7       	in	r29, 0x3e	; 62
	CLR_Bit(SREG,SREG_I_BIT);
  a0:	af e5       	ldi	r26, 0x5F	; 95
  a2:	b0 e0       	ldi	r27, 0x00	; 0
  a4:	ef e5       	ldi	r30, 0x5F	; 95
  a6:	f0 e0       	ldi	r31, 0x00	; 0
  a8:	80 81       	ld	r24, Z
  aa:	8f 77       	andi	r24, 0x7F	; 127
  ac:	8c 93       	st	X, r24
}
  ae:	cf 91       	pop	r28
  b0:	df 91       	pop	r29
  b2:	08 95       	ret

000000b4 <EXTI0_VidIntInit>:
#include "EXTI_Config.h"


/*EXTI Init*/

void EXTI0_VidIntInit(){
  b4:	df 93       	push	r29
  b6:	cf 93       	push	r28
  b8:	cd b7       	in	r28, 0x3d	; 61
  ba:	de b7       	in	r29, 0x3e	; 62
		CLR_Bit(MCUCR,MCUCR_ISC00_PIN);
#elif	EXTI0_SENSE_CONTROL == EXTI_RISING_EDGE_SC
		Set_Bit(MCUCR,MCUCR_ISC01_PIN);
		Set_Bit(MCUCR,MCUCR_ISC00_PIN);
#elif	EXTI0_SENSE_CONTROL == EXTI_ON_CHANGE_SC
		Set_Bit(MCUCR,MCUCR_ISC00_PIN);
  bc:	a5 e5       	ldi	r26, 0x55	; 85
  be:	b0 e0       	ldi	r27, 0x00	; 0
  c0:	e5 e5       	ldi	r30, 0x55	; 85
  c2:	f0 e0       	ldi	r31, 0x00	; 0
  c4:	80 81       	ld	r24, Z
  c6:	81 60       	ori	r24, 0x01	; 1
  c8:	8c 93       	st	X, r24
		CLR_Bit(MCUCR,MCUCR_ISC01_PIN);
  ca:	a5 e5       	ldi	r26, 0x55	; 85
  cc:	b0 e0       	ldi	r27, 0x00	; 0
  ce:	e5 e5       	ldi	r30, 0x55	; 85
  d0:	f0 e0       	ldi	r31, 0x00	; 0
  d2:	80 81       	ld	r24, Z
  d4:	8d 7f       	andi	r24, 0xFD	; 253
  d6:	8c 93       	st	X, r24
#else
		#warning "No Sense Control Selected, Back to Config File"
#endif
	/*Enable Interrupt*/

		Set_Bit(GICR,GICR_INT0_PIN);
  d8:	ab e5       	ldi	r26, 0x5B	; 91
  da:	b0 e0       	ldi	r27, 0x00	; 0
  dc:	eb e5       	ldi	r30, 0x5B	; 91
  de:	f0 e0       	ldi	r31, 0x00	; 0
  e0:	80 81       	ld	r24, Z
  e2:	80 64       	ori	r24, 0x40	; 64
  e4:	8c 93       	st	X, r24
}
  e6:	cf 91       	pop	r28
  e8:	df 91       	pop	r29
  ea:	08 95       	ret

000000ec <EXTI1_VidIntInit>:
void EXTI1_VidIntInit(){
  ec:	df 93       	push	r29
  ee:	cf 93       	push	r28
  f0:	cd b7       	in	r28, 0x3d	; 61
  f2:	de b7       	in	r29, 0x3e	; 62
		CLR_Bit(MCUCR,MCUCR_ISC10_PIN);
#elif	EXTI1_SENSE_CONTROL == EXTI_RISING_EDGE_SC
		Set_Bit(MCUCR,MCUCR_ISC11_PIN);
		Set_Bit(MCUCR,MCUCR_ISC10_PIN);
#elif	EXTI1_SENSE_CONTROL == EXTI_ON_CHANGE_SC
		Set_Bit(MCUCR,MCUCR_ISC10_PIN);
  f4:	a5 e5       	ldi	r26, 0x55	; 85
  f6:	b0 e0       	ldi	r27, 0x00	; 0
  f8:	e5 e5       	ldi	r30, 0x55	; 85
  fa:	f0 e0       	ldi	r31, 0x00	; 0
  fc:	80 81       	ld	r24, Z
  fe:	84 60       	ori	r24, 0x04	; 4
 100:	8c 93       	st	X, r24
		CLR_Bit(MCUCR,MCUCR_ISC11_PIN);
 102:	a5 e5       	ldi	r26, 0x55	; 85
 104:	b0 e0       	ldi	r27, 0x00	; 0
 106:	e5 e5       	ldi	r30, 0x55	; 85
 108:	f0 e0       	ldi	r31, 0x00	; 0
 10a:	80 81       	ld	r24, Z
 10c:	87 7f       	andi	r24, 0xF7	; 247
 10e:	8c 93       	st	X, r24
#else
		#warning "No Sense Control Selected, Back to Config File"
#endif
	/*Enable Interrupt*/

		Set_Bit(GICR,GICR_INT1_PIN);
 110:	ab e5       	ldi	r26, 0x5B	; 91
 112:	b0 e0       	ldi	r27, 0x00	; 0
 114:	eb e5       	ldi	r30, 0x5B	; 91
 116:	f0 e0       	ldi	r31, 0x00	; 0
 118:	80 81       	ld	r24, Z
 11a:	80 68       	ori	r24, 0x80	; 128
 11c:	8c 93       	st	X, r24
}
 11e:	cf 91       	pop	r28
 120:	df 91       	pop	r29
 122:	08 95       	ret

00000124 <EXTI2_VidIntInit>:
void EXTI2_VidIntInit(){
 124:	df 93       	push	r29
 126:	cf 93       	push	r28
 128:	cd b7       	in	r28, 0x3d	; 61
 12a:	de b7       	in	r29, 0x3e	; 62
	/*Sense Control*/

#if 	EXTI2_SENSE_CONTROL == EXTI_FALLING_EDGE_SC
		CLR_Bit(MCUCSR,MCUCSR_ISC2_PIN);
 12c:	a4 e5       	ldi	r26, 0x54	; 84
 12e:	b0 e0       	ldi	r27, 0x00	; 0
 130:	e4 e5       	ldi	r30, 0x54	; 84
 132:	f0 e0       	ldi	r31, 0x00	; 0
 134:	80 81       	ld	r24, Z
 136:	8f 7b       	andi	r24, 0xBF	; 191
 138:	8c 93       	st	X, r24
#else
		#warning "No Sense Control Selected, Back to Config File"
#endif
	/*Enable Interrupt*/

		Set_Bit(GICR,GICR_INT2_PIN);
 13a:	ab e5       	ldi	r26, 0x5B	; 91
 13c:	b0 e0       	ldi	r27, 0x00	; 0
 13e:	eb e5       	ldi	r30, 0x5B	; 91
 140:	f0 e0       	ldi	r31, 0x00	; 0
 142:	80 81       	ld	r24, Z
 144:	80 62       	ori	r24, 0x20	; 32
 146:	8c 93       	st	X, r24
}
 148:	cf 91       	pop	r28
 14a:	df 91       	pop	r29
 14c:	08 95       	ret

0000014e <EXTI0_CallBack>:
  returns nothing (void)}.. pointing to NULL*/
void (* EXTI0_Func)(void) = NULL;


/*a function that takes pointer to function as an argument*/
void EXTI0_CallBack (void(*func)(void)){
 14e:	df 93       	push	r29
 150:	cf 93       	push	r28
 152:	00 d0       	rcall	.+0      	; 0x154 <EXTI0_CallBack+0x6>
 154:	cd b7       	in	r28, 0x3d	; 61
 156:	de b7       	in	r29, 0x3e	; 62
 158:	9a 83       	std	Y+2, r25	; 0x02
 15a:	89 83       	std	Y+1, r24	; 0x01
	/*CAll back function pointing to the passed function argument*/
	EXTI0_Func = func ;
 15c:	89 81       	ldd	r24, Y+1	; 0x01
 15e:	9a 81       	ldd	r25, Y+2	; 0x02
 160:	90 93 61 00 	sts	0x0061, r25
 164:	80 93 60 00 	sts	0x0060, r24
}
 168:	0f 90       	pop	r0
 16a:	0f 90       	pop	r0
 16c:	cf 91       	pop	r28
 16e:	df 91       	pop	r29
 170:	08 95       	ret

00000172 <__vector_1>:

void __vector_1 (void) __attribute__((signal)) ;

void __vector_1 (void){
 172:	1f 92       	push	r1
 174:	0f 92       	push	r0
 176:	0f b6       	in	r0, 0x3f	; 63
 178:	0f 92       	push	r0
 17a:	11 24       	eor	r1, r1
 17c:	2f 93       	push	r18
 17e:	3f 93       	push	r19
 180:	4f 93       	push	r20
 182:	5f 93       	push	r21
 184:	6f 93       	push	r22
 186:	7f 93       	push	r23
 188:	8f 93       	push	r24
 18a:	9f 93       	push	r25
 18c:	af 93       	push	r26
 18e:	bf 93       	push	r27
 190:	ef 93       	push	r30
 192:	ff 93       	push	r31
 194:	df 93       	push	r29
 196:	cf 93       	push	r28
 198:	cd b7       	in	r28, 0x3d	; 61
 19a:	de b7       	in	r29, 0x3e	; 62
	if(EXTI0_Func != NULL)
 19c:	80 91 60 00 	lds	r24, 0x0060
 1a0:	90 91 61 00 	lds	r25, 0x0061
 1a4:	00 97       	sbiw	r24, 0x00	; 0
 1a6:	29 f0       	breq	.+10     	; 0x1b2 <__vector_1+0x40>
		EXTI0_Func();
 1a8:	e0 91 60 00 	lds	r30, 0x0060
 1ac:	f0 91 61 00 	lds	r31, 0x0061
 1b0:	09 95       	icall
}
 1b2:	cf 91       	pop	r28
 1b4:	df 91       	pop	r29
 1b6:	ff 91       	pop	r31
 1b8:	ef 91       	pop	r30
 1ba:	bf 91       	pop	r27
 1bc:	af 91       	pop	r26
 1be:	9f 91       	pop	r25
 1c0:	8f 91       	pop	r24
 1c2:	7f 91       	pop	r23
 1c4:	6f 91       	pop	r22
 1c6:	5f 91       	pop	r21
 1c8:	4f 91       	pop	r20
 1ca:	3f 91       	pop	r19
 1cc:	2f 91       	pop	r18
 1ce:	0f 90       	pop	r0
 1d0:	0f be       	out	0x3f, r0	; 63
 1d2:	0f 90       	pop	r0
 1d4:	1f 90       	pop	r1
 1d6:	18 95       	reti

000001d8 <EXTI1_CallBack>:


void (* EXTI1_Func)(void) = NULL; /*ptr*/


void EXTI1_CallBack (void(*func)(void)){ /*fun agr is ptr*/
 1d8:	df 93       	push	r29
 1da:	cf 93       	push	r28
 1dc:	00 d0       	rcall	.+0      	; 0x1de <EXTI1_CallBack+0x6>
 1de:	cd b7       	in	r28, 0x3d	; 61
 1e0:	de b7       	in	r29, 0x3e	; 62
 1e2:	9a 83       	std	Y+2, r25	; 0x02
 1e4:	89 83       	std	Y+1, r24	; 0x01
	EXTI1_Func = func ;
 1e6:	89 81       	ldd	r24, Y+1	; 0x01
 1e8:	9a 81       	ldd	r25, Y+2	; 0x02
 1ea:	90 93 63 00 	sts	0x0063, r25
 1ee:	80 93 62 00 	sts	0x0062, r24
}
 1f2:	0f 90       	pop	r0
 1f4:	0f 90       	pop	r0
 1f6:	cf 91       	pop	r28
 1f8:	df 91       	pop	r29
 1fa:	08 95       	ret

000001fc <__vector_2>:

void __vector_2 (void) __attribute__((signal)) ;

void __vector_2 (void){
 1fc:	1f 92       	push	r1
 1fe:	0f 92       	push	r0
 200:	0f b6       	in	r0, 0x3f	; 63
 202:	0f 92       	push	r0
 204:	11 24       	eor	r1, r1
 206:	2f 93       	push	r18
 208:	3f 93       	push	r19
 20a:	4f 93       	push	r20
 20c:	5f 93       	push	r21
 20e:	6f 93       	push	r22
 210:	7f 93       	push	r23
 212:	8f 93       	push	r24
 214:	9f 93       	push	r25
 216:	af 93       	push	r26
 218:	bf 93       	push	r27
 21a:	ef 93       	push	r30
 21c:	ff 93       	push	r31
 21e:	df 93       	push	r29
 220:	cf 93       	push	r28
 222:	cd b7       	in	r28, 0x3d	; 61
 224:	de b7       	in	r29, 0x3e	; 62
	if(EXTI1_Func != NULL)
 226:	80 91 62 00 	lds	r24, 0x0062
 22a:	90 91 63 00 	lds	r25, 0x0063
 22e:	00 97       	sbiw	r24, 0x00	; 0
 230:	29 f0       	breq	.+10     	; 0x23c <__vector_2+0x40>
		EXTI1_Func();
 232:	e0 91 62 00 	lds	r30, 0x0062
 236:	f0 91 63 00 	lds	r31, 0x0063
 23a:	09 95       	icall
}
 23c:	cf 91       	pop	r28
 23e:	df 91       	pop	r29
 240:	ff 91       	pop	r31
 242:	ef 91       	pop	r30
 244:	bf 91       	pop	r27
 246:	af 91       	pop	r26
 248:	9f 91       	pop	r25
 24a:	8f 91       	pop	r24
 24c:	7f 91       	pop	r23
 24e:	6f 91       	pop	r22
 250:	5f 91       	pop	r21
 252:	4f 91       	pop	r20
 254:	3f 91       	pop	r19
 256:	2f 91       	pop	r18
 258:	0f 90       	pop	r0
 25a:	0f be       	out	0x3f, r0	; 63
 25c:	0f 90       	pop	r0
 25e:	1f 90       	pop	r1
 260:	18 95       	reti

00000262 <DIO_VidSetPinValue>:
/*-------------------------------------------------------------------------------------------------------------------------*/
								/**************************set pin*****************************/
/*-------------------------------------------------------------------------------------------------------------------------*/


void DIO_VidSetPinValue(u8 Copy_u8Port, u8 Copy_u8PinNumber, u8 Copy_u8State ){
 262:	df 93       	push	r29
 264:	cf 93       	push	r28
 266:	cd b7       	in	r28, 0x3d	; 61
 268:	de b7       	in	r29, 0x3e	; 62
 26a:	27 97       	sbiw	r28, 0x07	; 7
 26c:	0f b6       	in	r0, 0x3f	; 63
 26e:	f8 94       	cli
 270:	de bf       	out	0x3e, r29	; 62
 272:	0f be       	out	0x3f, r0	; 63
 274:	cd bf       	out	0x3d, r28	; 61
 276:	89 83       	std	Y+1, r24	; 0x01
 278:	6a 83       	std	Y+2, r22	; 0x02
 27a:	4b 83       	std	Y+3, r20	; 0x03

	/****************** set pin as input***********************/
	if(Copy_u8State == low){
 27c:	8b 81       	ldd	r24, Y+3	; 0x03
 27e:	88 23       	and	r24, r24
 280:	09 f0       	breq	.+2      	; 0x284 <DIO_VidSetPinValue+0x22>
 282:	75 c0       	rjmp	.+234    	; 0x36e <DIO_VidSetPinValue+0x10c>
		switch (Copy_u8Port) {
 284:	89 81       	ldd	r24, Y+1	; 0x01
 286:	28 2f       	mov	r18, r24
 288:	30 e0       	ldi	r19, 0x00	; 0
 28a:	3f 83       	std	Y+7, r19	; 0x07
 28c:	2e 83       	std	Y+6, r18	; 0x06
 28e:	8e 81       	ldd	r24, Y+6	; 0x06
 290:	9f 81       	ldd	r25, Y+7	; 0x07
 292:	83 30       	cpi	r24, 0x03	; 3
 294:	91 05       	cpc	r25, r1
 296:	61 f1       	breq	.+88     	; 0x2f0 <DIO_VidSetPinValue+0x8e>
 298:	2e 81       	ldd	r18, Y+6	; 0x06
 29a:	3f 81       	ldd	r19, Y+7	; 0x07
 29c:	24 30       	cpi	r18, 0x04	; 4
 29e:	31 05       	cpc	r19, r1
 2a0:	34 f4       	brge	.+12     	; 0x2ae <DIO_VidSetPinValue+0x4c>
 2a2:	8e 81       	ldd	r24, Y+6	; 0x06
 2a4:	9f 81       	ldd	r25, Y+7	; 0x07
 2a6:	82 30       	cpi	r24, 0x02	; 2
 2a8:	91 05       	cpc	r25, r1
 2aa:	69 f0       	breq	.+26     	; 0x2c6 <DIO_VidSetPinValue+0x64>
 2ac:	d3 c0       	rjmp	.+422    	; 0x454 <DIO_VidSetPinValue+0x1f2>
 2ae:	2e 81       	ldd	r18, Y+6	; 0x06
 2b0:	3f 81       	ldd	r19, Y+7	; 0x07
 2b2:	24 30       	cpi	r18, 0x04	; 4
 2b4:	31 05       	cpc	r19, r1
 2b6:	89 f1       	breq	.+98     	; 0x31a <DIO_VidSetPinValue+0xb8>
 2b8:	8e 81       	ldd	r24, Y+6	; 0x06
 2ba:	9f 81       	ldd	r25, Y+7	; 0x07
 2bc:	85 30       	cpi	r24, 0x05	; 5
 2be:	91 05       	cpc	r25, r1
 2c0:	09 f4       	brne	.+2      	; 0x2c4 <DIO_VidSetPinValue+0x62>
 2c2:	40 c0       	rjmp	.+128    	; 0x344 <DIO_VidSetPinValue+0xe2>
 2c4:	c7 c0       	rjmp	.+398    	; 0x454 <DIO_VidSetPinValue+0x1f2>
			case (Port_A) : CLR_Bit(PORTA,Copy_u8PinNumber);break;
 2c6:	ab e3       	ldi	r26, 0x3B	; 59
 2c8:	b0 e0       	ldi	r27, 0x00	; 0
 2ca:	eb e3       	ldi	r30, 0x3B	; 59
 2cc:	f0 e0       	ldi	r31, 0x00	; 0
 2ce:	80 81       	ld	r24, Z
 2d0:	48 2f       	mov	r20, r24
 2d2:	8a 81       	ldd	r24, Y+2	; 0x02
 2d4:	28 2f       	mov	r18, r24
 2d6:	30 e0       	ldi	r19, 0x00	; 0
 2d8:	81 e0       	ldi	r24, 0x01	; 1
 2da:	90 e0       	ldi	r25, 0x00	; 0
 2dc:	02 2e       	mov	r0, r18
 2de:	02 c0       	rjmp	.+4      	; 0x2e4 <DIO_VidSetPinValue+0x82>
 2e0:	88 0f       	add	r24, r24
 2e2:	99 1f       	adc	r25, r25
 2e4:	0a 94       	dec	r0
 2e6:	e2 f7       	brpl	.-8      	; 0x2e0 <DIO_VidSetPinValue+0x7e>
 2e8:	80 95       	com	r24
 2ea:	84 23       	and	r24, r20
 2ec:	8c 93       	st	X, r24
 2ee:	b2 c0       	rjmp	.+356    	; 0x454 <DIO_VidSetPinValue+0x1f2>
			case (Port_B) : CLR_Bit(PORTB,Copy_u8PinNumber);break;
 2f0:	a8 e3       	ldi	r26, 0x38	; 56
 2f2:	b0 e0       	ldi	r27, 0x00	; 0
 2f4:	e8 e3       	ldi	r30, 0x38	; 56
 2f6:	f0 e0       	ldi	r31, 0x00	; 0
 2f8:	80 81       	ld	r24, Z
 2fa:	48 2f       	mov	r20, r24
 2fc:	8a 81       	ldd	r24, Y+2	; 0x02
 2fe:	28 2f       	mov	r18, r24
 300:	30 e0       	ldi	r19, 0x00	; 0
 302:	81 e0       	ldi	r24, 0x01	; 1
 304:	90 e0       	ldi	r25, 0x00	; 0
 306:	02 2e       	mov	r0, r18
 308:	02 c0       	rjmp	.+4      	; 0x30e <DIO_VidSetPinValue+0xac>
 30a:	88 0f       	add	r24, r24
 30c:	99 1f       	adc	r25, r25
 30e:	0a 94       	dec	r0
 310:	e2 f7       	brpl	.-8      	; 0x30a <DIO_VidSetPinValue+0xa8>
 312:	80 95       	com	r24
 314:	84 23       	and	r24, r20
 316:	8c 93       	st	X, r24
 318:	9d c0       	rjmp	.+314    	; 0x454 <DIO_VidSetPinValue+0x1f2>
			case (Port_C) : CLR_Bit(PORTC,Copy_u8PinNumber);break;
 31a:	a5 e3       	ldi	r26, 0x35	; 53
 31c:	b0 e0       	ldi	r27, 0x00	; 0
 31e:	e5 e3       	ldi	r30, 0x35	; 53
 320:	f0 e0       	ldi	r31, 0x00	; 0
 322:	80 81       	ld	r24, Z
 324:	48 2f       	mov	r20, r24
 326:	8a 81       	ldd	r24, Y+2	; 0x02
 328:	28 2f       	mov	r18, r24
 32a:	30 e0       	ldi	r19, 0x00	; 0
 32c:	81 e0       	ldi	r24, 0x01	; 1
 32e:	90 e0       	ldi	r25, 0x00	; 0
 330:	02 2e       	mov	r0, r18
 332:	02 c0       	rjmp	.+4      	; 0x338 <DIO_VidSetPinValue+0xd6>
 334:	88 0f       	add	r24, r24
 336:	99 1f       	adc	r25, r25
 338:	0a 94       	dec	r0
 33a:	e2 f7       	brpl	.-8      	; 0x334 <DIO_VidSetPinValue+0xd2>
 33c:	80 95       	com	r24
 33e:	84 23       	and	r24, r20
 340:	8c 93       	st	X, r24
 342:	88 c0       	rjmp	.+272    	; 0x454 <DIO_VidSetPinValue+0x1f2>
			case (Port_D) : CLR_Bit(PORTD,Copy_u8PinNumber);break;
 344:	a2 e3       	ldi	r26, 0x32	; 50
 346:	b0 e0       	ldi	r27, 0x00	; 0
 348:	e2 e3       	ldi	r30, 0x32	; 50
 34a:	f0 e0       	ldi	r31, 0x00	; 0
 34c:	80 81       	ld	r24, Z
 34e:	48 2f       	mov	r20, r24
 350:	8a 81       	ldd	r24, Y+2	; 0x02
 352:	28 2f       	mov	r18, r24
 354:	30 e0       	ldi	r19, 0x00	; 0
 356:	81 e0       	ldi	r24, 0x01	; 1
 358:	90 e0       	ldi	r25, 0x00	; 0
 35a:	02 2e       	mov	r0, r18
 35c:	02 c0       	rjmp	.+4      	; 0x362 <DIO_VidSetPinValue+0x100>
 35e:	88 0f       	add	r24, r24
 360:	99 1f       	adc	r25, r25
 362:	0a 94       	dec	r0
 364:	e2 f7       	brpl	.-8      	; 0x35e <DIO_VidSetPinValue+0xfc>
 366:	80 95       	com	r24
 368:	84 23       	and	r24, r20
 36a:	8c 93       	st	X, r24
 36c:	73 c0       	rjmp	.+230    	; 0x454 <DIO_VidSetPinValue+0x1f2>
		}
	}
	/****************** set pin as output***********************/
	else if(Copy_u8State == high){
 36e:	8b 81       	ldd	r24, Y+3	; 0x03
 370:	81 30       	cpi	r24, 0x01	; 1
 372:	09 f0       	breq	.+2      	; 0x376 <DIO_VidSetPinValue+0x114>
 374:	6f c0       	rjmp	.+222    	; 0x454 <DIO_VidSetPinValue+0x1f2>
		switch (Copy_u8Port) {
 376:	89 81       	ldd	r24, Y+1	; 0x01
 378:	28 2f       	mov	r18, r24
 37a:	30 e0       	ldi	r19, 0x00	; 0
 37c:	3d 83       	std	Y+5, r19	; 0x05
 37e:	2c 83       	std	Y+4, r18	; 0x04
 380:	8c 81       	ldd	r24, Y+4	; 0x04
 382:	9d 81       	ldd	r25, Y+5	; 0x05
 384:	83 30       	cpi	r24, 0x03	; 3
 386:	91 05       	cpc	r25, r1
 388:	51 f1       	breq	.+84     	; 0x3de <DIO_VidSetPinValue+0x17c>
 38a:	2c 81       	ldd	r18, Y+4	; 0x04
 38c:	3d 81       	ldd	r19, Y+5	; 0x05
 38e:	24 30       	cpi	r18, 0x04	; 4
 390:	31 05       	cpc	r19, r1
 392:	34 f4       	brge	.+12     	; 0x3a0 <DIO_VidSetPinValue+0x13e>
 394:	8c 81       	ldd	r24, Y+4	; 0x04
 396:	9d 81       	ldd	r25, Y+5	; 0x05
 398:	82 30       	cpi	r24, 0x02	; 2
 39a:	91 05       	cpc	r25, r1
 39c:	61 f0       	breq	.+24     	; 0x3b6 <DIO_VidSetPinValue+0x154>
 39e:	5a c0       	rjmp	.+180    	; 0x454 <DIO_VidSetPinValue+0x1f2>
 3a0:	2c 81       	ldd	r18, Y+4	; 0x04
 3a2:	3d 81       	ldd	r19, Y+5	; 0x05
 3a4:	24 30       	cpi	r18, 0x04	; 4
 3a6:	31 05       	cpc	r19, r1
 3a8:	71 f1       	breq	.+92     	; 0x406 <DIO_VidSetPinValue+0x1a4>
 3aa:	8c 81       	ldd	r24, Y+4	; 0x04
 3ac:	9d 81       	ldd	r25, Y+5	; 0x05
 3ae:	85 30       	cpi	r24, 0x05	; 5
 3b0:	91 05       	cpc	r25, r1
 3b2:	e9 f1       	breq	.+122    	; 0x42e <DIO_VidSetPinValue+0x1cc>
 3b4:	4f c0       	rjmp	.+158    	; 0x454 <DIO_VidSetPinValue+0x1f2>
			case (Port_A) : Set_Bit(PORTA,Copy_u8PinNumber);break;
 3b6:	ab e3       	ldi	r26, 0x3B	; 59
 3b8:	b0 e0       	ldi	r27, 0x00	; 0
 3ba:	eb e3       	ldi	r30, 0x3B	; 59
 3bc:	f0 e0       	ldi	r31, 0x00	; 0
 3be:	80 81       	ld	r24, Z
 3c0:	48 2f       	mov	r20, r24
 3c2:	8a 81       	ldd	r24, Y+2	; 0x02
 3c4:	28 2f       	mov	r18, r24
 3c6:	30 e0       	ldi	r19, 0x00	; 0
 3c8:	81 e0       	ldi	r24, 0x01	; 1
 3ca:	90 e0       	ldi	r25, 0x00	; 0
 3cc:	02 2e       	mov	r0, r18
 3ce:	02 c0       	rjmp	.+4      	; 0x3d4 <DIO_VidSetPinValue+0x172>
 3d0:	88 0f       	add	r24, r24
 3d2:	99 1f       	adc	r25, r25
 3d4:	0a 94       	dec	r0
 3d6:	e2 f7       	brpl	.-8      	; 0x3d0 <DIO_VidSetPinValue+0x16e>
 3d8:	84 2b       	or	r24, r20
 3da:	8c 93       	st	X, r24
 3dc:	3b c0       	rjmp	.+118    	; 0x454 <DIO_VidSetPinValue+0x1f2>
			case (Port_B) : Set_Bit(PORTB,Copy_u8PinNumber);break;
 3de:	a8 e3       	ldi	r26, 0x38	; 56
 3e0:	b0 e0       	ldi	r27, 0x00	; 0
 3e2:	e8 e3       	ldi	r30, 0x38	; 56
 3e4:	f0 e0       	ldi	r31, 0x00	; 0
 3e6:	80 81       	ld	r24, Z
 3e8:	48 2f       	mov	r20, r24
 3ea:	8a 81       	ldd	r24, Y+2	; 0x02
 3ec:	28 2f       	mov	r18, r24
 3ee:	30 e0       	ldi	r19, 0x00	; 0
 3f0:	81 e0       	ldi	r24, 0x01	; 1
 3f2:	90 e0       	ldi	r25, 0x00	; 0
 3f4:	02 2e       	mov	r0, r18
 3f6:	02 c0       	rjmp	.+4      	; 0x3fc <DIO_VidSetPinValue+0x19a>
 3f8:	88 0f       	add	r24, r24
 3fa:	99 1f       	adc	r25, r25
 3fc:	0a 94       	dec	r0
 3fe:	e2 f7       	brpl	.-8      	; 0x3f8 <DIO_VidSetPinValue+0x196>
 400:	84 2b       	or	r24, r20
 402:	8c 93       	st	X, r24
 404:	27 c0       	rjmp	.+78     	; 0x454 <DIO_VidSetPinValue+0x1f2>
			case (Port_C) : Set_Bit(PORTC,Copy_u8PinNumber);break;
 406:	a5 e3       	ldi	r26, 0x35	; 53
 408:	b0 e0       	ldi	r27, 0x00	; 0
 40a:	e5 e3       	ldi	r30, 0x35	; 53
 40c:	f0 e0       	ldi	r31, 0x00	; 0
 40e:	80 81       	ld	r24, Z
 410:	48 2f       	mov	r20, r24
 412:	8a 81       	ldd	r24, Y+2	; 0x02
 414:	28 2f       	mov	r18, r24
 416:	30 e0       	ldi	r19, 0x00	; 0
 418:	81 e0       	ldi	r24, 0x01	; 1
 41a:	90 e0       	ldi	r25, 0x00	; 0
 41c:	02 2e       	mov	r0, r18
 41e:	02 c0       	rjmp	.+4      	; 0x424 <DIO_VidSetPinValue+0x1c2>
 420:	88 0f       	add	r24, r24
 422:	99 1f       	adc	r25, r25
 424:	0a 94       	dec	r0
 426:	e2 f7       	brpl	.-8      	; 0x420 <DIO_VidSetPinValue+0x1be>
 428:	84 2b       	or	r24, r20
 42a:	8c 93       	st	X, r24
 42c:	13 c0       	rjmp	.+38     	; 0x454 <DIO_VidSetPinValue+0x1f2>
			case (Port_D) : Set_Bit(PORTD,Copy_u8PinNumber);break;
 42e:	a2 e3       	ldi	r26, 0x32	; 50
 430:	b0 e0       	ldi	r27, 0x00	; 0
 432:	e2 e3       	ldi	r30, 0x32	; 50
 434:	f0 e0       	ldi	r31, 0x00	; 0
 436:	80 81       	ld	r24, Z
 438:	48 2f       	mov	r20, r24
 43a:	8a 81       	ldd	r24, Y+2	; 0x02
 43c:	28 2f       	mov	r18, r24
 43e:	30 e0       	ldi	r19, 0x00	; 0
 440:	81 e0       	ldi	r24, 0x01	; 1
 442:	90 e0       	ldi	r25, 0x00	; 0
 444:	02 2e       	mov	r0, r18
 446:	02 c0       	rjmp	.+4      	; 0x44c <DIO_VidSetPinValue+0x1ea>
 448:	88 0f       	add	r24, r24
 44a:	99 1f       	adc	r25, r25
 44c:	0a 94       	dec	r0
 44e:	e2 f7       	brpl	.-8      	; 0x448 <DIO_VidSetPinValue+0x1e6>
 450:	84 2b       	or	r24, r20
 452:	8c 93       	st	X, r24
		}
	}
}
 454:	27 96       	adiw	r28, 0x07	; 7
 456:	0f b6       	in	r0, 0x3f	; 63
 458:	f8 94       	cli
 45a:	de bf       	out	0x3e, r29	; 62
 45c:	0f be       	out	0x3f, r0	; 63
 45e:	cd bf       	out	0x3d, r28	; 61
 460:	cf 91       	pop	r28
 462:	df 91       	pop	r29
 464:	08 95       	ret

00000466 <DIO_VidSetPinDirection>:

void DIO_VidSetPinDirection(u8 Copy_u8Port, u8 Copy_u8PinNumber,u8 Copy_u8PinDirection)
{
 466:	df 93       	push	r29
 468:	cf 93       	push	r28
 46a:	cd b7       	in	r28, 0x3d	; 61
 46c:	de b7       	in	r29, 0x3e	; 62
 46e:	27 97       	sbiw	r28, 0x07	; 7
 470:	0f b6       	in	r0, 0x3f	; 63
 472:	f8 94       	cli
 474:	de bf       	out	0x3e, r29	; 62
 476:	0f be       	out	0x3f, r0	; 63
 478:	cd bf       	out	0x3d, r28	; 61
 47a:	89 83       	std	Y+1, r24	; 0x01
 47c:	6a 83       	std	Y+2, r22	; 0x02
 47e:	4b 83       	std	Y+3, r20	; 0x03
	/****************** set pin as input***********************/
	if(Copy_u8PinDirection == input){
 480:	8b 81       	ldd	r24, Y+3	; 0x03
 482:	88 23       	and	r24, r24
 484:	09 f0       	breq	.+2      	; 0x488 <DIO_VidSetPinDirection+0x22>
 486:	75 c0       	rjmp	.+234    	; 0x572 <DIO_VidSetPinDirection+0x10c>
		switch (Copy_u8Port) {
 488:	89 81       	ldd	r24, Y+1	; 0x01
 48a:	28 2f       	mov	r18, r24
 48c:	30 e0       	ldi	r19, 0x00	; 0
 48e:	3f 83       	std	Y+7, r19	; 0x07
 490:	2e 83       	std	Y+6, r18	; 0x06
 492:	8e 81       	ldd	r24, Y+6	; 0x06
 494:	9f 81       	ldd	r25, Y+7	; 0x07
 496:	83 30       	cpi	r24, 0x03	; 3
 498:	91 05       	cpc	r25, r1
 49a:	61 f1       	breq	.+88     	; 0x4f4 <DIO_VidSetPinDirection+0x8e>
 49c:	2e 81       	ldd	r18, Y+6	; 0x06
 49e:	3f 81       	ldd	r19, Y+7	; 0x07
 4a0:	24 30       	cpi	r18, 0x04	; 4
 4a2:	31 05       	cpc	r19, r1
 4a4:	34 f4       	brge	.+12     	; 0x4b2 <DIO_VidSetPinDirection+0x4c>
 4a6:	8e 81       	ldd	r24, Y+6	; 0x06
 4a8:	9f 81       	ldd	r25, Y+7	; 0x07
 4aa:	82 30       	cpi	r24, 0x02	; 2
 4ac:	91 05       	cpc	r25, r1
 4ae:	69 f0       	breq	.+26     	; 0x4ca <DIO_VidSetPinDirection+0x64>
 4b0:	d3 c0       	rjmp	.+422    	; 0x658 <DIO_VidSetPinDirection+0x1f2>
 4b2:	2e 81       	ldd	r18, Y+6	; 0x06
 4b4:	3f 81       	ldd	r19, Y+7	; 0x07
 4b6:	24 30       	cpi	r18, 0x04	; 4
 4b8:	31 05       	cpc	r19, r1
 4ba:	89 f1       	breq	.+98     	; 0x51e <DIO_VidSetPinDirection+0xb8>
 4bc:	8e 81       	ldd	r24, Y+6	; 0x06
 4be:	9f 81       	ldd	r25, Y+7	; 0x07
 4c0:	85 30       	cpi	r24, 0x05	; 5
 4c2:	91 05       	cpc	r25, r1
 4c4:	09 f4       	brne	.+2      	; 0x4c8 <DIO_VidSetPinDirection+0x62>
 4c6:	40 c0       	rjmp	.+128    	; 0x548 <DIO_VidSetPinDirection+0xe2>
 4c8:	c7 c0       	rjmp	.+398    	; 0x658 <DIO_VidSetPinDirection+0x1f2>
			case (Port_A) : CLR_Bit(DDRA,Copy_u8PinNumber);break;
 4ca:	aa e3       	ldi	r26, 0x3A	; 58
 4cc:	b0 e0       	ldi	r27, 0x00	; 0
 4ce:	ea e3       	ldi	r30, 0x3A	; 58
 4d0:	f0 e0       	ldi	r31, 0x00	; 0
 4d2:	80 81       	ld	r24, Z
 4d4:	48 2f       	mov	r20, r24
 4d6:	8a 81       	ldd	r24, Y+2	; 0x02
 4d8:	28 2f       	mov	r18, r24
 4da:	30 e0       	ldi	r19, 0x00	; 0
 4dc:	81 e0       	ldi	r24, 0x01	; 1
 4de:	90 e0       	ldi	r25, 0x00	; 0
 4e0:	02 2e       	mov	r0, r18
 4e2:	02 c0       	rjmp	.+4      	; 0x4e8 <DIO_VidSetPinDirection+0x82>
 4e4:	88 0f       	add	r24, r24
 4e6:	99 1f       	adc	r25, r25
 4e8:	0a 94       	dec	r0
 4ea:	e2 f7       	brpl	.-8      	; 0x4e4 <DIO_VidSetPinDirection+0x7e>
 4ec:	80 95       	com	r24
 4ee:	84 23       	and	r24, r20
 4f0:	8c 93       	st	X, r24
 4f2:	b2 c0       	rjmp	.+356    	; 0x658 <DIO_VidSetPinDirection+0x1f2>
			case (Port_B) : CLR_Bit(DDRB,Copy_u8PinNumber);break;
 4f4:	a7 e3       	ldi	r26, 0x37	; 55
 4f6:	b0 e0       	ldi	r27, 0x00	; 0
 4f8:	e7 e3       	ldi	r30, 0x37	; 55
 4fa:	f0 e0       	ldi	r31, 0x00	; 0
 4fc:	80 81       	ld	r24, Z
 4fe:	48 2f       	mov	r20, r24
 500:	8a 81       	ldd	r24, Y+2	; 0x02
 502:	28 2f       	mov	r18, r24
 504:	30 e0       	ldi	r19, 0x00	; 0
 506:	81 e0       	ldi	r24, 0x01	; 1
 508:	90 e0       	ldi	r25, 0x00	; 0
 50a:	02 2e       	mov	r0, r18
 50c:	02 c0       	rjmp	.+4      	; 0x512 <DIO_VidSetPinDirection+0xac>
 50e:	88 0f       	add	r24, r24
 510:	99 1f       	adc	r25, r25
 512:	0a 94       	dec	r0
 514:	e2 f7       	brpl	.-8      	; 0x50e <DIO_VidSetPinDirection+0xa8>
 516:	80 95       	com	r24
 518:	84 23       	and	r24, r20
 51a:	8c 93       	st	X, r24
 51c:	9d c0       	rjmp	.+314    	; 0x658 <DIO_VidSetPinDirection+0x1f2>
			case (Port_C) : CLR_Bit(DDRC,Copy_u8PinNumber);break;
 51e:	a4 e3       	ldi	r26, 0x34	; 52
 520:	b0 e0       	ldi	r27, 0x00	; 0
 522:	e4 e3       	ldi	r30, 0x34	; 52
 524:	f0 e0       	ldi	r31, 0x00	; 0
 526:	80 81       	ld	r24, Z
 528:	48 2f       	mov	r20, r24
 52a:	8a 81       	ldd	r24, Y+2	; 0x02
 52c:	28 2f       	mov	r18, r24
 52e:	30 e0       	ldi	r19, 0x00	; 0
 530:	81 e0       	ldi	r24, 0x01	; 1
 532:	90 e0       	ldi	r25, 0x00	; 0
 534:	02 2e       	mov	r0, r18
 536:	02 c0       	rjmp	.+4      	; 0x53c <DIO_VidSetPinDirection+0xd6>
 538:	88 0f       	add	r24, r24
 53a:	99 1f       	adc	r25, r25
 53c:	0a 94       	dec	r0
 53e:	e2 f7       	brpl	.-8      	; 0x538 <DIO_VidSetPinDirection+0xd2>
 540:	80 95       	com	r24
 542:	84 23       	and	r24, r20
 544:	8c 93       	st	X, r24
 546:	88 c0       	rjmp	.+272    	; 0x658 <DIO_VidSetPinDirection+0x1f2>
			case (Port_D) : CLR_Bit(DDRD,Copy_u8PinNumber);break;
 548:	a1 e3       	ldi	r26, 0x31	; 49
 54a:	b0 e0       	ldi	r27, 0x00	; 0
 54c:	e1 e3       	ldi	r30, 0x31	; 49
 54e:	f0 e0       	ldi	r31, 0x00	; 0
 550:	80 81       	ld	r24, Z
 552:	48 2f       	mov	r20, r24
 554:	8a 81       	ldd	r24, Y+2	; 0x02
 556:	28 2f       	mov	r18, r24
 558:	30 e0       	ldi	r19, 0x00	; 0
 55a:	81 e0       	ldi	r24, 0x01	; 1
 55c:	90 e0       	ldi	r25, 0x00	; 0
 55e:	02 2e       	mov	r0, r18
 560:	02 c0       	rjmp	.+4      	; 0x566 <DIO_VidSetPinDirection+0x100>
 562:	88 0f       	add	r24, r24
 564:	99 1f       	adc	r25, r25
 566:	0a 94       	dec	r0
 568:	e2 f7       	brpl	.-8      	; 0x562 <DIO_VidSetPinDirection+0xfc>
 56a:	80 95       	com	r24
 56c:	84 23       	and	r24, r20
 56e:	8c 93       	st	X, r24
 570:	73 c0       	rjmp	.+230    	; 0x658 <DIO_VidSetPinDirection+0x1f2>
		}
	}
	/****************** set pin as output***********************/
	else if(Copy_u8PinDirection == output){
 572:	8b 81       	ldd	r24, Y+3	; 0x03
 574:	81 30       	cpi	r24, 0x01	; 1
 576:	09 f0       	breq	.+2      	; 0x57a <DIO_VidSetPinDirection+0x114>
 578:	6f c0       	rjmp	.+222    	; 0x658 <DIO_VidSetPinDirection+0x1f2>
		switch (Copy_u8Port) {
 57a:	89 81       	ldd	r24, Y+1	; 0x01
 57c:	28 2f       	mov	r18, r24
 57e:	30 e0       	ldi	r19, 0x00	; 0
 580:	3d 83       	std	Y+5, r19	; 0x05
 582:	2c 83       	std	Y+4, r18	; 0x04
 584:	8c 81       	ldd	r24, Y+4	; 0x04
 586:	9d 81       	ldd	r25, Y+5	; 0x05
 588:	83 30       	cpi	r24, 0x03	; 3
 58a:	91 05       	cpc	r25, r1
 58c:	51 f1       	breq	.+84     	; 0x5e2 <DIO_VidSetPinDirection+0x17c>
 58e:	2c 81       	ldd	r18, Y+4	; 0x04
 590:	3d 81       	ldd	r19, Y+5	; 0x05
 592:	24 30       	cpi	r18, 0x04	; 4
 594:	31 05       	cpc	r19, r1
 596:	34 f4       	brge	.+12     	; 0x5a4 <DIO_VidSetPinDirection+0x13e>
 598:	8c 81       	ldd	r24, Y+4	; 0x04
 59a:	9d 81       	ldd	r25, Y+5	; 0x05
 59c:	82 30       	cpi	r24, 0x02	; 2
 59e:	91 05       	cpc	r25, r1
 5a0:	61 f0       	breq	.+24     	; 0x5ba <DIO_VidSetPinDirection+0x154>
 5a2:	5a c0       	rjmp	.+180    	; 0x658 <DIO_VidSetPinDirection+0x1f2>
 5a4:	2c 81       	ldd	r18, Y+4	; 0x04
 5a6:	3d 81       	ldd	r19, Y+5	; 0x05
 5a8:	24 30       	cpi	r18, 0x04	; 4
 5aa:	31 05       	cpc	r19, r1
 5ac:	71 f1       	breq	.+92     	; 0x60a <DIO_VidSetPinDirection+0x1a4>
 5ae:	8c 81       	ldd	r24, Y+4	; 0x04
 5b0:	9d 81       	ldd	r25, Y+5	; 0x05
 5b2:	85 30       	cpi	r24, 0x05	; 5
 5b4:	91 05       	cpc	r25, r1
 5b6:	e9 f1       	breq	.+122    	; 0x632 <DIO_VidSetPinDirection+0x1cc>
 5b8:	4f c0       	rjmp	.+158    	; 0x658 <DIO_VidSetPinDirection+0x1f2>
			case (Port_A) : Set_Bit(DDRA,Copy_u8PinNumber);break;
 5ba:	aa e3       	ldi	r26, 0x3A	; 58
 5bc:	b0 e0       	ldi	r27, 0x00	; 0
 5be:	ea e3       	ldi	r30, 0x3A	; 58
 5c0:	f0 e0       	ldi	r31, 0x00	; 0
 5c2:	80 81       	ld	r24, Z
 5c4:	48 2f       	mov	r20, r24
 5c6:	8a 81       	ldd	r24, Y+2	; 0x02
 5c8:	28 2f       	mov	r18, r24
 5ca:	30 e0       	ldi	r19, 0x00	; 0
 5cc:	81 e0       	ldi	r24, 0x01	; 1
 5ce:	90 e0       	ldi	r25, 0x00	; 0
 5d0:	02 2e       	mov	r0, r18
 5d2:	02 c0       	rjmp	.+4      	; 0x5d8 <DIO_VidSetPinDirection+0x172>
 5d4:	88 0f       	add	r24, r24
 5d6:	99 1f       	adc	r25, r25
 5d8:	0a 94       	dec	r0
 5da:	e2 f7       	brpl	.-8      	; 0x5d4 <DIO_VidSetPinDirection+0x16e>
 5dc:	84 2b       	or	r24, r20
 5de:	8c 93       	st	X, r24
 5e0:	3b c0       	rjmp	.+118    	; 0x658 <DIO_VidSetPinDirection+0x1f2>
			case (Port_B) : Set_Bit(DDRB,Copy_u8PinNumber);break;
 5e2:	a7 e3       	ldi	r26, 0x37	; 55
 5e4:	b0 e0       	ldi	r27, 0x00	; 0
 5e6:	e7 e3       	ldi	r30, 0x37	; 55
 5e8:	f0 e0       	ldi	r31, 0x00	; 0
 5ea:	80 81       	ld	r24, Z
 5ec:	48 2f       	mov	r20, r24
 5ee:	8a 81       	ldd	r24, Y+2	; 0x02
 5f0:	28 2f       	mov	r18, r24
 5f2:	30 e0       	ldi	r19, 0x00	; 0
 5f4:	81 e0       	ldi	r24, 0x01	; 1
 5f6:	90 e0       	ldi	r25, 0x00	; 0
 5f8:	02 2e       	mov	r0, r18
 5fa:	02 c0       	rjmp	.+4      	; 0x600 <DIO_VidSetPinDirection+0x19a>
 5fc:	88 0f       	add	r24, r24
 5fe:	99 1f       	adc	r25, r25
 600:	0a 94       	dec	r0
 602:	e2 f7       	brpl	.-8      	; 0x5fc <DIO_VidSetPinDirection+0x196>
 604:	84 2b       	or	r24, r20
 606:	8c 93       	st	X, r24
 608:	27 c0       	rjmp	.+78     	; 0x658 <DIO_VidSetPinDirection+0x1f2>
			case (Port_C) : Set_Bit(DDRC,Copy_u8PinNumber);break;
 60a:	a4 e3       	ldi	r26, 0x34	; 52
 60c:	b0 e0       	ldi	r27, 0x00	; 0
 60e:	e4 e3       	ldi	r30, 0x34	; 52
 610:	f0 e0       	ldi	r31, 0x00	; 0
 612:	80 81       	ld	r24, Z
 614:	48 2f       	mov	r20, r24
 616:	8a 81       	ldd	r24, Y+2	; 0x02
 618:	28 2f       	mov	r18, r24
 61a:	30 e0       	ldi	r19, 0x00	; 0
 61c:	81 e0       	ldi	r24, 0x01	; 1
 61e:	90 e0       	ldi	r25, 0x00	; 0
 620:	02 2e       	mov	r0, r18
 622:	02 c0       	rjmp	.+4      	; 0x628 <DIO_VidSetPinDirection+0x1c2>
 624:	88 0f       	add	r24, r24
 626:	99 1f       	adc	r25, r25
 628:	0a 94       	dec	r0
 62a:	e2 f7       	brpl	.-8      	; 0x624 <DIO_VidSetPinDirection+0x1be>
 62c:	84 2b       	or	r24, r20
 62e:	8c 93       	st	X, r24
 630:	13 c0       	rjmp	.+38     	; 0x658 <DIO_VidSetPinDirection+0x1f2>
			case (Port_D) : Set_Bit(DDRD,Copy_u8PinNumber);break;
 632:	a1 e3       	ldi	r26, 0x31	; 49
 634:	b0 e0       	ldi	r27, 0x00	; 0
 636:	e1 e3       	ldi	r30, 0x31	; 49
 638:	f0 e0       	ldi	r31, 0x00	; 0
 63a:	80 81       	ld	r24, Z
 63c:	48 2f       	mov	r20, r24
 63e:	8a 81       	ldd	r24, Y+2	; 0x02
 640:	28 2f       	mov	r18, r24
 642:	30 e0       	ldi	r19, 0x00	; 0
 644:	81 e0       	ldi	r24, 0x01	; 1
 646:	90 e0       	ldi	r25, 0x00	; 0
 648:	02 2e       	mov	r0, r18
 64a:	02 c0       	rjmp	.+4      	; 0x650 <DIO_VidSetPinDirection+0x1ea>
 64c:	88 0f       	add	r24, r24
 64e:	99 1f       	adc	r25, r25
 650:	0a 94       	dec	r0
 652:	e2 f7       	brpl	.-8      	; 0x64c <DIO_VidSetPinDirection+0x1e6>
 654:	84 2b       	or	r24, r20
 656:	8c 93       	st	X, r24
		}
	}
}
 658:	27 96       	adiw	r28, 0x07	; 7
 65a:	0f b6       	in	r0, 0x3f	; 63
 65c:	f8 94       	cli
 65e:	de bf       	out	0x3e, r29	; 62
 660:	0f be       	out	0x3f, r0	; 63
 662:	cd bf       	out	0x3d, r28	; 61
 664:	cf 91       	pop	r28
 666:	df 91       	pop	r29
 668:	08 95       	ret

0000066a <DIO_VidGetPinValue>:


void DIO_VidGetPinValue(u8 Copy_u8Port, u8 Copy_u8PinNumber, u8* Copy_Pu8PinValue)
{
 66a:	df 93       	push	r29
 66c:	cf 93       	push	r28
 66e:	00 d0       	rcall	.+0      	; 0x670 <DIO_VidGetPinValue+0x6>
 670:	00 d0       	rcall	.+0      	; 0x672 <DIO_VidGetPinValue+0x8>
 672:	00 d0       	rcall	.+0      	; 0x674 <DIO_VidGetPinValue+0xa>
 674:	cd b7       	in	r28, 0x3d	; 61
 676:	de b7       	in	r29, 0x3e	; 62
 678:	89 83       	std	Y+1, r24	; 0x01
 67a:	6a 83       	std	Y+2, r22	; 0x02
 67c:	5c 83       	std	Y+4, r21	; 0x04
 67e:	4b 83       	std	Y+3, r20	; 0x03
	/****************** set pin as input***********************/
		switch (Copy_u8Port) {
 680:	89 81       	ldd	r24, Y+1	; 0x01
 682:	28 2f       	mov	r18, r24
 684:	30 e0       	ldi	r19, 0x00	; 0
 686:	3e 83       	std	Y+6, r19	; 0x06
 688:	2d 83       	std	Y+5, r18	; 0x05
 68a:	4d 81       	ldd	r20, Y+5	; 0x05
 68c:	5e 81       	ldd	r21, Y+6	; 0x06
 68e:	43 30       	cpi	r20, 0x03	; 3
 690:	51 05       	cpc	r21, r1
 692:	59 f1       	breq	.+86     	; 0x6ea <DIO_VidGetPinValue+0x80>
 694:	8d 81       	ldd	r24, Y+5	; 0x05
 696:	9e 81       	ldd	r25, Y+6	; 0x06
 698:	84 30       	cpi	r24, 0x04	; 4
 69a:	91 05       	cpc	r25, r1
 69c:	34 f4       	brge	.+12     	; 0x6aa <DIO_VidGetPinValue+0x40>
 69e:	2d 81       	ldd	r18, Y+5	; 0x05
 6a0:	3e 81       	ldd	r19, Y+6	; 0x06
 6a2:	22 30       	cpi	r18, 0x02	; 2
 6a4:	31 05       	cpc	r19, r1
 6a6:	69 f0       	breq	.+26     	; 0x6c2 <DIO_VidGetPinValue+0x58>
 6a8:	5b c0       	rjmp	.+182    	; 0x760 <DIO_VidGetPinValue+0xf6>
 6aa:	4d 81       	ldd	r20, Y+5	; 0x05
 6ac:	5e 81       	ldd	r21, Y+6	; 0x06
 6ae:	44 30       	cpi	r20, 0x04	; 4
 6b0:	51 05       	cpc	r21, r1
 6b2:	79 f1       	breq	.+94     	; 0x712 <DIO_VidGetPinValue+0xa8>
 6b4:	8d 81       	ldd	r24, Y+5	; 0x05
 6b6:	9e 81       	ldd	r25, Y+6	; 0x06
 6b8:	85 30       	cpi	r24, 0x05	; 5
 6ba:	91 05       	cpc	r25, r1
 6bc:	09 f4       	brne	.+2      	; 0x6c0 <DIO_VidGetPinValue+0x56>
 6be:	3d c0       	rjmp	.+122    	; 0x73a <DIO_VidGetPinValue+0xd0>
 6c0:	4f c0       	rjmp	.+158    	; 0x760 <DIO_VidGetPinValue+0xf6>
			case (Port_A) : *Copy_Pu8PinValue = Get_Bit(PINA,Copy_u8PinNumber);break;
 6c2:	e9 e3       	ldi	r30, 0x39	; 57
 6c4:	f0 e0       	ldi	r31, 0x00	; 0
 6c6:	80 81       	ld	r24, Z
 6c8:	28 2f       	mov	r18, r24
 6ca:	30 e0       	ldi	r19, 0x00	; 0
 6cc:	8a 81       	ldd	r24, Y+2	; 0x02
 6ce:	88 2f       	mov	r24, r24
 6d0:	90 e0       	ldi	r25, 0x00	; 0
 6d2:	a9 01       	movw	r20, r18
 6d4:	02 c0       	rjmp	.+4      	; 0x6da <DIO_VidGetPinValue+0x70>
 6d6:	55 95       	asr	r21
 6d8:	47 95       	ror	r20
 6da:	8a 95       	dec	r24
 6dc:	e2 f7       	brpl	.-8      	; 0x6d6 <DIO_VidGetPinValue+0x6c>
 6de:	ca 01       	movw	r24, r20
 6e0:	81 70       	andi	r24, 0x01	; 1
 6e2:	eb 81       	ldd	r30, Y+3	; 0x03
 6e4:	fc 81       	ldd	r31, Y+4	; 0x04
 6e6:	80 83       	st	Z, r24
 6e8:	3b c0       	rjmp	.+118    	; 0x760 <DIO_VidGetPinValue+0xf6>
			case (Port_B) : *Copy_Pu8PinValue = Get_Bit(PINB,Copy_u8PinNumber);break;
 6ea:	e6 e3       	ldi	r30, 0x36	; 54
 6ec:	f0 e0       	ldi	r31, 0x00	; 0
 6ee:	80 81       	ld	r24, Z
 6f0:	28 2f       	mov	r18, r24
 6f2:	30 e0       	ldi	r19, 0x00	; 0
 6f4:	8a 81       	ldd	r24, Y+2	; 0x02
 6f6:	88 2f       	mov	r24, r24
 6f8:	90 e0       	ldi	r25, 0x00	; 0
 6fa:	a9 01       	movw	r20, r18
 6fc:	02 c0       	rjmp	.+4      	; 0x702 <DIO_VidGetPinValue+0x98>
 6fe:	55 95       	asr	r21
 700:	47 95       	ror	r20
 702:	8a 95       	dec	r24
 704:	e2 f7       	brpl	.-8      	; 0x6fe <DIO_VidGetPinValue+0x94>
 706:	ca 01       	movw	r24, r20
 708:	81 70       	andi	r24, 0x01	; 1
 70a:	eb 81       	ldd	r30, Y+3	; 0x03
 70c:	fc 81       	ldd	r31, Y+4	; 0x04
 70e:	80 83       	st	Z, r24
 710:	27 c0       	rjmp	.+78     	; 0x760 <DIO_VidGetPinValue+0xf6>
			case (Port_C) : *Copy_Pu8PinValue = Get_Bit(PINC,Copy_u8PinNumber);break;
 712:	e3 e3       	ldi	r30, 0x33	; 51
 714:	f0 e0       	ldi	r31, 0x00	; 0
 716:	80 81       	ld	r24, Z
 718:	28 2f       	mov	r18, r24
 71a:	30 e0       	ldi	r19, 0x00	; 0
 71c:	8a 81       	ldd	r24, Y+2	; 0x02
 71e:	88 2f       	mov	r24, r24
 720:	90 e0       	ldi	r25, 0x00	; 0
 722:	a9 01       	movw	r20, r18
 724:	02 c0       	rjmp	.+4      	; 0x72a <DIO_VidGetPinValue+0xc0>
 726:	55 95       	asr	r21
 728:	47 95       	ror	r20
 72a:	8a 95       	dec	r24
 72c:	e2 f7       	brpl	.-8      	; 0x726 <DIO_VidGetPinValue+0xbc>
 72e:	ca 01       	movw	r24, r20
 730:	81 70       	andi	r24, 0x01	; 1
 732:	eb 81       	ldd	r30, Y+3	; 0x03
 734:	fc 81       	ldd	r31, Y+4	; 0x04
 736:	80 83       	st	Z, r24
 738:	13 c0       	rjmp	.+38     	; 0x760 <DIO_VidGetPinValue+0xf6>
			case (Port_D) : *Copy_Pu8PinValue = Get_Bit(PIND,Copy_u8PinNumber);break;
 73a:	e0 e3       	ldi	r30, 0x30	; 48
 73c:	f0 e0       	ldi	r31, 0x00	; 0
 73e:	80 81       	ld	r24, Z
 740:	28 2f       	mov	r18, r24
 742:	30 e0       	ldi	r19, 0x00	; 0
 744:	8a 81       	ldd	r24, Y+2	; 0x02
 746:	88 2f       	mov	r24, r24
 748:	90 e0       	ldi	r25, 0x00	; 0
 74a:	a9 01       	movw	r20, r18
 74c:	02 c0       	rjmp	.+4      	; 0x752 <DIO_VidGetPinValue+0xe8>
 74e:	55 95       	asr	r21
 750:	47 95       	ror	r20
 752:	8a 95       	dec	r24
 754:	e2 f7       	brpl	.-8      	; 0x74e <DIO_VidGetPinValue+0xe4>
 756:	ca 01       	movw	r24, r20
 758:	81 70       	andi	r24, 0x01	; 1
 75a:	eb 81       	ldd	r30, Y+3	; 0x03
 75c:	fc 81       	ldd	r31, Y+4	; 0x04
 75e:	80 83       	st	Z, r24
		}
}
 760:	26 96       	adiw	r28, 0x06	; 6
 762:	0f b6       	in	r0, 0x3f	; 63
 764:	f8 94       	cli
 766:	de bf       	out	0x3e, r29	; 62
 768:	0f be       	out	0x3f, r0	; 63
 76a:	cd bf       	out	0x3d, r28	; 61
 76c:	cf 91       	pop	r28
 76e:	df 91       	pop	r29
 770:	08 95       	ret

00000772 <DIO_VidSetPortVal>:
/*---------------------------------------------------------------------------------------------------------------------------------*/
									/************************set port************************/
/*---------------------------------------------------------------------------------------------------------------------------------*/


void DIO_VidSetPortVal(u8 Copy_u8Port, u8 Copy_u8Val){
 772:	df 93       	push	r29
 774:	cf 93       	push	r28
 776:	00 d0       	rcall	.+0      	; 0x778 <DIO_VidSetPortVal+0x6>
 778:	00 d0       	rcall	.+0      	; 0x77a <DIO_VidSetPortVal+0x8>
 77a:	cd b7       	in	r28, 0x3d	; 61
 77c:	de b7       	in	r29, 0x3e	; 62
 77e:	89 83       	std	Y+1, r24	; 0x01
 780:	6a 83       	std	Y+2, r22	; 0x02

		switch (Copy_u8Port) {
 782:	89 81       	ldd	r24, Y+1	; 0x01
 784:	28 2f       	mov	r18, r24
 786:	30 e0       	ldi	r19, 0x00	; 0
 788:	3c 83       	std	Y+4, r19	; 0x04
 78a:	2b 83       	std	Y+3, r18	; 0x03
 78c:	8b 81       	ldd	r24, Y+3	; 0x03
 78e:	9c 81       	ldd	r25, Y+4	; 0x04
 790:	83 30       	cpi	r24, 0x03	; 3
 792:	91 05       	cpc	r25, r1
 794:	d9 f0       	breq	.+54     	; 0x7cc <DIO_VidSetPortVal+0x5a>
 796:	2b 81       	ldd	r18, Y+3	; 0x03
 798:	3c 81       	ldd	r19, Y+4	; 0x04
 79a:	24 30       	cpi	r18, 0x04	; 4
 79c:	31 05       	cpc	r19, r1
 79e:	34 f4       	brge	.+12     	; 0x7ac <DIO_VidSetPortVal+0x3a>
 7a0:	8b 81       	ldd	r24, Y+3	; 0x03
 7a2:	9c 81       	ldd	r25, Y+4	; 0x04
 7a4:	82 30       	cpi	r24, 0x02	; 2
 7a6:	91 05       	cpc	r25, r1
 7a8:	61 f0       	breq	.+24     	; 0x7c2 <DIO_VidSetPortVal+0x50>
 7aa:	1e c0       	rjmp	.+60     	; 0x7e8 <DIO_VidSetPortVal+0x76>
 7ac:	2b 81       	ldd	r18, Y+3	; 0x03
 7ae:	3c 81       	ldd	r19, Y+4	; 0x04
 7b0:	24 30       	cpi	r18, 0x04	; 4
 7b2:	31 05       	cpc	r19, r1
 7b4:	81 f0       	breq	.+32     	; 0x7d6 <DIO_VidSetPortVal+0x64>
 7b6:	8b 81       	ldd	r24, Y+3	; 0x03
 7b8:	9c 81       	ldd	r25, Y+4	; 0x04
 7ba:	85 30       	cpi	r24, 0x05	; 5
 7bc:	91 05       	cpc	r25, r1
 7be:	81 f0       	breq	.+32     	; 0x7e0 <DIO_VidSetPortVal+0x6e>
 7c0:	13 c0       	rjmp	.+38     	; 0x7e8 <DIO_VidSetPortVal+0x76>
			case (Port_A) : PORTA = Copy_u8Val;break;
 7c2:	eb e3       	ldi	r30, 0x3B	; 59
 7c4:	f0 e0       	ldi	r31, 0x00	; 0
 7c6:	8a 81       	ldd	r24, Y+2	; 0x02
 7c8:	80 83       	st	Z, r24
 7ca:	0e c0       	rjmp	.+28     	; 0x7e8 <DIO_VidSetPortVal+0x76>
			case (Port_B) : PORTB = Copy_u8Val;break;
 7cc:	e8 e3       	ldi	r30, 0x38	; 56
 7ce:	f0 e0       	ldi	r31, 0x00	; 0
 7d0:	8a 81       	ldd	r24, Y+2	; 0x02
 7d2:	80 83       	st	Z, r24
 7d4:	09 c0       	rjmp	.+18     	; 0x7e8 <DIO_VidSetPortVal+0x76>
			case (Port_C) : PORTC = Copy_u8Val;break;
 7d6:	e5 e3       	ldi	r30, 0x35	; 53
 7d8:	f0 e0       	ldi	r31, 0x00	; 0
 7da:	8a 81       	ldd	r24, Y+2	; 0x02
 7dc:	80 83       	st	Z, r24
 7de:	04 c0       	rjmp	.+8      	; 0x7e8 <DIO_VidSetPortVal+0x76>
			case (Port_D) : PORTD = Copy_u8Val;break;
 7e0:	e2 e3       	ldi	r30, 0x32	; 50
 7e2:	f0 e0       	ldi	r31, 0x00	; 0
 7e4:	8a 81       	ldd	r24, Y+2	; 0x02
 7e6:	80 83       	st	Z, r24
		}
}
 7e8:	0f 90       	pop	r0
 7ea:	0f 90       	pop	r0
 7ec:	0f 90       	pop	r0
 7ee:	0f 90       	pop	r0
 7f0:	cf 91       	pop	r28
 7f2:	df 91       	pop	r29
 7f4:	08 95       	ret

000007f6 <DIO_VidSetPortDirection>:



void DIO_VidSetPortDirection(u8 Copy_u8Port, u8 Copy_u8Direction)
{
 7f6:	df 93       	push	r29
 7f8:	cf 93       	push	r28
 7fa:	00 d0       	rcall	.+0      	; 0x7fc <DIO_VidSetPortDirection+0x6>
 7fc:	00 d0       	rcall	.+0      	; 0x7fe <DIO_VidSetPortDirection+0x8>
 7fe:	00 d0       	rcall	.+0      	; 0x800 <DIO_VidSetPortDirection+0xa>
 800:	cd b7       	in	r28, 0x3d	; 61
 802:	de b7       	in	r29, 0x3e	; 62
 804:	89 83       	std	Y+1, r24	; 0x01
 806:	6a 83       	std	Y+2, r22	; 0x02
	/****************** set Port as input***********************/
	if(Copy_u8Direction == input){
 808:	8a 81       	ldd	r24, Y+2	; 0x02
 80a:	88 23       	and	r24, r24
 80c:	81 f5       	brne	.+96     	; 0x86e <__stack+0xf>
		switch (Copy_u8Port) {
 80e:	89 81       	ldd	r24, Y+1	; 0x01
 810:	28 2f       	mov	r18, r24
 812:	30 e0       	ldi	r19, 0x00	; 0
 814:	3e 83       	std	Y+6, r19	; 0x06
 816:	2d 83       	std	Y+5, r18	; 0x05
 818:	8d 81       	ldd	r24, Y+5	; 0x05
 81a:	9e 81       	ldd	r25, Y+6	; 0x06
 81c:	83 30       	cpi	r24, 0x03	; 3
 81e:	91 05       	cpc	r25, r1
 820:	d1 f0       	breq	.+52     	; 0x856 <DIO_VidSetPortDirection+0x60>
 822:	2d 81       	ldd	r18, Y+5	; 0x05
 824:	3e 81       	ldd	r19, Y+6	; 0x06
 826:	24 30       	cpi	r18, 0x04	; 4
 828:	31 05       	cpc	r19, r1
 82a:	34 f4       	brge	.+12     	; 0x838 <DIO_VidSetPortDirection+0x42>
 82c:	8d 81       	ldd	r24, Y+5	; 0x05
 82e:	9e 81       	ldd	r25, Y+6	; 0x06
 830:	82 30       	cpi	r24, 0x02	; 2
 832:	91 05       	cpc	r25, r1
 834:	61 f0       	breq	.+24     	; 0x84e <DIO_VidSetPortDirection+0x58>
 836:	51 c0       	rjmp	.+162    	; 0x8da <__stack+0x7b>
 838:	2d 81       	ldd	r18, Y+5	; 0x05
 83a:	3e 81       	ldd	r19, Y+6	; 0x06
 83c:	24 30       	cpi	r18, 0x04	; 4
 83e:	31 05       	cpc	r19, r1
 840:	71 f0       	breq	.+28     	; 0x85e <DIO_VidSetPortDirection+0x68>
 842:	8d 81       	ldd	r24, Y+5	; 0x05
 844:	9e 81       	ldd	r25, Y+6	; 0x06
 846:	85 30       	cpi	r24, 0x05	; 5
 848:	91 05       	cpc	r25, r1
 84a:	69 f0       	breq	.+26     	; 0x866 <__stack+0x7>
 84c:	46 c0       	rjmp	.+140    	; 0x8da <__stack+0x7b>
			case (Port_A) : DDRA = 0x00 ;break;
 84e:	ea e3       	ldi	r30, 0x3A	; 58
 850:	f0 e0       	ldi	r31, 0x00	; 0
 852:	10 82       	st	Z, r1
 854:	42 c0       	rjmp	.+132    	; 0x8da <__stack+0x7b>
			case (Port_B) : DDRB = 0x00 ;break;
 856:	e7 e3       	ldi	r30, 0x37	; 55
 858:	f0 e0       	ldi	r31, 0x00	; 0
 85a:	10 82       	st	Z, r1
 85c:	3e c0       	rjmp	.+124    	; 0x8da <__stack+0x7b>
			case (Port_C) : DDRC = 0x00 ;break;
 85e:	e4 e3       	ldi	r30, 0x34	; 52
 860:	f0 e0       	ldi	r31, 0x00	; 0
 862:	10 82       	st	Z, r1
 864:	3a c0       	rjmp	.+116    	; 0x8da <__stack+0x7b>
			case (Port_D) : DDRD = 0x00 ;break;
 866:	e1 e3       	ldi	r30, 0x31	; 49
 868:	f0 e0       	ldi	r31, 0x00	; 0
 86a:	10 82       	st	Z, r1
 86c:	36 c0       	rjmp	.+108    	; 0x8da <__stack+0x7b>
		}
	}

	/****************** set Port as output***********************/
	else if(Copy_u8Direction == output){
 86e:	8a 81       	ldd	r24, Y+2	; 0x02
 870:	81 30       	cpi	r24, 0x01	; 1
 872:	99 f5       	brne	.+102    	; 0x8da <__stack+0x7b>
		switch (Copy_u8Port) {
 874:	89 81       	ldd	r24, Y+1	; 0x01
 876:	28 2f       	mov	r18, r24
 878:	30 e0       	ldi	r19, 0x00	; 0
 87a:	3c 83       	std	Y+4, r19	; 0x04
 87c:	2b 83       	std	Y+3, r18	; 0x03
 87e:	8b 81       	ldd	r24, Y+3	; 0x03
 880:	9c 81       	ldd	r25, Y+4	; 0x04
 882:	83 30       	cpi	r24, 0x03	; 3
 884:	91 05       	cpc	r25, r1
 886:	d9 f0       	breq	.+54     	; 0x8be <__stack+0x5f>
 888:	2b 81       	ldd	r18, Y+3	; 0x03
 88a:	3c 81       	ldd	r19, Y+4	; 0x04
 88c:	24 30       	cpi	r18, 0x04	; 4
 88e:	31 05       	cpc	r19, r1
 890:	34 f4       	brge	.+12     	; 0x89e <__stack+0x3f>
 892:	8b 81       	ldd	r24, Y+3	; 0x03
 894:	9c 81       	ldd	r25, Y+4	; 0x04
 896:	82 30       	cpi	r24, 0x02	; 2
 898:	91 05       	cpc	r25, r1
 89a:	61 f0       	breq	.+24     	; 0x8b4 <__stack+0x55>
 89c:	1e c0       	rjmp	.+60     	; 0x8da <__stack+0x7b>
 89e:	2b 81       	ldd	r18, Y+3	; 0x03
 8a0:	3c 81       	ldd	r19, Y+4	; 0x04
 8a2:	24 30       	cpi	r18, 0x04	; 4
 8a4:	31 05       	cpc	r19, r1
 8a6:	81 f0       	breq	.+32     	; 0x8c8 <__stack+0x69>
 8a8:	8b 81       	ldd	r24, Y+3	; 0x03
 8aa:	9c 81       	ldd	r25, Y+4	; 0x04
 8ac:	85 30       	cpi	r24, 0x05	; 5
 8ae:	91 05       	cpc	r25, r1
 8b0:	81 f0       	breq	.+32     	; 0x8d2 <__stack+0x73>
 8b2:	13 c0       	rjmp	.+38     	; 0x8da <__stack+0x7b>
			case (Port_A) : DDRA = 0xff ;break;
 8b4:	ea e3       	ldi	r30, 0x3A	; 58
 8b6:	f0 e0       	ldi	r31, 0x00	; 0
 8b8:	8f ef       	ldi	r24, 0xFF	; 255
 8ba:	80 83       	st	Z, r24
 8bc:	0e c0       	rjmp	.+28     	; 0x8da <__stack+0x7b>
			case (Port_B) : DDRB = 0xff ;break;
 8be:	e7 e3       	ldi	r30, 0x37	; 55
 8c0:	f0 e0       	ldi	r31, 0x00	; 0
 8c2:	8f ef       	ldi	r24, 0xFF	; 255
 8c4:	80 83       	st	Z, r24
 8c6:	09 c0       	rjmp	.+18     	; 0x8da <__stack+0x7b>
			case (Port_C) : DDRC = 0xff ;break;
 8c8:	e4 e3       	ldi	r30, 0x34	; 52
 8ca:	f0 e0       	ldi	r31, 0x00	; 0
 8cc:	8f ef       	ldi	r24, 0xFF	; 255
 8ce:	80 83       	st	Z, r24
 8d0:	04 c0       	rjmp	.+8      	; 0x8da <__stack+0x7b>
			case (Port_D) : DDRD = 0xff ;break;
 8d2:	e1 e3       	ldi	r30, 0x31	; 49
 8d4:	f0 e0       	ldi	r31, 0x00	; 0
 8d6:	8f ef       	ldi	r24, 0xFF	; 255
 8d8:	80 83       	st	Z, r24
		}
	}
}
 8da:	26 96       	adiw	r28, 0x06	; 6
 8dc:	0f b6       	in	r0, 0x3f	; 63
 8de:	f8 94       	cli
 8e0:	de bf       	out	0x3e, r29	; 62
 8e2:	0f be       	out	0x3f, r0	; 63
 8e4:	cd bf       	out	0x3d, r28	; 61
 8e6:	cf 91       	pop	r28
 8e8:	df 91       	pop	r29
 8ea:	08 95       	ret

000008ec <DIO_VidGetPortValue>:

void DIO_VidGetPortValue(u8 Copy_u8Port, u8* Copy_Pu8Value)
{
 8ec:	df 93       	push	r29
 8ee:	cf 93       	push	r28
 8f0:	00 d0       	rcall	.+0      	; 0x8f2 <DIO_VidGetPortValue+0x6>
 8f2:	00 d0       	rcall	.+0      	; 0x8f4 <DIO_VidGetPortValue+0x8>
 8f4:	0f 92       	push	r0
 8f6:	cd b7       	in	r28, 0x3d	; 61
 8f8:	de b7       	in	r29, 0x3e	; 62
 8fa:	89 83       	std	Y+1, r24	; 0x01
 8fc:	7b 83       	std	Y+3, r23	; 0x03
 8fe:	6a 83       	std	Y+2, r22	; 0x02
	switch (Copy_u8Port) {
 900:	89 81       	ldd	r24, Y+1	; 0x01
 902:	28 2f       	mov	r18, r24
 904:	30 e0       	ldi	r19, 0x00	; 0
 906:	3d 83       	std	Y+5, r19	; 0x05
 908:	2c 83       	std	Y+4, r18	; 0x04
 90a:	8c 81       	ldd	r24, Y+4	; 0x04
 90c:	9d 81       	ldd	r25, Y+5	; 0x05
 90e:	83 30       	cpi	r24, 0x03	; 3
 910:	91 05       	cpc	r25, r1
 912:	e9 f0       	breq	.+58     	; 0x94e <DIO_VidGetPortValue+0x62>
 914:	2c 81       	ldd	r18, Y+4	; 0x04
 916:	3d 81       	ldd	r19, Y+5	; 0x05
 918:	24 30       	cpi	r18, 0x04	; 4
 91a:	31 05       	cpc	r19, r1
 91c:	34 f4       	brge	.+12     	; 0x92a <DIO_VidGetPortValue+0x3e>
 91e:	8c 81       	ldd	r24, Y+4	; 0x04
 920:	9d 81       	ldd	r25, Y+5	; 0x05
 922:	82 30       	cpi	r24, 0x02	; 2
 924:	91 05       	cpc	r25, r1
 926:	61 f0       	breq	.+24     	; 0x940 <DIO_VidGetPortValue+0x54>
 928:	26 c0       	rjmp	.+76     	; 0x976 <DIO_VidGetPortValue+0x8a>
 92a:	2c 81       	ldd	r18, Y+4	; 0x04
 92c:	3d 81       	ldd	r19, Y+5	; 0x05
 92e:	24 30       	cpi	r18, 0x04	; 4
 930:	31 05       	cpc	r19, r1
 932:	a1 f0       	breq	.+40     	; 0x95c <DIO_VidGetPortValue+0x70>
 934:	8c 81       	ldd	r24, Y+4	; 0x04
 936:	9d 81       	ldd	r25, Y+5	; 0x05
 938:	85 30       	cpi	r24, 0x05	; 5
 93a:	91 05       	cpc	r25, r1
 93c:	b1 f0       	breq	.+44     	; 0x96a <DIO_VidGetPortValue+0x7e>
 93e:	1b c0       	rjmp	.+54     	; 0x976 <DIO_VidGetPortValue+0x8a>
		case (Port_A) : *Copy_Pu8Value = PINA; break;
 940:	e9 e3       	ldi	r30, 0x39	; 57
 942:	f0 e0       	ldi	r31, 0x00	; 0
 944:	80 81       	ld	r24, Z
 946:	ea 81       	ldd	r30, Y+2	; 0x02
 948:	fb 81       	ldd	r31, Y+3	; 0x03
 94a:	80 83       	st	Z, r24
 94c:	14 c0       	rjmp	.+40     	; 0x976 <DIO_VidGetPortValue+0x8a>
		case (Port_B) : *Copy_Pu8Value = PINB; break;
 94e:	e6 e3       	ldi	r30, 0x36	; 54
 950:	f0 e0       	ldi	r31, 0x00	; 0
 952:	80 81       	ld	r24, Z
 954:	ea 81       	ldd	r30, Y+2	; 0x02
 956:	fb 81       	ldd	r31, Y+3	; 0x03
 958:	80 83       	st	Z, r24
 95a:	0d c0       	rjmp	.+26     	; 0x976 <DIO_VidGetPortValue+0x8a>
		case (Port_C) : *Copy_Pu8Value = PINC; break;
 95c:	e3 e3       	ldi	r30, 0x33	; 51
 95e:	f0 e0       	ldi	r31, 0x00	; 0
 960:	80 81       	ld	r24, Z
 962:	ea 81       	ldd	r30, Y+2	; 0x02
 964:	fb 81       	ldd	r31, Y+3	; 0x03
 966:	80 83       	st	Z, r24
 968:	06 c0       	rjmp	.+12     	; 0x976 <DIO_VidGetPortValue+0x8a>
		case (Port_D) : *Copy_Pu8Value = PIND; break;
 96a:	e0 e3       	ldi	r30, 0x30	; 48
 96c:	f0 e0       	ldi	r31, 0x00	; 0
 96e:	80 81       	ld	r24, Z
 970:	ea 81       	ldd	r30, Y+2	; 0x02
 972:	fb 81       	ldd	r31, Y+3	; 0x03
 974:	80 83       	st	Z, r24
	}
}
 976:	0f 90       	pop	r0
 978:	0f 90       	pop	r0
 97a:	0f 90       	pop	r0
 97c:	0f 90       	pop	r0
 97e:	0f 90       	pop	r0
 980:	cf 91       	pop	r28
 982:	df 91       	pop	r29
 984:	08 95       	ret

00000986 <ADC_VidInit>:
#include "ADC_Config.h"
#include "ADC_Interface.h"
#include "ADC_Private.h"

/*For Fixed options*/
void ADC_VidInit(){
 986:	df 93       	push	r29
 988:	cf 93       	push	r28
 98a:	cd b7       	in	r28, 0x3d	; 61
 98c:	de b7       	in	r29, 0x3e	; 62
	/*Reference Selection Bit*/
	/*AVCC Reference*/
	Set_Bit(ADMUX,ADMUX_REFS0);
 98e:	a7 e2       	ldi	r26, 0x27	; 39
 990:	b0 e0       	ldi	r27, 0x00	; 0
 992:	e7 e2       	ldi	r30, 0x27	; 39
 994:	f0 e0       	ldi	r31, 0x00	; 0
 996:	80 81       	ld	r24, Z
 998:	80 64       	ori	r24, 0x40	; 64
 99a:	8c 93       	st	X, r24
	CLR_Bit(ADMUX,ADMUX_REFS1);
 99c:	a7 e2       	ldi	r26, 0x27	; 39
 99e:	b0 e0       	ldi	r27, 0x00	; 0
 9a0:	e7 e2       	ldi	r30, 0x27	; 39
 9a2:	f0 e0       	ldi	r31, 0x00	; 0
 9a4:	80 81       	ld	r24, Z
 9a6:	8f 77       	andi	r24, 0x7F	; 127
 9a8:	8c 93       	st	X, r24

	/*ADLAR to read 8-Bits data as if it's 8-bits only*/
	Set_Bit(ADMUX,ADMUX_ADLAR);
 9aa:	a7 e2       	ldi	r26, 0x27	; 39
 9ac:	b0 e0       	ldi	r27, 0x00	; 0
 9ae:	e7 e2       	ldi	r30, 0x27	; 39
 9b0:	f0 e0       	ldi	r31, 0x00	; 0
 9b2:	80 81       	ld	r24, Z
 9b4:	80 62       	ori	r24, 0x20	; 32
 9b6:	8c 93       	st	X, r24

	/*Prescaler 128*/
	Set_Bit(ADCSRA,ADCSRA_ADPS0);
 9b8:	a6 e2       	ldi	r26, 0x26	; 38
 9ba:	b0 e0       	ldi	r27, 0x00	; 0
 9bc:	e6 e2       	ldi	r30, 0x26	; 38
 9be:	f0 e0       	ldi	r31, 0x00	; 0
 9c0:	80 81       	ld	r24, Z
 9c2:	81 60       	ori	r24, 0x01	; 1
 9c4:	8c 93       	st	X, r24
	Set_Bit(ADCSRA,ADCSRA_ADPS1);
 9c6:	a6 e2       	ldi	r26, 0x26	; 38
 9c8:	b0 e0       	ldi	r27, 0x00	; 0
 9ca:	e6 e2       	ldi	r30, 0x26	; 38
 9cc:	f0 e0       	ldi	r31, 0x00	; 0
 9ce:	80 81       	ld	r24, Z
 9d0:	82 60       	ori	r24, 0x02	; 2
 9d2:	8c 93       	st	X, r24
	Set_Bit(ADCSRA,ADCSRA_ADPS2);
 9d4:	a6 e2       	ldi	r26, 0x26	; 38
 9d6:	b0 e0       	ldi	r27, 0x00	; 0
 9d8:	e6 e2       	ldi	r30, 0x26	; 38
 9da:	f0 e0       	ldi	r31, 0x00	; 0
 9dc:	80 81       	ld	r24, Z
 9de:	84 60       	ori	r24, 0x04	; 4
 9e0:	8c 93       	st	X, r24

	/*Enable Module*/
	Set_Bit(ADCSRA,ADCSRA_ADEN);
 9e2:	a6 e2       	ldi	r26, 0x26	; 38
 9e4:	b0 e0       	ldi	r27, 0x00	; 0
 9e6:	e6 e2       	ldi	r30, 0x26	; 38
 9e8:	f0 e0       	ldi	r31, 0x00	; 0
 9ea:	80 81       	ld	r24, Z
 9ec:	80 68       	ori	r24, 0x80	; 128
 9ee:	8c 93       	st	X, r24
}
 9f0:	cf 91       	pop	r28
 9f2:	df 91       	pop	r29
 9f4:	08 95       	ret

000009f6 <ADC_u8ReadChannel>:

u8 ADC_u8ReadChannel(u8 Copy_u8Channel){
 9f6:	df 93       	push	r29
 9f8:	cf 93       	push	r28
 9fa:	0f 92       	push	r0
 9fc:	cd b7       	in	r28, 0x3d	; 61
 9fe:	de b7       	in	r29, 0x3e	; 62
 a00:	89 83       	std	Y+1, r24	; 0x01
	/*choose Channel*/
	/*CLR first 5 Bits*/
	ADMUX &= 0b11100000;
 a02:	a7 e2       	ldi	r26, 0x27	; 39
 a04:	b0 e0       	ldi	r27, 0x00	; 0
 a06:	e7 e2       	ldi	r30, 0x27	; 39
 a08:	f0 e0       	ldi	r31, 0x00	; 0
 a0a:	80 81       	ld	r24, Z
 a0c:	80 7e       	andi	r24, 0xE0	; 224
 a0e:	8c 93       	st	X, r24
	/*Set Desired values*/
	ADMUX |= Copy_u8Channel;
 a10:	a7 e2       	ldi	r26, 0x27	; 39
 a12:	b0 e0       	ldi	r27, 0x00	; 0
 a14:	e7 e2       	ldi	r30, 0x27	; 39
 a16:	f0 e0       	ldi	r31, 0x00	; 0
 a18:	90 81       	ld	r25, Z
 a1a:	89 81       	ldd	r24, Y+1	; 0x01
 a1c:	89 2b       	or	r24, r25
 a1e:	8c 93       	st	X, r24

	/*Start Conversion*/
	Set_Bit(ADCSRA,ADCSRA_ADSC);
 a20:	a6 e2       	ldi	r26, 0x26	; 38
 a22:	b0 e0       	ldi	r27, 0x00	; 0
 a24:	e6 e2       	ldi	r30, 0x26	; 38
 a26:	f0 e0       	ldi	r31, 0x00	; 0
 a28:	80 81       	ld	r24, Z
 a2a:	80 64       	ori	r24, 0x40	; 64
 a2c:	8c 93       	st	X, r24

	/* Wait Till Conversion is Over*/
	while(!Get_Bit(ADCSRA,ADCSRA_ADIF));
 a2e:	e6 e2       	ldi	r30, 0x26	; 38
 a30:	f0 e0       	ldi	r31, 0x00	; 0
 a32:	80 81       	ld	r24, Z
 a34:	82 95       	swap	r24
 a36:	8f 70       	andi	r24, 0x0F	; 15
 a38:	88 2f       	mov	r24, r24
 a3a:	90 e0       	ldi	r25, 0x00	; 0
 a3c:	81 70       	andi	r24, 0x01	; 1
 a3e:	90 70       	andi	r25, 0x00	; 0
 a40:	00 97       	sbiw	r24, 0x00	; 0
 a42:	a9 f3       	breq	.-22     	; 0xa2e <ADC_u8ReadChannel+0x38>

	/*Clear Flag by setting logical 1*/
	Set_Bit(ADCSRA,ADCSRA_ADIF);
 a44:	a6 e2       	ldi	r26, 0x26	; 38
 a46:	b0 e0       	ldi	r27, 0x00	; 0
 a48:	e6 e2       	ldi	r30, 0x26	; 38
 a4a:	f0 e0       	ldi	r31, 0x00	; 0
 a4c:	80 81       	ld	r24, Z
 a4e:	80 61       	ori	r24, 0x10	; 16
 a50:	8c 93       	st	X, r24

	/*Return the value*/
	return ADCH;
 a52:	e5 e2       	ldi	r30, 0x25	; 37
 a54:	f0 e0       	ldi	r31, 0x00	; 0
 a56:	80 81       	ld	r24, Z
}
 a58:	0f 90       	pop	r0
 a5a:	cf 91       	pop	r28
 a5c:	df 91       	pop	r29
 a5e:	08 95       	ret

00000a60 <main>:
/*MCAL*/
#include "MCAL/DIO/DIO_Interface.h"
#include "MCAL/ADC/ADC_Interface.h"


void main(void){
 a60:	df 93       	push	r29
 a62:	cf 93       	push	r28
 a64:	0f 92       	push	r0
 a66:	cd b7       	in	r28, 0x3d	; 61
 a68:	de b7       	in	r29, 0x3e	; 62
	DIO_VidSetPinDirection(Port_A,Pin_0,input); /*ADC0 pin*/
 a6a:	82 e0       	ldi	r24, 0x02	; 2
 a6c:	60 e0       	ldi	r22, 0x00	; 0
 a6e:	40 e0       	ldi	r20, 0x00	; 0
 a70:	0e 94 33 02 	call	0x466	; 0x466 <DIO_VidSetPinDirection>
	DIO_VidSetPinDirection(Port_C,Pin_1,output); /*For LED 1 */
 a74:	84 e0       	ldi	r24, 0x04	; 4
 a76:	61 e0       	ldi	r22, 0x01	; 1
 a78:	41 e0       	ldi	r20, 0x01	; 1
 a7a:	0e 94 33 02 	call	0x466	; 0x466 <DIO_VidSetPinDirection>
	DIO_VidSetPinDirection(Port_C,Pin_2,output); /*For LED 2*/
 a7e:	84 e0       	ldi	r24, 0x04	; 4
 a80:	62 e0       	ldi	r22, 0x02	; 2
 a82:	41 e0       	ldi	r20, 0x01	; 1
 a84:	0e 94 33 02 	call	0x466	; 0x466 <DIO_VidSetPinDirection>
	DIO_VidSetPinDirection(Port_C,Pin_3,output); /*For LED 3*/
 a88:	84 e0       	ldi	r24, 0x04	; 4
 a8a:	63 e0       	ldi	r22, 0x03	; 3
 a8c:	41 e0       	ldi	r20, 0x01	; 1
 a8e:	0e 94 33 02 	call	0x466	; 0x466 <DIO_VidSetPinDirection>
	/*DIO_VidSetPortDirection(Port_C,output);*/

	ADC_VidInit();
 a92:	0e 94 c3 04 	call	0x986	; 0x986 <ADC_VidInit>
	u8 read;
	while(1){
		read = ADC_u8ReadChannel(ADC_0); /*Get ADC Values*/
 a96:	80 e0       	ldi	r24, 0x00	; 0
 a98:	0e 94 fb 04 	call	0x9f6	; 0x9f6 <ADC_u8ReadChannel>
 a9c:	89 83       	std	Y+1, r24	; 0x01
		DIO_VidSetPortVal(Port_A,read); /*Display ADC Values at */
 a9e:	82 e0       	ldi	r24, 0x02	; 2
 aa0:	69 81       	ldd	r22, Y+1	; 0x01
 aa2:	0e 94 b9 03 	call	0x772	; 0x772 <DIO_VidSetPortVal>
		if(read <100 ){
 aa6:	89 81       	ldd	r24, Y+1	; 0x01
 aa8:	84 36       	cpi	r24, 0x64	; 100
 aaa:	80 f4       	brcc	.+32     	; 0xacc <main+0x6c>
			DIO_VidSetPinValue(Port_C,Pin_3,low);
 aac:	84 e0       	ldi	r24, 0x04	; 4
 aae:	63 e0       	ldi	r22, 0x03	; 3
 ab0:	40 e0       	ldi	r20, 0x00	; 0
 ab2:	0e 94 31 01 	call	0x262	; 0x262 <DIO_VidSetPinValue>
			DIO_VidSetPinValue(Port_C,Pin_2,low);
 ab6:	84 e0       	ldi	r24, 0x04	; 4
 ab8:	62 e0       	ldi	r22, 0x02	; 2
 aba:	40 e0       	ldi	r20, 0x00	; 0
 abc:	0e 94 31 01 	call	0x262	; 0x262 <DIO_VidSetPinValue>
			DIO_VidSetPinValue(Port_C,Pin_1,high);
 ac0:	84 e0       	ldi	r24, 0x04	; 4
 ac2:	61 e0       	ldi	r22, 0x01	; 1
 ac4:	41 e0       	ldi	r20, 0x01	; 1
 ac6:	0e 94 31 01 	call	0x262	; 0x262 <DIO_VidSetPinValue>
 aca:	e5 cf       	rjmp	.-54     	; 0xa96 <main+0x36>
		}
		else if(read > 100 && read < 180){
 acc:	89 81       	ldd	r24, Y+1	; 0x01
 ace:	85 36       	cpi	r24, 0x65	; 101
 ad0:	98 f0       	brcs	.+38     	; 0xaf8 <main+0x98>
 ad2:	89 81       	ldd	r24, Y+1	; 0x01
 ad4:	84 3b       	cpi	r24, 0xB4	; 180
 ad6:	80 f4       	brcc	.+32     	; 0xaf8 <main+0x98>
			DIO_VidSetPinValue(Port_C,Pin_3,low);
 ad8:	84 e0       	ldi	r24, 0x04	; 4
 ada:	63 e0       	ldi	r22, 0x03	; 3
 adc:	40 e0       	ldi	r20, 0x00	; 0
 ade:	0e 94 31 01 	call	0x262	; 0x262 <DIO_VidSetPinValue>
			DIO_VidSetPinValue(Port_C,Pin_1,low);
 ae2:	84 e0       	ldi	r24, 0x04	; 4
 ae4:	61 e0       	ldi	r22, 0x01	; 1
 ae6:	40 e0       	ldi	r20, 0x00	; 0
 ae8:	0e 94 31 01 	call	0x262	; 0x262 <DIO_VidSetPinValue>
			DIO_VidSetPinValue(Port_C,Pin_2,high);
 aec:	84 e0       	ldi	r24, 0x04	; 4
 aee:	62 e0       	ldi	r22, 0x02	; 2
 af0:	41 e0       	ldi	r20, 0x01	; 1
 af2:	0e 94 31 01 	call	0x262	; 0x262 <DIO_VidSetPinValue>
 af6:	cf cf       	rjmp	.-98     	; 0xa96 <main+0x36>
		}
		else{
			DIO_VidSetPinValue(Port_C,Pin_1,low);
 af8:	84 e0       	ldi	r24, 0x04	; 4
 afa:	61 e0       	ldi	r22, 0x01	; 1
 afc:	40 e0       	ldi	r20, 0x00	; 0
 afe:	0e 94 31 01 	call	0x262	; 0x262 <DIO_VidSetPinValue>
			DIO_VidSetPinValue(Port_C,Pin_2,low);
 b02:	84 e0       	ldi	r24, 0x04	; 4
 b04:	62 e0       	ldi	r22, 0x02	; 2
 b06:	40 e0       	ldi	r20, 0x00	; 0
 b08:	0e 94 31 01 	call	0x262	; 0x262 <DIO_VidSetPinValue>
			DIO_VidSetPinValue(Port_C,Pin_3,high);
 b0c:	84 e0       	ldi	r24, 0x04	; 4
 b0e:	63 e0       	ldi	r22, 0x03	; 3
 b10:	41 e0       	ldi	r20, 0x01	; 1
 b12:	0e 94 31 01 	call	0x262	; 0x262 <DIO_VidSetPinValue>
 b16:	bf cf       	rjmp	.-130    	; 0xa96 <main+0x36>

00000b18 <_exit>:
 b18:	f8 94       	cli

00000b1a <__stop_program>:
 b1a:	ff cf       	rjmp	.-2      	; 0xb1a <__stop_program>
