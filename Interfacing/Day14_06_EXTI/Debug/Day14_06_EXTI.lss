
Day14_06_EXTI.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000a8a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  00000a8a  00000b1e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  00800062  00800062  00000b20  2**0
                  ALLOC
  3 .stab         00000f00  00000000  00000000  00000b20  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000b06  00000000  00000000  00001a20  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 c4 00 	jmp	0x188	; 0x188 <__vector_1>
   8:	0c 94 09 01 	jmp	0x212	; 0x212 <__vector_2>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea e8       	ldi	r30, 0x8A	; 138
  68:	fa e0       	ldi	r31, 0x0A	; 10
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a2 36       	cpi	r26, 0x62	; 98
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a2 e6       	ldi	r26, 0x62	; 98
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a6 36       	cpi	r26, 0x66	; 102
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 12 05 	call	0xa24	; 0xa24 <main>
  8a:	0c 94 43 05 	jmp	0xa86	; 0xa86 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <GIE_VidEnable>:
#include "GIE_Interface.h"
#include "GIE_Private.h"

/*GIE Enable*/

void GIE_VidEnable(void){
  92:	df 93       	push	r29
  94:	cf 93       	push	r28
  96:	cd b7       	in	r28, 0x3d	; 61
  98:	de b7       	in	r29, 0x3e	; 62
	Set_Bit(SREG,SREG_I_BIT);
  9a:	af e5       	ldi	r26, 0x5F	; 95
  9c:	b0 e0       	ldi	r27, 0x00	; 0
  9e:	ef e5       	ldi	r30, 0x5F	; 95
  a0:	f0 e0       	ldi	r31, 0x00	; 0
  a2:	80 81       	ld	r24, Z
  a4:	80 68       	ori	r24, 0x80	; 128
  a6:	8c 93       	st	X, r24
}
  a8:	cf 91       	pop	r28
  aa:	df 91       	pop	r29
  ac:	08 95       	ret

000000ae <GIE_VidDisable>:

/*GIE Disable*/

void GIE_VidDisable(void){
  ae:	df 93       	push	r29
  b0:	cf 93       	push	r28
  b2:	cd b7       	in	r28, 0x3d	; 61
  b4:	de b7       	in	r29, 0x3e	; 62
	CLR_Bit(SREG,SREG_I_BIT);
  b6:	af e5       	ldi	r26, 0x5F	; 95
  b8:	b0 e0       	ldi	r27, 0x00	; 0
  ba:	ef e5       	ldi	r30, 0x5F	; 95
  bc:	f0 e0       	ldi	r31, 0x00	; 0
  be:	80 81       	ld	r24, Z
  c0:	8f 77       	andi	r24, 0x7F	; 127
  c2:	8c 93       	st	X, r24
}
  c4:	cf 91       	pop	r28
  c6:	df 91       	pop	r29
  c8:	08 95       	ret

000000ca <EXTI0_VidIntInit>:
#include "EXTI_Config.h"


/*EXTI Init*/

void EXTI0_VidIntInit(){
  ca:	df 93       	push	r29
  cc:	cf 93       	push	r28
  ce:	cd b7       	in	r28, 0x3d	; 61
  d0:	de b7       	in	r29, 0x3e	; 62
		CLR_Bit(MCUCR,MCUCR_ISC00_PIN);
#elif	EXTI0_SENSE_CONTROL == EXTI_RISING_EDGE_SC
		Set_Bit(MCUCR,MCUCR_ISC01_PIN);
		Set_Bit(MCUCR,MCUCR_ISC00_PIN);
#elif	EXTI0_SENSE_CONTROL == EXTI_ON_CHANGE_SC
		Set_Bit(MCUCR,MCUCR_ISC00_PIN);
  d2:	a5 e5       	ldi	r26, 0x55	; 85
  d4:	b0 e0       	ldi	r27, 0x00	; 0
  d6:	e5 e5       	ldi	r30, 0x55	; 85
  d8:	f0 e0       	ldi	r31, 0x00	; 0
  da:	80 81       	ld	r24, Z
  dc:	81 60       	ori	r24, 0x01	; 1
  de:	8c 93       	st	X, r24
		CLR_Bit(MCUCR,MCUCR_ISC01_PIN);
  e0:	a5 e5       	ldi	r26, 0x55	; 85
  e2:	b0 e0       	ldi	r27, 0x00	; 0
  e4:	e5 e5       	ldi	r30, 0x55	; 85
  e6:	f0 e0       	ldi	r31, 0x00	; 0
  e8:	80 81       	ld	r24, Z
  ea:	8d 7f       	andi	r24, 0xFD	; 253
  ec:	8c 93       	st	X, r24
#else
		#warning "No Sense Control Selected, Back to Config File"
#endif
	/*Enable Interrupt*/

		Set_Bit(GICR,GICR_INT0_PIN);
  ee:	ab e5       	ldi	r26, 0x5B	; 91
  f0:	b0 e0       	ldi	r27, 0x00	; 0
  f2:	eb e5       	ldi	r30, 0x5B	; 91
  f4:	f0 e0       	ldi	r31, 0x00	; 0
  f6:	80 81       	ld	r24, Z
  f8:	80 64       	ori	r24, 0x40	; 64
  fa:	8c 93       	st	X, r24
}
  fc:	cf 91       	pop	r28
  fe:	df 91       	pop	r29
 100:	08 95       	ret

00000102 <EXTI1_VidIntInit>:
void EXTI1_VidIntInit(){
 102:	df 93       	push	r29
 104:	cf 93       	push	r28
 106:	cd b7       	in	r28, 0x3d	; 61
 108:	de b7       	in	r29, 0x3e	; 62
		CLR_Bit(MCUCR,MCUCR_ISC10_PIN);
#elif	EXTI1_SENSE_CONTROL == EXTI_RISING_EDGE_SC
		Set_Bit(MCUCR,MCUCR_ISC11_PIN);
		Set_Bit(MCUCR,MCUCR_ISC10_PIN);
#elif	EXTI1_SENSE_CONTROL == EXTI_ON_CHANGE_SC
		Set_Bit(MCUCR,MCUCR_ISC10_PIN);
 10a:	a5 e5       	ldi	r26, 0x55	; 85
 10c:	b0 e0       	ldi	r27, 0x00	; 0
 10e:	e5 e5       	ldi	r30, 0x55	; 85
 110:	f0 e0       	ldi	r31, 0x00	; 0
 112:	80 81       	ld	r24, Z
 114:	84 60       	ori	r24, 0x04	; 4
 116:	8c 93       	st	X, r24
		CLR_Bit(MCUCR,MCUCR_ISC11_PIN);
 118:	a5 e5       	ldi	r26, 0x55	; 85
 11a:	b0 e0       	ldi	r27, 0x00	; 0
 11c:	e5 e5       	ldi	r30, 0x55	; 85
 11e:	f0 e0       	ldi	r31, 0x00	; 0
 120:	80 81       	ld	r24, Z
 122:	87 7f       	andi	r24, 0xF7	; 247
 124:	8c 93       	st	X, r24
#else
		#warning "No Sense Control Selected, Back to Config File"
#endif
	/*Enable Interrupt*/

		Set_Bit(GICR,GICR_INT1_PIN);
 126:	ab e5       	ldi	r26, 0x5B	; 91
 128:	b0 e0       	ldi	r27, 0x00	; 0
 12a:	eb e5       	ldi	r30, 0x5B	; 91
 12c:	f0 e0       	ldi	r31, 0x00	; 0
 12e:	80 81       	ld	r24, Z
 130:	80 68       	ori	r24, 0x80	; 128
 132:	8c 93       	st	X, r24
}
 134:	cf 91       	pop	r28
 136:	df 91       	pop	r29
 138:	08 95       	ret

0000013a <EXTI2_VidIntInit>:
void EXTI2_VidIntInit(){
 13a:	df 93       	push	r29
 13c:	cf 93       	push	r28
 13e:	cd b7       	in	r28, 0x3d	; 61
 140:	de b7       	in	r29, 0x3e	; 62
	/*Sense Control*/

#if 	EXTI2_SENSE_CONTROL == EXTI_FALLING_EDGE_SC
		CLR_Bit(MCUCSR,MCUCSR_ISC2_PIN);
 142:	a4 e5       	ldi	r26, 0x54	; 84
 144:	b0 e0       	ldi	r27, 0x00	; 0
 146:	e4 e5       	ldi	r30, 0x54	; 84
 148:	f0 e0       	ldi	r31, 0x00	; 0
 14a:	80 81       	ld	r24, Z
 14c:	8f 7b       	andi	r24, 0xBF	; 191
 14e:	8c 93       	st	X, r24
#else
		#warning "No Sense Control Selected, Back to Config File"
#endif
	/*Enable Interrupt*/

		Set_Bit(GICR,GICR_INT2_PIN);
 150:	ab e5       	ldi	r26, 0x5B	; 91
 152:	b0 e0       	ldi	r27, 0x00	; 0
 154:	eb e5       	ldi	r30, 0x5B	; 91
 156:	f0 e0       	ldi	r31, 0x00	; 0
 158:	80 81       	ld	r24, Z
 15a:	80 62       	ori	r24, 0x20	; 32
 15c:	8c 93       	st	X, r24
}
 15e:	cf 91       	pop	r28
 160:	df 91       	pop	r29
 162:	08 95       	ret

00000164 <EXTI0_CallBack>:
  returns nothing (void)}.. pointing to NULL*/
void (* EXTI0_Func)(void) = NULL;


/*a function that takes pointer to function as an argument*/
void EXTI0_CallBack (void(*func)(void)){
 164:	df 93       	push	r29
 166:	cf 93       	push	r28
 168:	00 d0       	rcall	.+0      	; 0x16a <EXTI0_CallBack+0x6>
 16a:	cd b7       	in	r28, 0x3d	; 61
 16c:	de b7       	in	r29, 0x3e	; 62
 16e:	9a 83       	std	Y+2, r25	; 0x02
 170:	89 83       	std	Y+1, r24	; 0x01
	/*CAll back function pointing to the passed function argument*/
	EXTI0_Func = func ;
 172:	89 81       	ldd	r24, Y+1	; 0x01
 174:	9a 81       	ldd	r25, Y+2	; 0x02
 176:	90 93 63 00 	sts	0x0063, r25
 17a:	80 93 62 00 	sts	0x0062, r24
}
 17e:	0f 90       	pop	r0
 180:	0f 90       	pop	r0
 182:	cf 91       	pop	r28
 184:	df 91       	pop	r29
 186:	08 95       	ret

00000188 <__vector_1>:

void __vector_1 (void) __attribute__((signal)) ;

void __vector_1 (void){
 188:	1f 92       	push	r1
 18a:	0f 92       	push	r0
 18c:	0f b6       	in	r0, 0x3f	; 63
 18e:	0f 92       	push	r0
 190:	11 24       	eor	r1, r1
 192:	2f 93       	push	r18
 194:	3f 93       	push	r19
 196:	4f 93       	push	r20
 198:	5f 93       	push	r21
 19a:	6f 93       	push	r22
 19c:	7f 93       	push	r23
 19e:	8f 93       	push	r24
 1a0:	9f 93       	push	r25
 1a2:	af 93       	push	r26
 1a4:	bf 93       	push	r27
 1a6:	ef 93       	push	r30
 1a8:	ff 93       	push	r31
 1aa:	df 93       	push	r29
 1ac:	cf 93       	push	r28
 1ae:	cd b7       	in	r28, 0x3d	; 61
 1b0:	de b7       	in	r29, 0x3e	; 62
	if(EXTI0_Func != NULL)
 1b2:	80 91 62 00 	lds	r24, 0x0062
 1b6:	90 91 63 00 	lds	r25, 0x0063
 1ba:	00 97       	sbiw	r24, 0x00	; 0
 1bc:	29 f0       	breq	.+10     	; 0x1c8 <__vector_1+0x40>
		EXTI0_Func();
 1be:	e0 91 62 00 	lds	r30, 0x0062
 1c2:	f0 91 63 00 	lds	r31, 0x0063
 1c6:	09 95       	icall
}
 1c8:	cf 91       	pop	r28
 1ca:	df 91       	pop	r29
 1cc:	ff 91       	pop	r31
 1ce:	ef 91       	pop	r30
 1d0:	bf 91       	pop	r27
 1d2:	af 91       	pop	r26
 1d4:	9f 91       	pop	r25
 1d6:	8f 91       	pop	r24
 1d8:	7f 91       	pop	r23
 1da:	6f 91       	pop	r22
 1dc:	5f 91       	pop	r21
 1de:	4f 91       	pop	r20
 1e0:	3f 91       	pop	r19
 1e2:	2f 91       	pop	r18
 1e4:	0f 90       	pop	r0
 1e6:	0f be       	out	0x3f, r0	; 63
 1e8:	0f 90       	pop	r0
 1ea:	1f 90       	pop	r1
 1ec:	18 95       	reti

000001ee <EXTI1_CallBack>:


void (* EXTI1_Func)(void) = NULL; /*ptr*/


void EXTI1_CallBack (void(*func)(void)){ /*fun agr is ptr*/
 1ee:	df 93       	push	r29
 1f0:	cf 93       	push	r28
 1f2:	00 d0       	rcall	.+0      	; 0x1f4 <EXTI1_CallBack+0x6>
 1f4:	cd b7       	in	r28, 0x3d	; 61
 1f6:	de b7       	in	r29, 0x3e	; 62
 1f8:	9a 83       	std	Y+2, r25	; 0x02
 1fa:	89 83       	std	Y+1, r24	; 0x01
	EXTI1_Func = func ;
 1fc:	89 81       	ldd	r24, Y+1	; 0x01
 1fe:	9a 81       	ldd	r25, Y+2	; 0x02
 200:	90 93 65 00 	sts	0x0065, r25
 204:	80 93 64 00 	sts	0x0064, r24
}
 208:	0f 90       	pop	r0
 20a:	0f 90       	pop	r0
 20c:	cf 91       	pop	r28
 20e:	df 91       	pop	r29
 210:	08 95       	ret

00000212 <__vector_2>:

void __vector_2 (void) __attribute__((signal)) ;

void __vector_2 (void){
 212:	1f 92       	push	r1
 214:	0f 92       	push	r0
 216:	0f b6       	in	r0, 0x3f	; 63
 218:	0f 92       	push	r0
 21a:	11 24       	eor	r1, r1
 21c:	2f 93       	push	r18
 21e:	3f 93       	push	r19
 220:	4f 93       	push	r20
 222:	5f 93       	push	r21
 224:	6f 93       	push	r22
 226:	7f 93       	push	r23
 228:	8f 93       	push	r24
 22a:	9f 93       	push	r25
 22c:	af 93       	push	r26
 22e:	bf 93       	push	r27
 230:	ef 93       	push	r30
 232:	ff 93       	push	r31
 234:	df 93       	push	r29
 236:	cf 93       	push	r28
 238:	cd b7       	in	r28, 0x3d	; 61
 23a:	de b7       	in	r29, 0x3e	; 62
	if(EXTI1_Func != NULL)
 23c:	80 91 64 00 	lds	r24, 0x0064
 240:	90 91 65 00 	lds	r25, 0x0065
 244:	00 97       	sbiw	r24, 0x00	; 0
 246:	29 f0       	breq	.+10     	; 0x252 <__vector_2+0x40>
		EXTI1_Func();
 248:	e0 91 64 00 	lds	r30, 0x0064
 24c:	f0 91 65 00 	lds	r31, 0x0065
 250:	09 95       	icall
}
 252:	cf 91       	pop	r28
 254:	df 91       	pop	r29
 256:	ff 91       	pop	r31
 258:	ef 91       	pop	r30
 25a:	bf 91       	pop	r27
 25c:	af 91       	pop	r26
 25e:	9f 91       	pop	r25
 260:	8f 91       	pop	r24
 262:	7f 91       	pop	r23
 264:	6f 91       	pop	r22
 266:	5f 91       	pop	r21
 268:	4f 91       	pop	r20
 26a:	3f 91       	pop	r19
 26c:	2f 91       	pop	r18
 26e:	0f 90       	pop	r0
 270:	0f be       	out	0x3f, r0	; 63
 272:	0f 90       	pop	r0
 274:	1f 90       	pop	r1
 276:	18 95       	reti

00000278 <DIO_VidSetPinValue>:
/*-------------------------------------------------------------------------------------------------------------------------*/
								/**************************set pin*****************************/
/*-------------------------------------------------------------------------------------------------------------------------*/


void DIO_VidSetPinValue(u8 Copy_u8Port, u8 Copy_u8PinNumber, u8 Copy_u8State ){
 278:	df 93       	push	r29
 27a:	cf 93       	push	r28
 27c:	cd b7       	in	r28, 0x3d	; 61
 27e:	de b7       	in	r29, 0x3e	; 62
 280:	27 97       	sbiw	r28, 0x07	; 7
 282:	0f b6       	in	r0, 0x3f	; 63
 284:	f8 94       	cli
 286:	de bf       	out	0x3e, r29	; 62
 288:	0f be       	out	0x3f, r0	; 63
 28a:	cd bf       	out	0x3d, r28	; 61
 28c:	89 83       	std	Y+1, r24	; 0x01
 28e:	6a 83       	std	Y+2, r22	; 0x02
 290:	4b 83       	std	Y+3, r20	; 0x03

	/****************** set pin as input***********************/
	if(Copy_u8State == low){
 292:	8b 81       	ldd	r24, Y+3	; 0x03
 294:	88 23       	and	r24, r24
 296:	09 f0       	breq	.+2      	; 0x29a <DIO_VidSetPinValue+0x22>
 298:	75 c0       	rjmp	.+234    	; 0x384 <DIO_VidSetPinValue+0x10c>
		switch (Copy_u8Port) {
 29a:	89 81       	ldd	r24, Y+1	; 0x01
 29c:	28 2f       	mov	r18, r24
 29e:	30 e0       	ldi	r19, 0x00	; 0
 2a0:	3f 83       	std	Y+7, r19	; 0x07
 2a2:	2e 83       	std	Y+6, r18	; 0x06
 2a4:	8e 81       	ldd	r24, Y+6	; 0x06
 2a6:	9f 81       	ldd	r25, Y+7	; 0x07
 2a8:	83 30       	cpi	r24, 0x03	; 3
 2aa:	91 05       	cpc	r25, r1
 2ac:	61 f1       	breq	.+88     	; 0x306 <DIO_VidSetPinValue+0x8e>
 2ae:	2e 81       	ldd	r18, Y+6	; 0x06
 2b0:	3f 81       	ldd	r19, Y+7	; 0x07
 2b2:	24 30       	cpi	r18, 0x04	; 4
 2b4:	31 05       	cpc	r19, r1
 2b6:	34 f4       	brge	.+12     	; 0x2c4 <DIO_VidSetPinValue+0x4c>
 2b8:	8e 81       	ldd	r24, Y+6	; 0x06
 2ba:	9f 81       	ldd	r25, Y+7	; 0x07
 2bc:	82 30       	cpi	r24, 0x02	; 2
 2be:	91 05       	cpc	r25, r1
 2c0:	69 f0       	breq	.+26     	; 0x2dc <DIO_VidSetPinValue+0x64>
 2c2:	d3 c0       	rjmp	.+422    	; 0x46a <DIO_VidSetPinValue+0x1f2>
 2c4:	2e 81       	ldd	r18, Y+6	; 0x06
 2c6:	3f 81       	ldd	r19, Y+7	; 0x07
 2c8:	24 30       	cpi	r18, 0x04	; 4
 2ca:	31 05       	cpc	r19, r1
 2cc:	89 f1       	breq	.+98     	; 0x330 <DIO_VidSetPinValue+0xb8>
 2ce:	8e 81       	ldd	r24, Y+6	; 0x06
 2d0:	9f 81       	ldd	r25, Y+7	; 0x07
 2d2:	85 30       	cpi	r24, 0x05	; 5
 2d4:	91 05       	cpc	r25, r1
 2d6:	09 f4       	brne	.+2      	; 0x2da <DIO_VidSetPinValue+0x62>
 2d8:	40 c0       	rjmp	.+128    	; 0x35a <DIO_VidSetPinValue+0xe2>
 2da:	c7 c0       	rjmp	.+398    	; 0x46a <DIO_VidSetPinValue+0x1f2>
			case (Port_A) : CLR_Bit(PORTA,Copy_u8PinNumber);break;
 2dc:	ab e3       	ldi	r26, 0x3B	; 59
 2de:	b0 e0       	ldi	r27, 0x00	; 0
 2e0:	eb e3       	ldi	r30, 0x3B	; 59
 2e2:	f0 e0       	ldi	r31, 0x00	; 0
 2e4:	80 81       	ld	r24, Z
 2e6:	48 2f       	mov	r20, r24
 2e8:	8a 81       	ldd	r24, Y+2	; 0x02
 2ea:	28 2f       	mov	r18, r24
 2ec:	30 e0       	ldi	r19, 0x00	; 0
 2ee:	81 e0       	ldi	r24, 0x01	; 1
 2f0:	90 e0       	ldi	r25, 0x00	; 0
 2f2:	02 2e       	mov	r0, r18
 2f4:	02 c0       	rjmp	.+4      	; 0x2fa <DIO_VidSetPinValue+0x82>
 2f6:	88 0f       	add	r24, r24
 2f8:	99 1f       	adc	r25, r25
 2fa:	0a 94       	dec	r0
 2fc:	e2 f7       	brpl	.-8      	; 0x2f6 <DIO_VidSetPinValue+0x7e>
 2fe:	80 95       	com	r24
 300:	84 23       	and	r24, r20
 302:	8c 93       	st	X, r24
 304:	b2 c0       	rjmp	.+356    	; 0x46a <DIO_VidSetPinValue+0x1f2>
			case (Port_B) : CLR_Bit(PORTB,Copy_u8PinNumber);break;
 306:	a8 e3       	ldi	r26, 0x38	; 56
 308:	b0 e0       	ldi	r27, 0x00	; 0
 30a:	e8 e3       	ldi	r30, 0x38	; 56
 30c:	f0 e0       	ldi	r31, 0x00	; 0
 30e:	80 81       	ld	r24, Z
 310:	48 2f       	mov	r20, r24
 312:	8a 81       	ldd	r24, Y+2	; 0x02
 314:	28 2f       	mov	r18, r24
 316:	30 e0       	ldi	r19, 0x00	; 0
 318:	81 e0       	ldi	r24, 0x01	; 1
 31a:	90 e0       	ldi	r25, 0x00	; 0
 31c:	02 2e       	mov	r0, r18
 31e:	02 c0       	rjmp	.+4      	; 0x324 <DIO_VidSetPinValue+0xac>
 320:	88 0f       	add	r24, r24
 322:	99 1f       	adc	r25, r25
 324:	0a 94       	dec	r0
 326:	e2 f7       	brpl	.-8      	; 0x320 <DIO_VidSetPinValue+0xa8>
 328:	80 95       	com	r24
 32a:	84 23       	and	r24, r20
 32c:	8c 93       	st	X, r24
 32e:	9d c0       	rjmp	.+314    	; 0x46a <DIO_VidSetPinValue+0x1f2>
			case (Port_C) : CLR_Bit(PORTC,Copy_u8PinNumber);break;
 330:	a5 e3       	ldi	r26, 0x35	; 53
 332:	b0 e0       	ldi	r27, 0x00	; 0
 334:	e5 e3       	ldi	r30, 0x35	; 53
 336:	f0 e0       	ldi	r31, 0x00	; 0
 338:	80 81       	ld	r24, Z
 33a:	48 2f       	mov	r20, r24
 33c:	8a 81       	ldd	r24, Y+2	; 0x02
 33e:	28 2f       	mov	r18, r24
 340:	30 e0       	ldi	r19, 0x00	; 0
 342:	81 e0       	ldi	r24, 0x01	; 1
 344:	90 e0       	ldi	r25, 0x00	; 0
 346:	02 2e       	mov	r0, r18
 348:	02 c0       	rjmp	.+4      	; 0x34e <DIO_VidSetPinValue+0xd6>
 34a:	88 0f       	add	r24, r24
 34c:	99 1f       	adc	r25, r25
 34e:	0a 94       	dec	r0
 350:	e2 f7       	brpl	.-8      	; 0x34a <DIO_VidSetPinValue+0xd2>
 352:	80 95       	com	r24
 354:	84 23       	and	r24, r20
 356:	8c 93       	st	X, r24
 358:	88 c0       	rjmp	.+272    	; 0x46a <DIO_VidSetPinValue+0x1f2>
			case (Port_D) : CLR_Bit(PORTD,Copy_u8PinNumber);break;
 35a:	a2 e3       	ldi	r26, 0x32	; 50
 35c:	b0 e0       	ldi	r27, 0x00	; 0
 35e:	e2 e3       	ldi	r30, 0x32	; 50
 360:	f0 e0       	ldi	r31, 0x00	; 0
 362:	80 81       	ld	r24, Z
 364:	48 2f       	mov	r20, r24
 366:	8a 81       	ldd	r24, Y+2	; 0x02
 368:	28 2f       	mov	r18, r24
 36a:	30 e0       	ldi	r19, 0x00	; 0
 36c:	81 e0       	ldi	r24, 0x01	; 1
 36e:	90 e0       	ldi	r25, 0x00	; 0
 370:	02 2e       	mov	r0, r18
 372:	02 c0       	rjmp	.+4      	; 0x378 <DIO_VidSetPinValue+0x100>
 374:	88 0f       	add	r24, r24
 376:	99 1f       	adc	r25, r25
 378:	0a 94       	dec	r0
 37a:	e2 f7       	brpl	.-8      	; 0x374 <DIO_VidSetPinValue+0xfc>
 37c:	80 95       	com	r24
 37e:	84 23       	and	r24, r20
 380:	8c 93       	st	X, r24
 382:	73 c0       	rjmp	.+230    	; 0x46a <DIO_VidSetPinValue+0x1f2>
		}
	}
	/****************** set pin as output***********************/
	else if(Copy_u8State == high){
 384:	8b 81       	ldd	r24, Y+3	; 0x03
 386:	81 30       	cpi	r24, 0x01	; 1
 388:	09 f0       	breq	.+2      	; 0x38c <DIO_VidSetPinValue+0x114>
 38a:	6f c0       	rjmp	.+222    	; 0x46a <DIO_VidSetPinValue+0x1f2>
		switch (Copy_u8Port) {
 38c:	89 81       	ldd	r24, Y+1	; 0x01
 38e:	28 2f       	mov	r18, r24
 390:	30 e0       	ldi	r19, 0x00	; 0
 392:	3d 83       	std	Y+5, r19	; 0x05
 394:	2c 83       	std	Y+4, r18	; 0x04
 396:	8c 81       	ldd	r24, Y+4	; 0x04
 398:	9d 81       	ldd	r25, Y+5	; 0x05
 39a:	83 30       	cpi	r24, 0x03	; 3
 39c:	91 05       	cpc	r25, r1
 39e:	51 f1       	breq	.+84     	; 0x3f4 <DIO_VidSetPinValue+0x17c>
 3a0:	2c 81       	ldd	r18, Y+4	; 0x04
 3a2:	3d 81       	ldd	r19, Y+5	; 0x05
 3a4:	24 30       	cpi	r18, 0x04	; 4
 3a6:	31 05       	cpc	r19, r1
 3a8:	34 f4       	brge	.+12     	; 0x3b6 <DIO_VidSetPinValue+0x13e>
 3aa:	8c 81       	ldd	r24, Y+4	; 0x04
 3ac:	9d 81       	ldd	r25, Y+5	; 0x05
 3ae:	82 30       	cpi	r24, 0x02	; 2
 3b0:	91 05       	cpc	r25, r1
 3b2:	61 f0       	breq	.+24     	; 0x3cc <DIO_VidSetPinValue+0x154>
 3b4:	5a c0       	rjmp	.+180    	; 0x46a <DIO_VidSetPinValue+0x1f2>
 3b6:	2c 81       	ldd	r18, Y+4	; 0x04
 3b8:	3d 81       	ldd	r19, Y+5	; 0x05
 3ba:	24 30       	cpi	r18, 0x04	; 4
 3bc:	31 05       	cpc	r19, r1
 3be:	71 f1       	breq	.+92     	; 0x41c <DIO_VidSetPinValue+0x1a4>
 3c0:	8c 81       	ldd	r24, Y+4	; 0x04
 3c2:	9d 81       	ldd	r25, Y+5	; 0x05
 3c4:	85 30       	cpi	r24, 0x05	; 5
 3c6:	91 05       	cpc	r25, r1
 3c8:	e9 f1       	breq	.+122    	; 0x444 <DIO_VidSetPinValue+0x1cc>
 3ca:	4f c0       	rjmp	.+158    	; 0x46a <DIO_VidSetPinValue+0x1f2>
			case (Port_A) : Set_Bit(PORTA,Copy_u8PinNumber);break;
 3cc:	ab e3       	ldi	r26, 0x3B	; 59
 3ce:	b0 e0       	ldi	r27, 0x00	; 0
 3d0:	eb e3       	ldi	r30, 0x3B	; 59
 3d2:	f0 e0       	ldi	r31, 0x00	; 0
 3d4:	80 81       	ld	r24, Z
 3d6:	48 2f       	mov	r20, r24
 3d8:	8a 81       	ldd	r24, Y+2	; 0x02
 3da:	28 2f       	mov	r18, r24
 3dc:	30 e0       	ldi	r19, 0x00	; 0
 3de:	81 e0       	ldi	r24, 0x01	; 1
 3e0:	90 e0       	ldi	r25, 0x00	; 0
 3e2:	02 2e       	mov	r0, r18
 3e4:	02 c0       	rjmp	.+4      	; 0x3ea <DIO_VidSetPinValue+0x172>
 3e6:	88 0f       	add	r24, r24
 3e8:	99 1f       	adc	r25, r25
 3ea:	0a 94       	dec	r0
 3ec:	e2 f7       	brpl	.-8      	; 0x3e6 <DIO_VidSetPinValue+0x16e>
 3ee:	84 2b       	or	r24, r20
 3f0:	8c 93       	st	X, r24
 3f2:	3b c0       	rjmp	.+118    	; 0x46a <DIO_VidSetPinValue+0x1f2>
			case (Port_B) : Set_Bit(PORTB,Copy_u8PinNumber);break;
 3f4:	a8 e3       	ldi	r26, 0x38	; 56
 3f6:	b0 e0       	ldi	r27, 0x00	; 0
 3f8:	e8 e3       	ldi	r30, 0x38	; 56
 3fa:	f0 e0       	ldi	r31, 0x00	; 0
 3fc:	80 81       	ld	r24, Z
 3fe:	48 2f       	mov	r20, r24
 400:	8a 81       	ldd	r24, Y+2	; 0x02
 402:	28 2f       	mov	r18, r24
 404:	30 e0       	ldi	r19, 0x00	; 0
 406:	81 e0       	ldi	r24, 0x01	; 1
 408:	90 e0       	ldi	r25, 0x00	; 0
 40a:	02 2e       	mov	r0, r18
 40c:	02 c0       	rjmp	.+4      	; 0x412 <DIO_VidSetPinValue+0x19a>
 40e:	88 0f       	add	r24, r24
 410:	99 1f       	adc	r25, r25
 412:	0a 94       	dec	r0
 414:	e2 f7       	brpl	.-8      	; 0x40e <DIO_VidSetPinValue+0x196>
 416:	84 2b       	or	r24, r20
 418:	8c 93       	st	X, r24
 41a:	27 c0       	rjmp	.+78     	; 0x46a <DIO_VidSetPinValue+0x1f2>
			case (Port_C) : Set_Bit(PORTC,Copy_u8PinNumber);break;
 41c:	a5 e3       	ldi	r26, 0x35	; 53
 41e:	b0 e0       	ldi	r27, 0x00	; 0
 420:	e5 e3       	ldi	r30, 0x35	; 53
 422:	f0 e0       	ldi	r31, 0x00	; 0
 424:	80 81       	ld	r24, Z
 426:	48 2f       	mov	r20, r24
 428:	8a 81       	ldd	r24, Y+2	; 0x02
 42a:	28 2f       	mov	r18, r24
 42c:	30 e0       	ldi	r19, 0x00	; 0
 42e:	81 e0       	ldi	r24, 0x01	; 1
 430:	90 e0       	ldi	r25, 0x00	; 0
 432:	02 2e       	mov	r0, r18
 434:	02 c0       	rjmp	.+4      	; 0x43a <DIO_VidSetPinValue+0x1c2>
 436:	88 0f       	add	r24, r24
 438:	99 1f       	adc	r25, r25
 43a:	0a 94       	dec	r0
 43c:	e2 f7       	brpl	.-8      	; 0x436 <DIO_VidSetPinValue+0x1be>
 43e:	84 2b       	or	r24, r20
 440:	8c 93       	st	X, r24
 442:	13 c0       	rjmp	.+38     	; 0x46a <DIO_VidSetPinValue+0x1f2>
			case (Port_D) : Set_Bit(PORTD,Copy_u8PinNumber);break;
 444:	a2 e3       	ldi	r26, 0x32	; 50
 446:	b0 e0       	ldi	r27, 0x00	; 0
 448:	e2 e3       	ldi	r30, 0x32	; 50
 44a:	f0 e0       	ldi	r31, 0x00	; 0
 44c:	80 81       	ld	r24, Z
 44e:	48 2f       	mov	r20, r24
 450:	8a 81       	ldd	r24, Y+2	; 0x02
 452:	28 2f       	mov	r18, r24
 454:	30 e0       	ldi	r19, 0x00	; 0
 456:	81 e0       	ldi	r24, 0x01	; 1
 458:	90 e0       	ldi	r25, 0x00	; 0
 45a:	02 2e       	mov	r0, r18
 45c:	02 c0       	rjmp	.+4      	; 0x462 <DIO_VidSetPinValue+0x1ea>
 45e:	88 0f       	add	r24, r24
 460:	99 1f       	adc	r25, r25
 462:	0a 94       	dec	r0
 464:	e2 f7       	brpl	.-8      	; 0x45e <DIO_VidSetPinValue+0x1e6>
 466:	84 2b       	or	r24, r20
 468:	8c 93       	st	X, r24
		}
	}
}
 46a:	27 96       	adiw	r28, 0x07	; 7
 46c:	0f b6       	in	r0, 0x3f	; 63
 46e:	f8 94       	cli
 470:	de bf       	out	0x3e, r29	; 62
 472:	0f be       	out	0x3f, r0	; 63
 474:	cd bf       	out	0x3d, r28	; 61
 476:	cf 91       	pop	r28
 478:	df 91       	pop	r29
 47a:	08 95       	ret

0000047c <DIO_VidSetPinDirection>:

void DIO_VidSetPinDirection(u8 Copy_u8Port, u8 Copy_u8PinNumber,u8 Copy_u8PinDirection)
{
 47c:	df 93       	push	r29
 47e:	cf 93       	push	r28
 480:	cd b7       	in	r28, 0x3d	; 61
 482:	de b7       	in	r29, 0x3e	; 62
 484:	27 97       	sbiw	r28, 0x07	; 7
 486:	0f b6       	in	r0, 0x3f	; 63
 488:	f8 94       	cli
 48a:	de bf       	out	0x3e, r29	; 62
 48c:	0f be       	out	0x3f, r0	; 63
 48e:	cd bf       	out	0x3d, r28	; 61
 490:	89 83       	std	Y+1, r24	; 0x01
 492:	6a 83       	std	Y+2, r22	; 0x02
 494:	4b 83       	std	Y+3, r20	; 0x03
	/****************** set pin as input***********************/
	if(Copy_u8PinDirection == input){
 496:	8b 81       	ldd	r24, Y+3	; 0x03
 498:	88 23       	and	r24, r24
 49a:	09 f0       	breq	.+2      	; 0x49e <DIO_VidSetPinDirection+0x22>
 49c:	75 c0       	rjmp	.+234    	; 0x588 <DIO_VidSetPinDirection+0x10c>
		switch (Copy_u8Port) {
 49e:	89 81       	ldd	r24, Y+1	; 0x01
 4a0:	28 2f       	mov	r18, r24
 4a2:	30 e0       	ldi	r19, 0x00	; 0
 4a4:	3f 83       	std	Y+7, r19	; 0x07
 4a6:	2e 83       	std	Y+6, r18	; 0x06
 4a8:	8e 81       	ldd	r24, Y+6	; 0x06
 4aa:	9f 81       	ldd	r25, Y+7	; 0x07
 4ac:	83 30       	cpi	r24, 0x03	; 3
 4ae:	91 05       	cpc	r25, r1
 4b0:	61 f1       	breq	.+88     	; 0x50a <DIO_VidSetPinDirection+0x8e>
 4b2:	2e 81       	ldd	r18, Y+6	; 0x06
 4b4:	3f 81       	ldd	r19, Y+7	; 0x07
 4b6:	24 30       	cpi	r18, 0x04	; 4
 4b8:	31 05       	cpc	r19, r1
 4ba:	34 f4       	brge	.+12     	; 0x4c8 <DIO_VidSetPinDirection+0x4c>
 4bc:	8e 81       	ldd	r24, Y+6	; 0x06
 4be:	9f 81       	ldd	r25, Y+7	; 0x07
 4c0:	82 30       	cpi	r24, 0x02	; 2
 4c2:	91 05       	cpc	r25, r1
 4c4:	69 f0       	breq	.+26     	; 0x4e0 <DIO_VidSetPinDirection+0x64>
 4c6:	d3 c0       	rjmp	.+422    	; 0x66e <DIO_VidSetPinDirection+0x1f2>
 4c8:	2e 81       	ldd	r18, Y+6	; 0x06
 4ca:	3f 81       	ldd	r19, Y+7	; 0x07
 4cc:	24 30       	cpi	r18, 0x04	; 4
 4ce:	31 05       	cpc	r19, r1
 4d0:	89 f1       	breq	.+98     	; 0x534 <DIO_VidSetPinDirection+0xb8>
 4d2:	8e 81       	ldd	r24, Y+6	; 0x06
 4d4:	9f 81       	ldd	r25, Y+7	; 0x07
 4d6:	85 30       	cpi	r24, 0x05	; 5
 4d8:	91 05       	cpc	r25, r1
 4da:	09 f4       	brne	.+2      	; 0x4de <DIO_VidSetPinDirection+0x62>
 4dc:	40 c0       	rjmp	.+128    	; 0x55e <DIO_VidSetPinDirection+0xe2>
 4de:	c7 c0       	rjmp	.+398    	; 0x66e <DIO_VidSetPinDirection+0x1f2>
			case (Port_A) : CLR_Bit(DDRA,Copy_u8PinNumber);break;
 4e0:	aa e3       	ldi	r26, 0x3A	; 58
 4e2:	b0 e0       	ldi	r27, 0x00	; 0
 4e4:	ea e3       	ldi	r30, 0x3A	; 58
 4e6:	f0 e0       	ldi	r31, 0x00	; 0
 4e8:	80 81       	ld	r24, Z
 4ea:	48 2f       	mov	r20, r24
 4ec:	8a 81       	ldd	r24, Y+2	; 0x02
 4ee:	28 2f       	mov	r18, r24
 4f0:	30 e0       	ldi	r19, 0x00	; 0
 4f2:	81 e0       	ldi	r24, 0x01	; 1
 4f4:	90 e0       	ldi	r25, 0x00	; 0
 4f6:	02 2e       	mov	r0, r18
 4f8:	02 c0       	rjmp	.+4      	; 0x4fe <DIO_VidSetPinDirection+0x82>
 4fa:	88 0f       	add	r24, r24
 4fc:	99 1f       	adc	r25, r25
 4fe:	0a 94       	dec	r0
 500:	e2 f7       	brpl	.-8      	; 0x4fa <DIO_VidSetPinDirection+0x7e>
 502:	80 95       	com	r24
 504:	84 23       	and	r24, r20
 506:	8c 93       	st	X, r24
 508:	b2 c0       	rjmp	.+356    	; 0x66e <DIO_VidSetPinDirection+0x1f2>
			case (Port_B) : CLR_Bit(DDRB,Copy_u8PinNumber);break;
 50a:	a7 e3       	ldi	r26, 0x37	; 55
 50c:	b0 e0       	ldi	r27, 0x00	; 0
 50e:	e7 e3       	ldi	r30, 0x37	; 55
 510:	f0 e0       	ldi	r31, 0x00	; 0
 512:	80 81       	ld	r24, Z
 514:	48 2f       	mov	r20, r24
 516:	8a 81       	ldd	r24, Y+2	; 0x02
 518:	28 2f       	mov	r18, r24
 51a:	30 e0       	ldi	r19, 0x00	; 0
 51c:	81 e0       	ldi	r24, 0x01	; 1
 51e:	90 e0       	ldi	r25, 0x00	; 0
 520:	02 2e       	mov	r0, r18
 522:	02 c0       	rjmp	.+4      	; 0x528 <DIO_VidSetPinDirection+0xac>
 524:	88 0f       	add	r24, r24
 526:	99 1f       	adc	r25, r25
 528:	0a 94       	dec	r0
 52a:	e2 f7       	brpl	.-8      	; 0x524 <DIO_VidSetPinDirection+0xa8>
 52c:	80 95       	com	r24
 52e:	84 23       	and	r24, r20
 530:	8c 93       	st	X, r24
 532:	9d c0       	rjmp	.+314    	; 0x66e <DIO_VidSetPinDirection+0x1f2>
			case (Port_C) : CLR_Bit(DDRC,Copy_u8PinNumber);break;
 534:	a4 e3       	ldi	r26, 0x34	; 52
 536:	b0 e0       	ldi	r27, 0x00	; 0
 538:	e4 e3       	ldi	r30, 0x34	; 52
 53a:	f0 e0       	ldi	r31, 0x00	; 0
 53c:	80 81       	ld	r24, Z
 53e:	48 2f       	mov	r20, r24
 540:	8a 81       	ldd	r24, Y+2	; 0x02
 542:	28 2f       	mov	r18, r24
 544:	30 e0       	ldi	r19, 0x00	; 0
 546:	81 e0       	ldi	r24, 0x01	; 1
 548:	90 e0       	ldi	r25, 0x00	; 0
 54a:	02 2e       	mov	r0, r18
 54c:	02 c0       	rjmp	.+4      	; 0x552 <DIO_VidSetPinDirection+0xd6>
 54e:	88 0f       	add	r24, r24
 550:	99 1f       	adc	r25, r25
 552:	0a 94       	dec	r0
 554:	e2 f7       	brpl	.-8      	; 0x54e <DIO_VidSetPinDirection+0xd2>
 556:	80 95       	com	r24
 558:	84 23       	and	r24, r20
 55a:	8c 93       	st	X, r24
 55c:	88 c0       	rjmp	.+272    	; 0x66e <DIO_VidSetPinDirection+0x1f2>
			case (Port_D) : CLR_Bit(DDRD,Copy_u8PinNumber);break;
 55e:	a1 e3       	ldi	r26, 0x31	; 49
 560:	b0 e0       	ldi	r27, 0x00	; 0
 562:	e1 e3       	ldi	r30, 0x31	; 49
 564:	f0 e0       	ldi	r31, 0x00	; 0
 566:	80 81       	ld	r24, Z
 568:	48 2f       	mov	r20, r24
 56a:	8a 81       	ldd	r24, Y+2	; 0x02
 56c:	28 2f       	mov	r18, r24
 56e:	30 e0       	ldi	r19, 0x00	; 0
 570:	81 e0       	ldi	r24, 0x01	; 1
 572:	90 e0       	ldi	r25, 0x00	; 0
 574:	02 2e       	mov	r0, r18
 576:	02 c0       	rjmp	.+4      	; 0x57c <DIO_VidSetPinDirection+0x100>
 578:	88 0f       	add	r24, r24
 57a:	99 1f       	adc	r25, r25
 57c:	0a 94       	dec	r0
 57e:	e2 f7       	brpl	.-8      	; 0x578 <DIO_VidSetPinDirection+0xfc>
 580:	80 95       	com	r24
 582:	84 23       	and	r24, r20
 584:	8c 93       	st	X, r24
 586:	73 c0       	rjmp	.+230    	; 0x66e <DIO_VidSetPinDirection+0x1f2>
		}
	}
	/****************** set pin as output***********************/
	else if(Copy_u8PinDirection == output){
 588:	8b 81       	ldd	r24, Y+3	; 0x03
 58a:	81 30       	cpi	r24, 0x01	; 1
 58c:	09 f0       	breq	.+2      	; 0x590 <DIO_VidSetPinDirection+0x114>
 58e:	6f c0       	rjmp	.+222    	; 0x66e <DIO_VidSetPinDirection+0x1f2>
		switch (Copy_u8Port) {
 590:	89 81       	ldd	r24, Y+1	; 0x01
 592:	28 2f       	mov	r18, r24
 594:	30 e0       	ldi	r19, 0x00	; 0
 596:	3d 83       	std	Y+5, r19	; 0x05
 598:	2c 83       	std	Y+4, r18	; 0x04
 59a:	8c 81       	ldd	r24, Y+4	; 0x04
 59c:	9d 81       	ldd	r25, Y+5	; 0x05
 59e:	83 30       	cpi	r24, 0x03	; 3
 5a0:	91 05       	cpc	r25, r1
 5a2:	51 f1       	breq	.+84     	; 0x5f8 <DIO_VidSetPinDirection+0x17c>
 5a4:	2c 81       	ldd	r18, Y+4	; 0x04
 5a6:	3d 81       	ldd	r19, Y+5	; 0x05
 5a8:	24 30       	cpi	r18, 0x04	; 4
 5aa:	31 05       	cpc	r19, r1
 5ac:	34 f4       	brge	.+12     	; 0x5ba <DIO_VidSetPinDirection+0x13e>
 5ae:	8c 81       	ldd	r24, Y+4	; 0x04
 5b0:	9d 81       	ldd	r25, Y+5	; 0x05
 5b2:	82 30       	cpi	r24, 0x02	; 2
 5b4:	91 05       	cpc	r25, r1
 5b6:	61 f0       	breq	.+24     	; 0x5d0 <DIO_VidSetPinDirection+0x154>
 5b8:	5a c0       	rjmp	.+180    	; 0x66e <DIO_VidSetPinDirection+0x1f2>
 5ba:	2c 81       	ldd	r18, Y+4	; 0x04
 5bc:	3d 81       	ldd	r19, Y+5	; 0x05
 5be:	24 30       	cpi	r18, 0x04	; 4
 5c0:	31 05       	cpc	r19, r1
 5c2:	71 f1       	breq	.+92     	; 0x620 <DIO_VidSetPinDirection+0x1a4>
 5c4:	8c 81       	ldd	r24, Y+4	; 0x04
 5c6:	9d 81       	ldd	r25, Y+5	; 0x05
 5c8:	85 30       	cpi	r24, 0x05	; 5
 5ca:	91 05       	cpc	r25, r1
 5cc:	e9 f1       	breq	.+122    	; 0x648 <DIO_VidSetPinDirection+0x1cc>
 5ce:	4f c0       	rjmp	.+158    	; 0x66e <DIO_VidSetPinDirection+0x1f2>
			case (Port_A) : Set_Bit(DDRA,Copy_u8PinNumber);break;
 5d0:	aa e3       	ldi	r26, 0x3A	; 58
 5d2:	b0 e0       	ldi	r27, 0x00	; 0
 5d4:	ea e3       	ldi	r30, 0x3A	; 58
 5d6:	f0 e0       	ldi	r31, 0x00	; 0
 5d8:	80 81       	ld	r24, Z
 5da:	48 2f       	mov	r20, r24
 5dc:	8a 81       	ldd	r24, Y+2	; 0x02
 5de:	28 2f       	mov	r18, r24
 5e0:	30 e0       	ldi	r19, 0x00	; 0
 5e2:	81 e0       	ldi	r24, 0x01	; 1
 5e4:	90 e0       	ldi	r25, 0x00	; 0
 5e6:	02 2e       	mov	r0, r18
 5e8:	02 c0       	rjmp	.+4      	; 0x5ee <DIO_VidSetPinDirection+0x172>
 5ea:	88 0f       	add	r24, r24
 5ec:	99 1f       	adc	r25, r25
 5ee:	0a 94       	dec	r0
 5f0:	e2 f7       	brpl	.-8      	; 0x5ea <DIO_VidSetPinDirection+0x16e>
 5f2:	84 2b       	or	r24, r20
 5f4:	8c 93       	st	X, r24
 5f6:	3b c0       	rjmp	.+118    	; 0x66e <DIO_VidSetPinDirection+0x1f2>
			case (Port_B) : Set_Bit(DDRB,Copy_u8PinNumber);break;
 5f8:	a7 e3       	ldi	r26, 0x37	; 55
 5fa:	b0 e0       	ldi	r27, 0x00	; 0
 5fc:	e7 e3       	ldi	r30, 0x37	; 55
 5fe:	f0 e0       	ldi	r31, 0x00	; 0
 600:	80 81       	ld	r24, Z
 602:	48 2f       	mov	r20, r24
 604:	8a 81       	ldd	r24, Y+2	; 0x02
 606:	28 2f       	mov	r18, r24
 608:	30 e0       	ldi	r19, 0x00	; 0
 60a:	81 e0       	ldi	r24, 0x01	; 1
 60c:	90 e0       	ldi	r25, 0x00	; 0
 60e:	02 2e       	mov	r0, r18
 610:	02 c0       	rjmp	.+4      	; 0x616 <DIO_VidSetPinDirection+0x19a>
 612:	88 0f       	add	r24, r24
 614:	99 1f       	adc	r25, r25
 616:	0a 94       	dec	r0
 618:	e2 f7       	brpl	.-8      	; 0x612 <DIO_VidSetPinDirection+0x196>
 61a:	84 2b       	or	r24, r20
 61c:	8c 93       	st	X, r24
 61e:	27 c0       	rjmp	.+78     	; 0x66e <DIO_VidSetPinDirection+0x1f2>
			case (Port_C) : Set_Bit(DDRC,Copy_u8PinNumber);break;
 620:	a4 e3       	ldi	r26, 0x34	; 52
 622:	b0 e0       	ldi	r27, 0x00	; 0
 624:	e4 e3       	ldi	r30, 0x34	; 52
 626:	f0 e0       	ldi	r31, 0x00	; 0
 628:	80 81       	ld	r24, Z
 62a:	48 2f       	mov	r20, r24
 62c:	8a 81       	ldd	r24, Y+2	; 0x02
 62e:	28 2f       	mov	r18, r24
 630:	30 e0       	ldi	r19, 0x00	; 0
 632:	81 e0       	ldi	r24, 0x01	; 1
 634:	90 e0       	ldi	r25, 0x00	; 0
 636:	02 2e       	mov	r0, r18
 638:	02 c0       	rjmp	.+4      	; 0x63e <DIO_VidSetPinDirection+0x1c2>
 63a:	88 0f       	add	r24, r24
 63c:	99 1f       	adc	r25, r25
 63e:	0a 94       	dec	r0
 640:	e2 f7       	brpl	.-8      	; 0x63a <DIO_VidSetPinDirection+0x1be>
 642:	84 2b       	or	r24, r20
 644:	8c 93       	st	X, r24
 646:	13 c0       	rjmp	.+38     	; 0x66e <DIO_VidSetPinDirection+0x1f2>
			case (Port_D) : Set_Bit(DDRD,Copy_u8PinNumber);break;
 648:	a1 e3       	ldi	r26, 0x31	; 49
 64a:	b0 e0       	ldi	r27, 0x00	; 0
 64c:	e1 e3       	ldi	r30, 0x31	; 49
 64e:	f0 e0       	ldi	r31, 0x00	; 0
 650:	80 81       	ld	r24, Z
 652:	48 2f       	mov	r20, r24
 654:	8a 81       	ldd	r24, Y+2	; 0x02
 656:	28 2f       	mov	r18, r24
 658:	30 e0       	ldi	r19, 0x00	; 0
 65a:	81 e0       	ldi	r24, 0x01	; 1
 65c:	90 e0       	ldi	r25, 0x00	; 0
 65e:	02 2e       	mov	r0, r18
 660:	02 c0       	rjmp	.+4      	; 0x666 <DIO_VidSetPinDirection+0x1ea>
 662:	88 0f       	add	r24, r24
 664:	99 1f       	adc	r25, r25
 666:	0a 94       	dec	r0
 668:	e2 f7       	brpl	.-8      	; 0x662 <DIO_VidSetPinDirection+0x1e6>
 66a:	84 2b       	or	r24, r20
 66c:	8c 93       	st	X, r24
		}
	}
}
 66e:	27 96       	adiw	r28, 0x07	; 7
 670:	0f b6       	in	r0, 0x3f	; 63
 672:	f8 94       	cli
 674:	de bf       	out	0x3e, r29	; 62
 676:	0f be       	out	0x3f, r0	; 63
 678:	cd bf       	out	0x3d, r28	; 61
 67a:	cf 91       	pop	r28
 67c:	df 91       	pop	r29
 67e:	08 95       	ret

00000680 <DIO_VidGetPinValue>:


void DIO_VidGetPinValue(u8 Copy_u8Port, u8 Copy_u8PinNumber, u8* Copy_Pu8PinValue)
{
 680:	df 93       	push	r29
 682:	cf 93       	push	r28
 684:	00 d0       	rcall	.+0      	; 0x686 <DIO_VidGetPinValue+0x6>
 686:	00 d0       	rcall	.+0      	; 0x688 <DIO_VidGetPinValue+0x8>
 688:	00 d0       	rcall	.+0      	; 0x68a <DIO_VidGetPinValue+0xa>
 68a:	cd b7       	in	r28, 0x3d	; 61
 68c:	de b7       	in	r29, 0x3e	; 62
 68e:	89 83       	std	Y+1, r24	; 0x01
 690:	6a 83       	std	Y+2, r22	; 0x02
 692:	5c 83       	std	Y+4, r21	; 0x04
 694:	4b 83       	std	Y+3, r20	; 0x03
	/****************** set pin as input***********************/
		switch (Copy_u8Port) {
 696:	89 81       	ldd	r24, Y+1	; 0x01
 698:	28 2f       	mov	r18, r24
 69a:	30 e0       	ldi	r19, 0x00	; 0
 69c:	3e 83       	std	Y+6, r19	; 0x06
 69e:	2d 83       	std	Y+5, r18	; 0x05
 6a0:	4d 81       	ldd	r20, Y+5	; 0x05
 6a2:	5e 81       	ldd	r21, Y+6	; 0x06
 6a4:	43 30       	cpi	r20, 0x03	; 3
 6a6:	51 05       	cpc	r21, r1
 6a8:	59 f1       	breq	.+86     	; 0x700 <DIO_VidGetPinValue+0x80>
 6aa:	8d 81       	ldd	r24, Y+5	; 0x05
 6ac:	9e 81       	ldd	r25, Y+6	; 0x06
 6ae:	84 30       	cpi	r24, 0x04	; 4
 6b0:	91 05       	cpc	r25, r1
 6b2:	34 f4       	brge	.+12     	; 0x6c0 <DIO_VidGetPinValue+0x40>
 6b4:	2d 81       	ldd	r18, Y+5	; 0x05
 6b6:	3e 81       	ldd	r19, Y+6	; 0x06
 6b8:	22 30       	cpi	r18, 0x02	; 2
 6ba:	31 05       	cpc	r19, r1
 6bc:	69 f0       	breq	.+26     	; 0x6d8 <DIO_VidGetPinValue+0x58>
 6be:	5b c0       	rjmp	.+182    	; 0x776 <DIO_VidGetPinValue+0xf6>
 6c0:	4d 81       	ldd	r20, Y+5	; 0x05
 6c2:	5e 81       	ldd	r21, Y+6	; 0x06
 6c4:	44 30       	cpi	r20, 0x04	; 4
 6c6:	51 05       	cpc	r21, r1
 6c8:	79 f1       	breq	.+94     	; 0x728 <DIO_VidGetPinValue+0xa8>
 6ca:	8d 81       	ldd	r24, Y+5	; 0x05
 6cc:	9e 81       	ldd	r25, Y+6	; 0x06
 6ce:	85 30       	cpi	r24, 0x05	; 5
 6d0:	91 05       	cpc	r25, r1
 6d2:	09 f4       	brne	.+2      	; 0x6d6 <DIO_VidGetPinValue+0x56>
 6d4:	3d c0       	rjmp	.+122    	; 0x750 <DIO_VidGetPinValue+0xd0>
 6d6:	4f c0       	rjmp	.+158    	; 0x776 <DIO_VidGetPinValue+0xf6>
			case (Port_A) : *Copy_Pu8PinValue = Get_Bit(PINA,Copy_u8PinNumber);break;
 6d8:	e9 e3       	ldi	r30, 0x39	; 57
 6da:	f0 e0       	ldi	r31, 0x00	; 0
 6dc:	80 81       	ld	r24, Z
 6de:	28 2f       	mov	r18, r24
 6e0:	30 e0       	ldi	r19, 0x00	; 0
 6e2:	8a 81       	ldd	r24, Y+2	; 0x02
 6e4:	88 2f       	mov	r24, r24
 6e6:	90 e0       	ldi	r25, 0x00	; 0
 6e8:	a9 01       	movw	r20, r18
 6ea:	02 c0       	rjmp	.+4      	; 0x6f0 <DIO_VidGetPinValue+0x70>
 6ec:	55 95       	asr	r21
 6ee:	47 95       	ror	r20
 6f0:	8a 95       	dec	r24
 6f2:	e2 f7       	brpl	.-8      	; 0x6ec <DIO_VidGetPinValue+0x6c>
 6f4:	ca 01       	movw	r24, r20
 6f6:	81 70       	andi	r24, 0x01	; 1
 6f8:	eb 81       	ldd	r30, Y+3	; 0x03
 6fa:	fc 81       	ldd	r31, Y+4	; 0x04
 6fc:	80 83       	st	Z, r24
 6fe:	3b c0       	rjmp	.+118    	; 0x776 <DIO_VidGetPinValue+0xf6>
			case (Port_B) : *Copy_Pu8PinValue = Get_Bit(PINB,Copy_u8PinNumber);break;
 700:	e6 e3       	ldi	r30, 0x36	; 54
 702:	f0 e0       	ldi	r31, 0x00	; 0
 704:	80 81       	ld	r24, Z
 706:	28 2f       	mov	r18, r24
 708:	30 e0       	ldi	r19, 0x00	; 0
 70a:	8a 81       	ldd	r24, Y+2	; 0x02
 70c:	88 2f       	mov	r24, r24
 70e:	90 e0       	ldi	r25, 0x00	; 0
 710:	a9 01       	movw	r20, r18
 712:	02 c0       	rjmp	.+4      	; 0x718 <DIO_VidGetPinValue+0x98>
 714:	55 95       	asr	r21
 716:	47 95       	ror	r20
 718:	8a 95       	dec	r24
 71a:	e2 f7       	brpl	.-8      	; 0x714 <DIO_VidGetPinValue+0x94>
 71c:	ca 01       	movw	r24, r20
 71e:	81 70       	andi	r24, 0x01	; 1
 720:	eb 81       	ldd	r30, Y+3	; 0x03
 722:	fc 81       	ldd	r31, Y+4	; 0x04
 724:	80 83       	st	Z, r24
 726:	27 c0       	rjmp	.+78     	; 0x776 <DIO_VidGetPinValue+0xf6>
			case (Port_C) : *Copy_Pu8PinValue = Get_Bit(PINC,Copy_u8PinNumber);break;
 728:	e3 e3       	ldi	r30, 0x33	; 51
 72a:	f0 e0       	ldi	r31, 0x00	; 0
 72c:	80 81       	ld	r24, Z
 72e:	28 2f       	mov	r18, r24
 730:	30 e0       	ldi	r19, 0x00	; 0
 732:	8a 81       	ldd	r24, Y+2	; 0x02
 734:	88 2f       	mov	r24, r24
 736:	90 e0       	ldi	r25, 0x00	; 0
 738:	a9 01       	movw	r20, r18
 73a:	02 c0       	rjmp	.+4      	; 0x740 <DIO_VidGetPinValue+0xc0>
 73c:	55 95       	asr	r21
 73e:	47 95       	ror	r20
 740:	8a 95       	dec	r24
 742:	e2 f7       	brpl	.-8      	; 0x73c <DIO_VidGetPinValue+0xbc>
 744:	ca 01       	movw	r24, r20
 746:	81 70       	andi	r24, 0x01	; 1
 748:	eb 81       	ldd	r30, Y+3	; 0x03
 74a:	fc 81       	ldd	r31, Y+4	; 0x04
 74c:	80 83       	st	Z, r24
 74e:	13 c0       	rjmp	.+38     	; 0x776 <DIO_VidGetPinValue+0xf6>
			case (Port_D) : *Copy_Pu8PinValue = Get_Bit(PIND,Copy_u8PinNumber);break;
 750:	e0 e3       	ldi	r30, 0x30	; 48
 752:	f0 e0       	ldi	r31, 0x00	; 0
 754:	80 81       	ld	r24, Z
 756:	28 2f       	mov	r18, r24
 758:	30 e0       	ldi	r19, 0x00	; 0
 75a:	8a 81       	ldd	r24, Y+2	; 0x02
 75c:	88 2f       	mov	r24, r24
 75e:	90 e0       	ldi	r25, 0x00	; 0
 760:	a9 01       	movw	r20, r18
 762:	02 c0       	rjmp	.+4      	; 0x768 <DIO_VidGetPinValue+0xe8>
 764:	55 95       	asr	r21
 766:	47 95       	ror	r20
 768:	8a 95       	dec	r24
 76a:	e2 f7       	brpl	.-8      	; 0x764 <DIO_VidGetPinValue+0xe4>
 76c:	ca 01       	movw	r24, r20
 76e:	81 70       	andi	r24, 0x01	; 1
 770:	eb 81       	ldd	r30, Y+3	; 0x03
 772:	fc 81       	ldd	r31, Y+4	; 0x04
 774:	80 83       	st	Z, r24
		}
}
 776:	26 96       	adiw	r28, 0x06	; 6
 778:	0f b6       	in	r0, 0x3f	; 63
 77a:	f8 94       	cli
 77c:	de bf       	out	0x3e, r29	; 62
 77e:	0f be       	out	0x3f, r0	; 63
 780:	cd bf       	out	0x3d, r28	; 61
 782:	cf 91       	pop	r28
 784:	df 91       	pop	r29
 786:	08 95       	ret

00000788 <DIO_VidSetPortVal>:
/*---------------------------------------------------------------------------------------------------------------------------------*/
									/************************set port************************/
/*---------------------------------------------------------------------------------------------------------------------------------*/


void DIO_VidSetPortVal(u8 Copy_u8Port, u8 Copy_u8Val){
 788:	df 93       	push	r29
 78a:	cf 93       	push	r28
 78c:	00 d0       	rcall	.+0      	; 0x78e <DIO_VidSetPortVal+0x6>
 78e:	00 d0       	rcall	.+0      	; 0x790 <DIO_VidSetPortVal+0x8>
 790:	cd b7       	in	r28, 0x3d	; 61
 792:	de b7       	in	r29, 0x3e	; 62
 794:	89 83       	std	Y+1, r24	; 0x01
 796:	6a 83       	std	Y+2, r22	; 0x02

		switch (Copy_u8Port) {
 798:	89 81       	ldd	r24, Y+1	; 0x01
 79a:	28 2f       	mov	r18, r24
 79c:	30 e0       	ldi	r19, 0x00	; 0
 79e:	3c 83       	std	Y+4, r19	; 0x04
 7a0:	2b 83       	std	Y+3, r18	; 0x03
 7a2:	8b 81       	ldd	r24, Y+3	; 0x03
 7a4:	9c 81       	ldd	r25, Y+4	; 0x04
 7a6:	83 30       	cpi	r24, 0x03	; 3
 7a8:	91 05       	cpc	r25, r1
 7aa:	d9 f0       	breq	.+54     	; 0x7e2 <DIO_VidSetPortVal+0x5a>
 7ac:	2b 81       	ldd	r18, Y+3	; 0x03
 7ae:	3c 81       	ldd	r19, Y+4	; 0x04
 7b0:	24 30       	cpi	r18, 0x04	; 4
 7b2:	31 05       	cpc	r19, r1
 7b4:	34 f4       	brge	.+12     	; 0x7c2 <DIO_VidSetPortVal+0x3a>
 7b6:	8b 81       	ldd	r24, Y+3	; 0x03
 7b8:	9c 81       	ldd	r25, Y+4	; 0x04
 7ba:	82 30       	cpi	r24, 0x02	; 2
 7bc:	91 05       	cpc	r25, r1
 7be:	61 f0       	breq	.+24     	; 0x7d8 <DIO_VidSetPortVal+0x50>
 7c0:	1e c0       	rjmp	.+60     	; 0x7fe <DIO_VidSetPortVal+0x76>
 7c2:	2b 81       	ldd	r18, Y+3	; 0x03
 7c4:	3c 81       	ldd	r19, Y+4	; 0x04
 7c6:	24 30       	cpi	r18, 0x04	; 4
 7c8:	31 05       	cpc	r19, r1
 7ca:	81 f0       	breq	.+32     	; 0x7ec <DIO_VidSetPortVal+0x64>
 7cc:	8b 81       	ldd	r24, Y+3	; 0x03
 7ce:	9c 81       	ldd	r25, Y+4	; 0x04
 7d0:	85 30       	cpi	r24, 0x05	; 5
 7d2:	91 05       	cpc	r25, r1
 7d4:	81 f0       	breq	.+32     	; 0x7f6 <DIO_VidSetPortVal+0x6e>
 7d6:	13 c0       	rjmp	.+38     	; 0x7fe <DIO_VidSetPortVal+0x76>
			case (Port_A) : PORTA = Copy_u8Val;break;
 7d8:	eb e3       	ldi	r30, 0x3B	; 59
 7da:	f0 e0       	ldi	r31, 0x00	; 0
 7dc:	8a 81       	ldd	r24, Y+2	; 0x02
 7de:	80 83       	st	Z, r24
 7e0:	0e c0       	rjmp	.+28     	; 0x7fe <DIO_VidSetPortVal+0x76>
			case (Port_B) : PORTB = Copy_u8Val;break;
 7e2:	e8 e3       	ldi	r30, 0x38	; 56
 7e4:	f0 e0       	ldi	r31, 0x00	; 0
 7e6:	8a 81       	ldd	r24, Y+2	; 0x02
 7e8:	80 83       	st	Z, r24
 7ea:	09 c0       	rjmp	.+18     	; 0x7fe <DIO_VidSetPortVal+0x76>
			case (Port_C) : PORTC = Copy_u8Val;break;
 7ec:	e5 e3       	ldi	r30, 0x35	; 53
 7ee:	f0 e0       	ldi	r31, 0x00	; 0
 7f0:	8a 81       	ldd	r24, Y+2	; 0x02
 7f2:	80 83       	st	Z, r24
 7f4:	04 c0       	rjmp	.+8      	; 0x7fe <DIO_VidSetPortVal+0x76>
			case (Port_D) : PORTD = Copy_u8Val;break;
 7f6:	e2 e3       	ldi	r30, 0x32	; 50
 7f8:	f0 e0       	ldi	r31, 0x00	; 0
 7fa:	8a 81       	ldd	r24, Y+2	; 0x02
 7fc:	80 83       	st	Z, r24
		}
}
 7fe:	0f 90       	pop	r0
 800:	0f 90       	pop	r0
 802:	0f 90       	pop	r0
 804:	0f 90       	pop	r0
 806:	cf 91       	pop	r28
 808:	df 91       	pop	r29
 80a:	08 95       	ret

0000080c <DIO_VidSetPortDirection>:



void DIO_VidSetPortDirection(u8 Copy_u8Port, u8 Copy_u8Direction)
{
 80c:	df 93       	push	r29
 80e:	cf 93       	push	r28
 810:	00 d0       	rcall	.+0      	; 0x812 <DIO_VidSetPortDirection+0x6>
 812:	00 d0       	rcall	.+0      	; 0x814 <DIO_VidSetPortDirection+0x8>
 814:	00 d0       	rcall	.+0      	; 0x816 <DIO_VidSetPortDirection+0xa>
 816:	cd b7       	in	r28, 0x3d	; 61
 818:	de b7       	in	r29, 0x3e	; 62
 81a:	89 83       	std	Y+1, r24	; 0x01
 81c:	6a 83       	std	Y+2, r22	; 0x02
	/****************** set Port as input***********************/
	if(Copy_u8Direction == input){
 81e:	8a 81       	ldd	r24, Y+2	; 0x02
 820:	88 23       	and	r24, r24
 822:	81 f5       	brne	.+96     	; 0x884 <__stack+0x25>
		switch (Copy_u8Port) {
 824:	89 81       	ldd	r24, Y+1	; 0x01
 826:	28 2f       	mov	r18, r24
 828:	30 e0       	ldi	r19, 0x00	; 0
 82a:	3e 83       	std	Y+6, r19	; 0x06
 82c:	2d 83       	std	Y+5, r18	; 0x05
 82e:	8d 81       	ldd	r24, Y+5	; 0x05
 830:	9e 81       	ldd	r25, Y+6	; 0x06
 832:	83 30       	cpi	r24, 0x03	; 3
 834:	91 05       	cpc	r25, r1
 836:	d1 f0       	breq	.+52     	; 0x86c <__stack+0xd>
 838:	2d 81       	ldd	r18, Y+5	; 0x05
 83a:	3e 81       	ldd	r19, Y+6	; 0x06
 83c:	24 30       	cpi	r18, 0x04	; 4
 83e:	31 05       	cpc	r19, r1
 840:	34 f4       	brge	.+12     	; 0x84e <DIO_VidSetPortDirection+0x42>
 842:	8d 81       	ldd	r24, Y+5	; 0x05
 844:	9e 81       	ldd	r25, Y+6	; 0x06
 846:	82 30       	cpi	r24, 0x02	; 2
 848:	91 05       	cpc	r25, r1
 84a:	61 f0       	breq	.+24     	; 0x864 <__stack+0x5>
 84c:	51 c0       	rjmp	.+162    	; 0x8f0 <__stack+0x91>
 84e:	2d 81       	ldd	r18, Y+5	; 0x05
 850:	3e 81       	ldd	r19, Y+6	; 0x06
 852:	24 30       	cpi	r18, 0x04	; 4
 854:	31 05       	cpc	r19, r1
 856:	71 f0       	breq	.+28     	; 0x874 <__stack+0x15>
 858:	8d 81       	ldd	r24, Y+5	; 0x05
 85a:	9e 81       	ldd	r25, Y+6	; 0x06
 85c:	85 30       	cpi	r24, 0x05	; 5
 85e:	91 05       	cpc	r25, r1
 860:	69 f0       	breq	.+26     	; 0x87c <__stack+0x1d>
 862:	46 c0       	rjmp	.+140    	; 0x8f0 <__stack+0x91>
			case (Port_A) : DDRA = 0x00 ;break;
 864:	ea e3       	ldi	r30, 0x3A	; 58
 866:	f0 e0       	ldi	r31, 0x00	; 0
 868:	10 82       	st	Z, r1
 86a:	42 c0       	rjmp	.+132    	; 0x8f0 <__stack+0x91>
			case (Port_B) : DDRB = 0x00 ;break;
 86c:	e7 e3       	ldi	r30, 0x37	; 55
 86e:	f0 e0       	ldi	r31, 0x00	; 0
 870:	10 82       	st	Z, r1
 872:	3e c0       	rjmp	.+124    	; 0x8f0 <__stack+0x91>
			case (Port_C) : DDRC = 0x00 ;break;
 874:	e4 e3       	ldi	r30, 0x34	; 52
 876:	f0 e0       	ldi	r31, 0x00	; 0
 878:	10 82       	st	Z, r1
 87a:	3a c0       	rjmp	.+116    	; 0x8f0 <__stack+0x91>
			case (Port_D) : DDRD = 0x00 ;break;
 87c:	e1 e3       	ldi	r30, 0x31	; 49
 87e:	f0 e0       	ldi	r31, 0x00	; 0
 880:	10 82       	st	Z, r1
 882:	36 c0       	rjmp	.+108    	; 0x8f0 <__stack+0x91>
		}
	}

	/****************** set Port as output***********************/
	else if(Copy_u8Direction == output){
 884:	8a 81       	ldd	r24, Y+2	; 0x02
 886:	81 30       	cpi	r24, 0x01	; 1
 888:	99 f5       	brne	.+102    	; 0x8f0 <__stack+0x91>
		switch (Copy_u8Port) {
 88a:	89 81       	ldd	r24, Y+1	; 0x01
 88c:	28 2f       	mov	r18, r24
 88e:	30 e0       	ldi	r19, 0x00	; 0
 890:	3c 83       	std	Y+4, r19	; 0x04
 892:	2b 83       	std	Y+3, r18	; 0x03
 894:	8b 81       	ldd	r24, Y+3	; 0x03
 896:	9c 81       	ldd	r25, Y+4	; 0x04
 898:	83 30       	cpi	r24, 0x03	; 3
 89a:	91 05       	cpc	r25, r1
 89c:	d9 f0       	breq	.+54     	; 0x8d4 <__stack+0x75>
 89e:	2b 81       	ldd	r18, Y+3	; 0x03
 8a0:	3c 81       	ldd	r19, Y+4	; 0x04
 8a2:	24 30       	cpi	r18, 0x04	; 4
 8a4:	31 05       	cpc	r19, r1
 8a6:	34 f4       	brge	.+12     	; 0x8b4 <__stack+0x55>
 8a8:	8b 81       	ldd	r24, Y+3	; 0x03
 8aa:	9c 81       	ldd	r25, Y+4	; 0x04
 8ac:	82 30       	cpi	r24, 0x02	; 2
 8ae:	91 05       	cpc	r25, r1
 8b0:	61 f0       	breq	.+24     	; 0x8ca <__stack+0x6b>
 8b2:	1e c0       	rjmp	.+60     	; 0x8f0 <__stack+0x91>
 8b4:	2b 81       	ldd	r18, Y+3	; 0x03
 8b6:	3c 81       	ldd	r19, Y+4	; 0x04
 8b8:	24 30       	cpi	r18, 0x04	; 4
 8ba:	31 05       	cpc	r19, r1
 8bc:	81 f0       	breq	.+32     	; 0x8de <__stack+0x7f>
 8be:	8b 81       	ldd	r24, Y+3	; 0x03
 8c0:	9c 81       	ldd	r25, Y+4	; 0x04
 8c2:	85 30       	cpi	r24, 0x05	; 5
 8c4:	91 05       	cpc	r25, r1
 8c6:	81 f0       	breq	.+32     	; 0x8e8 <__stack+0x89>
 8c8:	13 c0       	rjmp	.+38     	; 0x8f0 <__stack+0x91>
			case (Port_A) : DDRA = 0xff ;break;
 8ca:	ea e3       	ldi	r30, 0x3A	; 58
 8cc:	f0 e0       	ldi	r31, 0x00	; 0
 8ce:	8f ef       	ldi	r24, 0xFF	; 255
 8d0:	80 83       	st	Z, r24
 8d2:	0e c0       	rjmp	.+28     	; 0x8f0 <__stack+0x91>
			case (Port_B) : DDRB = 0xff ;break;
 8d4:	e7 e3       	ldi	r30, 0x37	; 55
 8d6:	f0 e0       	ldi	r31, 0x00	; 0
 8d8:	8f ef       	ldi	r24, 0xFF	; 255
 8da:	80 83       	st	Z, r24
 8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
			case (Port_C) : DDRC = 0xff ;break;
 8de:	e4 e3       	ldi	r30, 0x34	; 52
 8e0:	f0 e0       	ldi	r31, 0x00	; 0
 8e2:	8f ef       	ldi	r24, 0xFF	; 255
 8e4:	80 83       	st	Z, r24
 8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
			case (Port_D) : DDRD = 0xff ;break;
 8e8:	e1 e3       	ldi	r30, 0x31	; 49
 8ea:	f0 e0       	ldi	r31, 0x00	; 0
 8ec:	8f ef       	ldi	r24, 0xFF	; 255
 8ee:	80 83       	st	Z, r24
		}
	}
}
 8f0:	26 96       	adiw	r28, 0x06	; 6
 8f2:	0f b6       	in	r0, 0x3f	; 63
 8f4:	f8 94       	cli
 8f6:	de bf       	out	0x3e, r29	; 62
 8f8:	0f be       	out	0x3f, r0	; 63
 8fa:	cd bf       	out	0x3d, r28	; 61
 8fc:	cf 91       	pop	r28
 8fe:	df 91       	pop	r29
 900:	08 95       	ret

00000902 <DIO_VidGetPortValue>:

void DIO_VidGetPortValue(u8 Copy_u8Port, u8* Copy_Pu8Value)
{
 902:	df 93       	push	r29
 904:	cf 93       	push	r28
 906:	00 d0       	rcall	.+0      	; 0x908 <DIO_VidGetPortValue+0x6>
 908:	00 d0       	rcall	.+0      	; 0x90a <DIO_VidGetPortValue+0x8>
 90a:	0f 92       	push	r0
 90c:	cd b7       	in	r28, 0x3d	; 61
 90e:	de b7       	in	r29, 0x3e	; 62
 910:	89 83       	std	Y+1, r24	; 0x01
 912:	7b 83       	std	Y+3, r23	; 0x03
 914:	6a 83       	std	Y+2, r22	; 0x02
	switch (Copy_u8Port) {
 916:	89 81       	ldd	r24, Y+1	; 0x01
 918:	28 2f       	mov	r18, r24
 91a:	30 e0       	ldi	r19, 0x00	; 0
 91c:	3d 83       	std	Y+5, r19	; 0x05
 91e:	2c 83       	std	Y+4, r18	; 0x04
 920:	8c 81       	ldd	r24, Y+4	; 0x04
 922:	9d 81       	ldd	r25, Y+5	; 0x05
 924:	83 30       	cpi	r24, 0x03	; 3
 926:	91 05       	cpc	r25, r1
 928:	e9 f0       	breq	.+58     	; 0x964 <DIO_VidGetPortValue+0x62>
 92a:	2c 81       	ldd	r18, Y+4	; 0x04
 92c:	3d 81       	ldd	r19, Y+5	; 0x05
 92e:	24 30       	cpi	r18, 0x04	; 4
 930:	31 05       	cpc	r19, r1
 932:	34 f4       	brge	.+12     	; 0x940 <DIO_VidGetPortValue+0x3e>
 934:	8c 81       	ldd	r24, Y+4	; 0x04
 936:	9d 81       	ldd	r25, Y+5	; 0x05
 938:	82 30       	cpi	r24, 0x02	; 2
 93a:	91 05       	cpc	r25, r1
 93c:	61 f0       	breq	.+24     	; 0x956 <DIO_VidGetPortValue+0x54>
 93e:	26 c0       	rjmp	.+76     	; 0x98c <DIO_VidGetPortValue+0x8a>
 940:	2c 81       	ldd	r18, Y+4	; 0x04
 942:	3d 81       	ldd	r19, Y+5	; 0x05
 944:	24 30       	cpi	r18, 0x04	; 4
 946:	31 05       	cpc	r19, r1
 948:	a1 f0       	breq	.+40     	; 0x972 <DIO_VidGetPortValue+0x70>
 94a:	8c 81       	ldd	r24, Y+4	; 0x04
 94c:	9d 81       	ldd	r25, Y+5	; 0x05
 94e:	85 30       	cpi	r24, 0x05	; 5
 950:	91 05       	cpc	r25, r1
 952:	b1 f0       	breq	.+44     	; 0x980 <DIO_VidGetPortValue+0x7e>
 954:	1b c0       	rjmp	.+54     	; 0x98c <DIO_VidGetPortValue+0x8a>
		case (Port_A) : *Copy_Pu8Value = PINA; break;
 956:	e9 e3       	ldi	r30, 0x39	; 57
 958:	f0 e0       	ldi	r31, 0x00	; 0
 95a:	80 81       	ld	r24, Z
 95c:	ea 81       	ldd	r30, Y+2	; 0x02
 95e:	fb 81       	ldd	r31, Y+3	; 0x03
 960:	80 83       	st	Z, r24
 962:	14 c0       	rjmp	.+40     	; 0x98c <DIO_VidGetPortValue+0x8a>
		case (Port_B) : *Copy_Pu8Value = PINB; break;
 964:	e6 e3       	ldi	r30, 0x36	; 54
 966:	f0 e0       	ldi	r31, 0x00	; 0
 968:	80 81       	ld	r24, Z
 96a:	ea 81       	ldd	r30, Y+2	; 0x02
 96c:	fb 81       	ldd	r31, Y+3	; 0x03
 96e:	80 83       	st	Z, r24
 970:	0d c0       	rjmp	.+26     	; 0x98c <DIO_VidGetPortValue+0x8a>
		case (Port_C) : *Copy_Pu8Value = PINC; break;
 972:	e3 e3       	ldi	r30, 0x33	; 51
 974:	f0 e0       	ldi	r31, 0x00	; 0
 976:	80 81       	ld	r24, Z
 978:	ea 81       	ldd	r30, Y+2	; 0x02
 97a:	fb 81       	ldd	r31, Y+3	; 0x03
 97c:	80 83       	st	Z, r24
 97e:	06 c0       	rjmp	.+12     	; 0x98c <DIO_VidGetPortValue+0x8a>
		case (Port_D) : *Copy_Pu8Value = PIND; break;
 980:	e0 e3       	ldi	r30, 0x30	; 48
 982:	f0 e0       	ldi	r31, 0x00	; 0
 984:	80 81       	ld	r24, Z
 986:	ea 81       	ldd	r30, Y+2	; 0x02
 988:	fb 81       	ldd	r31, Y+3	; 0x03
 98a:	80 83       	st	Z, r24
	}
}
 98c:	0f 90       	pop	r0
 98e:	0f 90       	pop	r0
 990:	0f 90       	pop	r0
 992:	0f 90       	pop	r0
 994:	0f 90       	pop	r0
 996:	cf 91       	pop	r28
 998:	df 91       	pop	r29
 99a:	08 95       	ret

0000099c <EXTI0_Task>:
#include "MCAL/EXTI/EXTI_Interface.h"
#include "MCAL/EXTI/EXTI_Config.h"
#include "MCAL/EXTI/EXTI_Private.h"
u8 toggle1 = 1;
u8 toggle2 = 1;
void EXTI0_Task(void){
 99c:	df 93       	push	r29
 99e:	cf 93       	push	r28
 9a0:	cd b7       	in	r28, 0x3d	; 61
 9a2:	de b7       	in	r29, 0x3e	; 62
	if(toggle1 == 1){
 9a4:	80 91 60 00 	lds	r24, 0x0060
 9a8:	81 30       	cpi	r24, 0x01	; 1
 9aa:	61 f4       	brne	.+24     	; 0x9c4 <EXTI0_Task+0x28>
		DIO_VidSetPinValue(Port_A,Pin_2,high);
 9ac:	82 e0       	ldi	r24, 0x02	; 2
 9ae:	62 e0       	ldi	r22, 0x02	; 2
 9b0:	41 e0       	ldi	r20, 0x01	; 1
 9b2:	0e 94 3c 01 	call	0x278	; 0x278 <DIO_VidSetPinValue>
		toggle1 ^=1;
 9b6:	80 91 60 00 	lds	r24, 0x0060
 9ba:	91 e0       	ldi	r25, 0x01	; 1
 9bc:	89 27       	eor	r24, r25
 9be:	80 93 60 00 	sts	0x0060, r24
 9c2:	0b c0       	rjmp	.+22     	; 0x9da <EXTI0_Task+0x3e>
	}
	else
	{
		DIO_VidSetPinValue(Port_A,Pin_2,low);
 9c4:	82 e0       	ldi	r24, 0x02	; 2
 9c6:	62 e0       	ldi	r22, 0x02	; 2
 9c8:	40 e0       	ldi	r20, 0x00	; 0
 9ca:	0e 94 3c 01 	call	0x278	; 0x278 <DIO_VidSetPinValue>
				toggle1 ^=1;
 9ce:	80 91 60 00 	lds	r24, 0x0060
 9d2:	91 e0       	ldi	r25, 0x01	; 1
 9d4:	89 27       	eor	r24, r25
 9d6:	80 93 60 00 	sts	0x0060, r24
	}
}
 9da:	cf 91       	pop	r28
 9dc:	df 91       	pop	r29
 9de:	08 95       	ret

000009e0 <EXTI1_Task>:
void EXTI1_Task(void){
 9e0:	df 93       	push	r29
 9e2:	cf 93       	push	r28
 9e4:	cd b7       	in	r28, 0x3d	; 61
 9e6:	de b7       	in	r29, 0x3e	; 62
	if(toggle2 == 1){
 9e8:	80 91 61 00 	lds	r24, 0x0061
 9ec:	81 30       	cpi	r24, 0x01	; 1
 9ee:	61 f4       	brne	.+24     	; 0xa08 <EXTI1_Task+0x28>
			DIO_VidSetPinValue(Port_A,Pin_3,high);
 9f0:	82 e0       	ldi	r24, 0x02	; 2
 9f2:	63 e0       	ldi	r22, 0x03	; 3
 9f4:	41 e0       	ldi	r20, 0x01	; 1
 9f6:	0e 94 3c 01 	call	0x278	; 0x278 <DIO_VidSetPinValue>
			toggle2 ^=1;
 9fa:	80 91 61 00 	lds	r24, 0x0061
 9fe:	91 e0       	ldi	r25, 0x01	; 1
 a00:	89 27       	eor	r24, r25
 a02:	80 93 61 00 	sts	0x0061, r24
 a06:	0b c0       	rjmp	.+22     	; 0xa1e <EXTI1_Task+0x3e>
		}
		else
		{
			DIO_VidSetPinValue(Port_A,Pin_3,low);
 a08:	82 e0       	ldi	r24, 0x02	; 2
 a0a:	63 e0       	ldi	r22, 0x03	; 3
 a0c:	40 e0       	ldi	r20, 0x00	; 0
 a0e:	0e 94 3c 01 	call	0x278	; 0x278 <DIO_VidSetPinValue>
					toggle2 ^=1;
 a12:	80 91 61 00 	lds	r24, 0x0061
 a16:	91 e0       	ldi	r25, 0x01	; 1
 a18:	89 27       	eor	r24, r25
 a1a:	80 93 61 00 	sts	0x0061, r24
		}
}
 a1e:	cf 91       	pop	r28
 a20:	df 91       	pop	r29
 a22:	08 95       	ret

00000a24 <main>:


void main(void){
 a24:	df 93       	push	r29
 a26:	cf 93       	push	r28
 a28:	cd b7       	in	r28, 0x3d	; 61
 a2a:	de b7       	in	r29, 0x3e	; 62
	/*Forcing Contact Between "EXTI_Task"s Function and The Pointers to Functions*/
	EXTI0_CallBack(EXTI0_Task);
 a2c:	8e ec       	ldi	r24, 0xCE	; 206
 a2e:	94 e0       	ldi	r25, 0x04	; 4
 a30:	0e 94 b2 00 	call	0x164	; 0x164 <EXTI0_CallBack>
	EXTI1_CallBack(EXTI1_Task);
 a34:	80 ef       	ldi	r24, 0xF0	; 240
 a36:	94 e0       	ldi	r25, 0x04	; 4
 a38:	0e 94 f7 00 	call	0x1ee	; 0x1ee <EXTI1_CallBack>
	/*Blink LED*/
	DIO_VidSetPinDirection(Port_A,Pin_2,output);
 a3c:	82 e0       	ldi	r24, 0x02	; 2
 a3e:	62 e0       	ldi	r22, 0x02	; 2
 a40:	41 e0       	ldi	r20, 0x01	; 1
 a42:	0e 94 3e 02 	call	0x47c	; 0x47c <DIO_VidSetPinDirection>
	DIO_VidSetPinDirection(Port_A,Pin_3,output);
 a46:	82 e0       	ldi	r24, 0x02	; 2
 a48:	63 e0       	ldi	r22, 0x03	; 3
 a4a:	41 e0       	ldi	r20, 0x01	; 1
 a4c:	0e 94 3e 02 	call	0x47c	; 0x47c <DIO_VidSetPinDirection>
	DIO_VidSetPinDirection(Port_D,Pin_2,input); /*INT0 Pin*/
 a50:	85 e0       	ldi	r24, 0x05	; 5
 a52:	62 e0       	ldi	r22, 0x02	; 2
 a54:	40 e0       	ldi	r20, 0x00	; 0
 a56:	0e 94 3e 02 	call	0x47c	; 0x47c <DIO_VidSetPinDirection>
	DIO_VidSetPinValue(Port_D,Pin_2,high); /*Internal Pull-up Resistor*/
 a5a:	85 e0       	ldi	r24, 0x05	; 5
 a5c:	62 e0       	ldi	r22, 0x02	; 2
 a5e:	41 e0       	ldi	r20, 0x01	; 1
 a60:	0e 94 3c 01 	call	0x278	; 0x278 <DIO_VidSetPinValue>
	DIO_VidSetPinDirection(Port_D,Pin_3,input); /*INT1 Pin*/
 a64:	85 e0       	ldi	r24, 0x05	; 5
 a66:	63 e0       	ldi	r22, 0x03	; 3
 a68:	40 e0       	ldi	r20, 0x00	; 0
 a6a:	0e 94 3e 02 	call	0x47c	; 0x47c <DIO_VidSetPinDirection>
	DIO_VidSetPinValue(Port_D,Pin_3,high); /*Internal Pull-up Resistor*/
 a6e:	85 e0       	ldi	r24, 0x05	; 5
 a70:	63 e0       	ldi	r22, 0x03	; 3
 a72:	41 e0       	ldi	r20, 0x01	; 1
 a74:	0e 94 3c 01 	call	0x278	; 0x278 <DIO_VidSetPinValue>
	GIE_VidEnable(); /*Global Interrupt Enable*/
 a78:	0e 94 49 00 	call	0x92	; 0x92 <GIE_VidEnable>
	EXTI0_VidIntInit(); /*Falling Edge Config*/
 a7c:	0e 94 65 00 	call	0xca	; 0xca <EXTI0_VidIntInit>
	EXTI1_VidIntInit();	/*Falling Edge Config*/
 a80:	0e 94 81 00 	call	0x102	; 0x102 <EXTI1_VidIntInit>
 a84:	ff cf       	rjmp	.-2      	; 0xa84 <main+0x60>

00000a86 <_exit>:
 a86:	f8 94       	cli

00000a88 <__stop_program>:
 a88:	ff cf       	rjmp	.-2      	; 0xa88 <__stop_program>
