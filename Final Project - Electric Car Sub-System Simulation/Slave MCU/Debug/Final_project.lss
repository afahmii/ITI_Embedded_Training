
Final_project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000408c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000015e  00800060  0000408c  00004120  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000024  008001be  008001be  0000427e  2**0
                  ALLOC
  3 .stab         00003d8c  00000000  00000000  00004280  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00002aca  00000000  00000000  0000800c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001c0  00000000  00000000  0000aad6  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000214  00000000  00000000  0000ac96  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002612  00000000  00000000  0000aeaa  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000014ce  00000000  00000000  0000d4bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000130b  00000000  00000000  0000e98a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001e0  00000000  00000000  0000fc98  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000307  00000000  00000000  0000fe78  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000a1a  00000000  00000000  0001017f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00010b99  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 78 12 	jmp	0x24f0	; 0x24f0 <__vector_1>
       8:	0c 94 bd 12 	jmp	0x257a	; 0x257a <__vector_2>
       c:	0c 94 02 13 	jmp	0x2604	; 0x2604 <__vector_3>
      10:	0c 94 53 0f 	jmp	0x1ea6	; 0x1ea6 <__vector_4>
      14:	0c 94 9c 0f 	jmp	0x1f38	; 0x1f38 <__vector_5>
      18:	0c 94 c0 10 	jmp	0x2180	; 0x2180 <__vector_6>
      1c:	0c 94 e5 0f 	jmp	0x1fca	; 0x1fca <__vector_7>
      20:	0c 94 2e 10 	jmp	0x205c	; 0x205c <__vector_8>
      24:	0c 94 77 10 	jmp	0x20ee	; 0x20ee <__vector_9>
      28:	0c 94 c1 0e 	jmp	0x1d82	; 0x1d82 <__vector_10>
      2c:	0c 94 0a 0f 	jmp	0x1e14	; 0x1e14 <__vector_11>
      30:	0c 94 c9 11 	jmp	0x2392	; 0x2392 <__vector_12>
      34:	0c 94 be 08 	jmp	0x117c	; 0x117c <__vector_13>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec e8       	ldi	r30, 0x8C	; 140
      68:	f0 e4       	ldi	r31, 0x40	; 64
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ae 3b       	cpi	r26, 0xBE	; 190
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	ae eb       	ldi	r26, 0xBE	; 190
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a2 3e       	cpi	r26, 0xE2	; 226
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 14 1c 	call	0x3828	; 0x3828 <main>
      8a:	0c 94 44 20 	jmp	0x4088	; 0x4088 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 0d 20 	jmp	0x401a	; 0x401a <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ab e9       	ldi	r26, 0x9B	; 155
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 29 20 	jmp	0x4052	; 0x4052 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 19 20 	jmp	0x4032	; 0x4032 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 35 20 	jmp	0x406a	; 0x406a <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 19 20 	jmp	0x4032	; 0x4032 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 35 20 	jmp	0x406a	; 0x406a <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 0d 20 	jmp	0x401a	; 0x401a <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8b e9       	ldi	r24, 0x9B	; 155
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 29 20 	jmp	0x4052	; 0x4052 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 15 20 	jmp	0x402a	; 0x402a <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	6b e9       	ldi	r22, 0x9B	; 155
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 31 20 	jmp	0x4062	; 0x4062 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 19 20 	jmp	0x4032	; 0x4032 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 35 20 	jmp	0x406a	; 0x406a <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 19 20 	jmp	0x4032	; 0x4032 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 35 20 	jmp	0x406a	; 0x406a <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 19 20 	jmp	0x4032	; 0x4032 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 35 20 	jmp	0x406a	; 0x406a <__epilogue_restores__+0x18>

000008aa <__floatsisf>:
     8aa:	a8 e0       	ldi	r26, 0x08	; 8
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 16 20 	jmp	0x402c	; 0x402c <__prologue_saves__+0x12>
     8b6:	9b 01       	movw	r18, r22
     8b8:	ac 01       	movw	r20, r24
     8ba:	83 e0       	ldi	r24, 0x03	; 3
     8bc:	89 83       	std	Y+1, r24	; 0x01
     8be:	da 01       	movw	r26, r20
     8c0:	c9 01       	movw	r24, r18
     8c2:	88 27       	eor	r24, r24
     8c4:	b7 fd       	sbrc	r27, 7
     8c6:	83 95       	inc	r24
     8c8:	99 27       	eor	r25, r25
     8ca:	aa 27       	eor	r26, r26
     8cc:	bb 27       	eor	r27, r27
     8ce:	b8 2e       	mov	r11, r24
     8d0:	21 15       	cp	r18, r1
     8d2:	31 05       	cpc	r19, r1
     8d4:	41 05       	cpc	r20, r1
     8d6:	51 05       	cpc	r21, r1
     8d8:	19 f4       	brne	.+6      	; 0x8e0 <__floatsisf+0x36>
     8da:	82 e0       	ldi	r24, 0x02	; 2
     8dc:	89 83       	std	Y+1, r24	; 0x01
     8de:	3a c0       	rjmp	.+116    	; 0x954 <__floatsisf+0xaa>
     8e0:	88 23       	and	r24, r24
     8e2:	a9 f0       	breq	.+42     	; 0x90e <__floatsisf+0x64>
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	80 e0       	ldi	r24, 0x00	; 0
     8e8:	38 07       	cpc	r19, r24
     8ea:	80 e0       	ldi	r24, 0x00	; 0
     8ec:	48 07       	cpc	r20, r24
     8ee:	80 e8       	ldi	r24, 0x80	; 128
     8f0:	58 07       	cpc	r21, r24
     8f2:	29 f4       	brne	.+10     	; 0x8fe <__floatsisf+0x54>
     8f4:	60 e0       	ldi	r22, 0x00	; 0
     8f6:	70 e0       	ldi	r23, 0x00	; 0
     8f8:	80 e0       	ldi	r24, 0x00	; 0
     8fa:	9f ec       	ldi	r25, 0xCF	; 207
     8fc:	30 c0       	rjmp	.+96     	; 0x95e <__floatsisf+0xb4>
     8fe:	ee 24       	eor	r14, r14
     900:	ff 24       	eor	r15, r15
     902:	87 01       	movw	r16, r14
     904:	e2 1a       	sub	r14, r18
     906:	f3 0a       	sbc	r15, r19
     908:	04 0b       	sbc	r16, r20
     90a:	15 0b       	sbc	r17, r21
     90c:	02 c0       	rjmp	.+4      	; 0x912 <__floatsisf+0x68>
     90e:	79 01       	movw	r14, r18
     910:	8a 01       	movw	r16, r20
     912:	8e e1       	ldi	r24, 0x1E	; 30
     914:	c8 2e       	mov	r12, r24
     916:	d1 2c       	mov	r13, r1
     918:	dc 82       	std	Y+4, r13	; 0x04
     91a:	cb 82       	std	Y+3, r12	; 0x03
     91c:	ed 82       	std	Y+5, r14	; 0x05
     91e:	fe 82       	std	Y+6, r15	; 0x06
     920:	0f 83       	std	Y+7, r16	; 0x07
     922:	18 87       	std	Y+8, r17	; 0x08
     924:	c8 01       	movw	r24, r16
     926:	b7 01       	movw	r22, r14
     928:	0e 94 80 05 	call	0xb00	; 0xb00 <__clzsi2>
     92c:	01 97       	sbiw	r24, 0x01	; 1
     92e:	18 16       	cp	r1, r24
     930:	19 06       	cpc	r1, r25
     932:	84 f4       	brge	.+32     	; 0x954 <__floatsisf+0xaa>
     934:	08 2e       	mov	r0, r24
     936:	04 c0       	rjmp	.+8      	; 0x940 <__floatsisf+0x96>
     938:	ee 0c       	add	r14, r14
     93a:	ff 1c       	adc	r15, r15
     93c:	00 1f       	adc	r16, r16
     93e:	11 1f       	adc	r17, r17
     940:	0a 94       	dec	r0
     942:	d2 f7       	brpl	.-12     	; 0x938 <__floatsisf+0x8e>
     944:	ed 82       	std	Y+5, r14	; 0x05
     946:	fe 82       	std	Y+6, r15	; 0x06
     948:	0f 83       	std	Y+7, r16	; 0x07
     94a:	18 87       	std	Y+8, r17	; 0x08
     94c:	c8 1a       	sub	r12, r24
     94e:	d9 0a       	sbc	r13, r25
     950:	dc 82       	std	Y+4, r13	; 0x04
     952:	cb 82       	std	Y+3, r12	; 0x03
     954:	ba 82       	std	Y+2, r11	; 0x02
     956:	ce 01       	movw	r24, r28
     958:	01 96       	adiw	r24, 0x01	; 1
     95a:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     95e:	28 96       	adiw	r28, 0x08	; 8
     960:	e9 e0       	ldi	r30, 0x09	; 9
     962:	0c 94 32 20 	jmp	0x4064	; 0x4064 <__epilogue_restores__+0x12>

00000966 <__fixsfsi>:
     966:	ac e0       	ldi	r26, 0x0C	; 12
     968:	b0 e0       	ldi	r27, 0x00	; 0
     96a:	e9 eb       	ldi	r30, 0xB9	; 185
     96c:	f4 e0       	ldi	r31, 0x04	; 4
     96e:	0c 94 1d 20 	jmp	0x403a	; 0x403a <__prologue_saves__+0x20>
     972:	69 83       	std	Y+1, r22	; 0x01
     974:	7a 83       	std	Y+2, r23	; 0x02
     976:	8b 83       	std	Y+3, r24	; 0x03
     978:	9c 83       	std	Y+4, r25	; 0x04
     97a:	ce 01       	movw	r24, r28
     97c:	01 96       	adiw	r24, 0x01	; 1
     97e:	be 01       	movw	r22, r28
     980:	6b 5f       	subi	r22, 0xFB	; 251
     982:	7f 4f       	sbci	r23, 0xFF	; 255
     984:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     988:	8d 81       	ldd	r24, Y+5	; 0x05
     98a:	82 30       	cpi	r24, 0x02	; 2
     98c:	61 f1       	breq	.+88     	; 0x9e6 <__fixsfsi+0x80>
     98e:	82 30       	cpi	r24, 0x02	; 2
     990:	50 f1       	brcs	.+84     	; 0x9e6 <__fixsfsi+0x80>
     992:	84 30       	cpi	r24, 0x04	; 4
     994:	21 f4       	brne	.+8      	; 0x99e <__fixsfsi+0x38>
     996:	8e 81       	ldd	r24, Y+6	; 0x06
     998:	88 23       	and	r24, r24
     99a:	51 f1       	breq	.+84     	; 0x9f0 <__fixsfsi+0x8a>
     99c:	2e c0       	rjmp	.+92     	; 0x9fa <__fixsfsi+0x94>
     99e:	2f 81       	ldd	r18, Y+7	; 0x07
     9a0:	38 85       	ldd	r19, Y+8	; 0x08
     9a2:	37 fd       	sbrc	r19, 7
     9a4:	20 c0       	rjmp	.+64     	; 0x9e6 <__fixsfsi+0x80>
     9a6:	6e 81       	ldd	r22, Y+6	; 0x06
     9a8:	2f 31       	cpi	r18, 0x1F	; 31
     9aa:	31 05       	cpc	r19, r1
     9ac:	1c f0       	brlt	.+6      	; 0x9b4 <__fixsfsi+0x4e>
     9ae:	66 23       	and	r22, r22
     9b0:	f9 f0       	breq	.+62     	; 0x9f0 <__fixsfsi+0x8a>
     9b2:	23 c0       	rjmp	.+70     	; 0x9fa <__fixsfsi+0x94>
     9b4:	8e e1       	ldi	r24, 0x1E	; 30
     9b6:	90 e0       	ldi	r25, 0x00	; 0
     9b8:	82 1b       	sub	r24, r18
     9ba:	93 0b       	sbc	r25, r19
     9bc:	29 85       	ldd	r18, Y+9	; 0x09
     9be:	3a 85       	ldd	r19, Y+10	; 0x0a
     9c0:	4b 85       	ldd	r20, Y+11	; 0x0b
     9c2:	5c 85       	ldd	r21, Y+12	; 0x0c
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__fixsfsi+0x68>
     9c6:	56 95       	lsr	r21
     9c8:	47 95       	ror	r20
     9ca:	37 95       	ror	r19
     9cc:	27 95       	ror	r18
     9ce:	8a 95       	dec	r24
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__fixsfsi+0x60>
     9d2:	66 23       	and	r22, r22
     9d4:	b1 f0       	breq	.+44     	; 0xa02 <__fixsfsi+0x9c>
     9d6:	50 95       	com	r21
     9d8:	40 95       	com	r20
     9da:	30 95       	com	r19
     9dc:	21 95       	neg	r18
     9de:	3f 4f       	sbci	r19, 0xFF	; 255
     9e0:	4f 4f       	sbci	r20, 0xFF	; 255
     9e2:	5f 4f       	sbci	r21, 0xFF	; 255
     9e4:	0e c0       	rjmp	.+28     	; 0xa02 <__fixsfsi+0x9c>
     9e6:	20 e0       	ldi	r18, 0x00	; 0
     9e8:	30 e0       	ldi	r19, 0x00	; 0
     9ea:	40 e0       	ldi	r20, 0x00	; 0
     9ec:	50 e0       	ldi	r21, 0x00	; 0
     9ee:	09 c0       	rjmp	.+18     	; 0xa02 <__fixsfsi+0x9c>
     9f0:	2f ef       	ldi	r18, 0xFF	; 255
     9f2:	3f ef       	ldi	r19, 0xFF	; 255
     9f4:	4f ef       	ldi	r20, 0xFF	; 255
     9f6:	5f e7       	ldi	r21, 0x7F	; 127
     9f8:	04 c0       	rjmp	.+8      	; 0xa02 <__fixsfsi+0x9c>
     9fa:	20 e0       	ldi	r18, 0x00	; 0
     9fc:	30 e0       	ldi	r19, 0x00	; 0
     9fe:	40 e0       	ldi	r20, 0x00	; 0
     a00:	50 e8       	ldi	r21, 0x80	; 128
     a02:	b9 01       	movw	r22, r18
     a04:	ca 01       	movw	r24, r20
     a06:	2c 96       	adiw	r28, 0x0c	; 12
     a08:	e2 e0       	ldi	r30, 0x02	; 2
     a0a:	0c 94 39 20 	jmp	0x4072	; 0x4072 <__epilogue_restores__+0x20>

00000a0e <__floatunsisf>:
     a0e:	a8 e0       	ldi	r26, 0x08	; 8
     a10:	b0 e0       	ldi	r27, 0x00	; 0
     a12:	ed e0       	ldi	r30, 0x0D	; 13
     a14:	f5 e0       	ldi	r31, 0x05	; 5
     a16:	0c 94 15 20 	jmp	0x402a	; 0x402a <__prologue_saves__+0x10>
     a1a:	7b 01       	movw	r14, r22
     a1c:	8c 01       	movw	r16, r24
     a1e:	61 15       	cp	r22, r1
     a20:	71 05       	cpc	r23, r1
     a22:	81 05       	cpc	r24, r1
     a24:	91 05       	cpc	r25, r1
     a26:	19 f4       	brne	.+6      	; 0xa2e <__floatunsisf+0x20>
     a28:	82 e0       	ldi	r24, 0x02	; 2
     a2a:	89 83       	std	Y+1, r24	; 0x01
     a2c:	60 c0       	rjmp	.+192    	; 0xaee <__floatunsisf+0xe0>
     a2e:	83 e0       	ldi	r24, 0x03	; 3
     a30:	89 83       	std	Y+1, r24	; 0x01
     a32:	8e e1       	ldi	r24, 0x1E	; 30
     a34:	c8 2e       	mov	r12, r24
     a36:	d1 2c       	mov	r13, r1
     a38:	dc 82       	std	Y+4, r13	; 0x04
     a3a:	cb 82       	std	Y+3, r12	; 0x03
     a3c:	ed 82       	std	Y+5, r14	; 0x05
     a3e:	fe 82       	std	Y+6, r15	; 0x06
     a40:	0f 83       	std	Y+7, r16	; 0x07
     a42:	18 87       	std	Y+8, r17	; 0x08
     a44:	c8 01       	movw	r24, r16
     a46:	b7 01       	movw	r22, r14
     a48:	0e 94 80 05 	call	0xb00	; 0xb00 <__clzsi2>
     a4c:	fc 01       	movw	r30, r24
     a4e:	31 97       	sbiw	r30, 0x01	; 1
     a50:	f7 ff       	sbrs	r31, 7
     a52:	3b c0       	rjmp	.+118    	; 0xaca <__floatunsisf+0xbc>
     a54:	22 27       	eor	r18, r18
     a56:	33 27       	eor	r19, r19
     a58:	2e 1b       	sub	r18, r30
     a5a:	3f 0b       	sbc	r19, r31
     a5c:	57 01       	movw	r10, r14
     a5e:	68 01       	movw	r12, r16
     a60:	02 2e       	mov	r0, r18
     a62:	04 c0       	rjmp	.+8      	; 0xa6c <__floatunsisf+0x5e>
     a64:	d6 94       	lsr	r13
     a66:	c7 94       	ror	r12
     a68:	b7 94       	ror	r11
     a6a:	a7 94       	ror	r10
     a6c:	0a 94       	dec	r0
     a6e:	d2 f7       	brpl	.-12     	; 0xa64 <__floatunsisf+0x56>
     a70:	40 e0       	ldi	r20, 0x00	; 0
     a72:	50 e0       	ldi	r21, 0x00	; 0
     a74:	60 e0       	ldi	r22, 0x00	; 0
     a76:	70 e0       	ldi	r23, 0x00	; 0
     a78:	81 e0       	ldi	r24, 0x01	; 1
     a7a:	90 e0       	ldi	r25, 0x00	; 0
     a7c:	a0 e0       	ldi	r26, 0x00	; 0
     a7e:	b0 e0       	ldi	r27, 0x00	; 0
     a80:	04 c0       	rjmp	.+8      	; 0xa8a <__floatunsisf+0x7c>
     a82:	88 0f       	add	r24, r24
     a84:	99 1f       	adc	r25, r25
     a86:	aa 1f       	adc	r26, r26
     a88:	bb 1f       	adc	r27, r27
     a8a:	2a 95       	dec	r18
     a8c:	d2 f7       	brpl	.-12     	; 0xa82 <__floatunsisf+0x74>
     a8e:	01 97       	sbiw	r24, 0x01	; 1
     a90:	a1 09       	sbc	r26, r1
     a92:	b1 09       	sbc	r27, r1
     a94:	8e 21       	and	r24, r14
     a96:	9f 21       	and	r25, r15
     a98:	a0 23       	and	r26, r16
     a9a:	b1 23       	and	r27, r17
     a9c:	00 97       	sbiw	r24, 0x00	; 0
     a9e:	a1 05       	cpc	r26, r1
     aa0:	b1 05       	cpc	r27, r1
     aa2:	21 f0       	breq	.+8      	; 0xaac <__floatunsisf+0x9e>
     aa4:	41 e0       	ldi	r20, 0x01	; 1
     aa6:	50 e0       	ldi	r21, 0x00	; 0
     aa8:	60 e0       	ldi	r22, 0x00	; 0
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	4a 29       	or	r20, r10
     aae:	5b 29       	or	r21, r11
     ab0:	6c 29       	or	r22, r12
     ab2:	7d 29       	or	r23, r13
     ab4:	4d 83       	std	Y+5, r20	; 0x05
     ab6:	5e 83       	std	Y+6, r21	; 0x06
     ab8:	6f 83       	std	Y+7, r22	; 0x07
     aba:	78 87       	std	Y+8, r23	; 0x08
     abc:	8e e1       	ldi	r24, 0x1E	; 30
     abe:	90 e0       	ldi	r25, 0x00	; 0
     ac0:	8e 1b       	sub	r24, r30
     ac2:	9f 0b       	sbc	r25, r31
     ac4:	9c 83       	std	Y+4, r25	; 0x04
     ac6:	8b 83       	std	Y+3, r24	; 0x03
     ac8:	12 c0       	rjmp	.+36     	; 0xaee <__floatunsisf+0xe0>
     aca:	30 97       	sbiw	r30, 0x00	; 0
     acc:	81 f0       	breq	.+32     	; 0xaee <__floatunsisf+0xe0>
     ace:	0e 2e       	mov	r0, r30
     ad0:	04 c0       	rjmp	.+8      	; 0xada <__floatunsisf+0xcc>
     ad2:	ee 0c       	add	r14, r14
     ad4:	ff 1c       	adc	r15, r15
     ad6:	00 1f       	adc	r16, r16
     ad8:	11 1f       	adc	r17, r17
     ada:	0a 94       	dec	r0
     adc:	d2 f7       	brpl	.-12     	; 0xad2 <__floatunsisf+0xc4>
     ade:	ed 82       	std	Y+5, r14	; 0x05
     ae0:	fe 82       	std	Y+6, r15	; 0x06
     ae2:	0f 83       	std	Y+7, r16	; 0x07
     ae4:	18 87       	std	Y+8, r17	; 0x08
     ae6:	ce 1a       	sub	r12, r30
     ae8:	df 0a       	sbc	r13, r31
     aea:	dc 82       	std	Y+4, r13	; 0x04
     aec:	cb 82       	std	Y+3, r12	; 0x03
     aee:	1a 82       	std	Y+2, r1	; 0x02
     af0:	ce 01       	movw	r24, r28
     af2:	01 96       	adiw	r24, 0x01	; 1
     af4:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     af8:	28 96       	adiw	r28, 0x08	; 8
     afa:	ea e0       	ldi	r30, 0x0A	; 10
     afc:	0c 94 31 20 	jmp	0x4062	; 0x4062 <__epilogue_restores__+0x10>

00000b00 <__clzsi2>:
     b00:	ef 92       	push	r14
     b02:	ff 92       	push	r15
     b04:	0f 93       	push	r16
     b06:	1f 93       	push	r17
     b08:	7b 01       	movw	r14, r22
     b0a:	8c 01       	movw	r16, r24
     b0c:	80 e0       	ldi	r24, 0x00	; 0
     b0e:	e8 16       	cp	r14, r24
     b10:	80 e0       	ldi	r24, 0x00	; 0
     b12:	f8 06       	cpc	r15, r24
     b14:	81 e0       	ldi	r24, 0x01	; 1
     b16:	08 07       	cpc	r16, r24
     b18:	80 e0       	ldi	r24, 0x00	; 0
     b1a:	18 07       	cpc	r17, r24
     b1c:	88 f4       	brcc	.+34     	; 0xb40 <__clzsi2+0x40>
     b1e:	8f ef       	ldi	r24, 0xFF	; 255
     b20:	e8 16       	cp	r14, r24
     b22:	f1 04       	cpc	r15, r1
     b24:	01 05       	cpc	r16, r1
     b26:	11 05       	cpc	r17, r1
     b28:	31 f0       	breq	.+12     	; 0xb36 <__clzsi2+0x36>
     b2a:	28 f0       	brcs	.+10     	; 0xb36 <__clzsi2+0x36>
     b2c:	88 e0       	ldi	r24, 0x08	; 8
     b2e:	90 e0       	ldi	r25, 0x00	; 0
     b30:	a0 e0       	ldi	r26, 0x00	; 0
     b32:	b0 e0       	ldi	r27, 0x00	; 0
     b34:	17 c0       	rjmp	.+46     	; 0xb64 <__clzsi2+0x64>
     b36:	80 e0       	ldi	r24, 0x00	; 0
     b38:	90 e0       	ldi	r25, 0x00	; 0
     b3a:	a0 e0       	ldi	r26, 0x00	; 0
     b3c:	b0 e0       	ldi	r27, 0x00	; 0
     b3e:	12 c0       	rjmp	.+36     	; 0xb64 <__clzsi2+0x64>
     b40:	80 e0       	ldi	r24, 0x00	; 0
     b42:	e8 16       	cp	r14, r24
     b44:	80 e0       	ldi	r24, 0x00	; 0
     b46:	f8 06       	cpc	r15, r24
     b48:	80 e0       	ldi	r24, 0x00	; 0
     b4a:	08 07       	cpc	r16, r24
     b4c:	81 e0       	ldi	r24, 0x01	; 1
     b4e:	18 07       	cpc	r17, r24
     b50:	28 f0       	brcs	.+10     	; 0xb5c <__clzsi2+0x5c>
     b52:	88 e1       	ldi	r24, 0x18	; 24
     b54:	90 e0       	ldi	r25, 0x00	; 0
     b56:	a0 e0       	ldi	r26, 0x00	; 0
     b58:	b0 e0       	ldi	r27, 0x00	; 0
     b5a:	04 c0       	rjmp	.+8      	; 0xb64 <__clzsi2+0x64>
     b5c:	80 e1       	ldi	r24, 0x10	; 16
     b5e:	90 e0       	ldi	r25, 0x00	; 0
     b60:	a0 e0       	ldi	r26, 0x00	; 0
     b62:	b0 e0       	ldi	r27, 0x00	; 0
     b64:	20 e2       	ldi	r18, 0x20	; 32
     b66:	30 e0       	ldi	r19, 0x00	; 0
     b68:	40 e0       	ldi	r20, 0x00	; 0
     b6a:	50 e0       	ldi	r21, 0x00	; 0
     b6c:	28 1b       	sub	r18, r24
     b6e:	39 0b       	sbc	r19, r25
     b70:	4a 0b       	sbc	r20, r26
     b72:	5b 0b       	sbc	r21, r27
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__clzsi2+0x7e>
     b76:	16 95       	lsr	r17
     b78:	07 95       	ror	r16
     b7a:	f7 94       	ror	r15
     b7c:	e7 94       	ror	r14
     b7e:	8a 95       	dec	r24
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__clzsi2+0x76>
     b82:	f7 01       	movw	r30, r14
     b84:	ed 55       	subi	r30, 0x5D	; 93
     b86:	ff 4f       	sbci	r31, 0xFF	; 255
     b88:	80 81       	ld	r24, Z
     b8a:	28 1b       	sub	r18, r24
     b8c:	31 09       	sbc	r19, r1
     b8e:	41 09       	sbc	r20, r1
     b90:	51 09       	sbc	r21, r1
     b92:	c9 01       	movw	r24, r18
     b94:	1f 91       	pop	r17
     b96:	0f 91       	pop	r16
     b98:	ff 90       	pop	r15
     b9a:	ef 90       	pop	r14
     b9c:	08 95       	ret

00000b9e <__pack_f>:
     b9e:	df 92       	push	r13
     ba0:	ef 92       	push	r14
     ba2:	ff 92       	push	r15
     ba4:	0f 93       	push	r16
     ba6:	1f 93       	push	r17
     ba8:	fc 01       	movw	r30, r24
     baa:	e4 80       	ldd	r14, Z+4	; 0x04
     bac:	f5 80       	ldd	r15, Z+5	; 0x05
     bae:	06 81       	ldd	r16, Z+6	; 0x06
     bb0:	17 81       	ldd	r17, Z+7	; 0x07
     bb2:	d1 80       	ldd	r13, Z+1	; 0x01
     bb4:	80 81       	ld	r24, Z
     bb6:	82 30       	cpi	r24, 0x02	; 2
     bb8:	48 f4       	brcc	.+18     	; 0xbcc <__pack_f+0x2e>
     bba:	80 e0       	ldi	r24, 0x00	; 0
     bbc:	90 e0       	ldi	r25, 0x00	; 0
     bbe:	a0 e1       	ldi	r26, 0x10	; 16
     bc0:	b0 e0       	ldi	r27, 0x00	; 0
     bc2:	e8 2a       	or	r14, r24
     bc4:	f9 2a       	or	r15, r25
     bc6:	0a 2b       	or	r16, r26
     bc8:	1b 2b       	or	r17, r27
     bca:	a5 c0       	rjmp	.+330    	; 0xd16 <__pack_f+0x178>
     bcc:	84 30       	cpi	r24, 0x04	; 4
     bce:	09 f4       	brne	.+2      	; 0xbd2 <__pack_f+0x34>
     bd0:	9f c0       	rjmp	.+318    	; 0xd10 <__pack_f+0x172>
     bd2:	82 30       	cpi	r24, 0x02	; 2
     bd4:	21 f4       	brne	.+8      	; 0xbde <__pack_f+0x40>
     bd6:	ee 24       	eor	r14, r14
     bd8:	ff 24       	eor	r15, r15
     bda:	87 01       	movw	r16, r14
     bdc:	05 c0       	rjmp	.+10     	; 0xbe8 <__pack_f+0x4a>
     bde:	e1 14       	cp	r14, r1
     be0:	f1 04       	cpc	r15, r1
     be2:	01 05       	cpc	r16, r1
     be4:	11 05       	cpc	r17, r1
     be6:	19 f4       	brne	.+6      	; 0xbee <__pack_f+0x50>
     be8:	e0 e0       	ldi	r30, 0x00	; 0
     bea:	f0 e0       	ldi	r31, 0x00	; 0
     bec:	96 c0       	rjmp	.+300    	; 0xd1a <__pack_f+0x17c>
     bee:	62 81       	ldd	r22, Z+2	; 0x02
     bf0:	73 81       	ldd	r23, Z+3	; 0x03
     bf2:	9f ef       	ldi	r25, 0xFF	; 255
     bf4:	62 38       	cpi	r22, 0x82	; 130
     bf6:	79 07       	cpc	r23, r25
     bf8:	0c f0       	brlt	.+2      	; 0xbfc <__pack_f+0x5e>
     bfa:	5b c0       	rjmp	.+182    	; 0xcb2 <__pack_f+0x114>
     bfc:	22 e8       	ldi	r18, 0x82	; 130
     bfe:	3f ef       	ldi	r19, 0xFF	; 255
     c00:	26 1b       	sub	r18, r22
     c02:	37 0b       	sbc	r19, r23
     c04:	2a 31       	cpi	r18, 0x1A	; 26
     c06:	31 05       	cpc	r19, r1
     c08:	2c f0       	brlt	.+10     	; 0xc14 <__pack_f+0x76>
     c0a:	20 e0       	ldi	r18, 0x00	; 0
     c0c:	30 e0       	ldi	r19, 0x00	; 0
     c0e:	40 e0       	ldi	r20, 0x00	; 0
     c10:	50 e0       	ldi	r21, 0x00	; 0
     c12:	2a c0       	rjmp	.+84     	; 0xc68 <__pack_f+0xca>
     c14:	b8 01       	movw	r22, r16
     c16:	a7 01       	movw	r20, r14
     c18:	02 2e       	mov	r0, r18
     c1a:	04 c0       	rjmp	.+8      	; 0xc24 <__pack_f+0x86>
     c1c:	76 95       	lsr	r23
     c1e:	67 95       	ror	r22
     c20:	57 95       	ror	r21
     c22:	47 95       	ror	r20
     c24:	0a 94       	dec	r0
     c26:	d2 f7       	brpl	.-12     	; 0xc1c <__pack_f+0x7e>
     c28:	81 e0       	ldi	r24, 0x01	; 1
     c2a:	90 e0       	ldi	r25, 0x00	; 0
     c2c:	a0 e0       	ldi	r26, 0x00	; 0
     c2e:	b0 e0       	ldi	r27, 0x00	; 0
     c30:	04 c0       	rjmp	.+8      	; 0xc3a <__pack_f+0x9c>
     c32:	88 0f       	add	r24, r24
     c34:	99 1f       	adc	r25, r25
     c36:	aa 1f       	adc	r26, r26
     c38:	bb 1f       	adc	r27, r27
     c3a:	2a 95       	dec	r18
     c3c:	d2 f7       	brpl	.-12     	; 0xc32 <__pack_f+0x94>
     c3e:	01 97       	sbiw	r24, 0x01	; 1
     c40:	a1 09       	sbc	r26, r1
     c42:	b1 09       	sbc	r27, r1
     c44:	8e 21       	and	r24, r14
     c46:	9f 21       	and	r25, r15
     c48:	a0 23       	and	r26, r16
     c4a:	b1 23       	and	r27, r17
     c4c:	00 97       	sbiw	r24, 0x00	; 0
     c4e:	a1 05       	cpc	r26, r1
     c50:	b1 05       	cpc	r27, r1
     c52:	21 f0       	breq	.+8      	; 0xc5c <__pack_f+0xbe>
     c54:	81 e0       	ldi	r24, 0x01	; 1
     c56:	90 e0       	ldi	r25, 0x00	; 0
     c58:	a0 e0       	ldi	r26, 0x00	; 0
     c5a:	b0 e0       	ldi	r27, 0x00	; 0
     c5c:	9a 01       	movw	r18, r20
     c5e:	ab 01       	movw	r20, r22
     c60:	28 2b       	or	r18, r24
     c62:	39 2b       	or	r19, r25
     c64:	4a 2b       	or	r20, r26
     c66:	5b 2b       	or	r21, r27
     c68:	da 01       	movw	r26, r20
     c6a:	c9 01       	movw	r24, r18
     c6c:	8f 77       	andi	r24, 0x7F	; 127
     c6e:	90 70       	andi	r25, 0x00	; 0
     c70:	a0 70       	andi	r26, 0x00	; 0
     c72:	b0 70       	andi	r27, 0x00	; 0
     c74:	80 34       	cpi	r24, 0x40	; 64
     c76:	91 05       	cpc	r25, r1
     c78:	a1 05       	cpc	r26, r1
     c7a:	b1 05       	cpc	r27, r1
     c7c:	39 f4       	brne	.+14     	; 0xc8c <__pack_f+0xee>
     c7e:	27 ff       	sbrs	r18, 7
     c80:	09 c0       	rjmp	.+18     	; 0xc94 <__pack_f+0xf6>
     c82:	20 5c       	subi	r18, 0xC0	; 192
     c84:	3f 4f       	sbci	r19, 0xFF	; 255
     c86:	4f 4f       	sbci	r20, 0xFF	; 255
     c88:	5f 4f       	sbci	r21, 0xFF	; 255
     c8a:	04 c0       	rjmp	.+8      	; 0xc94 <__pack_f+0xf6>
     c8c:	21 5c       	subi	r18, 0xC1	; 193
     c8e:	3f 4f       	sbci	r19, 0xFF	; 255
     c90:	4f 4f       	sbci	r20, 0xFF	; 255
     c92:	5f 4f       	sbci	r21, 0xFF	; 255
     c94:	e0 e0       	ldi	r30, 0x00	; 0
     c96:	f0 e0       	ldi	r31, 0x00	; 0
     c98:	20 30       	cpi	r18, 0x00	; 0
     c9a:	a0 e0       	ldi	r26, 0x00	; 0
     c9c:	3a 07       	cpc	r19, r26
     c9e:	a0 e0       	ldi	r26, 0x00	; 0
     ca0:	4a 07       	cpc	r20, r26
     ca2:	a0 e4       	ldi	r26, 0x40	; 64
     ca4:	5a 07       	cpc	r21, r26
     ca6:	10 f0       	brcs	.+4      	; 0xcac <__pack_f+0x10e>
     ca8:	e1 e0       	ldi	r30, 0x01	; 1
     caa:	f0 e0       	ldi	r31, 0x00	; 0
     cac:	79 01       	movw	r14, r18
     cae:	8a 01       	movw	r16, r20
     cb0:	27 c0       	rjmp	.+78     	; 0xd00 <__pack_f+0x162>
     cb2:	60 38       	cpi	r22, 0x80	; 128
     cb4:	71 05       	cpc	r23, r1
     cb6:	64 f5       	brge	.+88     	; 0xd10 <__pack_f+0x172>
     cb8:	fb 01       	movw	r30, r22
     cba:	e1 58       	subi	r30, 0x81	; 129
     cbc:	ff 4f       	sbci	r31, 0xFF	; 255
     cbe:	d8 01       	movw	r26, r16
     cc0:	c7 01       	movw	r24, r14
     cc2:	8f 77       	andi	r24, 0x7F	; 127
     cc4:	90 70       	andi	r25, 0x00	; 0
     cc6:	a0 70       	andi	r26, 0x00	; 0
     cc8:	b0 70       	andi	r27, 0x00	; 0
     cca:	80 34       	cpi	r24, 0x40	; 64
     ccc:	91 05       	cpc	r25, r1
     cce:	a1 05       	cpc	r26, r1
     cd0:	b1 05       	cpc	r27, r1
     cd2:	39 f4       	brne	.+14     	; 0xce2 <__pack_f+0x144>
     cd4:	e7 fe       	sbrs	r14, 7
     cd6:	0d c0       	rjmp	.+26     	; 0xcf2 <__pack_f+0x154>
     cd8:	80 e4       	ldi	r24, 0x40	; 64
     cda:	90 e0       	ldi	r25, 0x00	; 0
     cdc:	a0 e0       	ldi	r26, 0x00	; 0
     cde:	b0 e0       	ldi	r27, 0x00	; 0
     ce0:	04 c0       	rjmp	.+8      	; 0xcea <__pack_f+0x14c>
     ce2:	8f e3       	ldi	r24, 0x3F	; 63
     ce4:	90 e0       	ldi	r25, 0x00	; 0
     ce6:	a0 e0       	ldi	r26, 0x00	; 0
     ce8:	b0 e0       	ldi	r27, 0x00	; 0
     cea:	e8 0e       	add	r14, r24
     cec:	f9 1e       	adc	r15, r25
     cee:	0a 1f       	adc	r16, r26
     cf0:	1b 1f       	adc	r17, r27
     cf2:	17 ff       	sbrs	r17, 7
     cf4:	05 c0       	rjmp	.+10     	; 0xd00 <__pack_f+0x162>
     cf6:	16 95       	lsr	r17
     cf8:	07 95       	ror	r16
     cfa:	f7 94       	ror	r15
     cfc:	e7 94       	ror	r14
     cfe:	31 96       	adiw	r30, 0x01	; 1
     d00:	87 e0       	ldi	r24, 0x07	; 7
     d02:	16 95       	lsr	r17
     d04:	07 95       	ror	r16
     d06:	f7 94       	ror	r15
     d08:	e7 94       	ror	r14
     d0a:	8a 95       	dec	r24
     d0c:	d1 f7       	brne	.-12     	; 0xd02 <__pack_f+0x164>
     d0e:	05 c0       	rjmp	.+10     	; 0xd1a <__pack_f+0x17c>
     d10:	ee 24       	eor	r14, r14
     d12:	ff 24       	eor	r15, r15
     d14:	87 01       	movw	r16, r14
     d16:	ef ef       	ldi	r30, 0xFF	; 255
     d18:	f0 e0       	ldi	r31, 0x00	; 0
     d1a:	6e 2f       	mov	r22, r30
     d1c:	67 95       	ror	r22
     d1e:	66 27       	eor	r22, r22
     d20:	67 95       	ror	r22
     d22:	90 2f       	mov	r25, r16
     d24:	9f 77       	andi	r25, 0x7F	; 127
     d26:	d7 94       	ror	r13
     d28:	dd 24       	eor	r13, r13
     d2a:	d7 94       	ror	r13
     d2c:	8e 2f       	mov	r24, r30
     d2e:	86 95       	lsr	r24
     d30:	49 2f       	mov	r20, r25
     d32:	46 2b       	or	r20, r22
     d34:	58 2f       	mov	r21, r24
     d36:	5d 29       	or	r21, r13
     d38:	b7 01       	movw	r22, r14
     d3a:	ca 01       	movw	r24, r20
     d3c:	1f 91       	pop	r17
     d3e:	0f 91       	pop	r16
     d40:	ff 90       	pop	r15
     d42:	ef 90       	pop	r14
     d44:	df 90       	pop	r13
     d46:	08 95       	ret

00000d48 <__unpack_f>:
     d48:	fc 01       	movw	r30, r24
     d4a:	db 01       	movw	r26, r22
     d4c:	40 81       	ld	r20, Z
     d4e:	51 81       	ldd	r21, Z+1	; 0x01
     d50:	22 81       	ldd	r18, Z+2	; 0x02
     d52:	62 2f       	mov	r22, r18
     d54:	6f 77       	andi	r22, 0x7F	; 127
     d56:	70 e0       	ldi	r23, 0x00	; 0
     d58:	22 1f       	adc	r18, r18
     d5a:	22 27       	eor	r18, r18
     d5c:	22 1f       	adc	r18, r18
     d5e:	93 81       	ldd	r25, Z+3	; 0x03
     d60:	89 2f       	mov	r24, r25
     d62:	88 0f       	add	r24, r24
     d64:	82 2b       	or	r24, r18
     d66:	28 2f       	mov	r18, r24
     d68:	30 e0       	ldi	r19, 0x00	; 0
     d6a:	99 1f       	adc	r25, r25
     d6c:	99 27       	eor	r25, r25
     d6e:	99 1f       	adc	r25, r25
     d70:	11 96       	adiw	r26, 0x01	; 1
     d72:	9c 93       	st	X, r25
     d74:	11 97       	sbiw	r26, 0x01	; 1
     d76:	21 15       	cp	r18, r1
     d78:	31 05       	cpc	r19, r1
     d7a:	a9 f5       	brne	.+106    	; 0xde6 <__unpack_f+0x9e>
     d7c:	41 15       	cp	r20, r1
     d7e:	51 05       	cpc	r21, r1
     d80:	61 05       	cpc	r22, r1
     d82:	71 05       	cpc	r23, r1
     d84:	11 f4       	brne	.+4      	; 0xd8a <__unpack_f+0x42>
     d86:	82 e0       	ldi	r24, 0x02	; 2
     d88:	37 c0       	rjmp	.+110    	; 0xdf8 <__unpack_f+0xb0>
     d8a:	82 e8       	ldi	r24, 0x82	; 130
     d8c:	9f ef       	ldi	r25, 0xFF	; 255
     d8e:	13 96       	adiw	r26, 0x03	; 3
     d90:	9c 93       	st	X, r25
     d92:	8e 93       	st	-X, r24
     d94:	12 97       	sbiw	r26, 0x02	; 2
     d96:	9a 01       	movw	r18, r20
     d98:	ab 01       	movw	r20, r22
     d9a:	67 e0       	ldi	r22, 0x07	; 7
     d9c:	22 0f       	add	r18, r18
     d9e:	33 1f       	adc	r19, r19
     da0:	44 1f       	adc	r20, r20
     da2:	55 1f       	adc	r21, r21
     da4:	6a 95       	dec	r22
     da6:	d1 f7       	brne	.-12     	; 0xd9c <__unpack_f+0x54>
     da8:	83 e0       	ldi	r24, 0x03	; 3
     daa:	8c 93       	st	X, r24
     dac:	0d c0       	rjmp	.+26     	; 0xdc8 <__unpack_f+0x80>
     dae:	22 0f       	add	r18, r18
     db0:	33 1f       	adc	r19, r19
     db2:	44 1f       	adc	r20, r20
     db4:	55 1f       	adc	r21, r21
     db6:	12 96       	adiw	r26, 0x02	; 2
     db8:	8d 91       	ld	r24, X+
     dba:	9c 91       	ld	r25, X
     dbc:	13 97       	sbiw	r26, 0x03	; 3
     dbe:	01 97       	sbiw	r24, 0x01	; 1
     dc0:	13 96       	adiw	r26, 0x03	; 3
     dc2:	9c 93       	st	X, r25
     dc4:	8e 93       	st	-X, r24
     dc6:	12 97       	sbiw	r26, 0x02	; 2
     dc8:	20 30       	cpi	r18, 0x00	; 0
     dca:	80 e0       	ldi	r24, 0x00	; 0
     dcc:	38 07       	cpc	r19, r24
     dce:	80 e0       	ldi	r24, 0x00	; 0
     dd0:	48 07       	cpc	r20, r24
     dd2:	80 e4       	ldi	r24, 0x40	; 64
     dd4:	58 07       	cpc	r21, r24
     dd6:	58 f3       	brcs	.-42     	; 0xdae <__unpack_f+0x66>
     dd8:	14 96       	adiw	r26, 0x04	; 4
     dda:	2d 93       	st	X+, r18
     ddc:	3d 93       	st	X+, r19
     dde:	4d 93       	st	X+, r20
     de0:	5c 93       	st	X, r21
     de2:	17 97       	sbiw	r26, 0x07	; 7
     de4:	08 95       	ret
     de6:	2f 3f       	cpi	r18, 0xFF	; 255
     de8:	31 05       	cpc	r19, r1
     dea:	79 f4       	brne	.+30     	; 0xe0a <__unpack_f+0xc2>
     dec:	41 15       	cp	r20, r1
     dee:	51 05       	cpc	r21, r1
     df0:	61 05       	cpc	r22, r1
     df2:	71 05       	cpc	r23, r1
     df4:	19 f4       	brne	.+6      	; 0xdfc <__unpack_f+0xb4>
     df6:	84 e0       	ldi	r24, 0x04	; 4
     df8:	8c 93       	st	X, r24
     dfa:	08 95       	ret
     dfc:	64 ff       	sbrs	r22, 4
     dfe:	03 c0       	rjmp	.+6      	; 0xe06 <__unpack_f+0xbe>
     e00:	81 e0       	ldi	r24, 0x01	; 1
     e02:	8c 93       	st	X, r24
     e04:	12 c0       	rjmp	.+36     	; 0xe2a <__unpack_f+0xe2>
     e06:	1c 92       	st	X, r1
     e08:	10 c0       	rjmp	.+32     	; 0xe2a <__unpack_f+0xe2>
     e0a:	2f 57       	subi	r18, 0x7F	; 127
     e0c:	30 40       	sbci	r19, 0x00	; 0
     e0e:	13 96       	adiw	r26, 0x03	; 3
     e10:	3c 93       	st	X, r19
     e12:	2e 93       	st	-X, r18
     e14:	12 97       	sbiw	r26, 0x02	; 2
     e16:	83 e0       	ldi	r24, 0x03	; 3
     e18:	8c 93       	st	X, r24
     e1a:	87 e0       	ldi	r24, 0x07	; 7
     e1c:	44 0f       	add	r20, r20
     e1e:	55 1f       	adc	r21, r21
     e20:	66 1f       	adc	r22, r22
     e22:	77 1f       	adc	r23, r23
     e24:	8a 95       	dec	r24
     e26:	d1 f7       	brne	.-12     	; 0xe1c <__unpack_f+0xd4>
     e28:	70 64       	ori	r23, 0x40	; 64
     e2a:	14 96       	adiw	r26, 0x04	; 4
     e2c:	4d 93       	st	X+, r20
     e2e:	5d 93       	st	X+, r21
     e30:	6d 93       	st	X+, r22
     e32:	7c 93       	st	X, r23
     e34:	17 97       	sbiw	r26, 0x07	; 7
     e36:	08 95       	ret

00000e38 <__fpcmp_parts_f>:
     e38:	1f 93       	push	r17
     e3a:	dc 01       	movw	r26, r24
     e3c:	fb 01       	movw	r30, r22
     e3e:	9c 91       	ld	r25, X
     e40:	92 30       	cpi	r25, 0x02	; 2
     e42:	08 f4       	brcc	.+2      	; 0xe46 <__fpcmp_parts_f+0xe>
     e44:	47 c0       	rjmp	.+142    	; 0xed4 <__fpcmp_parts_f+0x9c>
     e46:	80 81       	ld	r24, Z
     e48:	82 30       	cpi	r24, 0x02	; 2
     e4a:	08 f4       	brcc	.+2      	; 0xe4e <__fpcmp_parts_f+0x16>
     e4c:	43 c0       	rjmp	.+134    	; 0xed4 <__fpcmp_parts_f+0x9c>
     e4e:	94 30       	cpi	r25, 0x04	; 4
     e50:	51 f4       	brne	.+20     	; 0xe66 <__fpcmp_parts_f+0x2e>
     e52:	11 96       	adiw	r26, 0x01	; 1
     e54:	1c 91       	ld	r17, X
     e56:	84 30       	cpi	r24, 0x04	; 4
     e58:	99 f5       	brne	.+102    	; 0xec0 <__fpcmp_parts_f+0x88>
     e5a:	81 81       	ldd	r24, Z+1	; 0x01
     e5c:	68 2f       	mov	r22, r24
     e5e:	70 e0       	ldi	r23, 0x00	; 0
     e60:	61 1b       	sub	r22, r17
     e62:	71 09       	sbc	r23, r1
     e64:	3f c0       	rjmp	.+126    	; 0xee4 <__fpcmp_parts_f+0xac>
     e66:	84 30       	cpi	r24, 0x04	; 4
     e68:	21 f0       	breq	.+8      	; 0xe72 <__fpcmp_parts_f+0x3a>
     e6a:	92 30       	cpi	r25, 0x02	; 2
     e6c:	31 f4       	brne	.+12     	; 0xe7a <__fpcmp_parts_f+0x42>
     e6e:	82 30       	cpi	r24, 0x02	; 2
     e70:	b9 f1       	breq	.+110    	; 0xee0 <__fpcmp_parts_f+0xa8>
     e72:	81 81       	ldd	r24, Z+1	; 0x01
     e74:	88 23       	and	r24, r24
     e76:	89 f1       	breq	.+98     	; 0xeda <__fpcmp_parts_f+0xa2>
     e78:	2d c0       	rjmp	.+90     	; 0xed4 <__fpcmp_parts_f+0x9c>
     e7a:	11 96       	adiw	r26, 0x01	; 1
     e7c:	1c 91       	ld	r17, X
     e7e:	11 97       	sbiw	r26, 0x01	; 1
     e80:	82 30       	cpi	r24, 0x02	; 2
     e82:	f1 f0       	breq	.+60     	; 0xec0 <__fpcmp_parts_f+0x88>
     e84:	81 81       	ldd	r24, Z+1	; 0x01
     e86:	18 17       	cp	r17, r24
     e88:	d9 f4       	brne	.+54     	; 0xec0 <__fpcmp_parts_f+0x88>
     e8a:	12 96       	adiw	r26, 0x02	; 2
     e8c:	2d 91       	ld	r18, X+
     e8e:	3c 91       	ld	r19, X
     e90:	13 97       	sbiw	r26, 0x03	; 3
     e92:	82 81       	ldd	r24, Z+2	; 0x02
     e94:	93 81       	ldd	r25, Z+3	; 0x03
     e96:	82 17       	cp	r24, r18
     e98:	93 07       	cpc	r25, r19
     e9a:	94 f0       	brlt	.+36     	; 0xec0 <__fpcmp_parts_f+0x88>
     e9c:	28 17       	cp	r18, r24
     e9e:	39 07       	cpc	r19, r25
     ea0:	bc f0       	brlt	.+46     	; 0xed0 <__fpcmp_parts_f+0x98>
     ea2:	14 96       	adiw	r26, 0x04	; 4
     ea4:	8d 91       	ld	r24, X+
     ea6:	9d 91       	ld	r25, X+
     ea8:	0d 90       	ld	r0, X+
     eaa:	bc 91       	ld	r27, X
     eac:	a0 2d       	mov	r26, r0
     eae:	24 81       	ldd	r18, Z+4	; 0x04
     eb0:	35 81       	ldd	r19, Z+5	; 0x05
     eb2:	46 81       	ldd	r20, Z+6	; 0x06
     eb4:	57 81       	ldd	r21, Z+7	; 0x07
     eb6:	28 17       	cp	r18, r24
     eb8:	39 07       	cpc	r19, r25
     eba:	4a 07       	cpc	r20, r26
     ebc:	5b 07       	cpc	r21, r27
     ebe:	18 f4       	brcc	.+6      	; 0xec6 <__fpcmp_parts_f+0x8e>
     ec0:	11 23       	and	r17, r17
     ec2:	41 f0       	breq	.+16     	; 0xed4 <__fpcmp_parts_f+0x9c>
     ec4:	0a c0       	rjmp	.+20     	; 0xeda <__fpcmp_parts_f+0xa2>
     ec6:	82 17       	cp	r24, r18
     ec8:	93 07       	cpc	r25, r19
     eca:	a4 07       	cpc	r26, r20
     ecc:	b5 07       	cpc	r27, r21
     ece:	40 f4       	brcc	.+16     	; 0xee0 <__fpcmp_parts_f+0xa8>
     ed0:	11 23       	and	r17, r17
     ed2:	19 f0       	breq	.+6      	; 0xeda <__fpcmp_parts_f+0xa2>
     ed4:	61 e0       	ldi	r22, 0x01	; 1
     ed6:	70 e0       	ldi	r23, 0x00	; 0
     ed8:	05 c0       	rjmp	.+10     	; 0xee4 <__fpcmp_parts_f+0xac>
     eda:	6f ef       	ldi	r22, 0xFF	; 255
     edc:	7f ef       	ldi	r23, 0xFF	; 255
     ede:	02 c0       	rjmp	.+4      	; 0xee4 <__fpcmp_parts_f+0xac>
     ee0:	60 e0       	ldi	r22, 0x00	; 0
     ee2:	70 e0       	ldi	r23, 0x00	; 0
     ee4:	cb 01       	movw	r24, r22
     ee6:	1f 91       	pop	r17
     ee8:	08 95       	ret

00000eea <UART_vid_Init>:
#include "UART_interface.h"
#include "UART_config.h"


void UART_vid_Init()
{
     eea:	df 93       	push	r29
     eec:	cf 93       	push	r28
     eee:	cd b7       	in	r28, 0x3d	; 61
     ef0:	de b7       	in	r29, 0x3e	; 62
	/* Receiver mode */
	UCSRB |= (Receiver<<UCSRB_RXEN_PIN);
     ef2:	aa e2       	ldi	r26, 0x2A	; 42
     ef4:	b0 e0       	ldi	r27, 0x00	; 0
     ef6:	ea e2       	ldi	r30, 0x2A	; 42
     ef8:	f0 e0       	ldi	r31, 0x00	; 0
     efa:	80 81       	ld	r24, Z
     efc:	80 61       	ori	r24, 0x10	; 16
     efe:	8c 93       	st	X, r24
	/* Transmitter mode */
	UCSRB |= (Transmitter<<UCSRB_TXEN_PIN);
     f00:	aa e2       	ldi	r26, 0x2A	; 42
     f02:	b0 e0       	ldi	r27, 0x00	; 0
     f04:	ea e2       	ldi	r30, 0x2A	; 42
     f06:	f0 e0       	ldi	r31, 0x00	; 0
     f08:	80 81       	ld	r24, Z
     f0a:	88 60       	ori	r24, 0x08	; 8
     f0c:	8c 93       	st	X, r24
	/* Receive Complete Interrupt*/
	UCSRB |= (RX_Complete_Interrupt<<UCSRB_RXCIE_PIN);
     f0e:	aa e2       	ldi	r26, 0x2A	; 42
     f10:	b0 e0       	ldi	r27, 0x00	; 0
     f12:	ea e2       	ldi	r30, 0x2A	; 42
     f14:	f0 e0       	ldi	r31, 0x00	; 0
     f16:	80 81       	ld	r24, Z
     f18:	80 68       	ori	r24, 0x80	; 128
     f1a:	8c 93       	st	X, r24
	/* Transmit Complete Interrupt */
	UCSRB |= (TX_Complete_Interrupt<<UCSRB_TXCIE_PIN);
     f1c:	aa e2       	ldi	r26, 0x2A	; 42
     f1e:	b0 e0       	ldi	r27, 0x00	; 0
     f20:	ea e2       	ldi	r30, 0x2A	; 42
     f22:	f0 e0       	ldi	r31, 0x00	; 0
     f24:	80 81       	ld	r24, Z
     f26:	8c 93       	st	X, r24
	/* USART Data Register Empty Interrupt */
	UCSRB |= (USART_Data_Register_Empty_Interrupt<<UCSRB_UDRIE_PIN);
     f28:	aa e2       	ldi	r26, 0x2A	; 42
     f2a:	b0 e0       	ldi	r27, 0x00	; 0
     f2c:	ea e2       	ldi	r30, 0x2A	; 42
     f2e:	f0 e0       	ldi	r31, 0x00	; 0
     f30:	80 81       	ld	r24, Z
     f32:	8c 93       	st	X, r24
	/* If Character Size is chosen t be 9 bits  */
	if(Character_Size == size_9_bit)
	{
		SET_BIT(UCSRB,UCSRB_UCSZ2_PIN);
     f34:	aa e2       	ldi	r26, 0x2A	; 42
     f36:	b0 e0       	ldi	r27, 0x00	; 0
     f38:	ea e2       	ldi	r30, 0x2A	; 42
     f3a:	f0 e0       	ldi	r31, 0x00	; 0
     f3c:	80 81       	ld	r24, Z
     f3e:	84 60       	ori	r24, 0x04	; 4
     f40:	8c 93       	st	X, r24
	}

	SET_BIT(UCSRC,UCSRC_URSEL);  /* Register Select. To access the UCSRC register and write on it*/
     f42:	a0 e4       	ldi	r26, 0x40	; 64
     f44:	b0 e0       	ldi	r27, 0x00	; 0
     f46:	e0 e4       	ldi	r30, 0x40	; 64
     f48:	f0 e0       	ldi	r31, 0x00	; 0
     f4a:	80 81       	ld	r24, Z
     f4c:	80 68       	ori	r24, 0x80	; 128
     f4e:	8c 93       	st	X, r24
	/* USART Mode Select. Asynchronous or Synchronous mode of operation. */
	UCSRC |= (USART_Mode<<UCSRC_UMSEL);
     f50:	a0 e4       	ldi	r26, 0x40	; 64
     f52:	b0 e0       	ldi	r27, 0x00	; 0
     f54:	e0 e4       	ldi	r30, 0x40	; 64
     f56:	f0 e0       	ldi	r31, 0x00	; 0
     f58:	80 81       	ld	r24, Z
     f5a:	8c 93       	st	X, r24
	/* Parity Mode */
	UCSRC |= (Parity<<UCSRC_UPM0);
     f5c:	a0 e4       	ldi	r26, 0x40	; 64
     f5e:	b0 e0       	ldi	r27, 0x00	; 0
     f60:	e0 e4       	ldi	r30, 0x40	; 64
     f62:	f0 e0       	ldi	r31, 0x00	; 0
     f64:	80 81       	ld	r24, Z
     f66:	8c 93       	st	X, r24
	/* Stop Bit Select */
	UCSRC |= (stop_bits<<UCSRC_USBS);
     f68:	a0 e4       	ldi	r26, 0x40	; 64
     f6a:	b0 e0       	ldi	r27, 0x00	; 0
     f6c:	e0 e4       	ldi	r30, 0x40	; 64
     f6e:	f0 e0       	ldi	r31, 0x00	; 0
     f70:	80 81       	ld	r24, Z
     f72:	8c 93       	st	X, r24
	/* Character Size Select */
	UCSRC |= (Character_Size<<UCSRC_UCSZ0);
     f74:	a0 e4       	ldi	r26, 0x40	; 64
     f76:	b0 e0       	ldi	r27, 0x00	; 0
     f78:	e0 e4       	ldi	r30, 0x40	; 64
     f7a:	f0 e0       	ldi	r31, 0x00	; 0
     f7c:	80 81       	ld	r24, Z
     f7e:	86 60       	ori	r24, 0x06	; 6
     f80:	8c 93       	st	X, r24


	/* Baud Rate = 9600 */
	UBRRL =51;  /* For Oscillator Frequency = 8 MHz*/
     f82:	e9 e2       	ldi	r30, 0x29	; 41
     f84:	f0 e0       	ldi	r31, 0x00	; 0
     f86:	83 e3       	ldi	r24, 0x33	; 51
     f88:	80 83       	st	Z, r24
	/* NOTE: REFER TO THE TABLES IN THE DATASHEET TO CHOOSE ANOTHER BAUD RATE THAT FITS YOUR FREQENCY */
}
     f8a:	cf 91       	pop	r28
     f8c:	df 91       	pop	r29
     f8e:	08 95       	ret

00000f90 <UART_vid_Send>:
void UART_vid_Send(u8 Copy_u8_data)
{
     f90:	df 93       	push	r29
     f92:	cf 93       	push	r28
     f94:	0f 92       	push	r0
     f96:	cd b7       	in	r28, 0x3d	; 61
     f98:	de b7       	in	r29, 0x3e	; 62
     f9a:	89 83       	std	Y+1, r24	; 0x01
	while(GET_BIT(UCSRA,UCSRA_UDRE_PIN) == 0);  /* wait until the transmit complete flag is set */
     f9c:	eb e2       	ldi	r30, 0x2B	; 43
     f9e:	f0 e0       	ldi	r31, 0x00	; 0
     fa0:	80 81       	ld	r24, Z
     fa2:	82 95       	swap	r24
     fa4:	86 95       	lsr	r24
     fa6:	87 70       	andi	r24, 0x07	; 7
     fa8:	88 2f       	mov	r24, r24
     faa:	90 e0       	ldi	r25, 0x00	; 0
     fac:	81 70       	andi	r24, 0x01	; 1
     fae:	90 70       	andi	r25, 0x00	; 0
     fb0:	00 97       	sbiw	r24, 0x00	; 0
     fb2:	a1 f3       	breq	.-24     	; 0xf9c <UART_vid_Send+0xc>
	UDR= Copy_u8_data;
     fb4:	ec e2       	ldi	r30, 0x2C	; 44
     fb6:	f0 e0       	ldi	r31, 0x00	; 0
     fb8:	89 81       	ldd	r24, Y+1	; 0x01
     fba:	80 83       	st	Z, r24
}
     fbc:	0f 90       	pop	r0
     fbe:	cf 91       	pop	r28
     fc0:	df 91       	pop	r29
     fc2:	08 95       	ret

00000fc4 <UART_u8_Receive>:
u8 UART_u8_Receive()
{
     fc4:	df 93       	push	r29
     fc6:	cf 93       	push	r28
     fc8:	cd b7       	in	r28, 0x3d	; 61
     fca:	de b7       	in	r29, 0x3e	; 62
	while(GET_BIT(UCSRA,UCSRA_RXC_PIN) == 0);	/* wait until the receive complete flag is set */
     fcc:	eb e2       	ldi	r30, 0x2B	; 43
     fce:	f0 e0       	ldi	r31, 0x00	; 0
     fd0:	80 81       	ld	r24, Z
     fd2:	88 23       	and	r24, r24
     fd4:	dc f7       	brge	.-10     	; 0xfcc <UART_u8_Receive+0x8>
	return UDR;
     fd6:	ec e2       	ldi	r30, 0x2C	; 44
     fd8:	f0 e0       	ldi	r31, 0x00	; 0
     fda:	80 81       	ld	r24, Z

}
     fdc:	cf 91       	pop	r28
     fde:	df 91       	pop	r29
     fe0:	08 95       	ret

00000fe2 <UART_vid_Send_9_bits>:

void UART_vid_Send_9_bits(u8 Copy_u16_data)
{
     fe2:	df 93       	push	r29
     fe4:	cf 93       	push	r28
     fe6:	0f 92       	push	r0
     fe8:	cd b7       	in	r28, 0x3d	; 61
     fea:	de b7       	in	r29, 0x3e	; 62
     fec:	89 83       	std	Y+1, r24	; 0x01
	while(GET_BIT(UCSRA,UCSRA_UDRE_PIN) == 0);  /* wait until the transmit complete flag is set */
     fee:	eb e2       	ldi	r30, 0x2B	; 43
     ff0:	f0 e0       	ldi	r31, 0x00	; 0
     ff2:	80 81       	ld	r24, Z
     ff4:	82 95       	swap	r24
     ff6:	86 95       	lsr	r24
     ff8:	87 70       	andi	r24, 0x07	; 7
     ffa:	88 2f       	mov	r24, r24
     ffc:	90 e0       	ldi	r25, 0x00	; 0
     ffe:	81 70       	andi	r24, 0x01	; 1
    1000:	90 70       	andi	r25, 0x00	; 0
    1002:	00 97       	sbiw	r24, 0x00	; 0
    1004:	a1 f3       	breq	.-24     	; 0xfee <UART_vid_Send_9_bits+0xc>
	UCSRB |= (((Copy_u16_data>>8) & 0b00000001) << UCSRB_TXB8_PIN);
    1006:	aa e2       	ldi	r26, 0x2A	; 42
    1008:	b0 e0       	ldi	r27, 0x00	; 0
    100a:	ea e2       	ldi	r30, 0x2A	; 42
    100c:	f0 e0       	ldi	r31, 0x00	; 0
    100e:	80 81       	ld	r24, Z
    1010:	8c 93       	st	X, r24
	UDR = (u8) Copy_u16_data;
    1012:	ec e2       	ldi	r30, 0x2C	; 44
    1014:	f0 e0       	ldi	r31, 0x00	; 0
    1016:	89 81       	ldd	r24, Y+1	; 0x01
    1018:	80 83       	st	Z, r24
}
    101a:	0f 90       	pop	r0
    101c:	cf 91       	pop	r28
    101e:	df 91       	pop	r29
    1020:	08 95       	ret

00001022 <UART_u16_Receive_9_bits>:

u16 UART_u16_Receive_9_bits()
{
    1022:	df 93       	push	r29
    1024:	cf 93       	push	r28
    1026:	00 d0       	rcall	.+0      	; 0x1028 <UART_u16_Receive_9_bits+0x6>
    1028:	cd b7       	in	r28, 0x3d	; 61
    102a:	de b7       	in	r29, 0x3e	; 62
	u16 read=0;
    102c:	1a 82       	std	Y+2, r1	; 0x02
    102e:	19 82       	std	Y+1, r1	; 0x01
	while(GET_BIT(UCSRA,UCSRA_RXC_PIN) == 0);	/* wait until the receive complete flag is set */
    1030:	eb e2       	ldi	r30, 0x2B	; 43
    1032:	f0 e0       	ldi	r31, 0x00	; 0
    1034:	80 81       	ld	r24, Z
    1036:	88 23       	and	r24, r24
    1038:	dc f7       	brge	.-10     	; 0x1030 <UART_u16_Receive_9_bits+0xe>
	read = (((UCSRB>> UCSRB_RXB8_PIN) & 0b00000001) <<8);
    103a:	ea e2       	ldi	r30, 0x2A	; 42
    103c:	f0 e0       	ldi	r31, 0x00	; 0
    103e:	80 81       	ld	r24, Z
    1040:	86 95       	lsr	r24
    1042:	88 2f       	mov	r24, r24
    1044:	90 e0       	ldi	r25, 0x00	; 0
    1046:	81 70       	andi	r24, 0x01	; 1
    1048:	90 70       	andi	r25, 0x00	; 0
    104a:	98 2f       	mov	r25, r24
    104c:	88 27       	eor	r24, r24
    104e:	9a 83       	std	Y+2, r25	; 0x02
    1050:	89 83       	std	Y+1, r24	; 0x01
	read |= UDR;
    1052:	ec e2       	ldi	r30, 0x2C	; 44
    1054:	f0 e0       	ldi	r31, 0x00	; 0
    1056:	80 81       	ld	r24, Z
    1058:	28 2f       	mov	r18, r24
    105a:	30 e0       	ldi	r19, 0x00	; 0
    105c:	89 81       	ldd	r24, Y+1	; 0x01
    105e:	9a 81       	ldd	r25, Y+2	; 0x02
    1060:	82 2b       	or	r24, r18
    1062:	93 2b       	or	r25, r19
    1064:	9a 83       	std	Y+2, r25	; 0x02
    1066:	89 83       	std	Y+1, r24	; 0x01
	return read;
    1068:	89 81       	ldd	r24, Y+1	; 0x01
    106a:	9a 81       	ldd	r25, Y+2	; 0x02
}
    106c:	0f 90       	pop	r0
    106e:	0f 90       	pop	r0
    1070:	cf 91       	pop	r28
    1072:	df 91       	pop	r29
    1074:	08 95       	ret

00001076 <Send_vid_String>:
void Send_vid_String( u8  string_u8_array[] )
{
    1076:	df 93       	push	r29
    1078:	cf 93       	push	r28
    107a:	00 d0       	rcall	.+0      	; 0x107c <Send_vid_String+0x6>
    107c:	0f 92       	push	r0
    107e:	cd b7       	in	r28, 0x3d	; 61
    1080:	de b7       	in	r29, 0x3e	; 62
    1082:	9b 83       	std	Y+3, r25	; 0x03
    1084:	8a 83       	std	Y+2, r24	; 0x02
	/* if the string is received from the UART receiver it will end  with '\r'  ---->>>[ENTER] */
	/* if the string is defined inside the program code during the run time then it will end with '\0' */
	for(u8 i=0; (string_u8_array[i] != '\r') && (string_u8_array[i] != '\0') ; i++)
    1086:	19 82       	std	Y+1, r1	; 0x01
    1088:	0e c0       	rjmp	.+28     	; 0x10a6 <Send_vid_String+0x30>
	UART_vid_Send(string_u8_array[i]);
    108a:	89 81       	ldd	r24, Y+1	; 0x01
    108c:	28 2f       	mov	r18, r24
    108e:	30 e0       	ldi	r19, 0x00	; 0
    1090:	8a 81       	ldd	r24, Y+2	; 0x02
    1092:	9b 81       	ldd	r25, Y+3	; 0x03
    1094:	fc 01       	movw	r30, r24
    1096:	e2 0f       	add	r30, r18
    1098:	f3 1f       	adc	r31, r19
    109a:	80 81       	ld	r24, Z
    109c:	0e 94 c8 07 	call	0xf90	; 0xf90 <UART_vid_Send>
}
void Send_vid_String( u8  string_u8_array[] )
{
	/* if the string is received from the UART receiver it will end  with '\r'  ---->>>[ENTER] */
	/* if the string is defined inside the program code during the run time then it will end with '\0' */
	for(u8 i=0; (string_u8_array[i] != '\r') && (string_u8_array[i] != '\0') ; i++)
    10a0:	89 81       	ldd	r24, Y+1	; 0x01
    10a2:	8f 5f       	subi	r24, 0xFF	; 255
    10a4:	89 83       	std	Y+1, r24	; 0x01
    10a6:	89 81       	ldd	r24, Y+1	; 0x01
    10a8:	28 2f       	mov	r18, r24
    10aa:	30 e0       	ldi	r19, 0x00	; 0
    10ac:	8a 81       	ldd	r24, Y+2	; 0x02
    10ae:	9b 81       	ldd	r25, Y+3	; 0x03
    10b0:	fc 01       	movw	r30, r24
    10b2:	e2 0f       	add	r30, r18
    10b4:	f3 1f       	adc	r31, r19
    10b6:	80 81       	ld	r24, Z
    10b8:	8d 30       	cpi	r24, 0x0D	; 13
    10ba:	59 f0       	breq	.+22     	; 0x10d2 <Send_vid_String+0x5c>
    10bc:	89 81       	ldd	r24, Y+1	; 0x01
    10be:	28 2f       	mov	r18, r24
    10c0:	30 e0       	ldi	r19, 0x00	; 0
    10c2:	8a 81       	ldd	r24, Y+2	; 0x02
    10c4:	9b 81       	ldd	r25, Y+3	; 0x03
    10c6:	fc 01       	movw	r30, r24
    10c8:	e2 0f       	add	r30, r18
    10ca:	f3 1f       	adc	r31, r19
    10cc:	80 81       	ld	r24, Z
    10ce:	88 23       	and	r24, r24
    10d0:	e1 f6       	brne	.-72     	; 0x108a <Send_vid_String+0x14>
	UART_vid_Send(string_u8_array[i]);
}
    10d2:	0f 90       	pop	r0
    10d4:	0f 90       	pop	r0
    10d6:	0f 90       	pop	r0
    10d8:	cf 91       	pop	r28
    10da:	df 91       	pop	r29
    10dc:	08 95       	ret

000010de <Recieve_u8_String>:

void Recieve_u8_String( u8 * string_u8_array )
{
    10de:	0f 93       	push	r16
    10e0:	1f 93       	push	r17
    10e2:	df 93       	push	r29
    10e4:	cf 93       	push	r28
    10e6:	00 d0       	rcall	.+0      	; 0x10e8 <Recieve_u8_String+0xa>
    10e8:	0f 92       	push	r0
    10ea:	cd b7       	in	r28, 0x3d	; 61
    10ec:	de b7       	in	r29, 0x3e	; 62
    10ee:	9b 83       	std	Y+3, r25	; 0x03
    10f0:	8a 83       	std	Y+2, r24	; 0x02
	for(u8 i=0; string_u8_array[i-1] != '\r'; i++) /* Keep receiving the string until [ENTER] is pressed */
    10f2:	19 82       	std	Y+1, r1	; 0x01
    10f4:	0f c0       	rjmp	.+30     	; 0x1114 <Recieve_u8_String+0x36>
	{
		string_u8_array[i] = UART_u8_Receive();  /* save the received string in the passed array that will be global */
    10f6:	89 81       	ldd	r24, Y+1	; 0x01
    10f8:	28 2f       	mov	r18, r24
    10fa:	30 e0       	ldi	r19, 0x00	; 0
    10fc:	8a 81       	ldd	r24, Y+2	; 0x02
    10fe:	9b 81       	ldd	r25, Y+3	; 0x03
    1100:	8c 01       	movw	r16, r24
    1102:	02 0f       	add	r16, r18
    1104:	13 1f       	adc	r17, r19
    1106:	0e 94 e2 07 	call	0xfc4	; 0xfc4 <UART_u8_Receive>
    110a:	f8 01       	movw	r30, r16
    110c:	80 83       	st	Z, r24
	UART_vid_Send(string_u8_array[i]);
}

void Recieve_u8_String( u8 * string_u8_array )
{
	for(u8 i=0; string_u8_array[i-1] != '\r'; i++) /* Keep receiving the string until [ENTER] is pressed */
    110e:	89 81       	ldd	r24, Y+1	; 0x01
    1110:	8f 5f       	subi	r24, 0xFF	; 255
    1112:	89 83       	std	Y+1, r24	; 0x01
    1114:	89 81       	ldd	r24, Y+1	; 0x01
    1116:	88 2f       	mov	r24, r24
    1118:	90 e0       	ldi	r25, 0x00	; 0
    111a:	9c 01       	movw	r18, r24
    111c:	21 50       	subi	r18, 0x01	; 1
    111e:	30 40       	sbci	r19, 0x00	; 0
    1120:	8a 81       	ldd	r24, Y+2	; 0x02
    1122:	9b 81       	ldd	r25, Y+3	; 0x03
    1124:	fc 01       	movw	r30, r24
    1126:	e2 0f       	add	r30, r18
    1128:	f3 1f       	adc	r31, r19
    112a:	80 81       	ld	r24, Z
    112c:	8d 30       	cpi	r24, 0x0D	; 13
    112e:	19 f7       	brne	.-58     	; 0x10f6 <Recieve_u8_String+0x18>
	{
		string_u8_array[i] = UART_u8_Receive();  /* save the received string in the passed array that will be global */
	}
}
    1130:	0f 90       	pop	r0
    1132:	0f 90       	pop	r0
    1134:	0f 90       	pop	r0
    1136:	cf 91       	pop	r28
    1138:	df 91       	pop	r29
    113a:	1f 91       	pop	r17
    113c:	0f 91       	pop	r16
    113e:	08 95       	ret

00001140 <UART_vid_Receive>:

void UART_vid_Receive()
{
    1140:	df 93       	push	r29
    1142:	cf 93       	push	r28
    1144:	cd b7       	in	r28, 0x3d	; 61
    1146:	de b7       	in	r29, 0x3e	; 62
	while(GET_BIT(UCSRA,UCSRA_RXC_PIN) == 0);	/* wait until the receive complete flag is set */
    1148:	eb e2       	ldi	r30, 0x2B	; 43
    114a:	f0 e0       	ldi	r31, 0x00	; 0
    114c:	80 81       	ld	r24, Z
    114e:	88 23       	and	r24, r24
    1150:	dc f7       	brge	.-10     	; 0x1148 <UART_vid_Receive+0x8>
}
    1152:	cf 91       	pop	r28
    1154:	df 91       	pop	r29
    1156:	08 95       	ret

00001158 <RX_INT_Call_Back>:

/* Receive complete ISR */
void (* RX_INT_func) (void) = NULL;

void RX_INT_Call_Back(void (*func) (void))  /* In main: define a function for the task and call it back using this function  */
{
    1158:	df 93       	push	r29
    115a:	cf 93       	push	r28
    115c:	00 d0       	rcall	.+0      	; 0x115e <RX_INT_Call_Back+0x6>
    115e:	cd b7       	in	r28, 0x3d	; 61
    1160:	de b7       	in	r29, 0x3e	; 62
    1162:	9a 83       	std	Y+2, r25	; 0x02
    1164:	89 83       	std	Y+1, r24	; 0x01
	RX_INT_func = func;
    1166:	89 81       	ldd	r24, Y+1	; 0x01
    1168:	9a 81       	ldd	r25, Y+2	; 0x02
    116a:	90 93 bf 01 	sts	0x01BF, r25
    116e:	80 93 be 01 	sts	0x01BE, r24
}
    1172:	0f 90       	pop	r0
    1174:	0f 90       	pop	r0
    1176:	cf 91       	pop	r28
    1178:	df 91       	pop	r29
    117a:	08 95       	ret

0000117c <__vector_13>:

void __vector_13 (void) __attribute__((signal));
void __vector_13 (void)
{
    117c:	1f 92       	push	r1
    117e:	0f 92       	push	r0
    1180:	0f b6       	in	r0, 0x3f	; 63
    1182:	0f 92       	push	r0
    1184:	11 24       	eor	r1, r1
    1186:	2f 93       	push	r18
    1188:	3f 93       	push	r19
    118a:	4f 93       	push	r20
    118c:	5f 93       	push	r21
    118e:	6f 93       	push	r22
    1190:	7f 93       	push	r23
    1192:	8f 93       	push	r24
    1194:	9f 93       	push	r25
    1196:	af 93       	push	r26
    1198:	bf 93       	push	r27
    119a:	ef 93       	push	r30
    119c:	ff 93       	push	r31
    119e:	df 93       	push	r29
    11a0:	cf 93       	push	r28
    11a2:	cd b7       	in	r28, 0x3d	; 61
    11a4:	de b7       	in	r29, 0x3e	; 62
	if(RX_INT_func != NULL )
    11a6:	80 91 be 01 	lds	r24, 0x01BE
    11aa:	90 91 bf 01 	lds	r25, 0x01BF
    11ae:	00 97       	sbiw	r24, 0x00	; 0
    11b0:	29 f0       	breq	.+10     	; 0x11bc <__vector_13+0x40>
		RX_INT_func();
    11b2:	e0 91 be 01 	lds	r30, 0x01BE
    11b6:	f0 91 bf 01 	lds	r31, 0x01BF
    11ba:	09 95       	icall
}
    11bc:	cf 91       	pop	r28
    11be:	df 91       	pop	r29
    11c0:	ff 91       	pop	r31
    11c2:	ef 91       	pop	r30
    11c4:	bf 91       	pop	r27
    11c6:	af 91       	pop	r26
    11c8:	9f 91       	pop	r25
    11ca:	8f 91       	pop	r24
    11cc:	7f 91       	pop	r23
    11ce:	6f 91       	pop	r22
    11d0:	5f 91       	pop	r21
    11d2:	4f 91       	pop	r20
    11d4:	3f 91       	pop	r19
    11d6:	2f 91       	pop	r18
    11d8:	0f 90       	pop	r0
    11da:	0f be       	out	0x3f, r0	; 63
    11dc:	0f 90       	pop	r0
    11de:	1f 90       	pop	r1
    11e0:	18 95       	reti

000011e2 <Timer_8bit_vid_Init>:
/* The available arguments names given to the functions can be found in Timer_private.h file */


/* this function is used to initialize either timer 0 or 2 , set the wave generation mode, and  the on compare mode */
void Timer_8bit_vid_Init(u8 Copy_u8TimerName, u8 Copy_u8TimerMode, u8 Copy_u8Timer_OnCompare_Mode)
{
    11e2:	df 93       	push	r29
    11e4:	cf 93       	push	r28
    11e6:	cd b7       	in	r28, 0x3d	; 61
    11e8:	de b7       	in	r29, 0x3e	; 62
    11ea:	27 97       	sbiw	r28, 0x07	; 7
    11ec:	0f b6       	in	r0, 0x3f	; 63
    11ee:	f8 94       	cli
    11f0:	de bf       	out	0x3e, r29	; 62
    11f2:	0f be       	out	0x3f, r0	; 63
    11f4:	cd bf       	out	0x3d, r28	; 61
    11f6:	89 83       	std	Y+1, r24	; 0x01
    11f8:	6a 83       	std	Y+2, r22	; 0x02
    11fa:	4b 83       	std	Y+3, r20	; 0x03
	if(Copy_u8TimerName == timer0)
    11fc:	89 81       	ldd	r24, Y+1	; 0x01
    11fe:	82 30       	cpi	r24, 0x02	; 2
    1200:	09 f0       	breq	.+2      	; 0x1204 <Timer_8bit_vid_Init+0x22>
    1202:	67 c0       	rjmp	.+206    	; 0x12d2 <Timer_8bit_vid_Init+0xf0>
	{
	/*  clear the mode setup bits at first: make them on normal mode by default */
		CLEAR_BIT(TCCR0,TCCR0_WGM00_PIN);
    1204:	a3 e5       	ldi	r26, 0x53	; 83
    1206:	b0 e0       	ldi	r27, 0x00	; 0
    1208:	e3 e5       	ldi	r30, 0x53	; 83
    120a:	f0 e0       	ldi	r31, 0x00	; 0
    120c:	80 81       	ld	r24, Z
    120e:	8f 7b       	andi	r24, 0xBF	; 191
    1210:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR0,TCCR0_WGM01_PIN);
    1212:	a3 e5       	ldi	r26, 0x53	; 83
    1214:	b0 e0       	ldi	r27, 0x00	; 0
    1216:	e3 e5       	ldi	r30, 0x53	; 83
    1218:	f0 e0       	ldi	r31, 0x00	; 0
    121a:	80 81       	ld	r24, Z
    121c:	87 7f       	andi	r24, 0xF7	; 247
    121e:	8c 93       	st	X, r24
	/* Set the mode if it is other than  normal mode */
		switch(Copy_u8TimerMode)
    1220:	8a 81       	ldd	r24, Y+2	; 0x02
    1222:	28 2f       	mov	r18, r24
    1224:	30 e0       	ldi	r19, 0x00	; 0
    1226:	3f 83       	std	Y+7, r19	; 0x07
    1228:	2e 83       	std	Y+6, r18	; 0x06
    122a:	8e 81       	ldd	r24, Y+6	; 0x06
    122c:	9f 81       	ldd	r25, Y+7	; 0x07
    122e:	82 30       	cpi	r24, 0x02	; 2
    1230:	91 05       	cpc	r25, r1
    1232:	91 f0       	breq	.+36     	; 0x1258 <Timer_8bit_vid_Init+0x76>
    1234:	2e 81       	ldd	r18, Y+6	; 0x06
    1236:	3f 81       	ldd	r19, Y+7	; 0x07
    1238:	23 30       	cpi	r18, 0x03	; 3
    123a:	31 05       	cpc	r19, r1
    123c:	a9 f0       	breq	.+42     	; 0x1268 <Timer_8bit_vid_Init+0x86>
    123e:	8e 81       	ldd	r24, Y+6	; 0x06
    1240:	9f 81       	ldd	r25, Y+7	; 0x07
    1242:	81 30       	cpi	r24, 0x01	; 1
    1244:	91 05       	cpc	r25, r1
    1246:	f1 f4       	brne	.+60     	; 0x1284 <Timer_8bit_vid_Init+0xa2>
		{
			case PWM_Phase_Correct:
				SET_BIT(TCCR0,TCCR0_WGM00_PIN);
    1248:	a3 e5       	ldi	r26, 0x53	; 83
    124a:	b0 e0       	ldi	r27, 0x00	; 0
    124c:	e3 e5       	ldi	r30, 0x53	; 83
    124e:	f0 e0       	ldi	r31, 0x00	; 0
    1250:	80 81       	ld	r24, Z
    1252:	80 64       	ori	r24, 0x40	; 64
    1254:	8c 93       	st	X, r24
    1256:	16 c0       	rjmp	.+44     	; 0x1284 <Timer_8bit_vid_Init+0xa2>
				break;
			case CTC:
				SET_BIT(TCCR0,TCCR0_WGM01_PIN);
    1258:	a3 e5       	ldi	r26, 0x53	; 83
    125a:	b0 e0       	ldi	r27, 0x00	; 0
    125c:	e3 e5       	ldi	r30, 0x53	; 83
    125e:	f0 e0       	ldi	r31, 0x00	; 0
    1260:	80 81       	ld	r24, Z
    1262:	88 60       	ori	r24, 0x08	; 8
    1264:	8c 93       	st	X, r24
    1266:	0e c0       	rjmp	.+28     	; 0x1284 <Timer_8bit_vid_Init+0xa2>
				break;
			case Fast_PWM:
				SET_BIT(TCCR0,TCCR0_WGM00_PIN);
    1268:	a3 e5       	ldi	r26, 0x53	; 83
    126a:	b0 e0       	ldi	r27, 0x00	; 0
    126c:	e3 e5       	ldi	r30, 0x53	; 83
    126e:	f0 e0       	ldi	r31, 0x00	; 0
    1270:	80 81       	ld	r24, Z
    1272:	80 64       	ori	r24, 0x40	; 64
    1274:	8c 93       	st	X, r24
				SET_BIT(TCCR0,TCCR0_WGM01_PIN);
    1276:	a3 e5       	ldi	r26, 0x53	; 83
    1278:	b0 e0       	ldi	r27, 0x00	; 0
    127a:	e3 e5       	ldi	r30, 0x53	; 83
    127c:	f0 e0       	ldi	r31, 0x00	; 0
    127e:	80 81       	ld	r24, Z
    1280:	88 60       	ori	r24, 0x08	; 8
    1282:	8c 93       	st	X, r24
				break;
		}
	/* Set Compare Output Mode */
	/*  clear the Compare Output mode setup bits at first: make them on normal mode by default */
	CLEAR_BIT(TCCR0,TCCR0_COM00_PIN);
    1284:	a3 e5       	ldi	r26, 0x53	; 83
    1286:	b0 e0       	ldi	r27, 0x00	; 0
    1288:	e3 e5       	ldi	r30, 0x53	; 83
    128a:	f0 e0       	ldi	r31, 0x00	; 0
    128c:	80 81       	ld	r24, Z
    128e:	8f 7e       	andi	r24, 0xEF	; 239
    1290:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR0,TCCR0_COM01_PIN);
    1292:	a3 e5       	ldi	r26, 0x53	; 83
    1294:	b0 e0       	ldi	r27, 0x00	; 0
    1296:	e3 e5       	ldi	r30, 0x53	; 83
    1298:	f0 e0       	ldi	r31, 0x00	; 0
    129a:	80 81       	ld	r24, Z
    129c:	8f 7d       	andi	r24, 0xDF	; 223
    129e:	8c 93       	st	X, r24
	/* choose the mode if it is not normal mode */
	TCCR0 |= (Copy_u8TimerMode<<TCCR0_COM00_PIN);
    12a0:	a3 e5       	ldi	r26, 0x53	; 83
    12a2:	b0 e0       	ldi	r27, 0x00	; 0
    12a4:	e3 e5       	ldi	r30, 0x53	; 83
    12a6:	f0 e0       	ldi	r31, 0x00	; 0
    12a8:	80 81       	ld	r24, Z
    12aa:	28 2f       	mov	r18, r24
    12ac:	8a 81       	ldd	r24, Y+2	; 0x02
    12ae:	88 2f       	mov	r24, r24
    12b0:	90 e0       	ldi	r25, 0x00	; 0
    12b2:	82 95       	swap	r24
    12b4:	92 95       	swap	r25
    12b6:	90 7f       	andi	r25, 0xF0	; 240
    12b8:	98 27       	eor	r25, r24
    12ba:	80 7f       	andi	r24, 0xF0	; 240
    12bc:	98 27       	eor	r25, r24
    12be:	82 2b       	or	r24, r18
    12c0:	8c 93       	st	X, r24

	/* PRESCALER setting */
	TCCR0 |= PRESCALER;
    12c2:	a3 e5       	ldi	r26, 0x53	; 83
    12c4:	b0 e0       	ldi	r27, 0x00	; 0
    12c6:	e3 e5       	ldi	r30, 0x53	; 83
    12c8:	f0 e0       	ldi	r31, 0x00	; 0
    12ca:	80 81       	ld	r24, Z
    12cc:	81 60       	ori	r24, 0x01	; 1
    12ce:	8c 93       	st	X, r24
    12d0:	6a c0       	rjmp	.+212    	; 0x13a6 <Timer_8bit_vid_Init+0x1c4>
	}
			/* ------------------------------------------------------------------------------------------- */
	else if(Copy_u8TimerName == timer2)
    12d2:	89 81       	ldd	r24, Y+1	; 0x01
    12d4:	84 30       	cpi	r24, 0x04	; 4
    12d6:	09 f0       	breq	.+2      	; 0x12da <Timer_8bit_vid_Init+0xf8>
    12d8:	66 c0       	rjmp	.+204    	; 0x13a6 <Timer_8bit_vid_Init+0x1c4>
	{
		/*  clear the mode setup bits at first: make them on normal mode by default */
		CLEAR_BIT(TCCR2,TCCR2_WGM20_PIN);
    12da:	a5 e4       	ldi	r26, 0x45	; 69
    12dc:	b0 e0       	ldi	r27, 0x00	; 0
    12de:	e5 e4       	ldi	r30, 0x45	; 69
    12e0:	f0 e0       	ldi	r31, 0x00	; 0
    12e2:	80 81       	ld	r24, Z
    12e4:	8f 7b       	andi	r24, 0xBF	; 191
    12e6:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR2,TCCR2_WGM21_PIN);
    12e8:	a5 e4       	ldi	r26, 0x45	; 69
    12ea:	b0 e0       	ldi	r27, 0x00	; 0
    12ec:	e5 e4       	ldi	r30, 0x45	; 69
    12ee:	f0 e0       	ldi	r31, 0x00	; 0
    12f0:	80 81       	ld	r24, Z
    12f2:	87 7f       	andi	r24, 0xF7	; 247
    12f4:	8c 93       	st	X, r24
		/* Set the mode if it is other than  normal mode */
		switch(Copy_u8TimerMode)
    12f6:	8a 81       	ldd	r24, Y+2	; 0x02
    12f8:	28 2f       	mov	r18, r24
    12fa:	30 e0       	ldi	r19, 0x00	; 0
    12fc:	3d 83       	std	Y+5, r19	; 0x05
    12fe:	2c 83       	std	Y+4, r18	; 0x04
    1300:	8c 81       	ldd	r24, Y+4	; 0x04
    1302:	9d 81       	ldd	r25, Y+5	; 0x05
    1304:	82 30       	cpi	r24, 0x02	; 2
    1306:	91 05       	cpc	r25, r1
    1308:	91 f0       	breq	.+36     	; 0x132e <Timer_8bit_vid_Init+0x14c>
    130a:	2c 81       	ldd	r18, Y+4	; 0x04
    130c:	3d 81       	ldd	r19, Y+5	; 0x05
    130e:	23 30       	cpi	r18, 0x03	; 3
    1310:	31 05       	cpc	r19, r1
    1312:	a9 f0       	breq	.+42     	; 0x133e <Timer_8bit_vid_Init+0x15c>
    1314:	8c 81       	ldd	r24, Y+4	; 0x04
    1316:	9d 81       	ldd	r25, Y+5	; 0x05
    1318:	81 30       	cpi	r24, 0x01	; 1
    131a:	91 05       	cpc	r25, r1
    131c:	f1 f4       	brne	.+60     	; 0x135a <Timer_8bit_vid_Init+0x178>
		{
			case PWM_Phase_Correct:
				SET_BIT(TCCR2,TCCR2_WGM20_PIN);
    131e:	a5 e4       	ldi	r26, 0x45	; 69
    1320:	b0 e0       	ldi	r27, 0x00	; 0
    1322:	e5 e4       	ldi	r30, 0x45	; 69
    1324:	f0 e0       	ldi	r31, 0x00	; 0
    1326:	80 81       	ld	r24, Z
    1328:	80 64       	ori	r24, 0x40	; 64
    132a:	8c 93       	st	X, r24
    132c:	16 c0       	rjmp	.+44     	; 0x135a <Timer_8bit_vid_Init+0x178>
				break;
			case CTC:
				SET_BIT(TCCR2,TCCR2_WGM21_PIN);
    132e:	a5 e4       	ldi	r26, 0x45	; 69
    1330:	b0 e0       	ldi	r27, 0x00	; 0
    1332:	e5 e4       	ldi	r30, 0x45	; 69
    1334:	f0 e0       	ldi	r31, 0x00	; 0
    1336:	80 81       	ld	r24, Z
    1338:	88 60       	ori	r24, 0x08	; 8
    133a:	8c 93       	st	X, r24
    133c:	0e c0       	rjmp	.+28     	; 0x135a <Timer_8bit_vid_Init+0x178>
				break;
			case Fast_PWM:
				SET_BIT(TCCR2,TCCR2_WGM20_PIN);
    133e:	a5 e4       	ldi	r26, 0x45	; 69
    1340:	b0 e0       	ldi	r27, 0x00	; 0
    1342:	e5 e4       	ldi	r30, 0x45	; 69
    1344:	f0 e0       	ldi	r31, 0x00	; 0
    1346:	80 81       	ld	r24, Z
    1348:	80 64       	ori	r24, 0x40	; 64
    134a:	8c 93       	st	X, r24
				SET_BIT(TCCR2,TCCR2_WGM21_PIN);
    134c:	a5 e4       	ldi	r26, 0x45	; 69
    134e:	b0 e0       	ldi	r27, 0x00	; 0
    1350:	e5 e4       	ldi	r30, 0x45	; 69
    1352:	f0 e0       	ldi	r31, 0x00	; 0
    1354:	80 81       	ld	r24, Z
    1356:	88 60       	ori	r24, 0x08	; 8
    1358:	8c 93       	st	X, r24
				break;
				}
	/* Set Compare Output Mode */
	/*  clear the Compare Output mode setup bits at first: make them on normal mode by default */
	CLEAR_BIT(TCCR2,TCCR2_COM20_PIN);
    135a:	a5 e4       	ldi	r26, 0x45	; 69
    135c:	b0 e0       	ldi	r27, 0x00	; 0
    135e:	e5 e4       	ldi	r30, 0x45	; 69
    1360:	f0 e0       	ldi	r31, 0x00	; 0
    1362:	80 81       	ld	r24, Z
    1364:	8f 7e       	andi	r24, 0xEF	; 239
    1366:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR2,TCCR2_COM21_PIN);
    1368:	a5 e4       	ldi	r26, 0x45	; 69
    136a:	b0 e0       	ldi	r27, 0x00	; 0
    136c:	e5 e4       	ldi	r30, 0x45	; 69
    136e:	f0 e0       	ldi	r31, 0x00	; 0
    1370:	80 81       	ld	r24, Z
    1372:	8f 7d       	andi	r24, 0xDF	; 223
    1374:	8c 93       	st	X, r24
	/* choose the mode if it is not normal mode */
	TCCR2 |= (Copy_u8TimerMode<<TCCR2_COM20_PIN);
    1376:	a5 e4       	ldi	r26, 0x45	; 69
    1378:	b0 e0       	ldi	r27, 0x00	; 0
    137a:	e5 e4       	ldi	r30, 0x45	; 69
    137c:	f0 e0       	ldi	r31, 0x00	; 0
    137e:	80 81       	ld	r24, Z
    1380:	28 2f       	mov	r18, r24
    1382:	8a 81       	ldd	r24, Y+2	; 0x02
    1384:	88 2f       	mov	r24, r24
    1386:	90 e0       	ldi	r25, 0x00	; 0
    1388:	82 95       	swap	r24
    138a:	92 95       	swap	r25
    138c:	90 7f       	andi	r25, 0xF0	; 240
    138e:	98 27       	eor	r25, r24
    1390:	80 7f       	andi	r24, 0xF0	; 240
    1392:	98 27       	eor	r25, r24
    1394:	82 2b       	or	r24, r18
    1396:	8c 93       	st	X, r24

	/* PRESCALER setting */
	TCCR2 |= PRESCALER;
    1398:	a5 e4       	ldi	r26, 0x45	; 69
    139a:	b0 e0       	ldi	r27, 0x00	; 0
    139c:	e5 e4       	ldi	r30, 0x45	; 69
    139e:	f0 e0       	ldi	r31, 0x00	; 0
    13a0:	80 81       	ld	r24, Z
    13a2:	81 60       	ori	r24, 0x01	; 1
    13a4:	8c 93       	st	X, r24
	}

}
    13a6:	27 96       	adiw	r28, 0x07	; 7
    13a8:	0f b6       	in	r0, 0x3f	; 63
    13aa:	f8 94       	cli
    13ac:	de bf       	out	0x3e, r29	; 62
    13ae:	0f be       	out	0x3f, r0	; 63
    13b0:	cd bf       	out	0x3d, r28	; 61
    13b2:	cf 91       	pop	r28
    13b4:	df 91       	pop	r29
    13b6:	08 95       	ret

000013b8 <Timer_vid_Write_u8_OCR>:

/* this function enables us to write on OCR of timer 0 or 2 */
void Timer_vid_Write_u8_OCR(u8 Copy_u8TimerName, u8 Copy_u8_OCR_Value)
{
    13b8:	df 93       	push	r29
    13ba:	cf 93       	push	r28
    13bc:	00 d0       	rcall	.+0      	; 0x13be <Timer_vid_Write_u8_OCR+0x6>
    13be:	cd b7       	in	r28, 0x3d	; 61
    13c0:	de b7       	in	r29, 0x3e	; 62
    13c2:	89 83       	std	Y+1, r24	; 0x01
    13c4:	6a 83       	std	Y+2, r22	; 0x02
	if(Copy_u8TimerName == timer0)
    13c6:	89 81       	ldd	r24, Y+1	; 0x01
    13c8:	82 30       	cpi	r24, 0x02	; 2
    13ca:	29 f4       	brne	.+10     	; 0x13d6 <Timer_vid_Write_u8_OCR+0x1e>
		{
			OCR0 = Copy_u8_OCR_Value ;
    13cc:	ec e5       	ldi	r30, 0x5C	; 92
    13ce:	f0 e0       	ldi	r31, 0x00	; 0
    13d0:	8a 81       	ldd	r24, Y+2	; 0x02
    13d2:	80 83       	st	Z, r24
    13d4:	07 c0       	rjmp	.+14     	; 0x13e4 <Timer_vid_Write_u8_OCR+0x2c>
		}
	else if(Copy_u8TimerName == timer2)
    13d6:	89 81       	ldd	r24, Y+1	; 0x01
    13d8:	84 30       	cpi	r24, 0x04	; 4
    13da:	21 f4       	brne	.+8      	; 0x13e4 <Timer_vid_Write_u8_OCR+0x2c>
		{
			OCR2 = Copy_u8_OCR_Value ;
    13dc:	e3 e4       	ldi	r30, 0x43	; 67
    13de:	f0 e0       	ldi	r31, 0x00	; 0
    13e0:	8a 81       	ldd	r24, Y+2	; 0x02
    13e2:	80 83       	st	Z, r24
		}
}
    13e4:	0f 90       	pop	r0
    13e6:	0f 90       	pop	r0
    13e8:	cf 91       	pop	r28
    13ea:	df 91       	pop	r29
    13ec:	08 95       	ret

000013ee <Timer8bit_void_NonInveting_DutyCycle>:
/* function to write duty cycle of either timer 0 or 2 in NON-inverting mode */
void Timer8bit_void_NonInveting_DutyCycle(u8 Copy_u8TimerName, u8 Copy_u8_DutyCycle)
{
    13ee:	0f 93       	push	r16
    13f0:	1f 93       	push	r17
    13f2:	df 93       	push	r29
    13f4:	cf 93       	push	r28
    13f6:	00 d0       	rcall	.+0      	; 0x13f8 <Timer8bit_void_NonInveting_DutyCycle+0xa>
    13f8:	cd b7       	in	r28, 0x3d	; 61
    13fa:	de b7       	in	r29, 0x3e	; 62
    13fc:	89 83       	std	Y+1, r24	; 0x01
    13fe:	6a 83       	std	Y+2, r22	; 0x02
	if(Copy_u8TimerName == timer0)
    1400:	89 81       	ldd	r24, Y+1	; 0x01
    1402:	82 30       	cpi	r24, 0x02	; 2
    1404:	c1 f4       	brne	.+48     	; 0x1436 <Timer8bit_void_NonInveting_DutyCycle+0x48>
			{
				OCR0 = (256UL*Copy_u8_DutyCycle)/100;
    1406:	0c e5       	ldi	r16, 0x5C	; 92
    1408:	10 e0       	ldi	r17, 0x00	; 0
    140a:	8a 81       	ldd	r24, Y+2	; 0x02
    140c:	88 2f       	mov	r24, r24
    140e:	90 e0       	ldi	r25, 0x00	; 0
    1410:	a0 e0       	ldi	r26, 0x00	; 0
    1412:	b0 e0       	ldi	r27, 0x00	; 0
    1414:	ba 2f       	mov	r27, r26
    1416:	a9 2f       	mov	r26, r25
    1418:	98 2f       	mov	r25, r24
    141a:	88 27       	eor	r24, r24
    141c:	24 e6       	ldi	r18, 0x64	; 100
    141e:	30 e0       	ldi	r19, 0x00	; 0
    1420:	40 e0       	ldi	r20, 0x00	; 0
    1422:	50 e0       	ldi	r21, 0x00	; 0
    1424:	bc 01       	movw	r22, r24
    1426:	cd 01       	movw	r24, r26
    1428:	0e 94 eb 1f 	call	0x3fd6	; 0x3fd6 <__udivmodsi4>
    142c:	da 01       	movw	r26, r20
    142e:	c9 01       	movw	r24, r18
    1430:	f8 01       	movw	r30, r16
    1432:	80 83       	st	Z, r24
    1434:	1a c0       	rjmp	.+52     	; 0x146a <Timer8bit_void_NonInveting_DutyCycle+0x7c>
			}
	else if(Copy_u8TimerName == timer2)
    1436:	89 81       	ldd	r24, Y+1	; 0x01
    1438:	84 30       	cpi	r24, 0x04	; 4
    143a:	b9 f4       	brne	.+46     	; 0x146a <Timer8bit_void_NonInveting_DutyCycle+0x7c>
			{
				OCR2 = (256UL*Copy_u8_DutyCycle)/100;
    143c:	03 e4       	ldi	r16, 0x43	; 67
    143e:	10 e0       	ldi	r17, 0x00	; 0
    1440:	8a 81       	ldd	r24, Y+2	; 0x02
    1442:	88 2f       	mov	r24, r24
    1444:	90 e0       	ldi	r25, 0x00	; 0
    1446:	a0 e0       	ldi	r26, 0x00	; 0
    1448:	b0 e0       	ldi	r27, 0x00	; 0
    144a:	ba 2f       	mov	r27, r26
    144c:	a9 2f       	mov	r26, r25
    144e:	98 2f       	mov	r25, r24
    1450:	88 27       	eor	r24, r24
    1452:	24 e6       	ldi	r18, 0x64	; 100
    1454:	30 e0       	ldi	r19, 0x00	; 0
    1456:	40 e0       	ldi	r20, 0x00	; 0
    1458:	50 e0       	ldi	r21, 0x00	; 0
    145a:	bc 01       	movw	r22, r24
    145c:	cd 01       	movw	r24, r26
    145e:	0e 94 eb 1f 	call	0x3fd6	; 0x3fd6 <__udivmodsi4>
    1462:	da 01       	movw	r26, r20
    1464:	c9 01       	movw	r24, r18
    1466:	f8 01       	movw	r30, r16
    1468:	80 83       	st	Z, r24
			}
}
    146a:	0f 90       	pop	r0
    146c:	0f 90       	pop	r0
    146e:	cf 91       	pop	r28
    1470:	df 91       	pop	r29
    1472:	1f 91       	pop	r17
    1474:	0f 91       	pop	r16
    1476:	08 95       	ret

00001478 <Timer8bit_void_Inveting_DutyCycle>:
/* function to write duty cycle of either timer 0 or 2 in inverting mode */
void Timer8bit_void_Inveting_DutyCycle(u8 Copy_u8TimerName, u8 Copy_u8_DutyCycle)
{
    1478:	0f 93       	push	r16
    147a:	1f 93       	push	r17
    147c:	df 93       	push	r29
    147e:	cf 93       	push	r28
    1480:	00 d0       	rcall	.+0      	; 0x1482 <Timer8bit_void_Inveting_DutyCycle+0xa>
    1482:	cd b7       	in	r28, 0x3d	; 61
    1484:	de b7       	in	r29, 0x3e	; 62
    1486:	89 83       	std	Y+1, r24	; 0x01
    1488:	6a 83       	std	Y+2, r22	; 0x02
	if(Copy_u8TimerName == timer0)
    148a:	89 81       	ldd	r24, Y+1	; 0x01
    148c:	82 30       	cpi	r24, 0x02	; 2
    148e:	c9 f4       	brne	.+50     	; 0x14c2 <Timer8bit_void_Inveting_DutyCycle+0x4a>
			{
				OCR0 = (256UL-(256UL*Copy_u8_DutyCycle)/100);
    1490:	0c e5       	ldi	r16, 0x5C	; 92
    1492:	10 e0       	ldi	r17, 0x00	; 0
    1494:	8a 81       	ldd	r24, Y+2	; 0x02
    1496:	88 2f       	mov	r24, r24
    1498:	90 e0       	ldi	r25, 0x00	; 0
    149a:	a0 e0       	ldi	r26, 0x00	; 0
    149c:	b0 e0       	ldi	r27, 0x00	; 0
    149e:	ba 2f       	mov	r27, r26
    14a0:	a9 2f       	mov	r26, r25
    14a2:	98 2f       	mov	r25, r24
    14a4:	88 27       	eor	r24, r24
    14a6:	24 e6       	ldi	r18, 0x64	; 100
    14a8:	30 e0       	ldi	r19, 0x00	; 0
    14aa:	40 e0       	ldi	r20, 0x00	; 0
    14ac:	50 e0       	ldi	r21, 0x00	; 0
    14ae:	bc 01       	movw	r22, r24
    14b0:	cd 01       	movw	r24, r26
    14b2:	0e 94 eb 1f 	call	0x3fd6	; 0x3fd6 <__udivmodsi4>
    14b6:	da 01       	movw	r26, r20
    14b8:	c9 01       	movw	r24, r18
    14ba:	81 95       	neg	r24
    14bc:	f8 01       	movw	r30, r16
    14be:	80 83       	st	Z, r24
    14c0:	1b c0       	rjmp	.+54     	; 0x14f8 <Timer8bit_void_Inveting_DutyCycle+0x80>
			}
	else if(Copy_u8TimerName == timer2)
    14c2:	89 81       	ldd	r24, Y+1	; 0x01
    14c4:	84 30       	cpi	r24, 0x04	; 4
    14c6:	c1 f4       	brne	.+48     	; 0x14f8 <Timer8bit_void_Inveting_DutyCycle+0x80>
			{
				OCR2 = (256UL-(256UL*Copy_u8_DutyCycle)/100);
    14c8:	03 e4       	ldi	r16, 0x43	; 67
    14ca:	10 e0       	ldi	r17, 0x00	; 0
    14cc:	8a 81       	ldd	r24, Y+2	; 0x02
    14ce:	88 2f       	mov	r24, r24
    14d0:	90 e0       	ldi	r25, 0x00	; 0
    14d2:	a0 e0       	ldi	r26, 0x00	; 0
    14d4:	b0 e0       	ldi	r27, 0x00	; 0
    14d6:	ba 2f       	mov	r27, r26
    14d8:	a9 2f       	mov	r26, r25
    14da:	98 2f       	mov	r25, r24
    14dc:	88 27       	eor	r24, r24
    14de:	24 e6       	ldi	r18, 0x64	; 100
    14e0:	30 e0       	ldi	r19, 0x00	; 0
    14e2:	40 e0       	ldi	r20, 0x00	; 0
    14e4:	50 e0       	ldi	r21, 0x00	; 0
    14e6:	bc 01       	movw	r22, r24
    14e8:	cd 01       	movw	r24, r26
    14ea:	0e 94 eb 1f 	call	0x3fd6	; 0x3fd6 <__udivmodsi4>
    14ee:	da 01       	movw	r26, r20
    14f0:	c9 01       	movw	r24, r18
    14f2:	81 95       	neg	r24
    14f4:	f8 01       	movw	r30, r16
    14f6:	80 83       	st	Z, r24
			}
}
    14f8:	0f 90       	pop	r0
    14fa:	0f 90       	pop	r0
    14fc:	cf 91       	pop	r28
    14fe:	df 91       	pop	r29
    1500:	1f 91       	pop	r17
    1502:	0f 91       	pop	r16
    1504:	08 95       	ret

00001506 <Timer1_16bit_vid_Init>:
/*****************************************************************************************************************************************************************/
/* this function is used to initialize timer 1 , set the wave generation mode, and  the on compare mode */
void Timer1_16bit_vid_Init(u8 Copy_u8TimerMode, u8 Copy_u8Timer_OnCompare_Mode)
{
    1506:	df 93       	push	r29
    1508:	cf 93       	push	r28
    150a:	00 d0       	rcall	.+0      	; 0x150c <Timer1_16bit_vid_Init+0x6>
    150c:	00 d0       	rcall	.+0      	; 0x150e <Timer1_16bit_vid_Init+0x8>
    150e:	cd b7       	in	r28, 0x3d	; 61
    1510:	de b7       	in	r29, 0x3e	; 62
    1512:	89 83       	std	Y+1, r24	; 0x01
    1514:	6a 83       	std	Y+2, r22	; 0x02
	/*  clear the mode setup bits at first: make them on normal mode by default */
	CLEAR_BIT(TCCR1A,TCCR1A_WGM10_PIN);
    1516:	af e4       	ldi	r26, 0x4F	; 79
    1518:	b0 e0       	ldi	r27, 0x00	; 0
    151a:	ef e4       	ldi	r30, 0x4F	; 79
    151c:	f0 e0       	ldi	r31, 0x00	; 0
    151e:	80 81       	ld	r24, Z
    1520:	8e 7f       	andi	r24, 0xFE	; 254
    1522:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR1A,TCCR1A_WGM11_PIN);
    1524:	af e4       	ldi	r26, 0x4F	; 79
    1526:	b0 e0       	ldi	r27, 0x00	; 0
    1528:	ef e4       	ldi	r30, 0x4F	; 79
    152a:	f0 e0       	ldi	r31, 0x00	; 0
    152c:	80 81       	ld	r24, Z
    152e:	8d 7f       	andi	r24, 0xFD	; 253
    1530:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR1B,TCCR1B_WGM12_PIN);
    1532:	ae e4       	ldi	r26, 0x4E	; 78
    1534:	b0 e0       	ldi	r27, 0x00	; 0
    1536:	ee e4       	ldi	r30, 0x4E	; 78
    1538:	f0 e0       	ldi	r31, 0x00	; 0
    153a:	80 81       	ld	r24, Z
    153c:	87 7f       	andi	r24, 0xF7	; 247
    153e:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR1B,TCCR1B_WGM13_PIN);
    1540:	ae e4       	ldi	r26, 0x4E	; 78
    1542:	b0 e0       	ldi	r27, 0x00	; 0
    1544:	ee e4       	ldi	r30, 0x4E	; 78
    1546:	f0 e0       	ldi	r31, 0x00	; 0
    1548:	80 81       	ld	r24, Z
    154a:	8f 7e       	andi	r24, 0xEF	; 239
    154c:	8c 93       	st	X, r24
	switch(Copy_u8TimerMode)
    154e:	89 81       	ldd	r24, Y+1	; 0x01
    1550:	28 2f       	mov	r18, r24
    1552:	30 e0       	ldi	r19, 0x00	; 0
    1554:	3c 83       	std	Y+4, r19	; 0x04
    1556:	2b 83       	std	Y+3, r18	; 0x03
    1558:	8b 81       	ldd	r24, Y+3	; 0x03
    155a:	9c 81       	ldd	r25, Y+4	; 0x04
    155c:	87 30       	cpi	r24, 0x07	; 7
    155e:	91 05       	cpc	r25, r1
    1560:	09 f4       	brne	.+2      	; 0x1564 <Timer1_16bit_vid_Init+0x5e>
    1562:	96 c0       	rjmp	.+300    	; 0x1690 <Timer1_16bit_vid_Init+0x18a>
    1564:	2b 81       	ldd	r18, Y+3	; 0x03
    1566:	3c 81       	ldd	r19, Y+4	; 0x04
    1568:	28 30       	cpi	r18, 0x08	; 8
    156a:	31 05       	cpc	r19, r1
    156c:	2c f5       	brge	.+74     	; 0x15b8 <Timer1_16bit_vid_Init+0xb2>
    156e:	8b 81       	ldd	r24, Y+3	; 0x03
    1570:	9c 81       	ldd	r25, Y+4	; 0x04
    1572:	83 30       	cpi	r24, 0x03	; 3
    1574:	91 05       	cpc	r25, r1
    1576:	09 f4       	brne	.+2      	; 0x157a <Timer1_16bit_vid_Init+0x74>
    1578:	5c c0       	rjmp	.+184    	; 0x1632 <Timer1_16bit_vid_Init+0x12c>
    157a:	2b 81       	ldd	r18, Y+3	; 0x03
    157c:	3c 81       	ldd	r19, Y+4	; 0x04
    157e:	24 30       	cpi	r18, 0x04	; 4
    1580:	31 05       	cpc	r19, r1
    1582:	6c f4       	brge	.+26     	; 0x159e <Timer1_16bit_vid_Init+0x98>
    1584:	8b 81       	ldd	r24, Y+3	; 0x03
    1586:	9c 81       	ldd	r25, Y+4	; 0x04
    1588:	81 30       	cpi	r24, 0x01	; 1
    158a:	91 05       	cpc	r25, r1
    158c:	09 f4       	brne	.+2      	; 0x1590 <Timer1_16bit_vid_Init+0x8a>
    158e:	3f c0       	rjmp	.+126    	; 0x160e <Timer1_16bit_vid_Init+0x108>
    1590:	2b 81       	ldd	r18, Y+3	; 0x03
    1592:	3c 81       	ldd	r19, Y+4	; 0x04
    1594:	22 30       	cpi	r18, 0x02	; 2
    1596:	31 05       	cpc	r19, r1
    1598:	09 f4       	brne	.+2      	; 0x159c <Timer1_16bit_vid_Init+0x96>
    159a:	42 c0       	rjmp	.+132    	; 0x1620 <Timer1_16bit_vid_Init+0x11a>
    159c:	e2 c0       	rjmp	.+452    	; 0x1762 <Timer1_16bit_vid_Init+0x25c>
    159e:	8b 81       	ldd	r24, Y+3	; 0x03
    15a0:	9c 81       	ldd	r25, Y+4	; 0x04
    15a2:	85 30       	cpi	r24, 0x05	; 5
    15a4:	91 05       	cpc	r25, r1
    15a6:	09 f4       	brne	.+2      	; 0x15aa <Timer1_16bit_vid_Init+0xa4>
    15a8:	55 c0       	rjmp	.+170    	; 0x1654 <Timer1_16bit_vid_Init+0x14e>
    15aa:	2b 81       	ldd	r18, Y+3	; 0x03
    15ac:	3c 81       	ldd	r19, Y+4	; 0x04
    15ae:	26 30       	cpi	r18, 0x06	; 6
    15b0:	31 05       	cpc	r19, r1
    15b2:	0c f0       	brlt	.+2      	; 0x15b6 <Timer1_16bit_vid_Init+0xb0>
    15b4:	5e c0       	rjmp	.+188    	; 0x1672 <Timer1_16bit_vid_Init+0x16c>
    15b6:	46 c0       	rjmp	.+140    	; 0x1644 <Timer1_16bit_vid_Init+0x13e>
    15b8:	8b 81       	ldd	r24, Y+3	; 0x03
    15ba:	9c 81       	ldd	r25, Y+4	; 0x04
    15bc:	8b 30       	cpi	r24, 0x0B	; 11
    15be:	91 05       	cpc	r25, r1
    15c0:	09 f4       	brne	.+2      	; 0x15c4 <Timer1_16bit_vid_Init+0xbe>
    15c2:	9b c0       	rjmp	.+310    	; 0x16fa <Timer1_16bit_vid_Init+0x1f4>
    15c4:	2b 81       	ldd	r18, Y+3	; 0x03
    15c6:	3c 81       	ldd	r19, Y+4	; 0x04
    15c8:	2c 30       	cpi	r18, 0x0C	; 12
    15ca:	31 05       	cpc	r19, r1
    15cc:	6c f4       	brge	.+26     	; 0x15e8 <Timer1_16bit_vid_Init+0xe2>
    15ce:	8b 81       	ldd	r24, Y+3	; 0x03
    15d0:	9c 81       	ldd	r25, Y+4	; 0x04
    15d2:	89 30       	cpi	r24, 0x09	; 9
    15d4:	91 05       	cpc	r25, r1
    15d6:	09 f4       	brne	.+2      	; 0x15da <Timer1_16bit_vid_Init+0xd4>
    15d8:	72 c0       	rjmp	.+228    	; 0x16be <Timer1_16bit_vid_Init+0x1b8>
    15da:	2b 81       	ldd	r18, Y+3	; 0x03
    15dc:	3c 81       	ldd	r19, Y+4	; 0x04
    15de:	2a 30       	cpi	r18, 0x0A	; 10
    15e0:	31 05       	cpc	r19, r1
    15e2:	0c f0       	brlt	.+2      	; 0x15e6 <Timer1_16bit_vid_Init+0xe0>
    15e4:	7b c0       	rjmp	.+246    	; 0x16dc <Timer1_16bit_vid_Init+0x1d6>
    15e6:	63 c0       	rjmp	.+198    	; 0x16ae <Timer1_16bit_vid_Init+0x1a8>
    15e8:	8b 81       	ldd	r24, Y+3	; 0x03
    15ea:	9c 81       	ldd	r25, Y+4	; 0x04
    15ec:	8d 30       	cpi	r24, 0x0D	; 13
    15ee:	91 05       	cpc	r25, r1
    15f0:	09 f4       	brne	.+2      	; 0x15f4 <Timer1_16bit_vid_Init+0xee>
    15f2:	9a c0       	rjmp	.+308    	; 0x1728 <Timer1_16bit_vid_Init+0x222>
    15f4:	2b 81       	ldd	r18, Y+3	; 0x03
    15f6:	3c 81       	ldd	r19, Y+4	; 0x04
    15f8:	2d 30       	cpi	r18, 0x0D	; 13
    15fa:	31 05       	cpc	r19, r1
    15fc:	0c f4       	brge	.+2      	; 0x1600 <Timer1_16bit_vid_Init+0xfa>
    15fe:	8c c0       	rjmp	.+280    	; 0x1718 <Timer1_16bit_vid_Init+0x212>
    1600:	8b 81       	ldd	r24, Y+3	; 0x03
    1602:	9c 81       	ldd	r25, Y+4	; 0x04
    1604:	8e 30       	cpi	r24, 0x0E	; 14
    1606:	91 05       	cpc	r25, r1
    1608:	09 f4       	brne	.+2      	; 0x160c <Timer1_16bit_vid_Init+0x106>
    160a:	9d c0       	rjmp	.+314    	; 0x1746 <Timer1_16bit_vid_Init+0x240>
    160c:	aa c0       	rjmp	.+340    	; 0x1762 <Timer1_16bit_vid_Init+0x25c>
	{
		case PWM_Phase_Correct_8_Bit:
			TCCR1A |= (Copy_u8TimerMode <<TCCR1A_WGM10_PIN);
    160e:	af e4       	ldi	r26, 0x4F	; 79
    1610:	b0 e0       	ldi	r27, 0x00	; 0
    1612:	ef e4       	ldi	r30, 0x4F	; 79
    1614:	f0 e0       	ldi	r31, 0x00	; 0
    1616:	90 81       	ld	r25, Z
    1618:	89 81       	ldd	r24, Y+1	; 0x01
    161a:	89 2b       	or	r24, r25
    161c:	8c 93       	st	X, r24
    161e:	a1 c0       	rjmp	.+322    	; 0x1762 <Timer1_16bit_vid_Init+0x25c>
			break;
		case PWM_Phase_Correct_9_Bit:
			TCCR1A |= (Copy_u8TimerMode <<TCCR1A_WGM10_PIN);
    1620:	af e4       	ldi	r26, 0x4F	; 79
    1622:	b0 e0       	ldi	r27, 0x00	; 0
    1624:	ef e4       	ldi	r30, 0x4F	; 79
    1626:	f0 e0       	ldi	r31, 0x00	; 0
    1628:	90 81       	ld	r25, Z
    162a:	89 81       	ldd	r24, Y+1	; 0x01
    162c:	89 2b       	or	r24, r25
    162e:	8c 93       	st	X, r24
    1630:	98 c0       	rjmp	.+304    	; 0x1762 <Timer1_16bit_vid_Init+0x25c>
			break;
		case PWM_Phase_Correct_10_Bit:
			TCCR1A |= (Copy_u8TimerMode <<TCCR1A_WGM10_PIN);
    1632:	af e4       	ldi	r26, 0x4F	; 79
    1634:	b0 e0       	ldi	r27, 0x00	; 0
    1636:	ef e4       	ldi	r30, 0x4F	; 79
    1638:	f0 e0       	ldi	r31, 0x00	; 0
    163a:	90 81       	ld	r25, Z
    163c:	89 81       	ldd	r24, Y+1	; 0x01
    163e:	89 2b       	or	r24, r25
    1640:	8c 93       	st	X, r24
    1642:	8f c0       	rjmp	.+286    	; 0x1762 <Timer1_16bit_vid_Init+0x25c>
			break;
		case CTC_OCR_Top:
			SET_BIT(TCCR1B,TCCR1B_WGM12_PIN);
    1644:	ae e4       	ldi	r26, 0x4E	; 78
    1646:	b0 e0       	ldi	r27, 0x00	; 0
    1648:	ee e4       	ldi	r30, 0x4E	; 78
    164a:	f0 e0       	ldi	r31, 0x00	; 0
    164c:	80 81       	ld	r24, Z
    164e:	88 60       	ori	r24, 0x08	; 8
    1650:	8c 93       	st	X, r24
    1652:	87 c0       	rjmp	.+270    	; 0x1762 <Timer1_16bit_vid_Init+0x25c>
			break;
		case Fast_PWM_8_Bit:
			SET_BIT(TCCR1A,TCCR1A_WGM10_PIN);
    1654:	af e4       	ldi	r26, 0x4F	; 79
    1656:	b0 e0       	ldi	r27, 0x00	; 0
    1658:	ef e4       	ldi	r30, 0x4F	; 79
    165a:	f0 e0       	ldi	r31, 0x00	; 0
    165c:	80 81       	ld	r24, Z
    165e:	81 60       	ori	r24, 0x01	; 1
    1660:	8c 93       	st	X, r24
			SET_BIT(TCCR1B,TCCR1B_WGM12_PIN);
    1662:	ae e4       	ldi	r26, 0x4E	; 78
    1664:	b0 e0       	ldi	r27, 0x00	; 0
    1666:	ee e4       	ldi	r30, 0x4E	; 78
    1668:	f0 e0       	ldi	r31, 0x00	; 0
    166a:	80 81       	ld	r24, Z
    166c:	88 60       	ori	r24, 0x08	; 8
    166e:	8c 93       	st	X, r24
    1670:	78 c0       	rjmp	.+240    	; 0x1762 <Timer1_16bit_vid_Init+0x25c>
			break;
		case Fast_PWM_9_Bit:
			SET_BIT(TCCR1A,TCCR1A_WGM11_PIN);
    1672:	af e4       	ldi	r26, 0x4F	; 79
    1674:	b0 e0       	ldi	r27, 0x00	; 0
    1676:	ef e4       	ldi	r30, 0x4F	; 79
    1678:	f0 e0       	ldi	r31, 0x00	; 0
    167a:	80 81       	ld	r24, Z
    167c:	82 60       	ori	r24, 0x02	; 2
    167e:	8c 93       	st	X, r24
			SET_BIT(TCCR1B,TCCR1B_WGM12_PIN);
    1680:	ae e4       	ldi	r26, 0x4E	; 78
    1682:	b0 e0       	ldi	r27, 0x00	; 0
    1684:	ee e4       	ldi	r30, 0x4E	; 78
    1686:	f0 e0       	ldi	r31, 0x00	; 0
    1688:	80 81       	ld	r24, Z
    168a:	88 60       	ori	r24, 0x08	; 8
    168c:	8c 93       	st	X, r24
    168e:	69 c0       	rjmp	.+210    	; 0x1762 <Timer1_16bit_vid_Init+0x25c>
			break;
		case Fast_PWM_10_Bit:
			TCCR1A |= (3 <<TCCR1A_WGM10_PIN);
    1690:	af e4       	ldi	r26, 0x4F	; 79
    1692:	b0 e0       	ldi	r27, 0x00	; 0
    1694:	ef e4       	ldi	r30, 0x4F	; 79
    1696:	f0 e0       	ldi	r31, 0x00	; 0
    1698:	80 81       	ld	r24, Z
    169a:	83 60       	ori	r24, 0x03	; 3
    169c:	8c 93       	st	X, r24
			SET_BIT(TCCR1B,TCCR1B_WGM12_PIN);
    169e:	ae e4       	ldi	r26, 0x4E	; 78
    16a0:	b0 e0       	ldi	r27, 0x00	; 0
    16a2:	ee e4       	ldi	r30, 0x4E	; 78
    16a4:	f0 e0       	ldi	r31, 0x00	; 0
    16a6:	80 81       	ld	r24, Z
    16a8:	88 60       	ori	r24, 0x08	; 8
    16aa:	8c 93       	st	X, r24
    16ac:	5a c0       	rjmp	.+180    	; 0x1762 <Timer1_16bit_vid_Init+0x25c>
			break;
		case PWM_Phase_Frequency_Correct_ICR_Top:
			SET_BIT(TCCR1B,TCCR1B_WGM13_PIN);
    16ae:	ae e4       	ldi	r26, 0x4E	; 78
    16b0:	b0 e0       	ldi	r27, 0x00	; 0
    16b2:	ee e4       	ldi	r30, 0x4E	; 78
    16b4:	f0 e0       	ldi	r31, 0x00	; 0
    16b6:	80 81       	ld	r24, Z
    16b8:	80 61       	ori	r24, 0x10	; 16
    16ba:	8c 93       	st	X, r24
    16bc:	52 c0       	rjmp	.+164    	; 0x1762 <Timer1_16bit_vid_Init+0x25c>
			break;
		case PWM_Phase_Frequency_Correct_OCR_Top:
			SET_BIT(TCCR1A,TCCR1A_WGM10_PIN);
    16be:	af e4       	ldi	r26, 0x4F	; 79
    16c0:	b0 e0       	ldi	r27, 0x00	; 0
    16c2:	ef e4       	ldi	r30, 0x4F	; 79
    16c4:	f0 e0       	ldi	r31, 0x00	; 0
    16c6:	80 81       	ld	r24, Z
    16c8:	81 60       	ori	r24, 0x01	; 1
    16ca:	8c 93       	st	X, r24
			SET_BIT(TCCR1B,TCCR1B_WGM13_PIN);
    16cc:	ae e4       	ldi	r26, 0x4E	; 78
    16ce:	b0 e0       	ldi	r27, 0x00	; 0
    16d0:	ee e4       	ldi	r30, 0x4E	; 78
    16d2:	f0 e0       	ldi	r31, 0x00	; 0
    16d4:	80 81       	ld	r24, Z
    16d6:	80 61       	ori	r24, 0x10	; 16
    16d8:	8c 93       	st	X, r24
    16da:	43 c0       	rjmp	.+134    	; 0x1762 <Timer1_16bit_vid_Init+0x25c>
			break;
		case PWM_Phase_Correct_ICR_Top:
			SET_BIT(TCCR1A,TCCR1A_WGM11_PIN);
    16dc:	af e4       	ldi	r26, 0x4F	; 79
    16de:	b0 e0       	ldi	r27, 0x00	; 0
    16e0:	ef e4       	ldi	r30, 0x4F	; 79
    16e2:	f0 e0       	ldi	r31, 0x00	; 0
    16e4:	80 81       	ld	r24, Z
    16e6:	82 60       	ori	r24, 0x02	; 2
    16e8:	8c 93       	st	X, r24
			SET_BIT(TCCR1B,TCCR1B_WGM13_PIN);
    16ea:	ae e4       	ldi	r26, 0x4E	; 78
    16ec:	b0 e0       	ldi	r27, 0x00	; 0
    16ee:	ee e4       	ldi	r30, 0x4E	; 78
    16f0:	f0 e0       	ldi	r31, 0x00	; 0
    16f2:	80 81       	ld	r24, Z
    16f4:	80 61       	ori	r24, 0x10	; 16
    16f6:	8c 93       	st	X, r24
    16f8:	34 c0       	rjmp	.+104    	; 0x1762 <Timer1_16bit_vid_Init+0x25c>
			break;
		case PWM_Phase_Correct_OCR_Top:
			TCCR1A |= (3 <<TCCR1A_WGM10_PIN);
    16fa:	af e4       	ldi	r26, 0x4F	; 79
    16fc:	b0 e0       	ldi	r27, 0x00	; 0
    16fe:	ef e4       	ldi	r30, 0x4F	; 79
    1700:	f0 e0       	ldi	r31, 0x00	; 0
    1702:	80 81       	ld	r24, Z
    1704:	83 60       	ori	r24, 0x03	; 3
    1706:	8c 93       	st	X, r24
			SET_BIT(TCCR1B,TCCR1B_WGM13_PIN);
    1708:	ae e4       	ldi	r26, 0x4E	; 78
    170a:	b0 e0       	ldi	r27, 0x00	; 0
    170c:	ee e4       	ldi	r30, 0x4E	; 78
    170e:	f0 e0       	ldi	r31, 0x00	; 0
    1710:	80 81       	ld	r24, Z
    1712:	80 61       	ori	r24, 0x10	; 16
    1714:	8c 93       	st	X, r24
    1716:	25 c0       	rjmp	.+74     	; 0x1762 <Timer1_16bit_vid_Init+0x25c>
			break;
		case CTC_ICR_Top:
			TCCR1B |= (3 <<TCCR1B_WGM12_PIN);
    1718:	ae e4       	ldi	r26, 0x4E	; 78
    171a:	b0 e0       	ldi	r27, 0x00	; 0
    171c:	ee e4       	ldi	r30, 0x4E	; 78
    171e:	f0 e0       	ldi	r31, 0x00	; 0
    1720:	80 81       	ld	r24, Z
    1722:	88 61       	ori	r24, 0x18	; 24
    1724:	8c 93       	st	X, r24
    1726:	1d c0       	rjmp	.+58     	; 0x1762 <Timer1_16bit_vid_Init+0x25c>
			break;
		case Fast_PWM_ICR_Top:
			SET_BIT(TCCR1A,TCCR1A_WGM11_PIN);
    1728:	af e4       	ldi	r26, 0x4F	; 79
    172a:	b0 e0       	ldi	r27, 0x00	; 0
    172c:	ef e4       	ldi	r30, 0x4F	; 79
    172e:	f0 e0       	ldi	r31, 0x00	; 0
    1730:	80 81       	ld	r24, Z
    1732:	82 60       	ori	r24, 0x02	; 2
    1734:	8c 93       	st	X, r24
			TCCR1B |= (3 <<TCCR1B_WGM12_PIN);
    1736:	ae e4       	ldi	r26, 0x4E	; 78
    1738:	b0 e0       	ldi	r27, 0x00	; 0
    173a:	ee e4       	ldi	r30, 0x4E	; 78
    173c:	f0 e0       	ldi	r31, 0x00	; 0
    173e:	80 81       	ld	r24, Z
    1740:	88 61       	ori	r24, 0x18	; 24
    1742:	8c 93       	st	X, r24
    1744:	0e c0       	rjmp	.+28     	; 0x1762 <Timer1_16bit_vid_Init+0x25c>
			break;
		case Fast_PWM_OCR_Top:
			TCCR1A |= (3 <<TCCR1A_WGM10_PIN);
    1746:	af e4       	ldi	r26, 0x4F	; 79
    1748:	b0 e0       	ldi	r27, 0x00	; 0
    174a:	ef e4       	ldi	r30, 0x4F	; 79
    174c:	f0 e0       	ldi	r31, 0x00	; 0
    174e:	80 81       	ld	r24, Z
    1750:	83 60       	ori	r24, 0x03	; 3
    1752:	8c 93       	st	X, r24
			TCCR1B |= (3 <<TCCR1B_WGM12_PIN);
    1754:	ae e4       	ldi	r26, 0x4E	; 78
    1756:	b0 e0       	ldi	r27, 0x00	; 0
    1758:	ee e4       	ldi	r30, 0x4E	; 78
    175a:	f0 e0       	ldi	r31, 0x00	; 0
    175c:	80 81       	ld	r24, Z
    175e:	88 61       	ori	r24, 0x18	; 24
    1760:	8c 93       	st	X, r24

			break;
	}
	/* Set Compare Output Mode */
	/*  clear the Compare Output mode setup bits at first: make them on normal mode by default */
	TCCR1A &= 0b00001111;
    1762:	af e4       	ldi	r26, 0x4F	; 79
    1764:	b0 e0       	ldi	r27, 0x00	; 0
    1766:	ef e4       	ldi	r30, 0x4F	; 79
    1768:	f0 e0       	ldi	r31, 0x00	; 0
    176a:	80 81       	ld	r24, Z
    176c:	8f 70       	andi	r24, 0x0F	; 15
    176e:	8c 93       	st	X, r24
	/* Set Compare Output Mode */
	TCCR1A |= (Copy_u8Timer_OnCompare_Mode<<TCCR1A_COM1B0_PIN);
    1770:	af e4       	ldi	r26, 0x4F	; 79
    1772:	b0 e0       	ldi	r27, 0x00	; 0
    1774:	ef e4       	ldi	r30, 0x4F	; 79
    1776:	f0 e0       	ldi	r31, 0x00	; 0
    1778:	80 81       	ld	r24, Z
    177a:	28 2f       	mov	r18, r24
    177c:	8a 81       	ldd	r24, Y+2	; 0x02
    177e:	88 2f       	mov	r24, r24
    1780:	90 e0       	ldi	r25, 0x00	; 0
    1782:	82 95       	swap	r24
    1784:	92 95       	swap	r25
    1786:	90 7f       	andi	r25, 0xF0	; 240
    1788:	98 27       	eor	r25, r24
    178a:	80 7f       	andi	r24, 0xF0	; 240
    178c:	98 27       	eor	r25, r24
    178e:	82 2b       	or	r24, r18
    1790:	8c 93       	st	X, r24

	/* PRESCALER setting */
	TCCR1B |= PRESCALER;    /* configured in Timer_config.h file */
    1792:	ae e4       	ldi	r26, 0x4E	; 78
    1794:	b0 e0       	ldi	r27, 0x00	; 0
    1796:	ee e4       	ldi	r30, 0x4E	; 78
    1798:	f0 e0       	ldi	r31, 0x00	; 0
    179a:	80 81       	ld	r24, Z
    179c:	81 60       	ori	r24, 0x01	; 1
    179e:	8c 93       	st	X, r24

}
    17a0:	0f 90       	pop	r0
    17a2:	0f 90       	pop	r0
    17a4:	0f 90       	pop	r0
    17a6:	0f 90       	pop	r0
    17a8:	cf 91       	pop	r28
    17aa:	df 91       	pop	r29
    17ac:	08 95       	ret

000017ae <Timer1_voidWriteTCTN1>:

void Timer1_voidWriteTCTN1(u16 Copy_u16ValueOfTCTN1 )
{
    17ae:	df 93       	push	r29
    17b0:	cf 93       	push	r28
    17b2:	00 d0       	rcall	.+0      	; 0x17b4 <Timer1_voidWriteTCTN1+0x6>
    17b4:	cd b7       	in	r28, 0x3d	; 61
    17b6:	de b7       	in	r29, 0x3e	; 62
    17b8:	9a 83       	std	Y+2, r25	; 0x02
    17ba:	89 83       	std	Y+1, r24	; 0x01
	TCNT1 = Copy_u16ValueOfTCTN1;
    17bc:	ec e4       	ldi	r30, 0x4C	; 76
    17be:	f0 e0       	ldi	r31, 0x00	; 0
    17c0:	89 81       	ldd	r24, Y+1	; 0x01
    17c2:	9a 81       	ldd	r25, Y+2	; 0x02
    17c4:	91 83       	std	Z+1, r25	; 0x01
    17c6:	80 83       	st	Z, r24
}
    17c8:	0f 90       	pop	r0
    17ca:	0f 90       	pop	r0
    17cc:	cf 91       	pop	r28
    17ce:	df 91       	pop	r29
    17d0:	08 95       	ret

000017d2 <Timer_vid_Write_u16reg>:
/* this function enables us to write on OCR of timer 1 */
void Timer_vid_Write_u16reg(u8 Copy_u8Unit, u16 Copy_u16_Value)
{
    17d2:	df 93       	push	r29
    17d4:	cf 93       	push	r28
    17d6:	00 d0       	rcall	.+0      	; 0x17d8 <Timer_vid_Write_u16reg+0x6>
    17d8:	0f 92       	push	r0
    17da:	cd b7       	in	r28, 0x3d	; 61
    17dc:	de b7       	in	r29, 0x3e	; 62
    17de:	89 83       	std	Y+1, r24	; 0x01
    17e0:	7b 83       	std	Y+3, r23	; 0x03
    17e2:	6a 83       	std	Y+2, r22	; 0x02
	if(Copy_u8Unit == UnitA_OCR)
    17e4:	89 81       	ldd	r24, Y+1	; 0x01
    17e6:	8f 30       	cpi	r24, 0x0F	; 15
    17e8:	39 f4       	brne	.+14     	; 0x17f8 <Timer_vid_Write_u16reg+0x26>
	{
		OCR1A = Copy_u16_Value ;
    17ea:	ea e4       	ldi	r30, 0x4A	; 74
    17ec:	f0 e0       	ldi	r31, 0x00	; 0
    17ee:	8a 81       	ldd	r24, Y+2	; 0x02
    17f0:	9b 81       	ldd	r25, Y+3	; 0x03
    17f2:	91 83       	std	Z+1, r25	; 0x01
    17f4:	80 83       	st	Z, r24
    17f6:	13 c0       	rjmp	.+38     	; 0x181e <Timer_vid_Write_u16reg+0x4c>
	}
	else if(Copy_u8Unit == UnitB_OCR)
    17f8:	89 81       	ldd	r24, Y+1	; 0x01
    17fa:	80 31       	cpi	r24, 0x10	; 16
    17fc:	39 f4       	brne	.+14     	; 0x180c <Timer_vid_Write_u16reg+0x3a>
	{
		OCR1B = Copy_u16_Value ;
    17fe:	e8 e4       	ldi	r30, 0x48	; 72
    1800:	f0 e0       	ldi	r31, 0x00	; 0
    1802:	8a 81       	ldd	r24, Y+2	; 0x02
    1804:	9b 81       	ldd	r25, Y+3	; 0x03
    1806:	91 83       	std	Z+1, r25	; 0x01
    1808:	80 83       	st	Z, r24
    180a:	09 c0       	rjmp	.+18     	; 0x181e <Timer_vid_Write_u16reg+0x4c>
	}
	else if(Copy_u8Unit == ICR)
    180c:	89 81       	ldd	r24, Y+1	; 0x01
    180e:	81 31       	cpi	r24, 0x11	; 17
    1810:	31 f4       	brne	.+12     	; 0x181e <Timer_vid_Write_u16reg+0x4c>
	{
		ICR1 = Copy_u16_Value;
    1812:	e6 e4       	ldi	r30, 0x46	; 70
    1814:	f0 e0       	ldi	r31, 0x00	; 0
    1816:	8a 81       	ldd	r24, Y+2	; 0x02
    1818:	9b 81       	ldd	r25, Y+3	; 0x03
    181a:	91 83       	std	Z+1, r25	; 0x01
    181c:	80 83       	st	Z, r24
	}
}
    181e:	0f 90       	pop	r0
    1820:	0f 90       	pop	r0
    1822:	0f 90       	pop	r0
    1824:	cf 91       	pop	r28
    1826:	df 91       	pop	r29
    1828:	08 95       	ret

0000182a <Timer_vid_Interrupt>:
/*****************************************************************************************************************************************************************/
/* function that can let us enable or disable any timer interrupt  */
void Timer_vid_Interrupt(u8 Copy_u8TimerName, u8 Copy_u8_Timer_INT_Name, u8 Copy_u8_Timer_INT_Condition)
{
    182a:	df 93       	push	r29
    182c:	cf 93       	push	r28
    182e:	cd b7       	in	r28, 0x3d	; 61
    1830:	de b7       	in	r29, 0x3e	; 62
    1832:	29 97       	sbiw	r28, 0x09	; 9
    1834:	0f b6       	in	r0, 0x3f	; 63
    1836:	f8 94       	cli
    1838:	de bf       	out	0x3e, r29	; 62
    183a:	0f be       	out	0x3f, r0	; 63
    183c:	cd bf       	out	0x3d, r28	; 61
    183e:	89 83       	std	Y+1, r24	; 0x01
    1840:	6a 83       	std	Y+2, r22	; 0x02
    1842:	4b 83       	std	Y+3, r20	; 0x03
	/* if timer 0 is chosen */
	if(Copy_u8TimerName == timer0)
    1844:	89 81       	ldd	r24, Y+1	; 0x01
    1846:	82 30       	cpi	r24, 0x02	; 2
    1848:	09 f0       	breq	.+2      	; 0x184c <Timer_vid_Interrupt+0x22>
    184a:	3e c0       	rjmp	.+124    	; 0x18c8 <Timer_vid_Interrupt+0x9e>
	{
		switch(Copy_u8_Timer_INT_Name)
    184c:	8a 81       	ldd	r24, Y+2	; 0x02
    184e:	28 2f       	mov	r18, r24
    1850:	30 e0       	ldi	r19, 0x00	; 0
    1852:	39 87       	std	Y+9, r19	; 0x09
    1854:	28 87       	std	Y+8, r18	; 0x08
    1856:	88 85       	ldd	r24, Y+8	; 0x08
    1858:	99 85       	ldd	r25, Y+9	; 0x09
    185a:	85 30       	cpi	r24, 0x05	; 5
    185c:	91 05       	cpc	r25, r1
    185e:	31 f0       	breq	.+12     	; 0x186c <Timer_vid_Interrupt+0x42>
    1860:	28 85       	ldd	r18, Y+8	; 0x08
    1862:	39 85       	ldd	r19, Y+9	; 0x09
    1864:	26 30       	cpi	r18, 0x06	; 6
    1866:	31 05       	cpc	r19, r1
    1868:	c1 f0       	breq	.+48     	; 0x189a <Timer_vid_Interrupt+0x70>
    186a:	0c c1       	rjmp	.+536    	; 0x1a84 <Timer_vid_Interrupt+0x25a>
		{
		case Output_Compare_Match_Int:
			if(Copy_u8_Timer_INT_Condition == Enable)
    186c:	8b 81       	ldd	r24, Y+3	; 0x03
    186e:	81 30       	cpi	r24, 0x01	; 1
    1870:	41 f4       	brne	.+16     	; 0x1882 <Timer_vid_Interrupt+0x58>
			{
				TIMSK |= (Enable << TIMSK_OCIE0_PIN) ;
    1872:	a9 e5       	ldi	r26, 0x59	; 89
    1874:	b0 e0       	ldi	r27, 0x00	; 0
    1876:	e9 e5       	ldi	r30, 0x59	; 89
    1878:	f0 e0       	ldi	r31, 0x00	; 0
    187a:	80 81       	ld	r24, Z
    187c:	82 60       	ori	r24, 0x02	; 2
    187e:	8c 93       	st	X, r24
    1880:	01 c1       	rjmp	.+514    	; 0x1a84 <Timer_vid_Interrupt+0x25a>
			}
			else if(Copy_u8_Timer_INT_Condition == Disable)
    1882:	8b 81       	ldd	r24, Y+3	; 0x03
    1884:	88 23       	and	r24, r24
    1886:	09 f0       	breq	.+2      	; 0x188a <Timer_vid_Interrupt+0x60>
    1888:	fd c0       	rjmp	.+506    	; 0x1a84 <Timer_vid_Interrupt+0x25a>
			{
				TIMSK &= ~(1<<TIMSK_OCIE0_PIN);
    188a:	a9 e5       	ldi	r26, 0x59	; 89
    188c:	b0 e0       	ldi	r27, 0x00	; 0
    188e:	e9 e5       	ldi	r30, 0x59	; 89
    1890:	f0 e0       	ldi	r31, 0x00	; 0
    1892:	80 81       	ld	r24, Z
    1894:	8d 7f       	andi	r24, 0xFD	; 253
    1896:	8c 93       	st	X, r24
    1898:	f5 c0       	rjmp	.+490    	; 0x1a84 <Timer_vid_Interrupt+0x25a>
			}
			break;
		case Overflow_Int:
			if(Copy_u8_Timer_INT_Condition == Enable)
    189a:	8b 81       	ldd	r24, Y+3	; 0x03
    189c:	81 30       	cpi	r24, 0x01	; 1
    189e:	41 f4       	brne	.+16     	; 0x18b0 <Timer_vid_Interrupt+0x86>
			{
				TIMSK |= (Enable << TIMSK_TOIE0_PIN) ;
    18a0:	a9 e5       	ldi	r26, 0x59	; 89
    18a2:	b0 e0       	ldi	r27, 0x00	; 0
    18a4:	e9 e5       	ldi	r30, 0x59	; 89
    18a6:	f0 e0       	ldi	r31, 0x00	; 0
    18a8:	80 81       	ld	r24, Z
    18aa:	81 60       	ori	r24, 0x01	; 1
    18ac:	8c 93       	st	X, r24
    18ae:	ea c0       	rjmp	.+468    	; 0x1a84 <Timer_vid_Interrupt+0x25a>
			}
			else if(Copy_u8_Timer_INT_Condition == Disable)
    18b0:	8b 81       	ldd	r24, Y+3	; 0x03
    18b2:	88 23       	and	r24, r24
    18b4:	09 f0       	breq	.+2      	; 0x18b8 <Timer_vid_Interrupt+0x8e>
    18b6:	e6 c0       	rjmp	.+460    	; 0x1a84 <Timer_vid_Interrupt+0x25a>
			{
				TIMSK &= ~(1<<TIMSK_TOIE0_PIN);
    18b8:	a9 e5       	ldi	r26, 0x59	; 89
    18ba:	b0 e0       	ldi	r27, 0x00	; 0
    18bc:	e9 e5       	ldi	r30, 0x59	; 89
    18be:	f0 e0       	ldi	r31, 0x00	; 0
    18c0:	80 81       	ld	r24, Z
    18c2:	8e 7f       	andi	r24, 0xFE	; 254
    18c4:	8c 93       	st	X, r24
    18c6:	de c0       	rjmp	.+444    	; 0x1a84 <Timer_vid_Interrupt+0x25a>
			break;
		}
	}
	/**************************************************************************************************************************/
	/* if timer 1 is chosen */
	else if(Copy_u8TimerName == timer1)
    18c8:	89 81       	ldd	r24, Y+1	; 0x01
    18ca:	83 30       	cpi	r24, 0x03	; 3
    18cc:	09 f0       	breq	.+2      	; 0x18d0 <Timer_vid_Interrupt+0xa6>
    18ce:	9c c0       	rjmp	.+312    	; 0x1a08 <Timer_vid_Interrupt+0x1de>
	{
		switch(Copy_u8_Timer_INT_Name)
    18d0:	8a 81       	ldd	r24, Y+2	; 0x02
    18d2:	28 2f       	mov	r18, r24
    18d4:	30 e0       	ldi	r19, 0x00	; 0
    18d6:	3f 83       	std	Y+7, r19	; 0x07
    18d8:	2e 83       	std	Y+6, r18	; 0x06
    18da:	8e 81       	ldd	r24, Y+6	; 0x06
    18dc:	9f 81       	ldd	r25, Y+7	; 0x07
    18de:	87 30       	cpi	r24, 0x07	; 7
    18e0:	91 05       	cpc	r25, r1
    18e2:	71 f1       	breq	.+92     	; 0x1940 <Timer_vid_Interrupt+0x116>
    18e4:	2e 81       	ldd	r18, Y+6	; 0x06
    18e6:	3f 81       	ldd	r19, Y+7	; 0x07
    18e8:	28 30       	cpi	r18, 0x08	; 8
    18ea:	31 05       	cpc	r19, r1
    18ec:	34 f4       	brge	.+12     	; 0x18fa <Timer_vid_Interrupt+0xd0>
    18ee:	8e 81       	ldd	r24, Y+6	; 0x06
    18f0:	9f 81       	ldd	r25, Y+7	; 0x07
    18f2:	86 30       	cpi	r24, 0x06	; 6
    18f4:	91 05       	cpc	r25, r1
    18f6:	69 f0       	breq	.+26     	; 0x1912 <Timer_vid_Interrupt+0xe8>
    18f8:	c5 c0       	rjmp	.+394    	; 0x1a84 <Timer_vid_Interrupt+0x25a>
    18fa:	2e 81       	ldd	r18, Y+6	; 0x06
    18fc:	3f 81       	ldd	r19, Y+7	; 0x07
    18fe:	28 30       	cpi	r18, 0x08	; 8
    1900:	31 05       	cpc	r19, r1
    1902:	a9 f1       	breq	.+106    	; 0x196e <Timer_vid_Interrupt+0x144>
    1904:	8e 81       	ldd	r24, Y+6	; 0x06
    1906:	9f 81       	ldd	r25, Y+7	; 0x07
    1908:	89 30       	cpi	r24, 0x09	; 9
    190a:	91 05       	cpc	r25, r1
    190c:	09 f4       	brne	.+2      	; 0x1910 <Timer_vid_Interrupt+0xe6>
    190e:	46 c0       	rjmp	.+140    	; 0x199c <Timer_vid_Interrupt+0x172>
    1910:	b9 c0       	rjmp	.+370    	; 0x1a84 <Timer_vid_Interrupt+0x25a>
		{
		case Overflow_Int:
			if(Copy_u8_Timer_INT_Condition == Enable)
    1912:	8b 81       	ldd	r24, Y+3	; 0x03
    1914:	81 30       	cpi	r24, 0x01	; 1
    1916:	41 f4       	brne	.+16     	; 0x1928 <Timer_vid_Interrupt+0xfe>
			{
			TIMSK |= (Enable << TIMSK_TOIE1_PIN) ;
    1918:	a9 e5       	ldi	r26, 0x59	; 89
    191a:	b0 e0       	ldi	r27, 0x00	; 0
    191c:	e9 e5       	ldi	r30, 0x59	; 89
    191e:	f0 e0       	ldi	r31, 0x00	; 0
    1920:	80 81       	ld	r24, Z
    1922:	84 60       	ori	r24, 0x04	; 4
    1924:	8c 93       	st	X, r24
    1926:	ae c0       	rjmp	.+348    	; 0x1a84 <Timer_vid_Interrupt+0x25a>
			}
			else if(Copy_u8_Timer_INT_Condition == Disable)
    1928:	8b 81       	ldd	r24, Y+3	; 0x03
    192a:	88 23       	and	r24, r24
    192c:	09 f0       	breq	.+2      	; 0x1930 <Timer_vid_Interrupt+0x106>
    192e:	aa c0       	rjmp	.+340    	; 0x1a84 <Timer_vid_Interrupt+0x25a>
			{
			TIMSK &= ~(1<<TIMSK_TOIE1_PIN);
    1930:	a9 e5       	ldi	r26, 0x59	; 89
    1932:	b0 e0       	ldi	r27, 0x00	; 0
    1934:	e9 e5       	ldi	r30, 0x59	; 89
    1936:	f0 e0       	ldi	r31, 0x00	; 0
    1938:	80 81       	ld	r24, Z
    193a:	8b 7f       	andi	r24, 0xFB	; 251
    193c:	8c 93       	st	X, r24
    193e:	a2 c0       	rjmp	.+324    	; 0x1a84 <Timer_vid_Interrupt+0x25a>
			}
			break;
		case Output_Compare_A_Match_Int:
			if(Copy_u8_Timer_INT_Condition == Enable)
    1940:	8b 81       	ldd	r24, Y+3	; 0x03
    1942:	81 30       	cpi	r24, 0x01	; 1
    1944:	41 f4       	brne	.+16     	; 0x1956 <Timer_vid_Interrupt+0x12c>
			{
				TIMSK |= (Enable << TIMSK_OCIE1A_PIN) ;
    1946:	a9 e5       	ldi	r26, 0x59	; 89
    1948:	b0 e0       	ldi	r27, 0x00	; 0
    194a:	e9 e5       	ldi	r30, 0x59	; 89
    194c:	f0 e0       	ldi	r31, 0x00	; 0
    194e:	80 81       	ld	r24, Z
    1950:	80 61       	ori	r24, 0x10	; 16
    1952:	8c 93       	st	X, r24
    1954:	97 c0       	rjmp	.+302    	; 0x1a84 <Timer_vid_Interrupt+0x25a>
			}
			else if(Copy_u8_Timer_INT_Condition == Disable)
    1956:	8b 81       	ldd	r24, Y+3	; 0x03
    1958:	88 23       	and	r24, r24
    195a:	09 f0       	breq	.+2      	; 0x195e <Timer_vid_Interrupt+0x134>
    195c:	93 c0       	rjmp	.+294    	; 0x1a84 <Timer_vid_Interrupt+0x25a>
			{
				TIMSK &= ~(1<<TIMSK_OCIE1A_PIN);
    195e:	a9 e5       	ldi	r26, 0x59	; 89
    1960:	b0 e0       	ldi	r27, 0x00	; 0
    1962:	e9 e5       	ldi	r30, 0x59	; 89
    1964:	f0 e0       	ldi	r31, 0x00	; 0
    1966:	80 81       	ld	r24, Z
    1968:	8f 7e       	andi	r24, 0xEF	; 239
    196a:	8c 93       	st	X, r24
    196c:	8b c0       	rjmp	.+278    	; 0x1a84 <Timer_vid_Interrupt+0x25a>
			}
			break;
		case Output_Compare_B_Match_Int:
			if(Copy_u8_Timer_INT_Condition == Enable)
    196e:	8b 81       	ldd	r24, Y+3	; 0x03
    1970:	81 30       	cpi	r24, 0x01	; 1
    1972:	41 f4       	brne	.+16     	; 0x1984 <Timer_vid_Interrupt+0x15a>
			{
			TIMSK |= (Enable << TIMSK_OCIE1B_PIN) ;
    1974:	a9 e5       	ldi	r26, 0x59	; 89
    1976:	b0 e0       	ldi	r27, 0x00	; 0
    1978:	e9 e5       	ldi	r30, 0x59	; 89
    197a:	f0 e0       	ldi	r31, 0x00	; 0
    197c:	80 81       	ld	r24, Z
    197e:	88 60       	ori	r24, 0x08	; 8
    1980:	8c 93       	st	X, r24
    1982:	80 c0       	rjmp	.+256    	; 0x1a84 <Timer_vid_Interrupt+0x25a>
			}
			else if(Copy_u8_Timer_INT_Condition == Disable)
    1984:	8b 81       	ldd	r24, Y+3	; 0x03
    1986:	88 23       	and	r24, r24
    1988:	09 f0       	breq	.+2      	; 0x198c <Timer_vid_Interrupt+0x162>
    198a:	7c c0       	rjmp	.+248    	; 0x1a84 <Timer_vid_Interrupt+0x25a>
			{
				TIMSK &= ~(1<<TIMSK_OCIE1B_PIN);
    198c:	a9 e5       	ldi	r26, 0x59	; 89
    198e:	b0 e0       	ldi	r27, 0x00	; 0
    1990:	e9 e5       	ldi	r30, 0x59	; 89
    1992:	f0 e0       	ldi	r31, 0x00	; 0
    1994:	80 81       	ld	r24, Z
    1996:	87 7f       	andi	r24, 0xF7	; 247
    1998:	8c 93       	st	X, r24
    199a:	74 c0       	rjmp	.+232    	; 0x1a84 <Timer_vid_Interrupt+0x25a>
			}
			break;
		case Input_Capture_Int:
			if(Copy_u8_Timer_INT_Condition == Disable)
    199c:	8b 81       	ldd	r24, Y+3	; 0x03
    199e:	88 23       	and	r24, r24
    19a0:	41 f4       	brne	.+16     	; 0x19b2 <Timer_vid_Interrupt+0x188>
			{
				CLEAR_BIT(TIMSK,TIMSK_TICIE1_PIN) ;
    19a2:	a9 e5       	ldi	r26, 0x59	; 89
    19a4:	b0 e0       	ldi	r27, 0x00	; 0
    19a6:	e9 e5       	ldi	r30, 0x59	; 89
    19a8:	f0 e0       	ldi	r31, 0x00	; 0
    19aa:	80 81       	ld	r24, Z
    19ac:	8f 7d       	andi	r24, 0xDF	; 223
    19ae:	8c 93       	st	X, r24
    19b0:	69 c0       	rjmp	.+210    	; 0x1a84 <Timer_vid_Interrupt+0x25a>
			}
			else
			{
				TIMSK |= (Enable << TIMSK_TICIE1_PIN) ;
    19b2:	a9 e5       	ldi	r26, 0x59	; 89
    19b4:	b0 e0       	ldi	r27, 0x00	; 0
    19b6:	e9 e5       	ldi	r30, 0x59	; 89
    19b8:	f0 e0       	ldi	r31, 0x00	; 0
    19ba:	80 81       	ld	r24, Z
    19bc:	80 62       	ori	r24, 0x20	; 32
    19be:	8c 93       	st	X, r24

				/* Set the trigger either on falling edge or rising edge */
				if(Copy_u8_Timer_INT_Condition== Enable_rising_edge_trigger)
    19c0:	8b 81       	ldd	r24, Y+3	; 0x03
    19c2:	81 30       	cpi	r24, 0x01	; 1
    19c4:	a9 f4       	brne	.+42     	; 0x19f0 <Timer_vid_Interrupt+0x1c6>
				{
					TCCR1B |=  (Copy_u8_Timer_INT_Condition << TCCR1B_ICES1_PIN) ;
    19c6:	ae e4       	ldi	r26, 0x4E	; 78
    19c8:	b0 e0       	ldi	r27, 0x00	; 0
    19ca:	ee e4       	ldi	r30, 0x4E	; 78
    19cc:	f0 e0       	ldi	r31, 0x00	; 0
    19ce:	80 81       	ld	r24, Z
    19d0:	28 2f       	mov	r18, r24
    19d2:	8b 81       	ldd	r24, Y+3	; 0x03
    19d4:	88 2f       	mov	r24, r24
    19d6:	90 e0       	ldi	r25, 0x00	; 0
    19d8:	00 24       	eor	r0, r0
    19da:	96 95       	lsr	r25
    19dc:	87 95       	ror	r24
    19de:	07 94       	ror	r0
    19e0:	96 95       	lsr	r25
    19e2:	87 95       	ror	r24
    19e4:	07 94       	ror	r0
    19e6:	98 2f       	mov	r25, r24
    19e8:	80 2d       	mov	r24, r0
    19ea:	82 2b       	or	r24, r18
    19ec:	8c 93       	st	X, r24
    19ee:	4a c0       	rjmp	.+148    	; 0x1a84 <Timer_vid_Interrupt+0x25a>
				}
				else if(Copy_u8_Timer_INT_Condition== Enable_falling_edge_trigger)
    19f0:	8b 81       	ldd	r24, Y+3	; 0x03
    19f2:	82 30       	cpi	r24, 0x02	; 2
    19f4:	09 f0       	breq	.+2      	; 0x19f8 <Timer_vid_Interrupt+0x1ce>
    19f6:	46 c0       	rjmp	.+140    	; 0x1a84 <Timer_vid_Interrupt+0x25a>
				{
					TCCR1B &=  ~(1<< TCCR1B_ICES1_PIN);
    19f8:	ae e4       	ldi	r26, 0x4E	; 78
    19fa:	b0 e0       	ldi	r27, 0x00	; 0
    19fc:	ee e4       	ldi	r30, 0x4E	; 78
    19fe:	f0 e0       	ldi	r31, 0x00	; 0
    1a00:	80 81       	ld	r24, Z
    1a02:	8f 7b       	andi	r24, 0xBF	; 191
    1a04:	8c 93       	st	X, r24
    1a06:	3e c0       	rjmp	.+124    	; 0x1a84 <Timer_vid_Interrupt+0x25a>
			break;
		}
	}
	/**************************************************************************************************************************/
	/* if timer 2 is chosen */
	else if(Copy_u8TimerName == timer2)
    1a08:	89 81       	ldd	r24, Y+1	; 0x01
    1a0a:	84 30       	cpi	r24, 0x04	; 4
    1a0c:	d9 f5       	brne	.+118    	; 0x1a84 <Timer_vid_Interrupt+0x25a>
	{
		switch(Copy_u8_Timer_INT_Name)
    1a0e:	8a 81       	ldd	r24, Y+2	; 0x02
    1a10:	28 2f       	mov	r18, r24
    1a12:	30 e0       	ldi	r19, 0x00	; 0
    1a14:	3d 83       	std	Y+5, r19	; 0x05
    1a16:	2c 83       	std	Y+4, r18	; 0x04
    1a18:	8c 81       	ldd	r24, Y+4	; 0x04
    1a1a:	9d 81       	ldd	r25, Y+5	; 0x05
    1a1c:	85 30       	cpi	r24, 0x05	; 5
    1a1e:	91 05       	cpc	r25, r1
    1a20:	31 f0       	breq	.+12     	; 0x1a2e <Timer_vid_Interrupt+0x204>
    1a22:	2c 81       	ldd	r18, Y+4	; 0x04
    1a24:	3d 81       	ldd	r19, Y+5	; 0x05
    1a26:	26 30       	cpi	r18, 0x06	; 6
    1a28:	31 05       	cpc	r19, r1
    1a2a:	b9 f0       	breq	.+46     	; 0x1a5a <Timer_vid_Interrupt+0x230>
    1a2c:	2b c0       	rjmp	.+86     	; 0x1a84 <Timer_vid_Interrupt+0x25a>
		{
		case Output_Compare_Match_Int:
			if(Copy_u8_Timer_INT_Condition == Enable)
    1a2e:	8b 81       	ldd	r24, Y+3	; 0x03
    1a30:	81 30       	cpi	r24, 0x01	; 1
    1a32:	41 f4       	brne	.+16     	; 0x1a44 <Timer_vid_Interrupt+0x21a>
			{
				TIMSK |= (Enable << TIMSK_OCIE2_PIN) ;
    1a34:	a9 e5       	ldi	r26, 0x59	; 89
    1a36:	b0 e0       	ldi	r27, 0x00	; 0
    1a38:	e9 e5       	ldi	r30, 0x59	; 89
    1a3a:	f0 e0       	ldi	r31, 0x00	; 0
    1a3c:	80 81       	ld	r24, Z
    1a3e:	80 68       	ori	r24, 0x80	; 128
    1a40:	8c 93       	st	X, r24
    1a42:	20 c0       	rjmp	.+64     	; 0x1a84 <Timer_vid_Interrupt+0x25a>
			}
			else if(Copy_u8_Timer_INT_Condition == Disable)
    1a44:	8b 81       	ldd	r24, Y+3	; 0x03
    1a46:	88 23       	and	r24, r24
    1a48:	e9 f4       	brne	.+58     	; 0x1a84 <Timer_vid_Interrupt+0x25a>
			{
				TIMSK &= ~(1<<TIMSK_OCIE2_PIN);
    1a4a:	a9 e5       	ldi	r26, 0x59	; 89
    1a4c:	b0 e0       	ldi	r27, 0x00	; 0
    1a4e:	e9 e5       	ldi	r30, 0x59	; 89
    1a50:	f0 e0       	ldi	r31, 0x00	; 0
    1a52:	80 81       	ld	r24, Z
    1a54:	8f 77       	andi	r24, 0x7F	; 127
    1a56:	8c 93       	st	X, r24
    1a58:	15 c0       	rjmp	.+42     	; 0x1a84 <Timer_vid_Interrupt+0x25a>
			}
			break;
		case Overflow_Int:
			if(Copy_u8_Timer_INT_Condition == Enable)
    1a5a:	8b 81       	ldd	r24, Y+3	; 0x03
    1a5c:	81 30       	cpi	r24, 0x01	; 1
    1a5e:	41 f4       	brne	.+16     	; 0x1a70 <Timer_vid_Interrupt+0x246>
			{
				TIMSK |= (Enable << TIMSK_TOIE2_PIN) ;
    1a60:	a9 e5       	ldi	r26, 0x59	; 89
    1a62:	b0 e0       	ldi	r27, 0x00	; 0
    1a64:	e9 e5       	ldi	r30, 0x59	; 89
    1a66:	f0 e0       	ldi	r31, 0x00	; 0
    1a68:	80 81       	ld	r24, Z
    1a6a:	80 64       	ori	r24, 0x40	; 64
    1a6c:	8c 93       	st	X, r24
    1a6e:	0a c0       	rjmp	.+20     	; 0x1a84 <Timer_vid_Interrupt+0x25a>
			}
			else if(Copy_u8_Timer_INT_Condition == Disable)
    1a70:	8b 81       	ldd	r24, Y+3	; 0x03
    1a72:	88 23       	and	r24, r24
    1a74:	39 f4       	brne	.+14     	; 0x1a84 <Timer_vid_Interrupt+0x25a>
			{
				TIMSK &= ~(1<<TIMSK_TOIE2_PIN);
    1a76:	a9 e5       	ldi	r26, 0x59	; 89
    1a78:	b0 e0       	ldi	r27, 0x00	; 0
    1a7a:	e9 e5       	ldi	r30, 0x59	; 89
    1a7c:	f0 e0       	ldi	r31, 0x00	; 0
    1a7e:	80 81       	ld	r24, Z
    1a80:	8f 7b       	andi	r24, 0xBF	; 191
    1a82:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1a84:	29 96       	adiw	r28, 0x09	; 9
    1a86:	0f b6       	in	r0, 0x3f	; 63
    1a88:	f8 94       	cli
    1a8a:	de bf       	out	0x3e, r29	; 62
    1a8c:	0f be       	out	0x3f, r0	; 63
    1a8e:	cd bf       	out	0x3d, r28	; 61
    1a90:	cf 91       	pop	r28
    1a92:	df 91       	pop	r29
    1a94:	08 95       	ret

00001a96 <GetCaptureUnit>:

/* For the ICU */
u16 GetCaptureUnit()
{
    1a96:	df 93       	push	r29
    1a98:	cf 93       	push	r28
    1a9a:	cd b7       	in	r28, 0x3d	; 61
    1a9c:	de b7       	in	r29, 0x3e	; 62
	return ICR1;
    1a9e:	e6 e4       	ldi	r30, 0x46	; 70
    1aa0:	f0 e0       	ldi	r31, 0x00	; 0
    1aa2:	80 81       	ld	r24, Z
    1aa4:	91 81       	ldd	r25, Z+1	; 0x01
}
    1aa6:	cf 91       	pop	r28
    1aa8:	df 91       	pop	r29
    1aaa:	08 95       	ret

00001aac <WaitForFlagOfICU>:

void WaitForFlagOfICU()
{
    1aac:	df 93       	push	r29
    1aae:	cf 93       	push	r28
    1ab0:	cd b7       	in	r28, 0x3d	; 61
    1ab2:	de b7       	in	r29, 0x3e	; 62
	while ((TIFR & (1 << TIFR_ICF1_PIN)) == 0);
    1ab4:	e8 e5       	ldi	r30, 0x58	; 88
    1ab6:	f0 e0       	ldi	r31, 0x00	; 0
    1ab8:	80 81       	ld	r24, Z
    1aba:	88 2f       	mov	r24, r24
    1abc:	90 e0       	ldi	r25, 0x00	; 0
    1abe:	80 72       	andi	r24, 0x20	; 32
    1ac0:	90 70       	andi	r25, 0x00	; 0
    1ac2:	00 97       	sbiw	r24, 0x00	; 0
    1ac4:	b9 f3       	breq	.-18     	; 0x1ab4 <WaitForFlagOfICU+0x8>
}
    1ac6:	cf 91       	pop	r28
    1ac8:	df 91       	pop	r29
    1aca:	08 95       	ret

00001acc <Timer1_voidIcuCaptureOn>:

void Timer1_voidIcuCaptureOn(u8 Copy_u8CapturOnCondition)
{
    1acc:	df 93       	push	r29
    1ace:	cf 93       	push	r28
    1ad0:	0f 92       	push	r0
    1ad2:	cd b7       	in	r28, 0x3d	; 61
    1ad4:	de b7       	in	r29, 0x3e	; 62
    1ad6:	89 83       	std	Y+1, r24	; 0x01
	/* Set the trigger either on falling edge or rising edge */
	if(Copy_u8CapturOnCondition== Enable_rising_edge_trigger)
    1ad8:	89 81       	ldd	r24, Y+1	; 0x01
    1ada:	81 30       	cpi	r24, 0x01	; 1
    1adc:	a9 f4       	brne	.+42     	; 0x1b08 <Timer1_voidIcuCaptureOn+0x3c>
	{
		TCCR1B |=  (Copy_u8CapturOnCondition << TCCR1B_ICES1_PIN) ;
    1ade:	ae e4       	ldi	r26, 0x4E	; 78
    1ae0:	b0 e0       	ldi	r27, 0x00	; 0
    1ae2:	ee e4       	ldi	r30, 0x4E	; 78
    1ae4:	f0 e0       	ldi	r31, 0x00	; 0
    1ae6:	80 81       	ld	r24, Z
    1ae8:	28 2f       	mov	r18, r24
    1aea:	89 81       	ldd	r24, Y+1	; 0x01
    1aec:	88 2f       	mov	r24, r24
    1aee:	90 e0       	ldi	r25, 0x00	; 0
    1af0:	00 24       	eor	r0, r0
    1af2:	96 95       	lsr	r25
    1af4:	87 95       	ror	r24
    1af6:	07 94       	ror	r0
    1af8:	96 95       	lsr	r25
    1afa:	87 95       	ror	r24
    1afc:	07 94       	ror	r0
    1afe:	98 2f       	mov	r25, r24
    1b00:	80 2d       	mov	r24, r0
    1b02:	82 2b       	or	r24, r18
    1b04:	8c 93       	st	X, r24
    1b06:	0a c0       	rjmp	.+20     	; 0x1b1c <Timer1_voidIcuCaptureOn+0x50>
	}
	else if(Copy_u8CapturOnCondition== Enable_falling_edge_trigger)
    1b08:	89 81       	ldd	r24, Y+1	; 0x01
    1b0a:	82 30       	cpi	r24, 0x02	; 2
    1b0c:	39 f4       	brne	.+14     	; 0x1b1c <Timer1_voidIcuCaptureOn+0x50>
	{
		TCCR1B &=  ~(1<< TCCR1B_ICES1_PIN);
    1b0e:	ae e4       	ldi	r26, 0x4E	; 78
    1b10:	b0 e0       	ldi	r27, 0x00	; 0
    1b12:	ee e4       	ldi	r30, 0x4E	; 78
    1b14:	f0 e0       	ldi	r31, 0x00	; 0
    1b16:	80 81       	ld	r24, Z
    1b18:	8f 7b       	andi	r24, 0xBF	; 191
    1b1a:	8c 93       	st	X, r24
	}
}
    1b1c:	0f 90       	pop	r0
    1b1e:	cf 91       	pop	r28
    1b20:	df 91       	pop	r29
    1b22:	08 95       	ret

00001b24 <Timer1_16bit_void_NonInveting_DutyCycle>:

/* function to write duty cycle of timer 1 in NON-inverting mode */
void Timer1_16bit_void_NonInveting_DutyCycle(u8 Copy_u8TimerUnit, u8 Copy_u8_DutyCycle)
{
    1b24:	0f 93       	push	r16
    1b26:	1f 93       	push	r17
    1b28:	df 93       	push	r29
    1b2a:	cf 93       	push	r28
    1b2c:	00 d0       	rcall	.+0      	; 0x1b2e <Timer1_16bit_void_NonInveting_DutyCycle+0xa>
    1b2e:	cd b7       	in	r28, 0x3d	; 61
    1b30:	de b7       	in	r29, 0x3e	; 62
    1b32:	89 83       	std	Y+1, r24	; 0x01
    1b34:	6a 83       	std	Y+2, r22	; 0x02
	if(Copy_u8TimerUnit == UnitA_OCR)
    1b36:	89 81       	ldd	r24, Y+1	; 0x01
    1b38:	8f 30       	cpi	r24, 0x0F	; 15
    1b3a:	f9 f4       	brne	.+62     	; 0x1b7a <Timer1_16bit_void_NonInveting_DutyCycle+0x56>
			{
		OCR1A = (65535UL*Copy_u8_DutyCycle)/100;
    1b3c:	0a e4       	ldi	r16, 0x4A	; 74
    1b3e:	10 e0       	ldi	r17, 0x00	; 0
    1b40:	8a 81       	ldd	r24, Y+2	; 0x02
    1b42:	88 2f       	mov	r24, r24
    1b44:	90 e0       	ldi	r25, 0x00	; 0
    1b46:	a0 e0       	ldi	r26, 0x00	; 0
    1b48:	b0 e0       	ldi	r27, 0x00	; 0
    1b4a:	2f ef       	ldi	r18, 0xFF	; 255
    1b4c:	3f ef       	ldi	r19, 0xFF	; 255
    1b4e:	40 e0       	ldi	r20, 0x00	; 0
    1b50:	50 e0       	ldi	r21, 0x00	; 0
    1b52:	bc 01       	movw	r22, r24
    1b54:	cd 01       	movw	r24, r26
    1b56:	0e 94 b8 1f 	call	0x3f70	; 0x3f70 <__mulsi3>
    1b5a:	dc 01       	movw	r26, r24
    1b5c:	cb 01       	movw	r24, r22
    1b5e:	24 e6       	ldi	r18, 0x64	; 100
    1b60:	30 e0       	ldi	r19, 0x00	; 0
    1b62:	40 e0       	ldi	r20, 0x00	; 0
    1b64:	50 e0       	ldi	r21, 0x00	; 0
    1b66:	bc 01       	movw	r22, r24
    1b68:	cd 01       	movw	r24, r26
    1b6a:	0e 94 eb 1f 	call	0x3fd6	; 0x3fd6 <__udivmodsi4>
    1b6e:	da 01       	movw	r26, r20
    1b70:	c9 01       	movw	r24, r18
    1b72:	f8 01       	movw	r30, r16
    1b74:	91 83       	std	Z+1, r25	; 0x01
    1b76:	80 83       	st	Z, r24
    1b78:	21 c0       	rjmp	.+66     	; 0x1bbc <Timer1_16bit_void_NonInveting_DutyCycle+0x98>
			}
	else if(Copy_u8TimerUnit == UnitB_OCR)
    1b7a:	89 81       	ldd	r24, Y+1	; 0x01
    1b7c:	80 31       	cpi	r24, 0x10	; 16
    1b7e:	f1 f4       	brne	.+60     	; 0x1bbc <Timer1_16bit_void_NonInveting_DutyCycle+0x98>
			{
		OCR1B = (65535UL*Copy_u8_DutyCycle)/100;
    1b80:	08 e4       	ldi	r16, 0x48	; 72
    1b82:	10 e0       	ldi	r17, 0x00	; 0
    1b84:	8a 81       	ldd	r24, Y+2	; 0x02
    1b86:	88 2f       	mov	r24, r24
    1b88:	90 e0       	ldi	r25, 0x00	; 0
    1b8a:	a0 e0       	ldi	r26, 0x00	; 0
    1b8c:	b0 e0       	ldi	r27, 0x00	; 0
    1b8e:	2f ef       	ldi	r18, 0xFF	; 255
    1b90:	3f ef       	ldi	r19, 0xFF	; 255
    1b92:	40 e0       	ldi	r20, 0x00	; 0
    1b94:	50 e0       	ldi	r21, 0x00	; 0
    1b96:	bc 01       	movw	r22, r24
    1b98:	cd 01       	movw	r24, r26
    1b9a:	0e 94 b8 1f 	call	0x3f70	; 0x3f70 <__mulsi3>
    1b9e:	dc 01       	movw	r26, r24
    1ba0:	cb 01       	movw	r24, r22
    1ba2:	24 e6       	ldi	r18, 0x64	; 100
    1ba4:	30 e0       	ldi	r19, 0x00	; 0
    1ba6:	40 e0       	ldi	r20, 0x00	; 0
    1ba8:	50 e0       	ldi	r21, 0x00	; 0
    1baa:	bc 01       	movw	r22, r24
    1bac:	cd 01       	movw	r24, r26
    1bae:	0e 94 eb 1f 	call	0x3fd6	; 0x3fd6 <__udivmodsi4>
    1bb2:	da 01       	movw	r26, r20
    1bb4:	c9 01       	movw	r24, r18
    1bb6:	f8 01       	movw	r30, r16
    1bb8:	91 83       	std	Z+1, r25	; 0x01
    1bba:	80 83       	st	Z, r24
			}
}
    1bbc:	0f 90       	pop	r0
    1bbe:	0f 90       	pop	r0
    1bc0:	cf 91       	pop	r28
    1bc2:	df 91       	pop	r29
    1bc4:	1f 91       	pop	r17
    1bc6:	0f 91       	pop	r16
    1bc8:	08 95       	ret

00001bca <Timer1_16bit_void_Inveting_DutyCycle>:
/* function to write duty cycle of timer 1 in inverting mode */
void Timer1_16bit_void_Inveting_DutyCycle(u8 Copy_u8TimerUnit, u8 Copy_u8_DutyCycle)
{
    1bca:	0f 93       	push	r16
    1bcc:	1f 93       	push	r17
    1bce:	df 93       	push	r29
    1bd0:	cf 93       	push	r28
    1bd2:	00 d0       	rcall	.+0      	; 0x1bd4 <Timer1_16bit_void_Inveting_DutyCycle+0xa>
    1bd4:	cd b7       	in	r28, 0x3d	; 61
    1bd6:	de b7       	in	r29, 0x3e	; 62
    1bd8:	89 83       	std	Y+1, r24	; 0x01
    1bda:	6a 83       	std	Y+2, r22	; 0x02
	if(Copy_u8TimerUnit == UnitA_OCR)
    1bdc:	89 81       	ldd	r24, Y+1	; 0x01
    1bde:	8f 30       	cpi	r24, 0x0F	; 15
    1be0:	09 f5       	brne	.+66     	; 0x1c24 <Timer1_16bit_void_Inveting_DutyCycle+0x5a>
			{
		OCR1A = (65535UL-(65535UL*Copy_u8_DutyCycle)/100);
    1be2:	0a e4       	ldi	r16, 0x4A	; 74
    1be4:	10 e0       	ldi	r17, 0x00	; 0
    1be6:	8a 81       	ldd	r24, Y+2	; 0x02
    1be8:	88 2f       	mov	r24, r24
    1bea:	90 e0       	ldi	r25, 0x00	; 0
    1bec:	a0 e0       	ldi	r26, 0x00	; 0
    1bee:	b0 e0       	ldi	r27, 0x00	; 0
    1bf0:	2f ef       	ldi	r18, 0xFF	; 255
    1bf2:	3f ef       	ldi	r19, 0xFF	; 255
    1bf4:	40 e0       	ldi	r20, 0x00	; 0
    1bf6:	50 e0       	ldi	r21, 0x00	; 0
    1bf8:	bc 01       	movw	r22, r24
    1bfa:	cd 01       	movw	r24, r26
    1bfc:	0e 94 b8 1f 	call	0x3f70	; 0x3f70 <__mulsi3>
    1c00:	dc 01       	movw	r26, r24
    1c02:	cb 01       	movw	r24, r22
    1c04:	24 e6       	ldi	r18, 0x64	; 100
    1c06:	30 e0       	ldi	r19, 0x00	; 0
    1c08:	40 e0       	ldi	r20, 0x00	; 0
    1c0a:	50 e0       	ldi	r21, 0x00	; 0
    1c0c:	bc 01       	movw	r22, r24
    1c0e:	cd 01       	movw	r24, r26
    1c10:	0e 94 eb 1f 	call	0x3fd6	; 0x3fd6 <__udivmodsi4>
    1c14:	da 01       	movw	r26, r20
    1c16:	c9 01       	movw	r24, r18
    1c18:	80 95       	com	r24
    1c1a:	90 95       	com	r25
    1c1c:	f8 01       	movw	r30, r16
    1c1e:	91 83       	std	Z+1, r25	; 0x01
    1c20:	80 83       	st	Z, r24
    1c22:	23 c0       	rjmp	.+70     	; 0x1c6a <Timer1_16bit_void_Inveting_DutyCycle+0xa0>
			}
	else if(Copy_u8TimerUnit == UnitB_OCR)
    1c24:	89 81       	ldd	r24, Y+1	; 0x01
    1c26:	80 31       	cpi	r24, 0x10	; 16
    1c28:	01 f5       	brne	.+64     	; 0x1c6a <Timer1_16bit_void_Inveting_DutyCycle+0xa0>
			{
		OCR1B = (65535UL-(65535UL*Copy_u8_DutyCycle)/100);
    1c2a:	08 e4       	ldi	r16, 0x48	; 72
    1c2c:	10 e0       	ldi	r17, 0x00	; 0
    1c2e:	8a 81       	ldd	r24, Y+2	; 0x02
    1c30:	88 2f       	mov	r24, r24
    1c32:	90 e0       	ldi	r25, 0x00	; 0
    1c34:	a0 e0       	ldi	r26, 0x00	; 0
    1c36:	b0 e0       	ldi	r27, 0x00	; 0
    1c38:	2f ef       	ldi	r18, 0xFF	; 255
    1c3a:	3f ef       	ldi	r19, 0xFF	; 255
    1c3c:	40 e0       	ldi	r20, 0x00	; 0
    1c3e:	50 e0       	ldi	r21, 0x00	; 0
    1c40:	bc 01       	movw	r22, r24
    1c42:	cd 01       	movw	r24, r26
    1c44:	0e 94 b8 1f 	call	0x3f70	; 0x3f70 <__mulsi3>
    1c48:	dc 01       	movw	r26, r24
    1c4a:	cb 01       	movw	r24, r22
    1c4c:	24 e6       	ldi	r18, 0x64	; 100
    1c4e:	30 e0       	ldi	r19, 0x00	; 0
    1c50:	40 e0       	ldi	r20, 0x00	; 0
    1c52:	50 e0       	ldi	r21, 0x00	; 0
    1c54:	bc 01       	movw	r22, r24
    1c56:	cd 01       	movw	r24, r26
    1c58:	0e 94 eb 1f 	call	0x3fd6	; 0x3fd6 <__udivmodsi4>
    1c5c:	da 01       	movw	r26, r20
    1c5e:	c9 01       	movw	r24, r18
    1c60:	80 95       	com	r24
    1c62:	90 95       	com	r25
    1c64:	f8 01       	movw	r30, r16
    1c66:	91 83       	std	Z+1, r25	; 0x01
    1c68:	80 83       	st	Z, r24
			}
}
    1c6a:	0f 90       	pop	r0
    1c6c:	0f 90       	pop	r0
    1c6e:	cf 91       	pop	r28
    1c70:	df 91       	pop	r29
    1c72:	1f 91       	pop	r17
    1c74:	0f 91       	pop	r16
    1c76:	08 95       	ret

00001c78 <Servo_void_TIMER1NonInverting_DutyCycle>:
/* function to control a standard servo */
void Servo_void_TIMER1NonInverting_DutyCycle(u8 Copy_u8DutyCycle, u8 Copy_u8Unit)
{
    1c78:	0f 93       	push	r16
    1c7a:	1f 93       	push	r17
    1c7c:	df 93       	push	r29
    1c7e:	cf 93       	push	r28
    1c80:	00 d0       	rcall	.+0      	; 0x1c82 <Servo_void_TIMER1NonInverting_DutyCycle+0xa>
    1c82:	cd b7       	in	r28, 0x3d	; 61
    1c84:	de b7       	in	r29, 0x3e	; 62
    1c86:	89 83       	std	Y+1, r24	; 0x01
    1c88:	6a 83       	std	Y+2, r22	; 0x02
	/* used when timer 1 is initialized in Fast_PWM_ICR_Top wave generation mode and Non-inverting */
	ICR1 = 20000;  /* the period that the servo works at Prescaler 8 and frequency 8MHz*/
    1c8a:	e6 e4       	ldi	r30, 0x46	; 70
    1c8c:	f0 e0       	ldi	r31, 0x00	; 0
    1c8e:	80 e2       	ldi	r24, 0x20	; 32
    1c90:	9e e4       	ldi	r25, 0x4E	; 78
    1c92:	91 83       	std	Z+1, r25	; 0x01
    1c94:	80 83       	st	Z, r24
	if(Copy_u8Unit == UnitA_OCR)
    1c96:	8a 81       	ldd	r24, Y+2	; 0x02
    1c98:	8f 30       	cpi	r24, 0x0F	; 15
    1c9a:	f9 f4       	brne	.+62     	; 0x1cda <Servo_void_TIMER1NonInverting_DutyCycle+0x62>
	{
			OCR1A = 1000UL*Copy_u8DutyCycle/100UL;
    1c9c:	0a e4       	ldi	r16, 0x4A	; 74
    1c9e:	10 e0       	ldi	r17, 0x00	; 0
    1ca0:	89 81       	ldd	r24, Y+1	; 0x01
    1ca2:	88 2f       	mov	r24, r24
    1ca4:	90 e0       	ldi	r25, 0x00	; 0
    1ca6:	a0 e0       	ldi	r26, 0x00	; 0
    1ca8:	b0 e0       	ldi	r27, 0x00	; 0
    1caa:	28 ee       	ldi	r18, 0xE8	; 232
    1cac:	33 e0       	ldi	r19, 0x03	; 3
    1cae:	40 e0       	ldi	r20, 0x00	; 0
    1cb0:	50 e0       	ldi	r21, 0x00	; 0
    1cb2:	bc 01       	movw	r22, r24
    1cb4:	cd 01       	movw	r24, r26
    1cb6:	0e 94 b8 1f 	call	0x3f70	; 0x3f70 <__mulsi3>
    1cba:	dc 01       	movw	r26, r24
    1cbc:	cb 01       	movw	r24, r22
    1cbe:	24 e6       	ldi	r18, 0x64	; 100
    1cc0:	30 e0       	ldi	r19, 0x00	; 0
    1cc2:	40 e0       	ldi	r20, 0x00	; 0
    1cc4:	50 e0       	ldi	r21, 0x00	; 0
    1cc6:	bc 01       	movw	r22, r24
    1cc8:	cd 01       	movw	r24, r26
    1cca:	0e 94 eb 1f 	call	0x3fd6	; 0x3fd6 <__udivmodsi4>
    1cce:	da 01       	movw	r26, r20
    1cd0:	c9 01       	movw	r24, r18
    1cd2:	f8 01       	movw	r30, r16
    1cd4:	91 83       	std	Z+1, r25	; 0x01
    1cd6:	80 83       	st	Z, r24
    1cd8:	21 c0       	rjmp	.+66     	; 0x1d1c <Servo_void_TIMER1NonInverting_DutyCycle+0xa4>
	}
	else if(Copy_u8Unit == UnitB_OCR)
    1cda:	8a 81       	ldd	r24, Y+2	; 0x02
    1cdc:	80 31       	cpi	r24, 0x10	; 16
    1cde:	f1 f4       	brne	.+60     	; 0x1d1c <Servo_void_TIMER1NonInverting_DutyCycle+0xa4>
	{
			OCR1B = 1000UL*Copy_u8DutyCycle/100UL;
    1ce0:	08 e4       	ldi	r16, 0x48	; 72
    1ce2:	10 e0       	ldi	r17, 0x00	; 0
    1ce4:	89 81       	ldd	r24, Y+1	; 0x01
    1ce6:	88 2f       	mov	r24, r24
    1ce8:	90 e0       	ldi	r25, 0x00	; 0
    1cea:	a0 e0       	ldi	r26, 0x00	; 0
    1cec:	b0 e0       	ldi	r27, 0x00	; 0
    1cee:	28 ee       	ldi	r18, 0xE8	; 232
    1cf0:	33 e0       	ldi	r19, 0x03	; 3
    1cf2:	40 e0       	ldi	r20, 0x00	; 0
    1cf4:	50 e0       	ldi	r21, 0x00	; 0
    1cf6:	bc 01       	movw	r22, r24
    1cf8:	cd 01       	movw	r24, r26
    1cfa:	0e 94 b8 1f 	call	0x3f70	; 0x3f70 <__mulsi3>
    1cfe:	dc 01       	movw	r26, r24
    1d00:	cb 01       	movw	r24, r22
    1d02:	24 e6       	ldi	r18, 0x64	; 100
    1d04:	30 e0       	ldi	r19, 0x00	; 0
    1d06:	40 e0       	ldi	r20, 0x00	; 0
    1d08:	50 e0       	ldi	r21, 0x00	; 0
    1d0a:	bc 01       	movw	r22, r24
    1d0c:	cd 01       	movw	r24, r26
    1d0e:	0e 94 eb 1f 	call	0x3fd6	; 0x3fd6 <__udivmodsi4>
    1d12:	da 01       	movw	r26, r20
    1d14:	c9 01       	movw	r24, r18
    1d16:	f8 01       	movw	r30, r16
    1d18:	91 83       	std	Z+1, r25	; 0x01
    1d1a:	80 83       	st	Z, r24
	}

}
    1d1c:	0f 90       	pop	r0
    1d1e:	0f 90       	pop	r0
    1d20:	cf 91       	pop	r28
    1d22:	df 91       	pop	r29
    1d24:	1f 91       	pop	r17
    1d26:	0f 91       	pop	r16
    1d28:	08 95       	ret

00001d2a <Timer_voidClearFlag>:

void Timer_voidClearFlag(u8 Copy_u8Flag)
{
    1d2a:	df 93       	push	r29
    1d2c:	cf 93       	push	r28
    1d2e:	00 d0       	rcall	.+0      	; 0x1d30 <Timer_voidClearFlag+0x6>
    1d30:	0f 92       	push	r0
    1d32:	cd b7       	in	r28, 0x3d	; 61
    1d34:	de b7       	in	r29, 0x3e	; 62
    1d36:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_u8Flag)
    1d38:	89 81       	ldd	r24, Y+1	; 0x01
    1d3a:	28 2f       	mov	r18, r24
    1d3c:	30 e0       	ldi	r19, 0x00	; 0
    1d3e:	3b 83       	std	Y+3, r19	; 0x03
    1d40:	2a 83       	std	Y+2, r18	; 0x02
    1d42:	8a 81       	ldd	r24, Y+2	; 0x02
    1d44:	9b 81       	ldd	r25, Y+3	; 0x03
    1d46:	84 30       	cpi	r24, 0x04	; 4
    1d48:	91 05       	cpc	r25, r1
    1d4a:	31 f0       	breq	.+12     	; 0x1d58 <Timer_voidClearFlag+0x2e>
    1d4c:	2a 81       	ldd	r18, Y+2	; 0x02
    1d4e:	3b 81       	ldd	r19, Y+3	; 0x03
    1d50:	25 30       	cpi	r18, 0x05	; 5
    1d52:	31 05       	cpc	r19, r1
    1d54:	49 f0       	breq	.+18     	; 0x1d68 <Timer_voidClearFlag+0x3e>
    1d56:	0f c0       	rjmp	.+30     	; 0x1d76 <Timer_voidClearFlag+0x4c>
	{
		case Timer1_OV_Flag:
			TIFR |= 1<<TIFR_TOV1_PIN;
    1d58:	a8 e5       	ldi	r26, 0x58	; 88
    1d5a:	b0 e0       	ldi	r27, 0x00	; 0
    1d5c:	e8 e5       	ldi	r30, 0x58	; 88
    1d5e:	f0 e0       	ldi	r31, 0x00	; 0
    1d60:	80 81       	ld	r24, Z
    1d62:	84 60       	ori	r24, 0x04	; 4
    1d64:	8c 93       	st	X, r24
    1d66:	07 c0       	rjmp	.+14     	; 0x1d76 <Timer_voidClearFlag+0x4c>
			break;
		case Timer1_ICU_Flag:
			TIFR |= 1<<TIFR_ICF1_PIN;
    1d68:	a8 e5       	ldi	r26, 0x58	; 88
    1d6a:	b0 e0       	ldi	r27, 0x00	; 0
    1d6c:	e8 e5       	ldi	r30, 0x58	; 88
    1d6e:	f0 e0       	ldi	r31, 0x00	; 0
    1d70:	80 81       	ld	r24, Z
    1d72:	80 62       	ori	r24, 0x20	; 32
    1d74:	8c 93       	st	X, r24
			break;
	}
}
    1d76:	0f 90       	pop	r0
    1d78:	0f 90       	pop	r0
    1d7a:	0f 90       	pop	r0
    1d7c:	cf 91       	pop	r28
    1d7e:	df 91       	pop	r29
    1d80:	08 95       	ret

00001d82 <__vector_10>:
static void (* TIMR0_CTC_SetCallBackfunc) (void) =NULL;   /* pointer to timer 0 compare match ISR */
static void (* TIMR0_OvF_SetCallBackfunc) (void) =NULL;	  /* pointer to timer 0 Overflow ISR */

void __vector_10(void) __attribute__ ((signal));
void __vector_10(void)                          /* timer 0 compare match ISR */
{
    1d82:	1f 92       	push	r1
    1d84:	0f 92       	push	r0
    1d86:	0f b6       	in	r0, 0x3f	; 63
    1d88:	0f 92       	push	r0
    1d8a:	11 24       	eor	r1, r1
    1d8c:	2f 93       	push	r18
    1d8e:	3f 93       	push	r19
    1d90:	4f 93       	push	r20
    1d92:	5f 93       	push	r21
    1d94:	6f 93       	push	r22
    1d96:	7f 93       	push	r23
    1d98:	8f 93       	push	r24
    1d9a:	9f 93       	push	r25
    1d9c:	af 93       	push	r26
    1d9e:	bf 93       	push	r27
    1da0:	ef 93       	push	r30
    1da2:	ff 93       	push	r31
    1da4:	df 93       	push	r29
    1da6:	cf 93       	push	r28
    1da8:	cd b7       	in	r28, 0x3d	; 61
    1daa:	de b7       	in	r29, 0x3e	; 62
	if(TIMR0_CTC_SetCallBackfunc != NULL)
    1dac:	80 91 c0 01 	lds	r24, 0x01C0
    1db0:	90 91 c1 01 	lds	r25, 0x01C1
    1db4:	00 97       	sbiw	r24, 0x00	; 0
    1db6:	29 f0       	breq	.+10     	; 0x1dc2 <__vector_10+0x40>
	{
		TIMR0_CTC_SetCallBackfunc();
    1db8:	e0 91 c0 01 	lds	r30, 0x01C0
    1dbc:	f0 91 c1 01 	lds	r31, 0x01C1
    1dc0:	09 95       	icall
	}
}
    1dc2:	cf 91       	pop	r28
    1dc4:	df 91       	pop	r29
    1dc6:	ff 91       	pop	r31
    1dc8:	ef 91       	pop	r30
    1dca:	bf 91       	pop	r27
    1dcc:	af 91       	pop	r26
    1dce:	9f 91       	pop	r25
    1dd0:	8f 91       	pop	r24
    1dd2:	7f 91       	pop	r23
    1dd4:	6f 91       	pop	r22
    1dd6:	5f 91       	pop	r21
    1dd8:	4f 91       	pop	r20
    1dda:	3f 91       	pop	r19
    1ddc:	2f 91       	pop	r18
    1dde:	0f 90       	pop	r0
    1de0:	0f be       	out	0x3f, r0	; 63
    1de2:	0f 90       	pop	r0
    1de4:	1f 90       	pop	r1
    1de6:	18 95       	reti

00001de8 <TIMR0_CTC_SetCallBack>:

void TIMR0_CTC_SetCallBack(void (*Copy_pCallBackFunc) (void))	/* timer 0 compare match call back function */
{
    1de8:	df 93       	push	r29
    1dea:	cf 93       	push	r28
    1dec:	00 d0       	rcall	.+0      	; 0x1dee <TIMR0_CTC_SetCallBack+0x6>
    1dee:	cd b7       	in	r28, 0x3d	; 61
    1df0:	de b7       	in	r29, 0x3e	; 62
    1df2:	9a 83       	std	Y+2, r25	; 0x02
    1df4:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_pCallBackFunc != NULL)
    1df6:	89 81       	ldd	r24, Y+1	; 0x01
    1df8:	9a 81       	ldd	r25, Y+2	; 0x02
    1dfa:	00 97       	sbiw	r24, 0x00	; 0
    1dfc:	31 f0       	breq	.+12     	; 0x1e0a <TIMR0_CTC_SetCallBack+0x22>
	{
		TIMR0_CTC_SetCallBackfunc = Copy_pCallBackFunc;
    1dfe:	89 81       	ldd	r24, Y+1	; 0x01
    1e00:	9a 81       	ldd	r25, Y+2	; 0x02
    1e02:	90 93 c1 01 	sts	0x01C1, r25
    1e06:	80 93 c0 01 	sts	0x01C0, r24
	}
}
    1e0a:	0f 90       	pop	r0
    1e0c:	0f 90       	pop	r0
    1e0e:	cf 91       	pop	r28
    1e10:	df 91       	pop	r29
    1e12:	08 95       	ret

00001e14 <__vector_11>:
void __vector_11(void) __attribute__ ((signal));
void __vector_11(void)						/* timer 0 Overflow ISR */
{
    1e14:	1f 92       	push	r1
    1e16:	0f 92       	push	r0
    1e18:	0f b6       	in	r0, 0x3f	; 63
    1e1a:	0f 92       	push	r0
    1e1c:	11 24       	eor	r1, r1
    1e1e:	2f 93       	push	r18
    1e20:	3f 93       	push	r19
    1e22:	4f 93       	push	r20
    1e24:	5f 93       	push	r21
    1e26:	6f 93       	push	r22
    1e28:	7f 93       	push	r23
    1e2a:	8f 93       	push	r24
    1e2c:	9f 93       	push	r25
    1e2e:	af 93       	push	r26
    1e30:	bf 93       	push	r27
    1e32:	ef 93       	push	r30
    1e34:	ff 93       	push	r31
    1e36:	df 93       	push	r29
    1e38:	cf 93       	push	r28
    1e3a:	cd b7       	in	r28, 0x3d	; 61
    1e3c:	de b7       	in	r29, 0x3e	; 62
	if(TIMR0_OvF_SetCallBackfunc != NULL)
    1e3e:	80 91 c2 01 	lds	r24, 0x01C2
    1e42:	90 91 c3 01 	lds	r25, 0x01C3
    1e46:	00 97       	sbiw	r24, 0x00	; 0
    1e48:	29 f0       	breq	.+10     	; 0x1e54 <__vector_11+0x40>
	{
		TIMR0_OvF_SetCallBackfunc();
    1e4a:	e0 91 c2 01 	lds	r30, 0x01C2
    1e4e:	f0 91 c3 01 	lds	r31, 0x01C3
    1e52:	09 95       	icall
	}
}
    1e54:	cf 91       	pop	r28
    1e56:	df 91       	pop	r29
    1e58:	ff 91       	pop	r31
    1e5a:	ef 91       	pop	r30
    1e5c:	bf 91       	pop	r27
    1e5e:	af 91       	pop	r26
    1e60:	9f 91       	pop	r25
    1e62:	8f 91       	pop	r24
    1e64:	7f 91       	pop	r23
    1e66:	6f 91       	pop	r22
    1e68:	5f 91       	pop	r21
    1e6a:	4f 91       	pop	r20
    1e6c:	3f 91       	pop	r19
    1e6e:	2f 91       	pop	r18
    1e70:	0f 90       	pop	r0
    1e72:	0f be       	out	0x3f, r0	; 63
    1e74:	0f 90       	pop	r0
    1e76:	1f 90       	pop	r1
    1e78:	18 95       	reti

00001e7a <TIMR0_OvF_SetCallBack>:
void TIMR0_OvF_SetCallBack(void (*Copy_pCallBackFunc) (void))  /* timer 0 Overflow call back function  */
{
    1e7a:	df 93       	push	r29
    1e7c:	cf 93       	push	r28
    1e7e:	00 d0       	rcall	.+0      	; 0x1e80 <TIMR0_OvF_SetCallBack+0x6>
    1e80:	cd b7       	in	r28, 0x3d	; 61
    1e82:	de b7       	in	r29, 0x3e	; 62
    1e84:	9a 83       	std	Y+2, r25	; 0x02
    1e86:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_pCallBackFunc != NULL)
    1e88:	89 81       	ldd	r24, Y+1	; 0x01
    1e8a:	9a 81       	ldd	r25, Y+2	; 0x02
    1e8c:	00 97       	sbiw	r24, 0x00	; 0
    1e8e:	31 f0       	breq	.+12     	; 0x1e9c <TIMR0_OvF_SetCallBack+0x22>
		{
		TIMR0_OvF_SetCallBackfunc = Copy_pCallBackFunc;
    1e90:	89 81       	ldd	r24, Y+1	; 0x01
    1e92:	9a 81       	ldd	r25, Y+2	; 0x02
    1e94:	90 93 c3 01 	sts	0x01C3, r25
    1e98:	80 93 c2 01 	sts	0x01C2, r24
		}
}
    1e9c:	0f 90       	pop	r0
    1e9e:	0f 90       	pop	r0
    1ea0:	cf 91       	pop	r28
    1ea2:	df 91       	pop	r29
    1ea4:	08 95       	ret

00001ea6 <__vector_4>:
static void (* TIMR2_CTC_SetCallBackfunc) (void) =NULL;   /* pointer to timer 2 compare match ISR */
static void (* TIMR2_OvF_SetCallBackfunc) (void) =NULL;	  /* pointer to timer 2 Overflow ISR */

void __vector_4(void) __attribute__ ((signal));
void __vector_4(void)                          /* timer 2 compare match ISR */
{
    1ea6:	1f 92       	push	r1
    1ea8:	0f 92       	push	r0
    1eaa:	0f b6       	in	r0, 0x3f	; 63
    1eac:	0f 92       	push	r0
    1eae:	11 24       	eor	r1, r1
    1eb0:	2f 93       	push	r18
    1eb2:	3f 93       	push	r19
    1eb4:	4f 93       	push	r20
    1eb6:	5f 93       	push	r21
    1eb8:	6f 93       	push	r22
    1eba:	7f 93       	push	r23
    1ebc:	8f 93       	push	r24
    1ebe:	9f 93       	push	r25
    1ec0:	af 93       	push	r26
    1ec2:	bf 93       	push	r27
    1ec4:	ef 93       	push	r30
    1ec6:	ff 93       	push	r31
    1ec8:	df 93       	push	r29
    1eca:	cf 93       	push	r28
    1ecc:	cd b7       	in	r28, 0x3d	; 61
    1ece:	de b7       	in	r29, 0x3e	; 62
	if(TIMR2_CTC_SetCallBackfunc != NULL)
    1ed0:	80 91 c4 01 	lds	r24, 0x01C4
    1ed4:	90 91 c5 01 	lds	r25, 0x01C5
    1ed8:	00 97       	sbiw	r24, 0x00	; 0
    1eda:	29 f0       	breq	.+10     	; 0x1ee6 <__vector_4+0x40>
	{
		TIMR2_CTC_SetCallBackfunc();
    1edc:	e0 91 c4 01 	lds	r30, 0x01C4
    1ee0:	f0 91 c5 01 	lds	r31, 0x01C5
    1ee4:	09 95       	icall
	}
}
    1ee6:	cf 91       	pop	r28
    1ee8:	df 91       	pop	r29
    1eea:	ff 91       	pop	r31
    1eec:	ef 91       	pop	r30
    1eee:	bf 91       	pop	r27
    1ef0:	af 91       	pop	r26
    1ef2:	9f 91       	pop	r25
    1ef4:	8f 91       	pop	r24
    1ef6:	7f 91       	pop	r23
    1ef8:	6f 91       	pop	r22
    1efa:	5f 91       	pop	r21
    1efc:	4f 91       	pop	r20
    1efe:	3f 91       	pop	r19
    1f00:	2f 91       	pop	r18
    1f02:	0f 90       	pop	r0
    1f04:	0f be       	out	0x3f, r0	; 63
    1f06:	0f 90       	pop	r0
    1f08:	1f 90       	pop	r1
    1f0a:	18 95       	reti

00001f0c <TIMR2_CTC_SetCallBack>:

void TIMR2_CTC_SetCallBack(void (*Copy_pCallBackFunc) (void))	/* timer 2 compare match call back function */
{
    1f0c:	df 93       	push	r29
    1f0e:	cf 93       	push	r28
    1f10:	00 d0       	rcall	.+0      	; 0x1f12 <TIMR2_CTC_SetCallBack+0x6>
    1f12:	cd b7       	in	r28, 0x3d	; 61
    1f14:	de b7       	in	r29, 0x3e	; 62
    1f16:	9a 83       	std	Y+2, r25	; 0x02
    1f18:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_pCallBackFunc != NULL)
    1f1a:	89 81       	ldd	r24, Y+1	; 0x01
    1f1c:	9a 81       	ldd	r25, Y+2	; 0x02
    1f1e:	00 97       	sbiw	r24, 0x00	; 0
    1f20:	31 f0       	breq	.+12     	; 0x1f2e <TIMR2_CTC_SetCallBack+0x22>
	{
		TIMR2_CTC_SetCallBackfunc = Copy_pCallBackFunc;
    1f22:	89 81       	ldd	r24, Y+1	; 0x01
    1f24:	9a 81       	ldd	r25, Y+2	; 0x02
    1f26:	90 93 c5 01 	sts	0x01C5, r25
    1f2a:	80 93 c4 01 	sts	0x01C4, r24
	}
}
    1f2e:	0f 90       	pop	r0
    1f30:	0f 90       	pop	r0
    1f32:	cf 91       	pop	r28
    1f34:	df 91       	pop	r29
    1f36:	08 95       	ret

00001f38 <__vector_5>:
void __vector_5(void) __attribute__ ((signal));
void __vector_5(void)						/* timer 0 Overflow ISR */
{
    1f38:	1f 92       	push	r1
    1f3a:	0f 92       	push	r0
    1f3c:	0f b6       	in	r0, 0x3f	; 63
    1f3e:	0f 92       	push	r0
    1f40:	11 24       	eor	r1, r1
    1f42:	2f 93       	push	r18
    1f44:	3f 93       	push	r19
    1f46:	4f 93       	push	r20
    1f48:	5f 93       	push	r21
    1f4a:	6f 93       	push	r22
    1f4c:	7f 93       	push	r23
    1f4e:	8f 93       	push	r24
    1f50:	9f 93       	push	r25
    1f52:	af 93       	push	r26
    1f54:	bf 93       	push	r27
    1f56:	ef 93       	push	r30
    1f58:	ff 93       	push	r31
    1f5a:	df 93       	push	r29
    1f5c:	cf 93       	push	r28
    1f5e:	cd b7       	in	r28, 0x3d	; 61
    1f60:	de b7       	in	r29, 0x3e	; 62
	if(TIMR0_OvF_SetCallBackfunc != NULL)
    1f62:	80 91 c2 01 	lds	r24, 0x01C2
    1f66:	90 91 c3 01 	lds	r25, 0x01C3
    1f6a:	00 97       	sbiw	r24, 0x00	; 0
    1f6c:	29 f0       	breq	.+10     	; 0x1f78 <__vector_5+0x40>
	{
		TIMR0_OvF_SetCallBackfunc();
    1f6e:	e0 91 c2 01 	lds	r30, 0x01C2
    1f72:	f0 91 c3 01 	lds	r31, 0x01C3
    1f76:	09 95       	icall
	}
}
    1f78:	cf 91       	pop	r28
    1f7a:	df 91       	pop	r29
    1f7c:	ff 91       	pop	r31
    1f7e:	ef 91       	pop	r30
    1f80:	bf 91       	pop	r27
    1f82:	af 91       	pop	r26
    1f84:	9f 91       	pop	r25
    1f86:	8f 91       	pop	r24
    1f88:	7f 91       	pop	r23
    1f8a:	6f 91       	pop	r22
    1f8c:	5f 91       	pop	r21
    1f8e:	4f 91       	pop	r20
    1f90:	3f 91       	pop	r19
    1f92:	2f 91       	pop	r18
    1f94:	0f 90       	pop	r0
    1f96:	0f be       	out	0x3f, r0	; 63
    1f98:	0f 90       	pop	r0
    1f9a:	1f 90       	pop	r1
    1f9c:	18 95       	reti

00001f9e <TIMR2_OvF_SetCallBack>:
void TIMR2_OvF_SetCallBack(void (*Copy_pCallBackFunc) (void))  /* timer 2 Overflow call back function  */
{
    1f9e:	df 93       	push	r29
    1fa0:	cf 93       	push	r28
    1fa2:	00 d0       	rcall	.+0      	; 0x1fa4 <TIMR2_OvF_SetCallBack+0x6>
    1fa4:	cd b7       	in	r28, 0x3d	; 61
    1fa6:	de b7       	in	r29, 0x3e	; 62
    1fa8:	9a 83       	std	Y+2, r25	; 0x02
    1faa:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_pCallBackFunc != NULL)
    1fac:	89 81       	ldd	r24, Y+1	; 0x01
    1fae:	9a 81       	ldd	r25, Y+2	; 0x02
    1fb0:	00 97       	sbiw	r24, 0x00	; 0
    1fb2:	31 f0       	breq	.+12     	; 0x1fc0 <TIMR2_OvF_SetCallBack+0x22>
		{
		TIMR2_OvF_SetCallBackfunc = Copy_pCallBackFunc;
    1fb4:	89 81       	ldd	r24, Y+1	; 0x01
    1fb6:	9a 81       	ldd	r25, Y+2	; 0x02
    1fb8:	90 93 c7 01 	sts	0x01C7, r25
    1fbc:	80 93 c6 01 	sts	0x01C6, r24
		}
}
    1fc0:	0f 90       	pop	r0
    1fc2:	0f 90       	pop	r0
    1fc4:	cf 91       	pop	r28
    1fc6:	df 91       	pop	r29
    1fc8:	08 95       	ret

00001fca <__vector_7>:
static void (* TIMR1_OvF_SetCallBackfunc) (void) =NULL;	  /* pointer to timer 1 Overflow ISR */
static void (* TIMR1_ICU_SetCallBackfunc) (void) =NULL;	  /* pointer to timer 1 Capture unit ISR */

void __vector_7(void) __attribute__ ((signal));
void __vector_7(void)                          /* timer 1 compare match A ISR */
{
    1fca:	1f 92       	push	r1
    1fcc:	0f 92       	push	r0
    1fce:	0f b6       	in	r0, 0x3f	; 63
    1fd0:	0f 92       	push	r0
    1fd2:	11 24       	eor	r1, r1
    1fd4:	2f 93       	push	r18
    1fd6:	3f 93       	push	r19
    1fd8:	4f 93       	push	r20
    1fda:	5f 93       	push	r21
    1fdc:	6f 93       	push	r22
    1fde:	7f 93       	push	r23
    1fe0:	8f 93       	push	r24
    1fe2:	9f 93       	push	r25
    1fe4:	af 93       	push	r26
    1fe6:	bf 93       	push	r27
    1fe8:	ef 93       	push	r30
    1fea:	ff 93       	push	r31
    1fec:	df 93       	push	r29
    1fee:	cf 93       	push	r28
    1ff0:	cd b7       	in	r28, 0x3d	; 61
    1ff2:	de b7       	in	r29, 0x3e	; 62
	if(TIMR1_CTCA_SetCallBackfunc != NULL)
    1ff4:	80 91 c8 01 	lds	r24, 0x01C8
    1ff8:	90 91 c9 01 	lds	r25, 0x01C9
    1ffc:	00 97       	sbiw	r24, 0x00	; 0
    1ffe:	29 f0       	breq	.+10     	; 0x200a <__vector_7+0x40>
	{
		TIMR1_CTCA_SetCallBackfunc();
    2000:	e0 91 c8 01 	lds	r30, 0x01C8
    2004:	f0 91 c9 01 	lds	r31, 0x01C9
    2008:	09 95       	icall
	}
}
    200a:	cf 91       	pop	r28
    200c:	df 91       	pop	r29
    200e:	ff 91       	pop	r31
    2010:	ef 91       	pop	r30
    2012:	bf 91       	pop	r27
    2014:	af 91       	pop	r26
    2016:	9f 91       	pop	r25
    2018:	8f 91       	pop	r24
    201a:	7f 91       	pop	r23
    201c:	6f 91       	pop	r22
    201e:	5f 91       	pop	r21
    2020:	4f 91       	pop	r20
    2022:	3f 91       	pop	r19
    2024:	2f 91       	pop	r18
    2026:	0f 90       	pop	r0
    2028:	0f be       	out	0x3f, r0	; 63
    202a:	0f 90       	pop	r0
    202c:	1f 90       	pop	r1
    202e:	18 95       	reti

00002030 <TIMR1_CTCA_SetCallBack>:

void TIMR1_CTCA_SetCallBack(void (*Copy_pCallBackFunc) (void))	/* timer 1 compare match A call back function */
{
    2030:	df 93       	push	r29
    2032:	cf 93       	push	r28
    2034:	00 d0       	rcall	.+0      	; 0x2036 <TIMR1_CTCA_SetCallBack+0x6>
    2036:	cd b7       	in	r28, 0x3d	; 61
    2038:	de b7       	in	r29, 0x3e	; 62
    203a:	9a 83       	std	Y+2, r25	; 0x02
    203c:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_pCallBackFunc != NULL)
    203e:	89 81       	ldd	r24, Y+1	; 0x01
    2040:	9a 81       	ldd	r25, Y+2	; 0x02
    2042:	00 97       	sbiw	r24, 0x00	; 0
    2044:	31 f0       	breq	.+12     	; 0x2052 <TIMR1_CTCA_SetCallBack+0x22>
	{
		TIMR1_CTCA_SetCallBackfunc = Copy_pCallBackFunc;
    2046:	89 81       	ldd	r24, Y+1	; 0x01
    2048:	9a 81       	ldd	r25, Y+2	; 0x02
    204a:	90 93 c9 01 	sts	0x01C9, r25
    204e:	80 93 c8 01 	sts	0x01C8, r24
	}
}
    2052:	0f 90       	pop	r0
    2054:	0f 90       	pop	r0
    2056:	cf 91       	pop	r28
    2058:	df 91       	pop	r29
    205a:	08 95       	ret

0000205c <__vector_8>:


void __vector_8(void) __attribute__ ((signal));
void __vector_8(void)                          /* timer 1 compare match B ISR */
{
    205c:	1f 92       	push	r1
    205e:	0f 92       	push	r0
    2060:	0f b6       	in	r0, 0x3f	; 63
    2062:	0f 92       	push	r0
    2064:	11 24       	eor	r1, r1
    2066:	2f 93       	push	r18
    2068:	3f 93       	push	r19
    206a:	4f 93       	push	r20
    206c:	5f 93       	push	r21
    206e:	6f 93       	push	r22
    2070:	7f 93       	push	r23
    2072:	8f 93       	push	r24
    2074:	9f 93       	push	r25
    2076:	af 93       	push	r26
    2078:	bf 93       	push	r27
    207a:	ef 93       	push	r30
    207c:	ff 93       	push	r31
    207e:	df 93       	push	r29
    2080:	cf 93       	push	r28
    2082:	cd b7       	in	r28, 0x3d	; 61
    2084:	de b7       	in	r29, 0x3e	; 62
	if(TIMR1_CTCB_SetCallBackfunc != NULL)
    2086:	80 91 ca 01 	lds	r24, 0x01CA
    208a:	90 91 cb 01 	lds	r25, 0x01CB
    208e:	00 97       	sbiw	r24, 0x00	; 0
    2090:	29 f0       	breq	.+10     	; 0x209c <__vector_8+0x40>
	{
		TIMR1_CTCB_SetCallBackfunc();
    2092:	e0 91 ca 01 	lds	r30, 0x01CA
    2096:	f0 91 cb 01 	lds	r31, 0x01CB
    209a:	09 95       	icall
	}
}
    209c:	cf 91       	pop	r28
    209e:	df 91       	pop	r29
    20a0:	ff 91       	pop	r31
    20a2:	ef 91       	pop	r30
    20a4:	bf 91       	pop	r27
    20a6:	af 91       	pop	r26
    20a8:	9f 91       	pop	r25
    20aa:	8f 91       	pop	r24
    20ac:	7f 91       	pop	r23
    20ae:	6f 91       	pop	r22
    20b0:	5f 91       	pop	r21
    20b2:	4f 91       	pop	r20
    20b4:	3f 91       	pop	r19
    20b6:	2f 91       	pop	r18
    20b8:	0f 90       	pop	r0
    20ba:	0f be       	out	0x3f, r0	; 63
    20bc:	0f 90       	pop	r0
    20be:	1f 90       	pop	r1
    20c0:	18 95       	reti

000020c2 <TIMR1_CTCB_SetCallBack>:

void TIMR1_CTCB_SetCallBack(void (*Copy_pCallBackFunc) (void))	/* timer 1 compare match B call back function */
{
    20c2:	df 93       	push	r29
    20c4:	cf 93       	push	r28
    20c6:	00 d0       	rcall	.+0      	; 0x20c8 <TIMR1_CTCB_SetCallBack+0x6>
    20c8:	cd b7       	in	r28, 0x3d	; 61
    20ca:	de b7       	in	r29, 0x3e	; 62
    20cc:	9a 83       	std	Y+2, r25	; 0x02
    20ce:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_pCallBackFunc != NULL)
    20d0:	89 81       	ldd	r24, Y+1	; 0x01
    20d2:	9a 81       	ldd	r25, Y+2	; 0x02
    20d4:	00 97       	sbiw	r24, 0x00	; 0
    20d6:	31 f0       	breq	.+12     	; 0x20e4 <TIMR1_CTCB_SetCallBack+0x22>
	{
		TIMR1_CTCB_SetCallBackfunc = Copy_pCallBackFunc;
    20d8:	89 81       	ldd	r24, Y+1	; 0x01
    20da:	9a 81       	ldd	r25, Y+2	; 0x02
    20dc:	90 93 cb 01 	sts	0x01CB, r25
    20e0:	80 93 ca 01 	sts	0x01CA, r24
	}
}
    20e4:	0f 90       	pop	r0
    20e6:	0f 90       	pop	r0
    20e8:	cf 91       	pop	r28
    20ea:	df 91       	pop	r29
    20ec:	08 95       	ret

000020ee <__vector_9>:


void __vector_9(void) __attribute__ ((signal));
void __vector_9(void)						/* timer 1 Overflow ISR */
{
    20ee:	1f 92       	push	r1
    20f0:	0f 92       	push	r0
    20f2:	0f b6       	in	r0, 0x3f	; 63
    20f4:	0f 92       	push	r0
    20f6:	11 24       	eor	r1, r1
    20f8:	2f 93       	push	r18
    20fa:	3f 93       	push	r19
    20fc:	4f 93       	push	r20
    20fe:	5f 93       	push	r21
    2100:	6f 93       	push	r22
    2102:	7f 93       	push	r23
    2104:	8f 93       	push	r24
    2106:	9f 93       	push	r25
    2108:	af 93       	push	r26
    210a:	bf 93       	push	r27
    210c:	ef 93       	push	r30
    210e:	ff 93       	push	r31
    2110:	df 93       	push	r29
    2112:	cf 93       	push	r28
    2114:	cd b7       	in	r28, 0x3d	; 61
    2116:	de b7       	in	r29, 0x3e	; 62
	if(TIMR1_OvF_SetCallBackfunc != NULL)
    2118:	80 91 cc 01 	lds	r24, 0x01CC
    211c:	90 91 cd 01 	lds	r25, 0x01CD
    2120:	00 97       	sbiw	r24, 0x00	; 0
    2122:	29 f0       	breq	.+10     	; 0x212e <__vector_9+0x40>
	{
		TIMR1_OvF_SetCallBackfunc();
    2124:	e0 91 cc 01 	lds	r30, 0x01CC
    2128:	f0 91 cd 01 	lds	r31, 0x01CD
    212c:	09 95       	icall
	}
}
    212e:	cf 91       	pop	r28
    2130:	df 91       	pop	r29
    2132:	ff 91       	pop	r31
    2134:	ef 91       	pop	r30
    2136:	bf 91       	pop	r27
    2138:	af 91       	pop	r26
    213a:	9f 91       	pop	r25
    213c:	8f 91       	pop	r24
    213e:	7f 91       	pop	r23
    2140:	6f 91       	pop	r22
    2142:	5f 91       	pop	r21
    2144:	4f 91       	pop	r20
    2146:	3f 91       	pop	r19
    2148:	2f 91       	pop	r18
    214a:	0f 90       	pop	r0
    214c:	0f be       	out	0x3f, r0	; 63
    214e:	0f 90       	pop	r0
    2150:	1f 90       	pop	r1
    2152:	18 95       	reti

00002154 <TIMR1_OvF_SetCallBack>:
void TIMR1_OvF_SetCallBack(void (*Copy_pCallBackFunc) (void))  /* timer 1 Overflow call back function  */
{
    2154:	df 93       	push	r29
    2156:	cf 93       	push	r28
    2158:	00 d0       	rcall	.+0      	; 0x215a <TIMR1_OvF_SetCallBack+0x6>
    215a:	cd b7       	in	r28, 0x3d	; 61
    215c:	de b7       	in	r29, 0x3e	; 62
    215e:	9a 83       	std	Y+2, r25	; 0x02
    2160:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_pCallBackFunc != NULL)
    2162:	89 81       	ldd	r24, Y+1	; 0x01
    2164:	9a 81       	ldd	r25, Y+2	; 0x02
    2166:	00 97       	sbiw	r24, 0x00	; 0
    2168:	31 f0       	breq	.+12     	; 0x2176 <TIMR1_OvF_SetCallBack+0x22>
		{
		TIMR1_OvF_SetCallBackfunc = Copy_pCallBackFunc;
    216a:	89 81       	ldd	r24, Y+1	; 0x01
    216c:	9a 81       	ldd	r25, Y+2	; 0x02
    216e:	90 93 cd 01 	sts	0x01CD, r25
    2172:	80 93 cc 01 	sts	0x01CC, r24
		}
}
    2176:	0f 90       	pop	r0
    2178:	0f 90       	pop	r0
    217a:	cf 91       	pop	r28
    217c:	df 91       	pop	r29
    217e:	08 95       	ret

00002180 <__vector_6>:


void __vector_6(void) __attribute__ ((signal));
void __vector_6(void)						/* timer 1 Capture event ISR */
{
    2180:	1f 92       	push	r1
    2182:	0f 92       	push	r0
    2184:	0f b6       	in	r0, 0x3f	; 63
    2186:	0f 92       	push	r0
    2188:	11 24       	eor	r1, r1
    218a:	2f 93       	push	r18
    218c:	3f 93       	push	r19
    218e:	4f 93       	push	r20
    2190:	5f 93       	push	r21
    2192:	6f 93       	push	r22
    2194:	7f 93       	push	r23
    2196:	8f 93       	push	r24
    2198:	9f 93       	push	r25
    219a:	af 93       	push	r26
    219c:	bf 93       	push	r27
    219e:	ef 93       	push	r30
    21a0:	ff 93       	push	r31
    21a2:	df 93       	push	r29
    21a4:	cf 93       	push	r28
    21a6:	cd b7       	in	r28, 0x3d	; 61
    21a8:	de b7       	in	r29, 0x3e	; 62
	if(TIMR1_ICU_SetCallBackfunc != NULL)
    21aa:	80 91 ce 01 	lds	r24, 0x01CE
    21ae:	90 91 cf 01 	lds	r25, 0x01CF
    21b2:	00 97       	sbiw	r24, 0x00	; 0
    21b4:	29 f0       	breq	.+10     	; 0x21c0 <__vector_6+0x40>
	{
		TIMR1_ICU_SetCallBackfunc();
    21b6:	e0 91 ce 01 	lds	r30, 0x01CE
    21ba:	f0 91 cf 01 	lds	r31, 0x01CF
    21be:	09 95       	icall
	}
}
    21c0:	cf 91       	pop	r28
    21c2:	df 91       	pop	r29
    21c4:	ff 91       	pop	r31
    21c6:	ef 91       	pop	r30
    21c8:	bf 91       	pop	r27
    21ca:	af 91       	pop	r26
    21cc:	9f 91       	pop	r25
    21ce:	8f 91       	pop	r24
    21d0:	7f 91       	pop	r23
    21d2:	6f 91       	pop	r22
    21d4:	5f 91       	pop	r21
    21d6:	4f 91       	pop	r20
    21d8:	3f 91       	pop	r19
    21da:	2f 91       	pop	r18
    21dc:	0f 90       	pop	r0
    21de:	0f be       	out	0x3f, r0	; 63
    21e0:	0f 90       	pop	r0
    21e2:	1f 90       	pop	r1
    21e4:	18 95       	reti

000021e6 <TIMR1_ICU_SetCallBack>:
void TIMR1_ICU_SetCallBack(void (*Copy_pCallBackFunc) (void))  /* timer 1 Overflow call back function  */
{
    21e6:	df 93       	push	r29
    21e8:	cf 93       	push	r28
    21ea:	00 d0       	rcall	.+0      	; 0x21ec <TIMR1_ICU_SetCallBack+0x6>
    21ec:	cd b7       	in	r28, 0x3d	; 61
    21ee:	de b7       	in	r29, 0x3e	; 62
    21f0:	9a 83       	std	Y+2, r25	; 0x02
    21f2:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_pCallBackFunc != NULL)
    21f4:	89 81       	ldd	r24, Y+1	; 0x01
    21f6:	9a 81       	ldd	r25, Y+2	; 0x02
    21f8:	00 97       	sbiw	r24, 0x00	; 0
    21fa:	31 f0       	breq	.+12     	; 0x2208 <TIMR1_ICU_SetCallBack+0x22>
		{
		TIMR1_ICU_SetCallBackfunc = Copy_pCallBackFunc;
    21fc:	89 81       	ldd	r24, Y+1	; 0x01
    21fe:	9a 81       	ldd	r25, Y+2	; 0x02
    2200:	90 93 cf 01 	sts	0x01CF, r25
    2204:	80 93 ce 01 	sts	0x01CE, r24
		}
}
    2208:	0f 90       	pop	r0
    220a:	0f 90       	pop	r0
    220c:	cf 91       	pop	r28
    220e:	df 91       	pop	r29
    2210:	08 95       	ret

00002212 <SPI_Void_Init_Master>:
#include "SPI_private.h"
#include "SPI_interface.h"
#include "SPI_config.h"
#include "../DIO/DIO_interface.h"
void SPI_Void_Init_Master()
{
    2212:	df 93       	push	r29
    2214:	cf 93       	push	r28
    2216:	cd b7       	in	r28, 0x3d	; 61
    2218:	de b7       	in	r29, 0x3e	; 62

	/* SPI Interrupt */
	SPCR |= SPI_Interrupt<< SPCR_SPIE_PIN;
    221a:	ad e2       	ldi	r26, 0x2D	; 45
    221c:	b0 e0       	ldi	r27, 0x00	; 0
    221e:	ed e2       	ldi	r30, 0x2D	; 45
    2220:	f0 e0       	ldi	r31, 0x00	; 0
    2222:	80 81       	ld	r24, Z
    2224:	80 68       	ori	r24, 0x80	; 128
    2226:	8c 93       	st	X, r24
	/* Data Order */
	SPCR |= Data_Order<<SPCR_DORD_PIN;
    2228:	ad e2       	ldi	r26, 0x2D	; 45
    222a:	b0 e0       	ldi	r27, 0x00	; 0
    222c:	ed e2       	ldi	r30, 0x2D	; 45
    222e:	f0 e0       	ldi	r31, 0x00	; 0
    2230:	80 81       	ld	r24, Z
    2232:	8c 93       	st	X, r24
	/* Clock Polarity */
	SPCR |= Clock_Polarity<<SPCR_CPOL_PIN;
    2234:	ad e2       	ldi	r26, 0x2D	; 45
    2236:	b0 e0       	ldi	r27, 0x00	; 0
    2238:	ed e2       	ldi	r30, 0x2D	; 45
    223a:	f0 e0       	ldi	r31, 0x00	; 0
    223c:	80 81       	ld	r24, Z
    223e:	8c 93       	st	X, r24
	/* Master select*/
	SET_BIT(SPCR,SPCR_MSTR_PIN);
    2240:	ad e2       	ldi	r26, 0x2D	; 45
    2242:	b0 e0       	ldi	r27, 0x00	; 0
    2244:	ed e2       	ldi	r30, 0x2D	; 45
    2246:	f0 e0       	ldi	r31, 0x00	; 0
    2248:	80 81       	ld	r24, Z
    224a:	80 61       	ori	r24, 0x10	; 16
    224c:	8c 93       	st	X, r24
	/* Clock Phase */
	SPCR |= Clock_Phase<<SPCR_CPHA_PIN;
    224e:	ad e2       	ldi	r26, 0x2D	; 45
    2250:	b0 e0       	ldi	r27, 0x00	; 0
    2252:	ed e2       	ldi	r30, 0x2D	; 45
    2254:	f0 e0       	ldi	r31, 0x00	; 0
    2256:	80 81       	ld	r24, Z
    2258:	8c 93       	st	X, r24
	/* Clock Rate Select */
	SPCR |= (((SCK_Frequency<<6)>>6)<<SPCR_SPR0_PIN);
    225a:	ad e2       	ldi	r26, 0x2D	; 45
    225c:	b0 e0       	ldi	r27, 0x00	; 0
    225e:	ed e2       	ldi	r30, 0x2D	; 45
    2260:	f0 e0       	ldi	r31, 0x00	; 0
    2262:	80 81       	ld	r24, Z
    2264:	82 60       	ori	r24, 0x02	; 2
    2266:	8c 93       	st	X, r24
	SPSR |= (SCK_Frequency>>2)<<SPSR_SPI2X_PIN;
    2268:	ae e2       	ldi	r26, 0x2E	; 46
    226a:	b0 e0       	ldi	r27, 0x00	; 0
    226c:	ee e2       	ldi	r30, 0x2E	; 46
    226e:	f0 e0       	ldi	r31, 0x00	; 0
    2270:	80 81       	ld	r24, Z
    2272:	8c 93       	st	X, r24
	/*  SPI Enable */
	SET_BIT(SPCR,SPCR_SPE_PIN);
    2274:	ad e2       	ldi	r26, 0x2D	; 45
    2276:	b0 e0       	ldi	r27, 0x00	; 0
    2278:	ed e2       	ldi	r30, 0x2D	; 45
    227a:	f0 e0       	ldi	r31, 0x00	; 0
    227c:	80 81       	ld	r24, Z
    227e:	80 64       	ori	r24, 0x40	; 64
    2280:	8c 93       	st	X, r24
}
    2282:	cf 91       	pop	r28
    2284:	df 91       	pop	r29
    2286:	08 95       	ret

00002288 <SPI_Void_Init_Slave>:

void SPI_Void_Init_Slave()
{
    2288:	df 93       	push	r29
    228a:	cf 93       	push	r28
    228c:	cd b7       	in	r28, 0x3d	; 61
    228e:	de b7       	in	r29, 0x3e	; 62
	DIO_VidSetPinDirection(Port_B,Pin_4,input);  		/* Slave Select setup */
    2290:	83 e0       	ldi	r24, 0x03	; 3
    2292:	64 e0       	ldi	r22, 0x04	; 4
    2294:	40 e0       	ldi	r20, 0x00	; 0
    2296:	0e 94 37 14 	call	0x286e	; 0x286e <DIO_VidSetPinDirection>
	DIO_VidSetPinDirection(Port_B,Pin_5,input);			/* MOSI */
    229a:	83 e0       	ldi	r24, 0x03	; 3
    229c:	65 e0       	ldi	r22, 0x05	; 5
    229e:	40 e0       	ldi	r20, 0x00	; 0
    22a0:	0e 94 37 14 	call	0x286e	; 0x286e <DIO_VidSetPinDirection>
	DIO_VidSetPinDirection(Port_B,Pin_6,output);		/* MISO */
    22a4:	83 e0       	ldi	r24, 0x03	; 3
    22a6:	66 e0       	ldi	r22, 0x06	; 6
    22a8:	41 e0       	ldi	r20, 0x01	; 1
    22aa:	0e 94 37 14 	call	0x286e	; 0x286e <DIO_VidSetPinDirection>
	DIO_VidSetPinDirection(Port_B,Pin_7,input);			/* SCK */
    22ae:	83 e0       	ldi	r24, 0x03	; 3
    22b0:	67 e0       	ldi	r22, 0x07	; 7
    22b2:	40 e0       	ldi	r20, 0x00	; 0
    22b4:	0e 94 37 14 	call	0x286e	; 0x286e <DIO_VidSetPinDirection>

	/* set the settings same as the master but don not set the relation between SCK and the Oscillator Frequency */
	/* SPI Interrupt */
	SPCR |= SPI_Interrupt<< SPCR_SPIE_PIN;
    22b8:	ad e2       	ldi	r26, 0x2D	; 45
    22ba:	b0 e0       	ldi	r27, 0x00	; 0
    22bc:	ed e2       	ldi	r30, 0x2D	; 45
    22be:	f0 e0       	ldi	r31, 0x00	; 0
    22c0:	80 81       	ld	r24, Z
    22c2:	80 68       	ori	r24, 0x80	; 128
    22c4:	8c 93       	st	X, r24
	/* Data Order */
	SPCR |= Data_Order<<SPCR_DORD_PIN;
    22c6:	ad e2       	ldi	r26, 0x2D	; 45
    22c8:	b0 e0       	ldi	r27, 0x00	; 0
    22ca:	ed e2       	ldi	r30, 0x2D	; 45
    22cc:	f0 e0       	ldi	r31, 0x00	; 0
    22ce:	80 81       	ld	r24, Z
    22d0:	8c 93       	st	X, r24
	/* Clock Polarity */
	SPCR |= Clock_Polarity<<SPCR_CPOL_PIN;
    22d2:	ad e2       	ldi	r26, 0x2D	; 45
    22d4:	b0 e0       	ldi	r27, 0x00	; 0
    22d6:	ed e2       	ldi	r30, 0x2D	; 45
    22d8:	f0 e0       	ldi	r31, 0x00	; 0
    22da:	80 81       	ld	r24, Z
    22dc:	8c 93       	st	X, r24
	/* Slave select*/
	CLEAR_BIT(SPCR,SPCR_MSTR_PIN);
    22de:	ad e2       	ldi	r26, 0x2D	; 45
    22e0:	b0 e0       	ldi	r27, 0x00	; 0
    22e2:	ed e2       	ldi	r30, 0x2D	; 45
    22e4:	f0 e0       	ldi	r31, 0x00	; 0
    22e6:	80 81       	ld	r24, Z
    22e8:	8f 7e       	andi	r24, 0xEF	; 239
    22ea:	8c 93       	st	X, r24
	/* Clock Phase */
	SPCR |= Clock_Phase<<SPCR_CPHA_PIN;
    22ec:	ad e2       	ldi	r26, 0x2D	; 45
    22ee:	b0 e0       	ldi	r27, 0x00	; 0
    22f0:	ed e2       	ldi	r30, 0x2D	; 45
    22f2:	f0 e0       	ldi	r31, 0x00	; 0
    22f4:	80 81       	ld	r24, Z
    22f6:	8c 93       	st	X, r24
	/*  SPI Enable */
	SET_BIT(SPCR,SPCR_SPE_PIN);
    22f8:	ad e2       	ldi	r26, 0x2D	; 45
    22fa:	b0 e0       	ldi	r27, 0x00	; 0
    22fc:	ed e2       	ldi	r30, 0x2D	; 45
    22fe:	f0 e0       	ldi	r31, 0x00	; 0
    2300:	80 81       	ld	r24, Z
    2302:	80 64       	ori	r24, 0x40	; 64
    2304:	8c 93       	st	X, r24
}
    2306:	cf 91       	pop	r28
    2308:	df 91       	pop	r29
    230a:	08 95       	ret

0000230c <SPI_u8_TransmitReceive>:

u8 SPI_u8_TransmitReceive( u8 Copy_u8_Data )
{
    230c:	df 93       	push	r29
    230e:	cf 93       	push	r28
    2310:	0f 92       	push	r0
    2312:	cd b7       	in	r28, 0x3d	; 61
    2314:	de b7       	in	r29, 0x3e	; 62
    2316:	89 83       	std	Y+1, r24	; 0x01
	/* Send Data */
	SPDR = Copy_u8_Data;
    2318:	ef e2       	ldi	r30, 0x2F	; 47
    231a:	f0 e0       	ldi	r31, 0x00	; 0
    231c:	89 81       	ldd	r24, Y+1	; 0x01
    231e:	80 83       	st	Z, r24
	/* Wait until the process is complete */
	while(GET_BIT(SPSR,SPSR_SPIF_PIN) == 0 );
    2320:	ee e2       	ldi	r30, 0x2E	; 46
    2322:	f0 e0       	ldi	r31, 0x00	; 0
    2324:	80 81       	ld	r24, Z
    2326:	88 23       	and	r24, r24
    2328:	dc f7       	brge	.-10     	; 0x2320 <SPI_u8_TransmitReceive+0x14>
	/* Return Received Data */
	return SPDR;
    232a:	ef e2       	ldi	r30, 0x2F	; 47
    232c:	f0 e0       	ldi	r31, 0x00	; 0
    232e:	80 81       	ld	r24, Z
}
    2330:	0f 90       	pop	r0
    2332:	cf 91       	pop	r28
    2334:	df 91       	pop	r29
    2336:	08 95       	ret

00002338 <SPI_void_Transmit>:
void SPI_void_Transmit(u8 Copy_u8_Data)
{
    2338:	df 93       	push	r29
    233a:	cf 93       	push	r28
    233c:	0f 92       	push	r0
    233e:	cd b7       	in	r28, 0x3d	; 61
    2340:	de b7       	in	r29, 0x3e	; 62
    2342:	89 83       	std	Y+1, r24	; 0x01
	/* Send Data */
	SPDR = Copy_u8_Data;
    2344:	ef e2       	ldi	r30, 0x2F	; 47
    2346:	f0 e0       	ldi	r31, 0x00	; 0
    2348:	89 81       	ldd	r24, Y+1	; 0x01
    234a:	80 83       	st	Z, r24
}
    234c:	0f 90       	pop	r0
    234e:	cf 91       	pop	r28
    2350:	df 91       	pop	r29
    2352:	08 95       	ret

00002354 <SPI_INT_Call_Back>:
void (* SPI_INT_func) (void) = NULL;
u8 * Global_Pu8_SPDR = NULL;

/* In main: define a function for the task and call it back using this function also define a global variable for the SPDR */
void SPI_INT_Call_Back(void (*func) (void), u8 * Copy_Pu8_SPDR)
{
    2354:	df 93       	push	r29
    2356:	cf 93       	push	r28
    2358:	00 d0       	rcall	.+0      	; 0x235a <SPI_INT_Call_Back+0x6>
    235a:	00 d0       	rcall	.+0      	; 0x235c <SPI_INT_Call_Back+0x8>
    235c:	cd b7       	in	r28, 0x3d	; 61
    235e:	de b7       	in	r29, 0x3e	; 62
    2360:	9a 83       	std	Y+2, r25	; 0x02
    2362:	89 83       	std	Y+1, r24	; 0x01
    2364:	7c 83       	std	Y+4, r23	; 0x04
    2366:	6b 83       	std	Y+3, r22	; 0x03
	SPI_INT_func = func;
    2368:	89 81       	ldd	r24, Y+1	; 0x01
    236a:	9a 81       	ldd	r25, Y+2	; 0x02
    236c:	90 93 d1 01 	sts	0x01D1, r25
    2370:	80 93 d0 01 	sts	0x01D0, r24
	*Global_Pu8_SPDR = *Copy_Pu8_SPDR;
    2374:	a0 91 d2 01 	lds	r26, 0x01D2
    2378:	b0 91 d3 01 	lds	r27, 0x01D3
    237c:	eb 81       	ldd	r30, Y+3	; 0x03
    237e:	fc 81       	ldd	r31, Y+4	; 0x04
    2380:	80 81       	ld	r24, Z
    2382:	8c 93       	st	X, r24
}
    2384:	0f 90       	pop	r0
    2386:	0f 90       	pop	r0
    2388:	0f 90       	pop	r0
    238a:	0f 90       	pop	r0
    238c:	cf 91       	pop	r28
    238e:	df 91       	pop	r29
    2390:	08 95       	ret

00002392 <__vector_12>:

void __vector_12 (void) __attribute__((signal));
void __vector_12 (void)
{
    2392:	1f 92       	push	r1
    2394:	0f 92       	push	r0
    2396:	0f b6       	in	r0, 0x3f	; 63
    2398:	0f 92       	push	r0
    239a:	11 24       	eor	r1, r1
    239c:	2f 93       	push	r18
    239e:	3f 93       	push	r19
    23a0:	4f 93       	push	r20
    23a2:	5f 93       	push	r21
    23a4:	6f 93       	push	r22
    23a6:	7f 93       	push	r23
    23a8:	8f 93       	push	r24
    23aa:	9f 93       	push	r25
    23ac:	af 93       	push	r26
    23ae:	bf 93       	push	r27
    23b0:	ef 93       	push	r30
    23b2:	ff 93       	push	r31
    23b4:	df 93       	push	r29
    23b6:	cf 93       	push	r28
    23b8:	cd b7       	in	r28, 0x3d	; 61
    23ba:	de b7       	in	r29, 0x3e	; 62
	*Global_Pu8_SPDR = SPDR;
    23bc:	a0 91 d2 01 	lds	r26, 0x01D2
    23c0:	b0 91 d3 01 	lds	r27, 0x01D3
    23c4:	ef e2       	ldi	r30, 0x2F	; 47
    23c6:	f0 e0       	ldi	r31, 0x00	; 0
    23c8:	80 81       	ld	r24, Z
    23ca:	8c 93       	st	X, r24
	if(SPI_INT_func != NULL )
    23cc:	80 91 d0 01 	lds	r24, 0x01D0
    23d0:	90 91 d1 01 	lds	r25, 0x01D1
    23d4:	00 97       	sbiw	r24, 0x00	; 0
    23d6:	29 f0       	breq	.+10     	; 0x23e2 <__vector_12+0x50>
		SPI_INT_func();
    23d8:	e0 91 d0 01 	lds	r30, 0x01D0
    23dc:	f0 91 d1 01 	lds	r31, 0x01D1
    23e0:	09 95       	icall
}
    23e2:	cf 91       	pop	r28
    23e4:	df 91       	pop	r29
    23e6:	ff 91       	pop	r31
    23e8:	ef 91       	pop	r30
    23ea:	bf 91       	pop	r27
    23ec:	af 91       	pop	r26
    23ee:	9f 91       	pop	r25
    23f0:	8f 91       	pop	r24
    23f2:	7f 91       	pop	r23
    23f4:	6f 91       	pop	r22
    23f6:	5f 91       	pop	r21
    23f8:	4f 91       	pop	r20
    23fa:	3f 91       	pop	r19
    23fc:	2f 91       	pop	r18
    23fe:	0f 90       	pop	r0
    2400:	0f be       	out	0x3f, r0	; 63
    2402:	0f 90       	pop	r0
    2404:	1f 90       	pop	r1
    2406:	18 95       	reti

00002408 <GIE_Vid_Enable>:
#include "GIE_private.h"

/* GIE ENABLE */

void GIE_Vid_Enable()
{
    2408:	df 93       	push	r29
    240a:	cf 93       	push	r28
    240c:	cd b7       	in	r28, 0x3d	; 61
    240e:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG,SREG_I_BIT);
    2410:	af e5       	ldi	r26, 0x5F	; 95
    2412:	b0 e0       	ldi	r27, 0x00	; 0
    2414:	ef e5       	ldi	r30, 0x5F	; 95
    2416:	f0 e0       	ldi	r31, 0x00	; 0
    2418:	80 81       	ld	r24, Z
    241a:	80 68       	ori	r24, 0x80	; 128
    241c:	8c 93       	st	X, r24
}
    241e:	cf 91       	pop	r28
    2420:	df 91       	pop	r29
    2422:	08 95       	ret

00002424 <GIE_Vid_Disable>:

/* GIE DISABLE */
void GIE_Vid_Disable()
{
    2424:	df 93       	push	r29
    2426:	cf 93       	push	r28
    2428:	cd b7       	in	r28, 0x3d	; 61
    242a:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(SREG,SREG_I_BIT);
    242c:	af e5       	ldi	r26, 0x5F	; 95
    242e:	b0 e0       	ldi	r27, 0x00	; 0
    2430:	ef e5       	ldi	r30, 0x5F	; 95
    2432:	f0 e0       	ldi	r31, 0x00	; 0
    2434:	80 81       	ld	r24, Z
    2436:	8f 77       	andi	r24, 0x7F	; 127
    2438:	8c 93       	st	X, r24
}
    243a:	cf 91       	pop	r28
    243c:	df 91       	pop	r29
    243e:	08 95       	ret

00002440 <EXTI0_Vid_Init>:
void (* EXTI0_func) (void) = NULL;
void (* EXTI1_func) (void) = NULL;
void (* EXTI2_func) (void) = NULL;

void EXTI0_Vid_Init()
{
    2440:	df 93       	push	r29
    2442:	cf 93       	push	r28
    2444:	cd b7       	in	r28, 0x3d	; 61
    2446:	de b7       	in	r29, 0x3e	; 62
#elif EXTI_SENSE_CONTROL == EXTI_RISING_EDGE_SC
	  SET_BIT(MCUCR,MCUCR_ISC01_PIN);
	  SET_BIT(MCUCR,MCUCR_ISC00_PIN);

#elif EXTI_SENSE_CONTROL == EXTI_ON_CHANGE_SC
	  CLEAR_BIT(MCUCR,MCUCR_ISC01_PIN);
    2448:	a5 e5       	ldi	r26, 0x55	; 85
    244a:	b0 e0       	ldi	r27, 0x00	; 0
    244c:	e5 e5       	ldi	r30, 0x55	; 85
    244e:	f0 e0       	ldi	r31, 0x00	; 0
    2450:	80 81       	ld	r24, Z
    2452:	8d 7f       	andi	r24, 0xFD	; 253
    2454:	8c 93       	st	X, r24
	  SET_BIT(MCUCR,MCUCR_ISC00_PIN);
    2456:	a5 e5       	ldi	r26, 0x55	; 85
    2458:	b0 e0       	ldi	r27, 0x00	; 0
    245a:	e5 e5       	ldi	r30, 0x55	; 85
    245c:	f0 e0       	ldi	r31, 0x00	; 0
    245e:	80 81       	ld	r24, Z
    2460:	81 60       	ori	r24, 0x01	; 1
    2462:	8c 93       	st	X, r24
#else
	  #warning  "No sense control selected. Kindly go to the line in Config file "
#endif

	  	  /* enable interrupt */
	  	  SET_BIT(GICR,GICR_INT0_PIN);
    2464:	ab e5       	ldi	r26, 0x5B	; 91
    2466:	b0 e0       	ldi	r27, 0x00	; 0
    2468:	eb e5       	ldi	r30, 0x5B	; 91
    246a:	f0 e0       	ldi	r31, 0x00	; 0
    246c:	80 81       	ld	r24, Z
    246e:	80 64       	ori	r24, 0x40	; 64
    2470:	8c 93       	st	X, r24
}
    2472:	cf 91       	pop	r28
    2474:	df 91       	pop	r29
    2476:	08 95       	ret

00002478 <EXTI1_Vid_Init>:

void EXTI1_Vid_Init()
{
    2478:	df 93       	push	r29
    247a:	cf 93       	push	r28
    247c:	cd b7       	in	r28, 0x3d	; 61
    247e:	de b7       	in	r29, 0x3e	; 62
	#elif EXTI_SENSE_CONTROL == EXTI_RISING_EDGE_SC
		  SET_BIT(MCUCR,MCUCR_ISC11_PIN);
		  SET_BIT(MCUCR,MCUCR_ISC10_PIN);

	#elif EXTI_SENSE_CONTROL == EXTI_ON_CHANGE_SC
		  CLEAR_BIT(MCUCR,MCUCR_ISC11_PIN);
    2480:	a5 e5       	ldi	r26, 0x55	; 85
    2482:	b0 e0       	ldi	r27, 0x00	; 0
    2484:	e5 e5       	ldi	r30, 0x55	; 85
    2486:	f0 e0       	ldi	r31, 0x00	; 0
    2488:	80 81       	ld	r24, Z
    248a:	87 7f       	andi	r24, 0xF7	; 247
    248c:	8c 93       	st	X, r24
		  SET_BIT(MCUCR,MCUCR_ISC10_PIN);
    248e:	a5 e5       	ldi	r26, 0x55	; 85
    2490:	b0 e0       	ldi	r27, 0x00	; 0
    2492:	e5 e5       	ldi	r30, 0x55	; 85
    2494:	f0 e0       	ldi	r31, 0x00	; 0
    2496:	80 81       	ld	r24, Z
    2498:	84 60       	ori	r24, 0x04	; 4
    249a:	8c 93       	st	X, r24
	#else
		  #warning  "No sense control selected. Kindly go to the line in Config file "
	#endif
		  /* enable interrupt */
		   SET_BIT(GICR,GICR_INT1_PIN);
    249c:	ab e5       	ldi	r26, 0x5B	; 91
    249e:	b0 e0       	ldi	r27, 0x00	; 0
    24a0:	eb e5       	ldi	r30, 0x5B	; 91
    24a2:	f0 e0       	ldi	r31, 0x00	; 0
    24a4:	80 81       	ld	r24, Z
    24a6:	80 68       	ori	r24, 0x80	; 128
    24a8:	8c 93       	st	X, r24
}
    24aa:	cf 91       	pop	r28
    24ac:	df 91       	pop	r29
    24ae:	08 95       	ret

000024b0 <EXTI2_Vid_Init>:

void EXTI2_Vid_Init()
{
    24b0:	df 93       	push	r29
    24b2:	cf 93       	push	r28
    24b4:	cd b7       	in	r28, 0x3d	; 61
    24b6:	de b7       	in	r29, 0x3e	; 62

	//#elif EXTI_SENSE_CONTROL == EXTI_ON_CHANGE_SC
		//  #warning  "Invalid sense control selected for INT 2. Kindly go to the line in Config file "
	#endif
		  /* enable interrupt */
		  SET_BIT(GICR,GICR_INT2_PIN);
    24b8:	ab e5       	ldi	r26, 0x5B	; 91
    24ba:	b0 e0       	ldi	r27, 0x00	; 0
    24bc:	eb e5       	ldi	r30, 0x5B	; 91
    24be:	f0 e0       	ldi	r31, 0x00	; 0
    24c0:	80 81       	ld	r24, Z
    24c2:	80 62       	ori	r24, 0x20	; 32
    24c4:	8c 93       	st	X, r24
}
    24c6:	cf 91       	pop	r28
    24c8:	df 91       	pop	r29
    24ca:	08 95       	ret

000024cc <EXTI_INT0_Call_Back>:

void EXTI_INT0_Call_Back(void (*func) (void))
{
    24cc:	df 93       	push	r29
    24ce:	cf 93       	push	r28
    24d0:	00 d0       	rcall	.+0      	; 0x24d2 <EXTI_INT0_Call_Back+0x6>
    24d2:	cd b7       	in	r28, 0x3d	; 61
    24d4:	de b7       	in	r29, 0x3e	; 62
    24d6:	9a 83       	std	Y+2, r25	; 0x02
    24d8:	89 83       	std	Y+1, r24	; 0x01
	EXTI0_func = func;
    24da:	89 81       	ldd	r24, Y+1	; 0x01
    24dc:	9a 81       	ldd	r25, Y+2	; 0x02
    24de:	90 93 d5 01 	sts	0x01D5, r25
    24e2:	80 93 d4 01 	sts	0x01D4, r24
}
    24e6:	0f 90       	pop	r0
    24e8:	0f 90       	pop	r0
    24ea:	cf 91       	pop	r28
    24ec:	df 91       	pop	r29
    24ee:	08 95       	ret

000024f0 <__vector_1>:

void __vector_1 (void)
{
    24f0:	1f 92       	push	r1
    24f2:	0f 92       	push	r0
    24f4:	0f b6       	in	r0, 0x3f	; 63
    24f6:	0f 92       	push	r0
    24f8:	11 24       	eor	r1, r1
    24fa:	2f 93       	push	r18
    24fc:	3f 93       	push	r19
    24fe:	4f 93       	push	r20
    2500:	5f 93       	push	r21
    2502:	6f 93       	push	r22
    2504:	7f 93       	push	r23
    2506:	8f 93       	push	r24
    2508:	9f 93       	push	r25
    250a:	af 93       	push	r26
    250c:	bf 93       	push	r27
    250e:	ef 93       	push	r30
    2510:	ff 93       	push	r31
    2512:	df 93       	push	r29
    2514:	cf 93       	push	r28
    2516:	cd b7       	in	r28, 0x3d	; 61
    2518:	de b7       	in	r29, 0x3e	; 62
	if(EXTI0_func != NULL )
    251a:	80 91 d4 01 	lds	r24, 0x01D4
    251e:	90 91 d5 01 	lds	r25, 0x01D5
    2522:	00 97       	sbiw	r24, 0x00	; 0
    2524:	29 f0       	breq	.+10     	; 0x2530 <__vector_1+0x40>
		EXTI0_func();
    2526:	e0 91 d4 01 	lds	r30, 0x01D4
    252a:	f0 91 d5 01 	lds	r31, 0x01D5
    252e:	09 95       	icall
}
    2530:	cf 91       	pop	r28
    2532:	df 91       	pop	r29
    2534:	ff 91       	pop	r31
    2536:	ef 91       	pop	r30
    2538:	bf 91       	pop	r27
    253a:	af 91       	pop	r26
    253c:	9f 91       	pop	r25
    253e:	8f 91       	pop	r24
    2540:	7f 91       	pop	r23
    2542:	6f 91       	pop	r22
    2544:	5f 91       	pop	r21
    2546:	4f 91       	pop	r20
    2548:	3f 91       	pop	r19
    254a:	2f 91       	pop	r18
    254c:	0f 90       	pop	r0
    254e:	0f be       	out	0x3f, r0	; 63
    2550:	0f 90       	pop	r0
    2552:	1f 90       	pop	r1
    2554:	18 95       	reti

00002556 <EXTI_INT1_Call_Back>:

void EXTI_INT1_Call_Back(void (*func) (void))
{
    2556:	df 93       	push	r29
    2558:	cf 93       	push	r28
    255a:	00 d0       	rcall	.+0      	; 0x255c <EXTI_INT1_Call_Back+0x6>
    255c:	cd b7       	in	r28, 0x3d	; 61
    255e:	de b7       	in	r29, 0x3e	; 62
    2560:	9a 83       	std	Y+2, r25	; 0x02
    2562:	89 83       	std	Y+1, r24	; 0x01
	EXTI1_func = func;
    2564:	89 81       	ldd	r24, Y+1	; 0x01
    2566:	9a 81       	ldd	r25, Y+2	; 0x02
    2568:	90 93 d7 01 	sts	0x01D7, r25
    256c:	80 93 d6 01 	sts	0x01D6, r24
}
    2570:	0f 90       	pop	r0
    2572:	0f 90       	pop	r0
    2574:	cf 91       	pop	r28
    2576:	df 91       	pop	r29
    2578:	08 95       	ret

0000257a <__vector_2>:

void __vector_2 (void)
{
    257a:	1f 92       	push	r1
    257c:	0f 92       	push	r0
    257e:	0f b6       	in	r0, 0x3f	; 63
    2580:	0f 92       	push	r0
    2582:	11 24       	eor	r1, r1
    2584:	2f 93       	push	r18
    2586:	3f 93       	push	r19
    2588:	4f 93       	push	r20
    258a:	5f 93       	push	r21
    258c:	6f 93       	push	r22
    258e:	7f 93       	push	r23
    2590:	8f 93       	push	r24
    2592:	9f 93       	push	r25
    2594:	af 93       	push	r26
    2596:	bf 93       	push	r27
    2598:	ef 93       	push	r30
    259a:	ff 93       	push	r31
    259c:	df 93       	push	r29
    259e:	cf 93       	push	r28
    25a0:	cd b7       	in	r28, 0x3d	; 61
    25a2:	de b7       	in	r29, 0x3e	; 62
	if(EXTI1_func != NULL )
    25a4:	80 91 d6 01 	lds	r24, 0x01D6
    25a8:	90 91 d7 01 	lds	r25, 0x01D7
    25ac:	00 97       	sbiw	r24, 0x00	; 0
    25ae:	29 f0       	breq	.+10     	; 0x25ba <__vector_2+0x40>
		EXTI1_func();
    25b0:	e0 91 d6 01 	lds	r30, 0x01D6
    25b4:	f0 91 d7 01 	lds	r31, 0x01D7
    25b8:	09 95       	icall
}
    25ba:	cf 91       	pop	r28
    25bc:	df 91       	pop	r29
    25be:	ff 91       	pop	r31
    25c0:	ef 91       	pop	r30
    25c2:	bf 91       	pop	r27
    25c4:	af 91       	pop	r26
    25c6:	9f 91       	pop	r25
    25c8:	8f 91       	pop	r24
    25ca:	7f 91       	pop	r23
    25cc:	6f 91       	pop	r22
    25ce:	5f 91       	pop	r21
    25d0:	4f 91       	pop	r20
    25d2:	3f 91       	pop	r19
    25d4:	2f 91       	pop	r18
    25d6:	0f 90       	pop	r0
    25d8:	0f be       	out	0x3f, r0	; 63
    25da:	0f 90       	pop	r0
    25dc:	1f 90       	pop	r1
    25de:	18 95       	reti

000025e0 <EXTI_INT2_Call_Back>:

void EXTI_INT2_Call_Back(void (*func) (void))
{
    25e0:	df 93       	push	r29
    25e2:	cf 93       	push	r28
    25e4:	00 d0       	rcall	.+0      	; 0x25e6 <EXTI_INT2_Call_Back+0x6>
    25e6:	cd b7       	in	r28, 0x3d	; 61
    25e8:	de b7       	in	r29, 0x3e	; 62
    25ea:	9a 83       	std	Y+2, r25	; 0x02
    25ec:	89 83       	std	Y+1, r24	; 0x01
	EXTI2_func = func;
    25ee:	89 81       	ldd	r24, Y+1	; 0x01
    25f0:	9a 81       	ldd	r25, Y+2	; 0x02
    25f2:	90 93 d9 01 	sts	0x01D9, r25
    25f6:	80 93 d8 01 	sts	0x01D8, r24
}
    25fa:	0f 90       	pop	r0
    25fc:	0f 90       	pop	r0
    25fe:	cf 91       	pop	r28
    2600:	df 91       	pop	r29
    2602:	08 95       	ret

00002604 <__vector_3>:

void __vector_3 (void)
{
    2604:	1f 92       	push	r1
    2606:	0f 92       	push	r0
    2608:	0f b6       	in	r0, 0x3f	; 63
    260a:	0f 92       	push	r0
    260c:	11 24       	eor	r1, r1
    260e:	2f 93       	push	r18
    2610:	3f 93       	push	r19
    2612:	4f 93       	push	r20
    2614:	5f 93       	push	r21
    2616:	6f 93       	push	r22
    2618:	7f 93       	push	r23
    261a:	8f 93       	push	r24
    261c:	9f 93       	push	r25
    261e:	af 93       	push	r26
    2620:	bf 93       	push	r27
    2622:	ef 93       	push	r30
    2624:	ff 93       	push	r31
    2626:	df 93       	push	r29
    2628:	cf 93       	push	r28
    262a:	cd b7       	in	r28, 0x3d	; 61
    262c:	de b7       	in	r29, 0x3e	; 62
	if(EXTI2_func != NULL )
    262e:	80 91 d8 01 	lds	r24, 0x01D8
    2632:	90 91 d9 01 	lds	r25, 0x01D9
    2636:	00 97       	sbiw	r24, 0x00	; 0
    2638:	29 f0       	breq	.+10     	; 0x2644 <__vector_3+0x40>
		EXTI2_func();
    263a:	e0 91 d8 01 	lds	r30, 0x01D8
    263e:	f0 91 d9 01 	lds	r31, 0x01D9
    2642:	09 95       	icall
}
    2644:	cf 91       	pop	r28
    2646:	df 91       	pop	r29
    2648:	ff 91       	pop	r31
    264a:	ef 91       	pop	r30
    264c:	bf 91       	pop	r27
    264e:	af 91       	pop	r26
    2650:	9f 91       	pop	r25
    2652:	8f 91       	pop	r24
    2654:	7f 91       	pop	r23
    2656:	6f 91       	pop	r22
    2658:	5f 91       	pop	r21
    265a:	4f 91       	pop	r20
    265c:	3f 91       	pop	r19
    265e:	2f 91       	pop	r18
    2660:	0f 90       	pop	r0
    2662:	0f be       	out	0x3f, r0	; 63
    2664:	0f 90       	pop	r0
    2666:	1f 90       	pop	r1
    2668:	18 95       	reti

0000266a <DIO_VidSetPinValue>:
#include"DIO_private.h"
#include"DIO_interface.h"

/* set pin */
void DIO_VidSetPinValue(u8 Copy_u8Port, u8 Copy_u8PinNumber ,u8 Copy_u8Value)
{
    266a:	df 93       	push	r29
    266c:	cf 93       	push	r28
    266e:	cd b7       	in	r28, 0x3d	; 61
    2670:	de b7       	in	r29, 0x3e	; 62
    2672:	27 97       	sbiw	r28, 0x07	; 7
    2674:	0f b6       	in	r0, 0x3f	; 63
    2676:	f8 94       	cli
    2678:	de bf       	out	0x3e, r29	; 62
    267a:	0f be       	out	0x3f, r0	; 63
    267c:	cd bf       	out	0x3d, r28	; 61
    267e:	89 83       	std	Y+1, r24	; 0x01
    2680:	6a 83       	std	Y+2, r22	; 0x02
    2682:	4b 83       	std	Y+3, r20	; 0x03
			/* SET LOW*/
		if(Copy_u8Value == low)
    2684:	8b 81       	ldd	r24, Y+3	; 0x03
    2686:	88 23       	and	r24, r24
    2688:	09 f0       	breq	.+2      	; 0x268c <DIO_VidSetPinValue+0x22>
    268a:	75 c0       	rjmp	.+234    	; 0x2776 <DIO_VidSetPinValue+0x10c>
		{
			switch(Copy_u8Port)
    268c:	89 81       	ldd	r24, Y+1	; 0x01
    268e:	28 2f       	mov	r18, r24
    2690:	30 e0       	ldi	r19, 0x00	; 0
    2692:	3f 83       	std	Y+7, r19	; 0x07
    2694:	2e 83       	std	Y+6, r18	; 0x06
    2696:	8e 81       	ldd	r24, Y+6	; 0x06
    2698:	9f 81       	ldd	r25, Y+7	; 0x07
    269a:	83 30       	cpi	r24, 0x03	; 3
    269c:	91 05       	cpc	r25, r1
    269e:	61 f1       	breq	.+88     	; 0x26f8 <DIO_VidSetPinValue+0x8e>
    26a0:	2e 81       	ldd	r18, Y+6	; 0x06
    26a2:	3f 81       	ldd	r19, Y+7	; 0x07
    26a4:	24 30       	cpi	r18, 0x04	; 4
    26a6:	31 05       	cpc	r19, r1
    26a8:	34 f4       	brge	.+12     	; 0x26b6 <DIO_VidSetPinValue+0x4c>
    26aa:	8e 81       	ldd	r24, Y+6	; 0x06
    26ac:	9f 81       	ldd	r25, Y+7	; 0x07
    26ae:	82 30       	cpi	r24, 0x02	; 2
    26b0:	91 05       	cpc	r25, r1
    26b2:	69 f0       	breq	.+26     	; 0x26ce <DIO_VidSetPinValue+0x64>
    26b4:	d3 c0       	rjmp	.+422    	; 0x285c <DIO_VidSetPinValue+0x1f2>
    26b6:	2e 81       	ldd	r18, Y+6	; 0x06
    26b8:	3f 81       	ldd	r19, Y+7	; 0x07
    26ba:	24 30       	cpi	r18, 0x04	; 4
    26bc:	31 05       	cpc	r19, r1
    26be:	89 f1       	breq	.+98     	; 0x2722 <DIO_VidSetPinValue+0xb8>
    26c0:	8e 81       	ldd	r24, Y+6	; 0x06
    26c2:	9f 81       	ldd	r25, Y+7	; 0x07
    26c4:	85 30       	cpi	r24, 0x05	; 5
    26c6:	91 05       	cpc	r25, r1
    26c8:	09 f4       	brne	.+2      	; 0x26cc <DIO_VidSetPinValue+0x62>
    26ca:	40 c0       	rjmp	.+128    	; 0x274c <DIO_VidSetPinValue+0xe2>
    26cc:	c7 c0       	rjmp	.+398    	; 0x285c <DIO_VidSetPinValue+0x1f2>
			{
			/* SET AS LOW : write 0 */
				case(Port_A): CLEAR_BIT(PORTA,Copy_u8PinNumber); break;
    26ce:	ab e3       	ldi	r26, 0x3B	; 59
    26d0:	b0 e0       	ldi	r27, 0x00	; 0
    26d2:	eb e3       	ldi	r30, 0x3B	; 59
    26d4:	f0 e0       	ldi	r31, 0x00	; 0
    26d6:	80 81       	ld	r24, Z
    26d8:	48 2f       	mov	r20, r24
    26da:	8a 81       	ldd	r24, Y+2	; 0x02
    26dc:	28 2f       	mov	r18, r24
    26de:	30 e0       	ldi	r19, 0x00	; 0
    26e0:	81 e0       	ldi	r24, 0x01	; 1
    26e2:	90 e0       	ldi	r25, 0x00	; 0
    26e4:	02 2e       	mov	r0, r18
    26e6:	02 c0       	rjmp	.+4      	; 0x26ec <DIO_VidSetPinValue+0x82>
    26e8:	88 0f       	add	r24, r24
    26ea:	99 1f       	adc	r25, r25
    26ec:	0a 94       	dec	r0
    26ee:	e2 f7       	brpl	.-8      	; 0x26e8 <DIO_VidSetPinValue+0x7e>
    26f0:	80 95       	com	r24
    26f2:	84 23       	and	r24, r20
    26f4:	8c 93       	st	X, r24
    26f6:	b2 c0       	rjmp	.+356    	; 0x285c <DIO_VidSetPinValue+0x1f2>
				case(Port_B): CLEAR_BIT(PORTB,Copy_u8PinNumber); break;
    26f8:	a8 e3       	ldi	r26, 0x38	; 56
    26fa:	b0 e0       	ldi	r27, 0x00	; 0
    26fc:	e8 e3       	ldi	r30, 0x38	; 56
    26fe:	f0 e0       	ldi	r31, 0x00	; 0
    2700:	80 81       	ld	r24, Z
    2702:	48 2f       	mov	r20, r24
    2704:	8a 81       	ldd	r24, Y+2	; 0x02
    2706:	28 2f       	mov	r18, r24
    2708:	30 e0       	ldi	r19, 0x00	; 0
    270a:	81 e0       	ldi	r24, 0x01	; 1
    270c:	90 e0       	ldi	r25, 0x00	; 0
    270e:	02 2e       	mov	r0, r18
    2710:	02 c0       	rjmp	.+4      	; 0x2716 <DIO_VidSetPinValue+0xac>
    2712:	88 0f       	add	r24, r24
    2714:	99 1f       	adc	r25, r25
    2716:	0a 94       	dec	r0
    2718:	e2 f7       	brpl	.-8      	; 0x2712 <DIO_VidSetPinValue+0xa8>
    271a:	80 95       	com	r24
    271c:	84 23       	and	r24, r20
    271e:	8c 93       	st	X, r24
    2720:	9d c0       	rjmp	.+314    	; 0x285c <DIO_VidSetPinValue+0x1f2>
				case(Port_C): CLEAR_BIT(PORTC,Copy_u8PinNumber); break;
    2722:	a5 e3       	ldi	r26, 0x35	; 53
    2724:	b0 e0       	ldi	r27, 0x00	; 0
    2726:	e5 e3       	ldi	r30, 0x35	; 53
    2728:	f0 e0       	ldi	r31, 0x00	; 0
    272a:	80 81       	ld	r24, Z
    272c:	48 2f       	mov	r20, r24
    272e:	8a 81       	ldd	r24, Y+2	; 0x02
    2730:	28 2f       	mov	r18, r24
    2732:	30 e0       	ldi	r19, 0x00	; 0
    2734:	81 e0       	ldi	r24, 0x01	; 1
    2736:	90 e0       	ldi	r25, 0x00	; 0
    2738:	02 2e       	mov	r0, r18
    273a:	02 c0       	rjmp	.+4      	; 0x2740 <DIO_VidSetPinValue+0xd6>
    273c:	88 0f       	add	r24, r24
    273e:	99 1f       	adc	r25, r25
    2740:	0a 94       	dec	r0
    2742:	e2 f7       	brpl	.-8      	; 0x273c <DIO_VidSetPinValue+0xd2>
    2744:	80 95       	com	r24
    2746:	84 23       	and	r24, r20
    2748:	8c 93       	st	X, r24
    274a:	88 c0       	rjmp	.+272    	; 0x285c <DIO_VidSetPinValue+0x1f2>
				case(Port_D): CLEAR_BIT(PORTD,Copy_u8PinNumber); break;
    274c:	a2 e3       	ldi	r26, 0x32	; 50
    274e:	b0 e0       	ldi	r27, 0x00	; 0
    2750:	e2 e3       	ldi	r30, 0x32	; 50
    2752:	f0 e0       	ldi	r31, 0x00	; 0
    2754:	80 81       	ld	r24, Z
    2756:	48 2f       	mov	r20, r24
    2758:	8a 81       	ldd	r24, Y+2	; 0x02
    275a:	28 2f       	mov	r18, r24
    275c:	30 e0       	ldi	r19, 0x00	; 0
    275e:	81 e0       	ldi	r24, 0x01	; 1
    2760:	90 e0       	ldi	r25, 0x00	; 0
    2762:	02 2e       	mov	r0, r18
    2764:	02 c0       	rjmp	.+4      	; 0x276a <DIO_VidSetPinValue+0x100>
    2766:	88 0f       	add	r24, r24
    2768:	99 1f       	adc	r25, r25
    276a:	0a 94       	dec	r0
    276c:	e2 f7       	brpl	.-8      	; 0x2766 <DIO_VidSetPinValue+0xfc>
    276e:	80 95       	com	r24
    2770:	84 23       	and	r24, r20
    2772:	8c 93       	st	X, r24
    2774:	73 c0       	rjmp	.+230    	; 0x285c <DIO_VidSetPinValue+0x1f2>
			}
		}

			/* SET HIGH */
		else if(Copy_u8Value == high)
    2776:	8b 81       	ldd	r24, Y+3	; 0x03
    2778:	81 30       	cpi	r24, 0x01	; 1
    277a:	09 f0       	breq	.+2      	; 0x277e <DIO_VidSetPinValue+0x114>
    277c:	6f c0       	rjmp	.+222    	; 0x285c <DIO_VidSetPinValue+0x1f2>
		{
			switch(Copy_u8Port)
    277e:	89 81       	ldd	r24, Y+1	; 0x01
    2780:	28 2f       	mov	r18, r24
    2782:	30 e0       	ldi	r19, 0x00	; 0
    2784:	3d 83       	std	Y+5, r19	; 0x05
    2786:	2c 83       	std	Y+4, r18	; 0x04
    2788:	8c 81       	ldd	r24, Y+4	; 0x04
    278a:	9d 81       	ldd	r25, Y+5	; 0x05
    278c:	83 30       	cpi	r24, 0x03	; 3
    278e:	91 05       	cpc	r25, r1
    2790:	51 f1       	breq	.+84     	; 0x27e6 <DIO_VidSetPinValue+0x17c>
    2792:	2c 81       	ldd	r18, Y+4	; 0x04
    2794:	3d 81       	ldd	r19, Y+5	; 0x05
    2796:	24 30       	cpi	r18, 0x04	; 4
    2798:	31 05       	cpc	r19, r1
    279a:	34 f4       	brge	.+12     	; 0x27a8 <DIO_VidSetPinValue+0x13e>
    279c:	8c 81       	ldd	r24, Y+4	; 0x04
    279e:	9d 81       	ldd	r25, Y+5	; 0x05
    27a0:	82 30       	cpi	r24, 0x02	; 2
    27a2:	91 05       	cpc	r25, r1
    27a4:	61 f0       	breq	.+24     	; 0x27be <DIO_VidSetPinValue+0x154>
    27a6:	5a c0       	rjmp	.+180    	; 0x285c <DIO_VidSetPinValue+0x1f2>
    27a8:	2c 81       	ldd	r18, Y+4	; 0x04
    27aa:	3d 81       	ldd	r19, Y+5	; 0x05
    27ac:	24 30       	cpi	r18, 0x04	; 4
    27ae:	31 05       	cpc	r19, r1
    27b0:	71 f1       	breq	.+92     	; 0x280e <DIO_VidSetPinValue+0x1a4>
    27b2:	8c 81       	ldd	r24, Y+4	; 0x04
    27b4:	9d 81       	ldd	r25, Y+5	; 0x05
    27b6:	85 30       	cpi	r24, 0x05	; 5
    27b8:	91 05       	cpc	r25, r1
    27ba:	e9 f1       	breq	.+122    	; 0x2836 <DIO_VidSetPinValue+0x1cc>
    27bc:	4f c0       	rjmp	.+158    	; 0x285c <DIO_VidSetPinValue+0x1f2>
			{
				/* SET AS HIGH : write 1 */
				case(Port_A): SET_BIT(PORTA,Copy_u8PinNumber); break;
    27be:	ab e3       	ldi	r26, 0x3B	; 59
    27c0:	b0 e0       	ldi	r27, 0x00	; 0
    27c2:	eb e3       	ldi	r30, 0x3B	; 59
    27c4:	f0 e0       	ldi	r31, 0x00	; 0
    27c6:	80 81       	ld	r24, Z
    27c8:	48 2f       	mov	r20, r24
    27ca:	8a 81       	ldd	r24, Y+2	; 0x02
    27cc:	28 2f       	mov	r18, r24
    27ce:	30 e0       	ldi	r19, 0x00	; 0
    27d0:	81 e0       	ldi	r24, 0x01	; 1
    27d2:	90 e0       	ldi	r25, 0x00	; 0
    27d4:	02 2e       	mov	r0, r18
    27d6:	02 c0       	rjmp	.+4      	; 0x27dc <DIO_VidSetPinValue+0x172>
    27d8:	88 0f       	add	r24, r24
    27da:	99 1f       	adc	r25, r25
    27dc:	0a 94       	dec	r0
    27de:	e2 f7       	brpl	.-8      	; 0x27d8 <DIO_VidSetPinValue+0x16e>
    27e0:	84 2b       	or	r24, r20
    27e2:	8c 93       	st	X, r24
    27e4:	3b c0       	rjmp	.+118    	; 0x285c <DIO_VidSetPinValue+0x1f2>
				case(Port_B): SET_BIT(PORTB,Copy_u8PinNumber); break;
    27e6:	a8 e3       	ldi	r26, 0x38	; 56
    27e8:	b0 e0       	ldi	r27, 0x00	; 0
    27ea:	e8 e3       	ldi	r30, 0x38	; 56
    27ec:	f0 e0       	ldi	r31, 0x00	; 0
    27ee:	80 81       	ld	r24, Z
    27f0:	48 2f       	mov	r20, r24
    27f2:	8a 81       	ldd	r24, Y+2	; 0x02
    27f4:	28 2f       	mov	r18, r24
    27f6:	30 e0       	ldi	r19, 0x00	; 0
    27f8:	81 e0       	ldi	r24, 0x01	; 1
    27fa:	90 e0       	ldi	r25, 0x00	; 0
    27fc:	02 2e       	mov	r0, r18
    27fe:	02 c0       	rjmp	.+4      	; 0x2804 <DIO_VidSetPinValue+0x19a>
    2800:	88 0f       	add	r24, r24
    2802:	99 1f       	adc	r25, r25
    2804:	0a 94       	dec	r0
    2806:	e2 f7       	brpl	.-8      	; 0x2800 <DIO_VidSetPinValue+0x196>
    2808:	84 2b       	or	r24, r20
    280a:	8c 93       	st	X, r24
    280c:	27 c0       	rjmp	.+78     	; 0x285c <DIO_VidSetPinValue+0x1f2>
				case(Port_C): SET_BIT(PORTC,Copy_u8PinNumber); break;
    280e:	a5 e3       	ldi	r26, 0x35	; 53
    2810:	b0 e0       	ldi	r27, 0x00	; 0
    2812:	e5 e3       	ldi	r30, 0x35	; 53
    2814:	f0 e0       	ldi	r31, 0x00	; 0
    2816:	80 81       	ld	r24, Z
    2818:	48 2f       	mov	r20, r24
    281a:	8a 81       	ldd	r24, Y+2	; 0x02
    281c:	28 2f       	mov	r18, r24
    281e:	30 e0       	ldi	r19, 0x00	; 0
    2820:	81 e0       	ldi	r24, 0x01	; 1
    2822:	90 e0       	ldi	r25, 0x00	; 0
    2824:	02 2e       	mov	r0, r18
    2826:	02 c0       	rjmp	.+4      	; 0x282c <DIO_VidSetPinValue+0x1c2>
    2828:	88 0f       	add	r24, r24
    282a:	99 1f       	adc	r25, r25
    282c:	0a 94       	dec	r0
    282e:	e2 f7       	brpl	.-8      	; 0x2828 <DIO_VidSetPinValue+0x1be>
    2830:	84 2b       	or	r24, r20
    2832:	8c 93       	st	X, r24
    2834:	13 c0       	rjmp	.+38     	; 0x285c <DIO_VidSetPinValue+0x1f2>
				case(Port_D): SET_BIT(PORTD,Copy_u8PinNumber); break;
    2836:	a2 e3       	ldi	r26, 0x32	; 50
    2838:	b0 e0       	ldi	r27, 0x00	; 0
    283a:	e2 e3       	ldi	r30, 0x32	; 50
    283c:	f0 e0       	ldi	r31, 0x00	; 0
    283e:	80 81       	ld	r24, Z
    2840:	48 2f       	mov	r20, r24
    2842:	8a 81       	ldd	r24, Y+2	; 0x02
    2844:	28 2f       	mov	r18, r24
    2846:	30 e0       	ldi	r19, 0x00	; 0
    2848:	81 e0       	ldi	r24, 0x01	; 1
    284a:	90 e0       	ldi	r25, 0x00	; 0
    284c:	02 2e       	mov	r0, r18
    284e:	02 c0       	rjmp	.+4      	; 0x2854 <DIO_VidSetPinValue+0x1ea>
    2850:	88 0f       	add	r24, r24
    2852:	99 1f       	adc	r25, r25
    2854:	0a 94       	dec	r0
    2856:	e2 f7       	brpl	.-8      	; 0x2850 <DIO_VidSetPinValue+0x1e6>
    2858:	84 2b       	or	r24, r20
    285a:	8c 93       	st	X, r24
			}
		}
}
    285c:	27 96       	adiw	r28, 0x07	; 7
    285e:	0f b6       	in	r0, 0x3f	; 63
    2860:	f8 94       	cli
    2862:	de bf       	out	0x3e, r29	; 62
    2864:	0f be       	out	0x3f, r0	; 63
    2866:	cd bf       	out	0x3d, r28	; 61
    2868:	cf 91       	pop	r28
    286a:	df 91       	pop	r29
    286c:	08 95       	ret

0000286e <DIO_VidSetPinDirection>:

void DIO_VidSetPinDirection(u8 Copy_u8Port, u8 Copy_u8PinNumber, u8 Copy_u8PinDirection)
{
    286e:	df 93       	push	r29
    2870:	cf 93       	push	r28
    2872:	cd b7       	in	r28, 0x3d	; 61
    2874:	de b7       	in	r29, 0x3e	; 62
    2876:	27 97       	sbiw	r28, 0x07	; 7
    2878:	0f b6       	in	r0, 0x3f	; 63
    287a:	f8 94       	cli
    287c:	de bf       	out	0x3e, r29	; 62
    287e:	0f be       	out	0x3f, r0	; 63
    2880:	cd bf       	out	0x3d, r28	; 61
    2882:	89 83       	std	Y+1, r24	; 0x01
    2884:	6a 83       	std	Y+2, r22	; 0x02
    2886:	4b 83       	std	Y+3, r20	; 0x03
	/* Check for input direction */
	if(Copy_u8PinDirection == input)
    2888:	8b 81       	ldd	r24, Y+3	; 0x03
    288a:	88 23       	and	r24, r24
    288c:	09 f0       	breq	.+2      	; 0x2890 <DIO_VidSetPinDirection+0x22>
    288e:	75 c0       	rjmp	.+234    	; 0x297a <DIO_VidSetPinDirection+0x10c>
	{
		switch(Copy_u8Port)
    2890:	89 81       	ldd	r24, Y+1	; 0x01
    2892:	28 2f       	mov	r18, r24
    2894:	30 e0       	ldi	r19, 0x00	; 0
    2896:	3f 83       	std	Y+7, r19	; 0x07
    2898:	2e 83       	std	Y+6, r18	; 0x06
    289a:	8e 81       	ldd	r24, Y+6	; 0x06
    289c:	9f 81       	ldd	r25, Y+7	; 0x07
    289e:	83 30       	cpi	r24, 0x03	; 3
    28a0:	91 05       	cpc	r25, r1
    28a2:	61 f1       	breq	.+88     	; 0x28fc <DIO_VidSetPinDirection+0x8e>
    28a4:	2e 81       	ldd	r18, Y+6	; 0x06
    28a6:	3f 81       	ldd	r19, Y+7	; 0x07
    28a8:	24 30       	cpi	r18, 0x04	; 4
    28aa:	31 05       	cpc	r19, r1
    28ac:	34 f4       	brge	.+12     	; 0x28ba <DIO_VidSetPinDirection+0x4c>
    28ae:	8e 81       	ldd	r24, Y+6	; 0x06
    28b0:	9f 81       	ldd	r25, Y+7	; 0x07
    28b2:	82 30       	cpi	r24, 0x02	; 2
    28b4:	91 05       	cpc	r25, r1
    28b6:	69 f0       	breq	.+26     	; 0x28d2 <DIO_VidSetPinDirection+0x64>
    28b8:	d3 c0       	rjmp	.+422    	; 0x2a60 <DIO_VidSetPinDirection+0x1f2>
    28ba:	2e 81       	ldd	r18, Y+6	; 0x06
    28bc:	3f 81       	ldd	r19, Y+7	; 0x07
    28be:	24 30       	cpi	r18, 0x04	; 4
    28c0:	31 05       	cpc	r19, r1
    28c2:	89 f1       	breq	.+98     	; 0x2926 <DIO_VidSetPinDirection+0xb8>
    28c4:	8e 81       	ldd	r24, Y+6	; 0x06
    28c6:	9f 81       	ldd	r25, Y+7	; 0x07
    28c8:	85 30       	cpi	r24, 0x05	; 5
    28ca:	91 05       	cpc	r25, r1
    28cc:	09 f4       	brne	.+2      	; 0x28d0 <DIO_VidSetPinDirection+0x62>
    28ce:	40 c0       	rjmp	.+128    	; 0x2950 <DIO_VidSetPinDirection+0xe2>
    28d0:	c7 c0       	rjmp	.+398    	; 0x2a60 <DIO_VidSetPinDirection+0x1f2>
		{
		/* SET AS INPUT : 0 */
			case(Port_A): CLEAR_BIT(DDRA,Copy_u8PinNumber); break;
    28d2:	aa e3       	ldi	r26, 0x3A	; 58
    28d4:	b0 e0       	ldi	r27, 0x00	; 0
    28d6:	ea e3       	ldi	r30, 0x3A	; 58
    28d8:	f0 e0       	ldi	r31, 0x00	; 0
    28da:	80 81       	ld	r24, Z
    28dc:	48 2f       	mov	r20, r24
    28de:	8a 81       	ldd	r24, Y+2	; 0x02
    28e0:	28 2f       	mov	r18, r24
    28e2:	30 e0       	ldi	r19, 0x00	; 0
    28e4:	81 e0       	ldi	r24, 0x01	; 1
    28e6:	90 e0       	ldi	r25, 0x00	; 0
    28e8:	02 2e       	mov	r0, r18
    28ea:	02 c0       	rjmp	.+4      	; 0x28f0 <DIO_VidSetPinDirection+0x82>
    28ec:	88 0f       	add	r24, r24
    28ee:	99 1f       	adc	r25, r25
    28f0:	0a 94       	dec	r0
    28f2:	e2 f7       	brpl	.-8      	; 0x28ec <DIO_VidSetPinDirection+0x7e>
    28f4:	80 95       	com	r24
    28f6:	84 23       	and	r24, r20
    28f8:	8c 93       	st	X, r24
    28fa:	b2 c0       	rjmp	.+356    	; 0x2a60 <DIO_VidSetPinDirection+0x1f2>
			case(Port_B): CLEAR_BIT(DDRB,Copy_u8PinNumber); break;
    28fc:	a7 e3       	ldi	r26, 0x37	; 55
    28fe:	b0 e0       	ldi	r27, 0x00	; 0
    2900:	e7 e3       	ldi	r30, 0x37	; 55
    2902:	f0 e0       	ldi	r31, 0x00	; 0
    2904:	80 81       	ld	r24, Z
    2906:	48 2f       	mov	r20, r24
    2908:	8a 81       	ldd	r24, Y+2	; 0x02
    290a:	28 2f       	mov	r18, r24
    290c:	30 e0       	ldi	r19, 0x00	; 0
    290e:	81 e0       	ldi	r24, 0x01	; 1
    2910:	90 e0       	ldi	r25, 0x00	; 0
    2912:	02 2e       	mov	r0, r18
    2914:	02 c0       	rjmp	.+4      	; 0x291a <DIO_VidSetPinDirection+0xac>
    2916:	88 0f       	add	r24, r24
    2918:	99 1f       	adc	r25, r25
    291a:	0a 94       	dec	r0
    291c:	e2 f7       	brpl	.-8      	; 0x2916 <DIO_VidSetPinDirection+0xa8>
    291e:	80 95       	com	r24
    2920:	84 23       	and	r24, r20
    2922:	8c 93       	st	X, r24
    2924:	9d c0       	rjmp	.+314    	; 0x2a60 <DIO_VidSetPinDirection+0x1f2>
			case(Port_C): CLEAR_BIT(DDRC,Copy_u8PinNumber); break;
    2926:	a4 e3       	ldi	r26, 0x34	; 52
    2928:	b0 e0       	ldi	r27, 0x00	; 0
    292a:	e4 e3       	ldi	r30, 0x34	; 52
    292c:	f0 e0       	ldi	r31, 0x00	; 0
    292e:	80 81       	ld	r24, Z
    2930:	48 2f       	mov	r20, r24
    2932:	8a 81       	ldd	r24, Y+2	; 0x02
    2934:	28 2f       	mov	r18, r24
    2936:	30 e0       	ldi	r19, 0x00	; 0
    2938:	81 e0       	ldi	r24, 0x01	; 1
    293a:	90 e0       	ldi	r25, 0x00	; 0
    293c:	02 2e       	mov	r0, r18
    293e:	02 c0       	rjmp	.+4      	; 0x2944 <DIO_VidSetPinDirection+0xd6>
    2940:	88 0f       	add	r24, r24
    2942:	99 1f       	adc	r25, r25
    2944:	0a 94       	dec	r0
    2946:	e2 f7       	brpl	.-8      	; 0x2940 <DIO_VidSetPinDirection+0xd2>
    2948:	80 95       	com	r24
    294a:	84 23       	and	r24, r20
    294c:	8c 93       	st	X, r24
    294e:	88 c0       	rjmp	.+272    	; 0x2a60 <DIO_VidSetPinDirection+0x1f2>
			case(Port_D): CLEAR_BIT(DDRD,Copy_u8PinNumber); break;
    2950:	a1 e3       	ldi	r26, 0x31	; 49
    2952:	b0 e0       	ldi	r27, 0x00	; 0
    2954:	e1 e3       	ldi	r30, 0x31	; 49
    2956:	f0 e0       	ldi	r31, 0x00	; 0
    2958:	80 81       	ld	r24, Z
    295a:	48 2f       	mov	r20, r24
    295c:	8a 81       	ldd	r24, Y+2	; 0x02
    295e:	28 2f       	mov	r18, r24
    2960:	30 e0       	ldi	r19, 0x00	; 0
    2962:	81 e0       	ldi	r24, 0x01	; 1
    2964:	90 e0       	ldi	r25, 0x00	; 0
    2966:	02 2e       	mov	r0, r18
    2968:	02 c0       	rjmp	.+4      	; 0x296e <DIO_VidSetPinDirection+0x100>
    296a:	88 0f       	add	r24, r24
    296c:	99 1f       	adc	r25, r25
    296e:	0a 94       	dec	r0
    2970:	e2 f7       	brpl	.-8      	; 0x296a <DIO_VidSetPinDirection+0xfc>
    2972:	80 95       	com	r24
    2974:	84 23       	and	r24, r20
    2976:	8c 93       	st	X, r24
    2978:	73 c0       	rjmp	.+230    	; 0x2a60 <DIO_VidSetPinDirection+0x1f2>
		}
	}

	/* Check for output direction */
	else if(Copy_u8PinDirection == output)
    297a:	8b 81       	ldd	r24, Y+3	; 0x03
    297c:	81 30       	cpi	r24, 0x01	; 1
    297e:	09 f0       	breq	.+2      	; 0x2982 <DIO_VidSetPinDirection+0x114>
    2980:	6f c0       	rjmp	.+222    	; 0x2a60 <DIO_VidSetPinDirection+0x1f2>
	{
		switch(Copy_u8Port)
    2982:	89 81       	ldd	r24, Y+1	; 0x01
    2984:	28 2f       	mov	r18, r24
    2986:	30 e0       	ldi	r19, 0x00	; 0
    2988:	3d 83       	std	Y+5, r19	; 0x05
    298a:	2c 83       	std	Y+4, r18	; 0x04
    298c:	8c 81       	ldd	r24, Y+4	; 0x04
    298e:	9d 81       	ldd	r25, Y+5	; 0x05
    2990:	83 30       	cpi	r24, 0x03	; 3
    2992:	91 05       	cpc	r25, r1
    2994:	51 f1       	breq	.+84     	; 0x29ea <DIO_VidSetPinDirection+0x17c>
    2996:	2c 81       	ldd	r18, Y+4	; 0x04
    2998:	3d 81       	ldd	r19, Y+5	; 0x05
    299a:	24 30       	cpi	r18, 0x04	; 4
    299c:	31 05       	cpc	r19, r1
    299e:	34 f4       	brge	.+12     	; 0x29ac <DIO_VidSetPinDirection+0x13e>
    29a0:	8c 81       	ldd	r24, Y+4	; 0x04
    29a2:	9d 81       	ldd	r25, Y+5	; 0x05
    29a4:	82 30       	cpi	r24, 0x02	; 2
    29a6:	91 05       	cpc	r25, r1
    29a8:	61 f0       	breq	.+24     	; 0x29c2 <DIO_VidSetPinDirection+0x154>
    29aa:	5a c0       	rjmp	.+180    	; 0x2a60 <DIO_VidSetPinDirection+0x1f2>
    29ac:	2c 81       	ldd	r18, Y+4	; 0x04
    29ae:	3d 81       	ldd	r19, Y+5	; 0x05
    29b0:	24 30       	cpi	r18, 0x04	; 4
    29b2:	31 05       	cpc	r19, r1
    29b4:	71 f1       	breq	.+92     	; 0x2a12 <DIO_VidSetPinDirection+0x1a4>
    29b6:	8c 81       	ldd	r24, Y+4	; 0x04
    29b8:	9d 81       	ldd	r25, Y+5	; 0x05
    29ba:	85 30       	cpi	r24, 0x05	; 5
    29bc:	91 05       	cpc	r25, r1
    29be:	e9 f1       	breq	.+122    	; 0x2a3a <DIO_VidSetPinDirection+0x1cc>
    29c0:	4f c0       	rjmp	.+158    	; 0x2a60 <DIO_VidSetPinDirection+0x1f2>
		{
			/* SET AS OUTPUT : 1 */
			case(Port_A): SET_BIT(DDRA,Copy_u8PinNumber); break;
    29c2:	aa e3       	ldi	r26, 0x3A	; 58
    29c4:	b0 e0       	ldi	r27, 0x00	; 0
    29c6:	ea e3       	ldi	r30, 0x3A	; 58
    29c8:	f0 e0       	ldi	r31, 0x00	; 0
    29ca:	80 81       	ld	r24, Z
    29cc:	48 2f       	mov	r20, r24
    29ce:	8a 81       	ldd	r24, Y+2	; 0x02
    29d0:	28 2f       	mov	r18, r24
    29d2:	30 e0       	ldi	r19, 0x00	; 0
    29d4:	81 e0       	ldi	r24, 0x01	; 1
    29d6:	90 e0       	ldi	r25, 0x00	; 0
    29d8:	02 2e       	mov	r0, r18
    29da:	02 c0       	rjmp	.+4      	; 0x29e0 <DIO_VidSetPinDirection+0x172>
    29dc:	88 0f       	add	r24, r24
    29de:	99 1f       	adc	r25, r25
    29e0:	0a 94       	dec	r0
    29e2:	e2 f7       	brpl	.-8      	; 0x29dc <DIO_VidSetPinDirection+0x16e>
    29e4:	84 2b       	or	r24, r20
    29e6:	8c 93       	st	X, r24
    29e8:	3b c0       	rjmp	.+118    	; 0x2a60 <DIO_VidSetPinDirection+0x1f2>
			case(Port_B): SET_BIT(DDRB,Copy_u8PinNumber); break;
    29ea:	a7 e3       	ldi	r26, 0x37	; 55
    29ec:	b0 e0       	ldi	r27, 0x00	; 0
    29ee:	e7 e3       	ldi	r30, 0x37	; 55
    29f0:	f0 e0       	ldi	r31, 0x00	; 0
    29f2:	80 81       	ld	r24, Z
    29f4:	48 2f       	mov	r20, r24
    29f6:	8a 81       	ldd	r24, Y+2	; 0x02
    29f8:	28 2f       	mov	r18, r24
    29fa:	30 e0       	ldi	r19, 0x00	; 0
    29fc:	81 e0       	ldi	r24, 0x01	; 1
    29fe:	90 e0       	ldi	r25, 0x00	; 0
    2a00:	02 2e       	mov	r0, r18
    2a02:	02 c0       	rjmp	.+4      	; 0x2a08 <DIO_VidSetPinDirection+0x19a>
    2a04:	88 0f       	add	r24, r24
    2a06:	99 1f       	adc	r25, r25
    2a08:	0a 94       	dec	r0
    2a0a:	e2 f7       	brpl	.-8      	; 0x2a04 <DIO_VidSetPinDirection+0x196>
    2a0c:	84 2b       	or	r24, r20
    2a0e:	8c 93       	st	X, r24
    2a10:	27 c0       	rjmp	.+78     	; 0x2a60 <DIO_VidSetPinDirection+0x1f2>
			case(Port_C): SET_BIT(DDRC,Copy_u8PinNumber); break;
    2a12:	a4 e3       	ldi	r26, 0x34	; 52
    2a14:	b0 e0       	ldi	r27, 0x00	; 0
    2a16:	e4 e3       	ldi	r30, 0x34	; 52
    2a18:	f0 e0       	ldi	r31, 0x00	; 0
    2a1a:	80 81       	ld	r24, Z
    2a1c:	48 2f       	mov	r20, r24
    2a1e:	8a 81       	ldd	r24, Y+2	; 0x02
    2a20:	28 2f       	mov	r18, r24
    2a22:	30 e0       	ldi	r19, 0x00	; 0
    2a24:	81 e0       	ldi	r24, 0x01	; 1
    2a26:	90 e0       	ldi	r25, 0x00	; 0
    2a28:	02 2e       	mov	r0, r18
    2a2a:	02 c0       	rjmp	.+4      	; 0x2a30 <DIO_VidSetPinDirection+0x1c2>
    2a2c:	88 0f       	add	r24, r24
    2a2e:	99 1f       	adc	r25, r25
    2a30:	0a 94       	dec	r0
    2a32:	e2 f7       	brpl	.-8      	; 0x2a2c <DIO_VidSetPinDirection+0x1be>
    2a34:	84 2b       	or	r24, r20
    2a36:	8c 93       	st	X, r24
    2a38:	13 c0       	rjmp	.+38     	; 0x2a60 <DIO_VidSetPinDirection+0x1f2>
			case(Port_D): SET_BIT(DDRD,Copy_u8PinNumber); break;
    2a3a:	a1 e3       	ldi	r26, 0x31	; 49
    2a3c:	b0 e0       	ldi	r27, 0x00	; 0
    2a3e:	e1 e3       	ldi	r30, 0x31	; 49
    2a40:	f0 e0       	ldi	r31, 0x00	; 0
    2a42:	80 81       	ld	r24, Z
    2a44:	48 2f       	mov	r20, r24
    2a46:	8a 81       	ldd	r24, Y+2	; 0x02
    2a48:	28 2f       	mov	r18, r24
    2a4a:	30 e0       	ldi	r19, 0x00	; 0
    2a4c:	81 e0       	ldi	r24, 0x01	; 1
    2a4e:	90 e0       	ldi	r25, 0x00	; 0
    2a50:	02 2e       	mov	r0, r18
    2a52:	02 c0       	rjmp	.+4      	; 0x2a58 <DIO_VidSetPinDirection+0x1ea>
    2a54:	88 0f       	add	r24, r24
    2a56:	99 1f       	adc	r25, r25
    2a58:	0a 94       	dec	r0
    2a5a:	e2 f7       	brpl	.-8      	; 0x2a54 <DIO_VidSetPinDirection+0x1e6>
    2a5c:	84 2b       	or	r24, r20
    2a5e:	8c 93       	st	X, r24
		}
	}
}
    2a60:	27 96       	adiw	r28, 0x07	; 7
    2a62:	0f b6       	in	r0, 0x3f	; 63
    2a64:	f8 94       	cli
    2a66:	de bf       	out	0x3e, r29	; 62
    2a68:	0f be       	out	0x3f, r0	; 63
    2a6a:	cd bf       	out	0x3d, r28	; 61
    2a6c:	cf 91       	pop	r28
    2a6e:	df 91       	pop	r29
    2a70:	08 95       	ret

00002a72 <DIO_VidGetPinValue>:

void DIO_VidGetPinValue(u8 Copy_u8Port, u8 Copy_u8PinNumber, u8 * Copy_Pu8PinValue)
{
    2a72:	df 93       	push	r29
    2a74:	cf 93       	push	r28
    2a76:	00 d0       	rcall	.+0      	; 0x2a78 <DIO_VidGetPinValue+0x6>
    2a78:	00 d0       	rcall	.+0      	; 0x2a7a <DIO_VidGetPinValue+0x8>
    2a7a:	00 d0       	rcall	.+0      	; 0x2a7c <DIO_VidGetPinValue+0xa>
    2a7c:	cd b7       	in	r28, 0x3d	; 61
    2a7e:	de b7       	in	r29, 0x3e	; 62
    2a80:	89 83       	std	Y+1, r24	; 0x01
    2a82:	6a 83       	std	Y+2, r22	; 0x02
    2a84:	5c 83       	std	Y+4, r21	; 0x04
    2a86:	4b 83       	std	Y+3, r20	; 0x03

	switch(Copy_u8Port)
    2a88:	89 81       	ldd	r24, Y+1	; 0x01
    2a8a:	28 2f       	mov	r18, r24
    2a8c:	30 e0       	ldi	r19, 0x00	; 0
    2a8e:	3e 83       	std	Y+6, r19	; 0x06
    2a90:	2d 83       	std	Y+5, r18	; 0x05
    2a92:	4d 81       	ldd	r20, Y+5	; 0x05
    2a94:	5e 81       	ldd	r21, Y+6	; 0x06
    2a96:	43 30       	cpi	r20, 0x03	; 3
    2a98:	51 05       	cpc	r21, r1
    2a9a:	59 f1       	breq	.+86     	; 0x2af2 <DIO_VidGetPinValue+0x80>
    2a9c:	8d 81       	ldd	r24, Y+5	; 0x05
    2a9e:	9e 81       	ldd	r25, Y+6	; 0x06
    2aa0:	84 30       	cpi	r24, 0x04	; 4
    2aa2:	91 05       	cpc	r25, r1
    2aa4:	34 f4       	brge	.+12     	; 0x2ab2 <DIO_VidGetPinValue+0x40>
    2aa6:	2d 81       	ldd	r18, Y+5	; 0x05
    2aa8:	3e 81       	ldd	r19, Y+6	; 0x06
    2aaa:	22 30       	cpi	r18, 0x02	; 2
    2aac:	31 05       	cpc	r19, r1
    2aae:	69 f0       	breq	.+26     	; 0x2aca <DIO_VidGetPinValue+0x58>
    2ab0:	5b c0       	rjmp	.+182    	; 0x2b68 <DIO_VidGetPinValue+0xf6>
    2ab2:	4d 81       	ldd	r20, Y+5	; 0x05
    2ab4:	5e 81       	ldd	r21, Y+6	; 0x06
    2ab6:	44 30       	cpi	r20, 0x04	; 4
    2ab8:	51 05       	cpc	r21, r1
    2aba:	79 f1       	breq	.+94     	; 0x2b1a <DIO_VidGetPinValue+0xa8>
    2abc:	8d 81       	ldd	r24, Y+5	; 0x05
    2abe:	9e 81       	ldd	r25, Y+6	; 0x06
    2ac0:	85 30       	cpi	r24, 0x05	; 5
    2ac2:	91 05       	cpc	r25, r1
    2ac4:	09 f4       	brne	.+2      	; 0x2ac8 <DIO_VidGetPinValue+0x56>
    2ac6:	3d c0       	rjmp	.+122    	; 0x2b42 <DIO_VidGetPinValue+0xd0>
    2ac8:	4f c0       	rjmp	.+158    	; 0x2b68 <DIO_VidGetPinValue+0xf6>
	{
		case(Port_A): * Copy_Pu8PinValue= GET_BIT(PINA,Copy_u8PinNumber); break;
    2aca:	e9 e3       	ldi	r30, 0x39	; 57
    2acc:	f0 e0       	ldi	r31, 0x00	; 0
    2ace:	80 81       	ld	r24, Z
    2ad0:	28 2f       	mov	r18, r24
    2ad2:	30 e0       	ldi	r19, 0x00	; 0
    2ad4:	8a 81       	ldd	r24, Y+2	; 0x02
    2ad6:	88 2f       	mov	r24, r24
    2ad8:	90 e0       	ldi	r25, 0x00	; 0
    2ada:	a9 01       	movw	r20, r18
    2adc:	02 c0       	rjmp	.+4      	; 0x2ae2 <DIO_VidGetPinValue+0x70>
    2ade:	55 95       	asr	r21
    2ae0:	47 95       	ror	r20
    2ae2:	8a 95       	dec	r24
    2ae4:	e2 f7       	brpl	.-8      	; 0x2ade <DIO_VidGetPinValue+0x6c>
    2ae6:	ca 01       	movw	r24, r20
    2ae8:	81 70       	andi	r24, 0x01	; 1
    2aea:	eb 81       	ldd	r30, Y+3	; 0x03
    2aec:	fc 81       	ldd	r31, Y+4	; 0x04
    2aee:	80 83       	st	Z, r24
    2af0:	3b c0       	rjmp	.+118    	; 0x2b68 <DIO_VidGetPinValue+0xf6>
		case(Port_B): * Copy_Pu8PinValue= GET_BIT(PINB,Copy_u8PinNumber); break;
    2af2:	e6 e3       	ldi	r30, 0x36	; 54
    2af4:	f0 e0       	ldi	r31, 0x00	; 0
    2af6:	80 81       	ld	r24, Z
    2af8:	28 2f       	mov	r18, r24
    2afa:	30 e0       	ldi	r19, 0x00	; 0
    2afc:	8a 81       	ldd	r24, Y+2	; 0x02
    2afe:	88 2f       	mov	r24, r24
    2b00:	90 e0       	ldi	r25, 0x00	; 0
    2b02:	a9 01       	movw	r20, r18
    2b04:	02 c0       	rjmp	.+4      	; 0x2b0a <DIO_VidGetPinValue+0x98>
    2b06:	55 95       	asr	r21
    2b08:	47 95       	ror	r20
    2b0a:	8a 95       	dec	r24
    2b0c:	e2 f7       	brpl	.-8      	; 0x2b06 <DIO_VidGetPinValue+0x94>
    2b0e:	ca 01       	movw	r24, r20
    2b10:	81 70       	andi	r24, 0x01	; 1
    2b12:	eb 81       	ldd	r30, Y+3	; 0x03
    2b14:	fc 81       	ldd	r31, Y+4	; 0x04
    2b16:	80 83       	st	Z, r24
    2b18:	27 c0       	rjmp	.+78     	; 0x2b68 <DIO_VidGetPinValue+0xf6>
		case(Port_C): * Copy_Pu8PinValue= GET_BIT(PINC,Copy_u8PinNumber); break;
    2b1a:	e3 e3       	ldi	r30, 0x33	; 51
    2b1c:	f0 e0       	ldi	r31, 0x00	; 0
    2b1e:	80 81       	ld	r24, Z
    2b20:	28 2f       	mov	r18, r24
    2b22:	30 e0       	ldi	r19, 0x00	; 0
    2b24:	8a 81       	ldd	r24, Y+2	; 0x02
    2b26:	88 2f       	mov	r24, r24
    2b28:	90 e0       	ldi	r25, 0x00	; 0
    2b2a:	a9 01       	movw	r20, r18
    2b2c:	02 c0       	rjmp	.+4      	; 0x2b32 <DIO_VidGetPinValue+0xc0>
    2b2e:	55 95       	asr	r21
    2b30:	47 95       	ror	r20
    2b32:	8a 95       	dec	r24
    2b34:	e2 f7       	brpl	.-8      	; 0x2b2e <DIO_VidGetPinValue+0xbc>
    2b36:	ca 01       	movw	r24, r20
    2b38:	81 70       	andi	r24, 0x01	; 1
    2b3a:	eb 81       	ldd	r30, Y+3	; 0x03
    2b3c:	fc 81       	ldd	r31, Y+4	; 0x04
    2b3e:	80 83       	st	Z, r24
    2b40:	13 c0       	rjmp	.+38     	; 0x2b68 <DIO_VidGetPinValue+0xf6>
		case(Port_D): * Copy_Pu8PinValue= GET_BIT(PIND,Copy_u8PinNumber); break;
    2b42:	e0 e3       	ldi	r30, 0x30	; 48
    2b44:	f0 e0       	ldi	r31, 0x00	; 0
    2b46:	80 81       	ld	r24, Z
    2b48:	28 2f       	mov	r18, r24
    2b4a:	30 e0       	ldi	r19, 0x00	; 0
    2b4c:	8a 81       	ldd	r24, Y+2	; 0x02
    2b4e:	88 2f       	mov	r24, r24
    2b50:	90 e0       	ldi	r25, 0x00	; 0
    2b52:	a9 01       	movw	r20, r18
    2b54:	02 c0       	rjmp	.+4      	; 0x2b5a <DIO_VidGetPinValue+0xe8>
    2b56:	55 95       	asr	r21
    2b58:	47 95       	ror	r20
    2b5a:	8a 95       	dec	r24
    2b5c:	e2 f7       	brpl	.-8      	; 0x2b56 <DIO_VidGetPinValue+0xe4>
    2b5e:	ca 01       	movw	r24, r20
    2b60:	81 70       	andi	r24, 0x01	; 1
    2b62:	eb 81       	ldd	r30, Y+3	; 0x03
    2b64:	fc 81       	ldd	r31, Y+4	; 0x04
    2b66:	80 83       	st	Z, r24
	}

}
    2b68:	26 96       	adiw	r28, 0x06	; 6
    2b6a:	0f b6       	in	r0, 0x3f	; 63
    2b6c:	f8 94       	cli
    2b6e:	de bf       	out	0x3e, r29	; 62
    2b70:	0f be       	out	0x3f, r0	; 63
    2b72:	cd bf       	out	0x3d, r28	; 61
    2b74:	cf 91       	pop	r28
    2b76:	df 91       	pop	r29
    2b78:	08 95       	ret

00002b7a <DIO_VidSetPortValue>:


/* set port */
void DIO_VidSetPortValue(u8 Copy_u8Port, u8 Copy_u8Value)
{
    2b7a:	df 93       	push	r29
    2b7c:	cf 93       	push	r28
    2b7e:	00 d0       	rcall	.+0      	; 0x2b80 <DIO_VidSetPortValue+0x6>
    2b80:	00 d0       	rcall	.+0      	; 0x2b82 <DIO_VidSetPortValue+0x8>
    2b82:	cd b7       	in	r28, 0x3d	; 61
    2b84:	de b7       	in	r29, 0x3e	; 62
    2b86:	89 83       	std	Y+1, r24	; 0x01
    2b88:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8Port)
    2b8a:	89 81       	ldd	r24, Y+1	; 0x01
    2b8c:	28 2f       	mov	r18, r24
    2b8e:	30 e0       	ldi	r19, 0x00	; 0
    2b90:	3c 83       	std	Y+4, r19	; 0x04
    2b92:	2b 83       	std	Y+3, r18	; 0x03
    2b94:	8b 81       	ldd	r24, Y+3	; 0x03
    2b96:	9c 81       	ldd	r25, Y+4	; 0x04
    2b98:	83 30       	cpi	r24, 0x03	; 3
    2b9a:	91 05       	cpc	r25, r1
    2b9c:	d9 f0       	breq	.+54     	; 0x2bd4 <DIO_VidSetPortValue+0x5a>
    2b9e:	2b 81       	ldd	r18, Y+3	; 0x03
    2ba0:	3c 81       	ldd	r19, Y+4	; 0x04
    2ba2:	24 30       	cpi	r18, 0x04	; 4
    2ba4:	31 05       	cpc	r19, r1
    2ba6:	34 f4       	brge	.+12     	; 0x2bb4 <DIO_VidSetPortValue+0x3a>
    2ba8:	8b 81       	ldd	r24, Y+3	; 0x03
    2baa:	9c 81       	ldd	r25, Y+4	; 0x04
    2bac:	82 30       	cpi	r24, 0x02	; 2
    2bae:	91 05       	cpc	r25, r1
    2bb0:	61 f0       	breq	.+24     	; 0x2bca <DIO_VidSetPortValue+0x50>
    2bb2:	1e c0       	rjmp	.+60     	; 0x2bf0 <DIO_VidSetPortValue+0x76>
    2bb4:	2b 81       	ldd	r18, Y+3	; 0x03
    2bb6:	3c 81       	ldd	r19, Y+4	; 0x04
    2bb8:	24 30       	cpi	r18, 0x04	; 4
    2bba:	31 05       	cpc	r19, r1
    2bbc:	81 f0       	breq	.+32     	; 0x2bde <DIO_VidSetPortValue+0x64>
    2bbe:	8b 81       	ldd	r24, Y+3	; 0x03
    2bc0:	9c 81       	ldd	r25, Y+4	; 0x04
    2bc2:	85 30       	cpi	r24, 0x05	; 5
    2bc4:	91 05       	cpc	r25, r1
    2bc6:	81 f0       	breq	.+32     	; 0x2be8 <DIO_VidSetPortValue+0x6e>
    2bc8:	13 c0       	rjmp	.+38     	; 0x2bf0 <DIO_VidSetPortValue+0x76>
	{
		case(Port_A):  PORTA = Copy_u8Value; break;
    2bca:	eb e3       	ldi	r30, 0x3B	; 59
    2bcc:	f0 e0       	ldi	r31, 0x00	; 0
    2bce:	8a 81       	ldd	r24, Y+2	; 0x02
    2bd0:	80 83       	st	Z, r24
    2bd2:	0e c0       	rjmp	.+28     	; 0x2bf0 <DIO_VidSetPortValue+0x76>
		case(Port_B):  PORTB = Copy_u8Value; break;
    2bd4:	e8 e3       	ldi	r30, 0x38	; 56
    2bd6:	f0 e0       	ldi	r31, 0x00	; 0
    2bd8:	8a 81       	ldd	r24, Y+2	; 0x02
    2bda:	80 83       	st	Z, r24
    2bdc:	09 c0       	rjmp	.+18     	; 0x2bf0 <DIO_VidSetPortValue+0x76>
		case(Port_C):  PORTC = Copy_u8Value; break;
    2bde:	e5 e3       	ldi	r30, 0x35	; 53
    2be0:	f0 e0       	ldi	r31, 0x00	; 0
    2be2:	8a 81       	ldd	r24, Y+2	; 0x02
    2be4:	80 83       	st	Z, r24
    2be6:	04 c0       	rjmp	.+8      	; 0x2bf0 <DIO_VidSetPortValue+0x76>
		case(Port_D):  PORTD = Copy_u8Value; break;
    2be8:	e2 e3       	ldi	r30, 0x32	; 50
    2bea:	f0 e0       	ldi	r31, 0x00	; 0
    2bec:	8a 81       	ldd	r24, Y+2	; 0x02
    2bee:	80 83       	st	Z, r24
	}
}
    2bf0:	0f 90       	pop	r0
    2bf2:	0f 90       	pop	r0
    2bf4:	0f 90       	pop	r0
    2bf6:	0f 90       	pop	r0
    2bf8:	cf 91       	pop	r28
    2bfa:	df 91       	pop	r29
    2bfc:	08 95       	ret

00002bfe <DIO_VidSetPortDirection>:

void DIO_VidSetPortDirection(u8 Copy_u8Port, u8 Copy_u8PortDirection)
{
    2bfe:	df 93       	push	r29
    2c00:	cf 93       	push	r28
    2c02:	cd b7       	in	r28, 0x3d	; 61
    2c04:	de b7       	in	r29, 0x3e	; 62
    2c06:	28 97       	sbiw	r28, 0x08	; 8
    2c08:	0f b6       	in	r0, 0x3f	; 63
    2c0a:	f8 94       	cli
    2c0c:	de bf       	out	0x3e, r29	; 62
    2c0e:	0f be       	out	0x3f, r0	; 63
    2c10:	cd bf       	out	0x3d, r28	; 61
    2c12:	89 83       	std	Y+1, r24	; 0x01
    2c14:	6a 83       	std	Y+2, r22	; 0x02
	if(Copy_u8PortDirection == output)
    2c16:	8a 81       	ldd	r24, Y+2	; 0x02
    2c18:	81 30       	cpi	r24, 0x01	; 1
    2c1a:	a1 f5       	brne	.+104    	; 0x2c84 <DIO_VidSetPortDirection+0x86>
	{	switch(Copy_u8Port)
    2c1c:	89 81       	ldd	r24, Y+1	; 0x01
    2c1e:	28 2f       	mov	r18, r24
    2c20:	30 e0       	ldi	r19, 0x00	; 0
    2c22:	38 87       	std	Y+8, r19	; 0x08
    2c24:	2f 83       	std	Y+7, r18	; 0x07
    2c26:	8f 81       	ldd	r24, Y+7	; 0x07
    2c28:	98 85       	ldd	r25, Y+8	; 0x08
    2c2a:	83 30       	cpi	r24, 0x03	; 3
    2c2c:	91 05       	cpc	r25, r1
    2c2e:	d9 f0       	breq	.+54     	; 0x2c66 <DIO_VidSetPortDirection+0x68>
    2c30:	2f 81       	ldd	r18, Y+7	; 0x07
    2c32:	38 85       	ldd	r19, Y+8	; 0x08
    2c34:	24 30       	cpi	r18, 0x04	; 4
    2c36:	31 05       	cpc	r19, r1
    2c38:	34 f4       	brge	.+12     	; 0x2c46 <DIO_VidSetPortDirection+0x48>
    2c3a:	8f 81       	ldd	r24, Y+7	; 0x07
    2c3c:	98 85       	ldd	r25, Y+8	; 0x08
    2c3e:	82 30       	cpi	r24, 0x02	; 2
    2c40:	91 05       	cpc	r25, r1
    2c42:	61 f0       	breq	.+24     	; 0x2c5c <DIO_VidSetPortDirection+0x5e>
    2c44:	85 c0       	rjmp	.+266    	; 0x2d50 <DIO_VidSetPortDirection+0x152>
    2c46:	2f 81       	ldd	r18, Y+7	; 0x07
    2c48:	38 85       	ldd	r19, Y+8	; 0x08
    2c4a:	24 30       	cpi	r18, 0x04	; 4
    2c4c:	31 05       	cpc	r19, r1
    2c4e:	81 f0       	breq	.+32     	; 0x2c70 <DIO_VidSetPortDirection+0x72>
    2c50:	8f 81       	ldd	r24, Y+7	; 0x07
    2c52:	98 85       	ldd	r25, Y+8	; 0x08
    2c54:	85 30       	cpi	r24, 0x05	; 5
    2c56:	91 05       	cpc	r25, r1
    2c58:	81 f0       	breq	.+32     	; 0x2c7a <DIO_VidSetPortDirection+0x7c>
    2c5a:	7a c0       	rjmp	.+244    	; 0x2d50 <DIO_VidSetPortDirection+0x152>
		{
			case(Port_A):  DDRA = 0xff; break;
    2c5c:	ea e3       	ldi	r30, 0x3A	; 58
    2c5e:	f0 e0       	ldi	r31, 0x00	; 0
    2c60:	8f ef       	ldi	r24, 0xFF	; 255
    2c62:	80 83       	st	Z, r24
    2c64:	75 c0       	rjmp	.+234    	; 0x2d50 <DIO_VidSetPortDirection+0x152>
			case(Port_B):  DDRB = 0xff; break;
    2c66:	e7 e3       	ldi	r30, 0x37	; 55
    2c68:	f0 e0       	ldi	r31, 0x00	; 0
    2c6a:	8f ef       	ldi	r24, 0xFF	; 255
    2c6c:	80 83       	st	Z, r24
    2c6e:	70 c0       	rjmp	.+224    	; 0x2d50 <DIO_VidSetPortDirection+0x152>
			case(Port_C):  DDRC = 0xff; break;
    2c70:	e4 e3       	ldi	r30, 0x34	; 52
    2c72:	f0 e0       	ldi	r31, 0x00	; 0
    2c74:	8f ef       	ldi	r24, 0xFF	; 255
    2c76:	80 83       	st	Z, r24
    2c78:	6b c0       	rjmp	.+214    	; 0x2d50 <DIO_VidSetPortDirection+0x152>
			case(Port_D):  DDRD = 0xff; break;
    2c7a:	e1 e3       	ldi	r30, 0x31	; 49
    2c7c:	f0 e0       	ldi	r31, 0x00	; 0
    2c7e:	8f ef       	ldi	r24, 0xFF	; 255
    2c80:	80 83       	st	Z, r24
    2c82:	66 c0       	rjmp	.+204    	; 0x2d50 <DIO_VidSetPortDirection+0x152>
		}
	}
	else if(Copy_u8PortDirection == input)
    2c84:	8a 81       	ldd	r24, Y+2	; 0x02
    2c86:	88 23       	and	r24, r24
    2c88:	81 f5       	brne	.+96     	; 0x2cea <DIO_VidSetPortDirection+0xec>
	{	switch(Copy_u8Port)
    2c8a:	89 81       	ldd	r24, Y+1	; 0x01
    2c8c:	28 2f       	mov	r18, r24
    2c8e:	30 e0       	ldi	r19, 0x00	; 0
    2c90:	3e 83       	std	Y+6, r19	; 0x06
    2c92:	2d 83       	std	Y+5, r18	; 0x05
    2c94:	8d 81       	ldd	r24, Y+5	; 0x05
    2c96:	9e 81       	ldd	r25, Y+6	; 0x06
    2c98:	83 30       	cpi	r24, 0x03	; 3
    2c9a:	91 05       	cpc	r25, r1
    2c9c:	d1 f0       	breq	.+52     	; 0x2cd2 <DIO_VidSetPortDirection+0xd4>
    2c9e:	2d 81       	ldd	r18, Y+5	; 0x05
    2ca0:	3e 81       	ldd	r19, Y+6	; 0x06
    2ca2:	24 30       	cpi	r18, 0x04	; 4
    2ca4:	31 05       	cpc	r19, r1
    2ca6:	34 f4       	brge	.+12     	; 0x2cb4 <DIO_VidSetPortDirection+0xb6>
    2ca8:	8d 81       	ldd	r24, Y+5	; 0x05
    2caa:	9e 81       	ldd	r25, Y+6	; 0x06
    2cac:	82 30       	cpi	r24, 0x02	; 2
    2cae:	91 05       	cpc	r25, r1
    2cb0:	61 f0       	breq	.+24     	; 0x2cca <DIO_VidSetPortDirection+0xcc>
    2cb2:	4e c0       	rjmp	.+156    	; 0x2d50 <DIO_VidSetPortDirection+0x152>
    2cb4:	2d 81       	ldd	r18, Y+5	; 0x05
    2cb6:	3e 81       	ldd	r19, Y+6	; 0x06
    2cb8:	24 30       	cpi	r18, 0x04	; 4
    2cba:	31 05       	cpc	r19, r1
    2cbc:	71 f0       	breq	.+28     	; 0x2cda <DIO_VidSetPortDirection+0xdc>
    2cbe:	8d 81       	ldd	r24, Y+5	; 0x05
    2cc0:	9e 81       	ldd	r25, Y+6	; 0x06
    2cc2:	85 30       	cpi	r24, 0x05	; 5
    2cc4:	91 05       	cpc	r25, r1
    2cc6:	69 f0       	breq	.+26     	; 0x2ce2 <DIO_VidSetPortDirection+0xe4>
    2cc8:	43 c0       	rjmp	.+134    	; 0x2d50 <DIO_VidSetPortDirection+0x152>
		{
			case(Port_A):  DDRA = 0x00; break;
    2cca:	ea e3       	ldi	r30, 0x3A	; 58
    2ccc:	f0 e0       	ldi	r31, 0x00	; 0
    2cce:	10 82       	st	Z, r1
    2cd0:	3f c0       	rjmp	.+126    	; 0x2d50 <DIO_VidSetPortDirection+0x152>
			case(Port_B):  DDRB = 0x00; break;
    2cd2:	e7 e3       	ldi	r30, 0x37	; 55
    2cd4:	f0 e0       	ldi	r31, 0x00	; 0
    2cd6:	10 82       	st	Z, r1
    2cd8:	3b c0       	rjmp	.+118    	; 0x2d50 <DIO_VidSetPortDirection+0x152>
			case(Port_C):  DDRC = 0x00; break;
    2cda:	e4 e3       	ldi	r30, 0x34	; 52
    2cdc:	f0 e0       	ldi	r31, 0x00	; 0
    2cde:	10 82       	st	Z, r1
    2ce0:	37 c0       	rjmp	.+110    	; 0x2d50 <DIO_VidSetPortDirection+0x152>
			case(Port_D):  DDRD = 0x00; break;
    2ce2:	e1 e3       	ldi	r30, 0x31	; 49
    2ce4:	f0 e0       	ldi	r31, 0x00	; 0
    2ce6:	10 82       	st	Z, r1
    2ce8:	33 c0       	rjmp	.+102    	; 0x2d50 <DIO_VidSetPortDirection+0x152>
		}
	}
	else
	{
		switch(Copy_u8Port)
    2cea:	89 81       	ldd	r24, Y+1	; 0x01
    2cec:	28 2f       	mov	r18, r24
    2cee:	30 e0       	ldi	r19, 0x00	; 0
    2cf0:	3c 83       	std	Y+4, r19	; 0x04
    2cf2:	2b 83       	std	Y+3, r18	; 0x03
    2cf4:	8b 81       	ldd	r24, Y+3	; 0x03
    2cf6:	9c 81       	ldd	r25, Y+4	; 0x04
    2cf8:	83 30       	cpi	r24, 0x03	; 3
    2cfa:	91 05       	cpc	r25, r1
    2cfc:	d9 f0       	breq	.+54     	; 0x2d34 <DIO_VidSetPortDirection+0x136>
    2cfe:	2b 81       	ldd	r18, Y+3	; 0x03
    2d00:	3c 81       	ldd	r19, Y+4	; 0x04
    2d02:	24 30       	cpi	r18, 0x04	; 4
    2d04:	31 05       	cpc	r19, r1
    2d06:	34 f4       	brge	.+12     	; 0x2d14 <DIO_VidSetPortDirection+0x116>
    2d08:	8b 81       	ldd	r24, Y+3	; 0x03
    2d0a:	9c 81       	ldd	r25, Y+4	; 0x04
    2d0c:	82 30       	cpi	r24, 0x02	; 2
    2d0e:	91 05       	cpc	r25, r1
    2d10:	61 f0       	breq	.+24     	; 0x2d2a <DIO_VidSetPortDirection+0x12c>
    2d12:	1e c0       	rjmp	.+60     	; 0x2d50 <DIO_VidSetPortDirection+0x152>
    2d14:	2b 81       	ldd	r18, Y+3	; 0x03
    2d16:	3c 81       	ldd	r19, Y+4	; 0x04
    2d18:	24 30       	cpi	r18, 0x04	; 4
    2d1a:	31 05       	cpc	r19, r1
    2d1c:	81 f0       	breq	.+32     	; 0x2d3e <DIO_VidSetPortDirection+0x140>
    2d1e:	8b 81       	ldd	r24, Y+3	; 0x03
    2d20:	9c 81       	ldd	r25, Y+4	; 0x04
    2d22:	85 30       	cpi	r24, 0x05	; 5
    2d24:	91 05       	cpc	r25, r1
    2d26:	81 f0       	breq	.+32     	; 0x2d48 <DIO_VidSetPortDirection+0x14a>
    2d28:	13 c0       	rjmp	.+38     	; 0x2d50 <DIO_VidSetPortDirection+0x152>
		{
		    case(Port_A):  DDRA = Copy_u8PortDirection; break;
    2d2a:	ea e3       	ldi	r30, 0x3A	; 58
    2d2c:	f0 e0       	ldi	r31, 0x00	; 0
    2d2e:	8a 81       	ldd	r24, Y+2	; 0x02
    2d30:	80 83       	st	Z, r24
    2d32:	0e c0       	rjmp	.+28     	; 0x2d50 <DIO_VidSetPortDirection+0x152>
			case(Port_B):  DDRB = Copy_u8PortDirection; break;
    2d34:	e7 e3       	ldi	r30, 0x37	; 55
    2d36:	f0 e0       	ldi	r31, 0x00	; 0
    2d38:	8a 81       	ldd	r24, Y+2	; 0x02
    2d3a:	80 83       	st	Z, r24
    2d3c:	09 c0       	rjmp	.+18     	; 0x2d50 <DIO_VidSetPortDirection+0x152>
			case(Port_C):  DDRC = Copy_u8PortDirection; break;
    2d3e:	e4 e3       	ldi	r30, 0x34	; 52
    2d40:	f0 e0       	ldi	r31, 0x00	; 0
    2d42:	8a 81       	ldd	r24, Y+2	; 0x02
    2d44:	80 83       	st	Z, r24
    2d46:	04 c0       	rjmp	.+8      	; 0x2d50 <DIO_VidSetPortDirection+0x152>
			case(Port_D):  DDRD = Copy_u8PortDirection; break;
    2d48:	e1 e3       	ldi	r30, 0x31	; 49
    2d4a:	f0 e0       	ldi	r31, 0x00	; 0
    2d4c:	8a 81       	ldd	r24, Y+2	; 0x02
    2d4e:	80 83       	st	Z, r24
		}
	}
}
    2d50:	28 96       	adiw	r28, 0x08	; 8
    2d52:	0f b6       	in	r0, 0x3f	; 63
    2d54:	f8 94       	cli
    2d56:	de bf       	out	0x3e, r29	; 62
    2d58:	0f be       	out	0x3f, r0	; 63
    2d5a:	cd bf       	out	0x3d, r28	; 61
    2d5c:	cf 91       	pop	r28
    2d5e:	df 91       	pop	r29
    2d60:	08 95       	ret

00002d62 <DIO_VidGetPortValue>:

void DIO_VidGetPortValue(u8 Copy_u8Port,  u8 * Copy_Pu8PortValue)
{
    2d62:	df 93       	push	r29
    2d64:	cf 93       	push	r28
    2d66:	00 d0       	rcall	.+0      	; 0x2d68 <DIO_VidGetPortValue+0x6>
    2d68:	00 d0       	rcall	.+0      	; 0x2d6a <DIO_VidGetPortValue+0x8>
    2d6a:	0f 92       	push	r0
    2d6c:	cd b7       	in	r28, 0x3d	; 61
    2d6e:	de b7       	in	r29, 0x3e	; 62
    2d70:	89 83       	std	Y+1, r24	; 0x01
    2d72:	7b 83       	std	Y+3, r23	; 0x03
    2d74:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8Port)
    2d76:	89 81       	ldd	r24, Y+1	; 0x01
    2d78:	28 2f       	mov	r18, r24
    2d7a:	30 e0       	ldi	r19, 0x00	; 0
    2d7c:	3d 83       	std	Y+5, r19	; 0x05
    2d7e:	2c 83       	std	Y+4, r18	; 0x04
    2d80:	8c 81       	ldd	r24, Y+4	; 0x04
    2d82:	9d 81       	ldd	r25, Y+5	; 0x05
    2d84:	83 30       	cpi	r24, 0x03	; 3
    2d86:	91 05       	cpc	r25, r1
    2d88:	e9 f0       	breq	.+58     	; 0x2dc4 <DIO_VidGetPortValue+0x62>
    2d8a:	2c 81       	ldd	r18, Y+4	; 0x04
    2d8c:	3d 81       	ldd	r19, Y+5	; 0x05
    2d8e:	24 30       	cpi	r18, 0x04	; 4
    2d90:	31 05       	cpc	r19, r1
    2d92:	34 f4       	brge	.+12     	; 0x2da0 <DIO_VidGetPortValue+0x3e>
    2d94:	8c 81       	ldd	r24, Y+4	; 0x04
    2d96:	9d 81       	ldd	r25, Y+5	; 0x05
    2d98:	82 30       	cpi	r24, 0x02	; 2
    2d9a:	91 05       	cpc	r25, r1
    2d9c:	61 f0       	breq	.+24     	; 0x2db6 <DIO_VidGetPortValue+0x54>
    2d9e:	26 c0       	rjmp	.+76     	; 0x2dec <DIO_VidGetPortValue+0x8a>
    2da0:	2c 81       	ldd	r18, Y+4	; 0x04
    2da2:	3d 81       	ldd	r19, Y+5	; 0x05
    2da4:	24 30       	cpi	r18, 0x04	; 4
    2da6:	31 05       	cpc	r19, r1
    2da8:	a1 f0       	breq	.+40     	; 0x2dd2 <DIO_VidGetPortValue+0x70>
    2daa:	8c 81       	ldd	r24, Y+4	; 0x04
    2dac:	9d 81       	ldd	r25, Y+5	; 0x05
    2dae:	85 30       	cpi	r24, 0x05	; 5
    2db0:	91 05       	cpc	r25, r1
    2db2:	b1 f0       	breq	.+44     	; 0x2de0 <DIO_VidGetPortValue+0x7e>
    2db4:	1b c0       	rjmp	.+54     	; 0x2dec <DIO_VidGetPortValue+0x8a>
	{
		case(Port_A): * Copy_Pu8PortValue= PINA; break;
    2db6:	e9 e3       	ldi	r30, 0x39	; 57
    2db8:	f0 e0       	ldi	r31, 0x00	; 0
    2dba:	80 81       	ld	r24, Z
    2dbc:	ea 81       	ldd	r30, Y+2	; 0x02
    2dbe:	fb 81       	ldd	r31, Y+3	; 0x03
    2dc0:	80 83       	st	Z, r24
    2dc2:	14 c0       	rjmp	.+40     	; 0x2dec <DIO_VidGetPortValue+0x8a>
		case(Port_B): * Copy_Pu8PortValue= PINB; break;
    2dc4:	e6 e3       	ldi	r30, 0x36	; 54
    2dc6:	f0 e0       	ldi	r31, 0x00	; 0
    2dc8:	80 81       	ld	r24, Z
    2dca:	ea 81       	ldd	r30, Y+2	; 0x02
    2dcc:	fb 81       	ldd	r31, Y+3	; 0x03
    2dce:	80 83       	st	Z, r24
    2dd0:	0d c0       	rjmp	.+26     	; 0x2dec <DIO_VidGetPortValue+0x8a>
		case(Port_C): * Copy_Pu8PortValue= PINC; break;
    2dd2:	e3 e3       	ldi	r30, 0x33	; 51
    2dd4:	f0 e0       	ldi	r31, 0x00	; 0
    2dd6:	80 81       	ld	r24, Z
    2dd8:	ea 81       	ldd	r30, Y+2	; 0x02
    2dda:	fb 81       	ldd	r31, Y+3	; 0x03
    2ddc:	80 83       	st	Z, r24
    2dde:	06 c0       	rjmp	.+12     	; 0x2dec <DIO_VidGetPortValue+0x8a>
		case(Port_D): * Copy_Pu8PortValue= PIND; break;
    2de0:	e0 e3       	ldi	r30, 0x30	; 48
    2de2:	f0 e0       	ldi	r31, 0x00	; 0
    2de4:	80 81       	ld	r24, Z
    2de6:	ea 81       	ldd	r30, Y+2	; 0x02
    2de8:	fb 81       	ldd	r31, Y+3	; 0x03
    2dea:	80 83       	st	Z, r24
	}
}
    2dec:	0f 90       	pop	r0
    2dee:	0f 90       	pop	r0
    2df0:	0f 90       	pop	r0
    2df2:	0f 90       	pop	r0
    2df4:	0f 90       	pop	r0
    2df6:	cf 91       	pop	r28
    2df8:	df 91       	pop	r29
    2dfa:	08 95       	ret

00002dfc <Timer1_voidOverFlowISR>:
#include <util/delay.h>

u16 Global_u16TimerOverFlowCounter=0;

void Timer1_voidOverFlowISR()
{
    2dfc:	df 93       	push	r29
    2dfe:	cf 93       	push	r28
    2e00:	cd b7       	in	r28, 0x3d	; 61
    2e02:	de b7       	in	r29, 0x3e	; 62
	Global_u16TimerOverFlowCounter++;
    2e04:	80 91 da 01 	lds	r24, 0x01DA
    2e08:	90 91 db 01 	lds	r25, 0x01DB
    2e0c:	01 96       	adiw	r24, 0x01	; 1
    2e0e:	90 93 db 01 	sts	0x01DB, r25
    2e12:	80 93 da 01 	sts	0x01DA, r24
}
    2e16:	cf 91       	pop	r28
    2e18:	df 91       	pop	r29
    2e1a:	08 95       	ret

00002e1c <UltraSonic_voidInit>:


void UltraSonic_voidInit()
{
    2e1c:	df 93       	push	r29
    2e1e:	cf 93       	push	r28
    2e20:	cd b7       	in	r28, 0x3d	; 61
    2e22:	de b7       	in	r29, 0x3e	; 62
	/* set the call back function of the OV interrupt with the defined function */
		TIMR1_OvF_SetCallBack(Timer1_voidOverFlowISR);
    2e24:	8e ef       	ldi	r24, 0xFE	; 254
    2e26:	96 e1       	ldi	r25, 0x16	; 22
    2e28:	0e 94 aa 10 	call	0x2154	; 0x2154 <TIMR1_OvF_SetCallBack>
	/* setting up ultra-sonic sensor pin */
		DIO_VidSetPinDirection(UltraSonic_Port,TRIGGER_Pin,output);		/* trigger pin ------>>>>>>make a driver for it */
    2e2c:	85 e0       	ldi	r24, 0x05	; 5
    2e2e:	67 e0       	ldi	r22, 0x07	; 7
    2e30:	41 e0       	ldi	r20, 0x01	; 1
    2e32:	0e 94 37 14 	call	0x286e	; 0x286e <DIO_VidSetPinDirection>
	/* initialize Timer 1 in normal mode */
		Timer1_16bit_vid_Init(Normal,UnitA_Normal_port_operation);
    2e36:	80 e0       	ldi	r24, 0x00	; 0
    2e38:	60 e0       	ldi	r22, 0x00	; 0
    2e3a:	0e 94 83 0a 	call	0x1506	; 0x1506 <Timer1_16bit_vid_Init>

	/* Enable overflow interrupt for timer 1 */
		Timer_vid_Interrupt(timer1,Overflow_Int,Enable);
    2e3e:	83 e0       	ldi	r24, 0x03	; 3
    2e40:	66 e0       	ldi	r22, 0x06	; 6
    2e42:	41 e0       	ldi	r20, 0x01	; 1
    2e44:	0e 94 15 0c 	call	0x182a	; 0x182a <Timer_vid_Interrupt>
}
    2e48:	cf 91       	pop	r28
    2e4a:	df 91       	pop	r29
    2e4c:	08 95       	ret

00002e4e <UltraSonic_f64Read>:


f64 UltraSonic_f64Read()
{
    2e4e:	ef 92       	push	r14
    2e50:	ff 92       	push	r15
    2e52:	0f 93       	push	r16
    2e54:	1f 93       	push	r17
    2e56:	df 93       	push	r29
    2e58:	cf 93       	push	r28
    2e5a:	cd b7       	in	r28, 0x3d	; 61
    2e5c:	de b7       	in	r29, 0x3e	; 62
    2e5e:	a2 97       	sbiw	r28, 0x22	; 34
    2e60:	0f b6       	in	r0, 0x3f	; 63
    2e62:	f8 94       	cli
    2e64:	de bf       	out	0x3e, r29	; 62
    2e66:	0f be       	out	0x3f, r0	; 63
    2e68:	cd bf       	out	0x3d, r28	; 61

	f64 Local_u64TimerCountValue=0;
    2e6a:	80 e0       	ldi	r24, 0x00	; 0
    2e6c:	90 e0       	ldi	r25, 0x00	; 0
    2e6e:	a0 e0       	ldi	r26, 0x00	; 0
    2e70:	b0 e0       	ldi	r27, 0x00	; 0
    2e72:	8f 8f       	std	Y+31, r24	; 0x1f
    2e74:	98 a3       	std	Y+32, r25	; 0x20
    2e76:	a9 a3       	std	Y+33, r26	; 0x21
    2e78:	ba a3       	std	Y+34, r27	; 0x22
	f64 Local_f64Distance=0;
    2e7a:	80 e0       	ldi	r24, 0x00	; 0
    2e7c:	90 e0       	ldi	r25, 0x00	; 0
    2e7e:	a0 e0       	ldi	r26, 0x00	; 0
    2e80:	b0 e0       	ldi	r27, 0x00	; 0
    2e82:	8b 8f       	std	Y+27, r24	; 0x1b
    2e84:	9c 8f       	std	Y+28, r25	; 0x1c
    2e86:	ad 8f       	std	Y+29, r26	; 0x1d
    2e88:	be 8f       	std	Y+30, r27	; 0x1e
	u16 Local_u16ICU=0;
    2e8a:	1a 8e       	std	Y+26, r1	; 0x1a
    2e8c:	19 8e       	std	Y+25, r1	; 0x19


	/* Give 10 us trigger pulse on the trigger pin in the ultra-sonic */
	DIO_VidSetPinValue(UltraSonic_Port,TRIGGER_Pin,high);
    2e8e:	85 e0       	ldi	r24, 0x05	; 5
    2e90:	67 e0       	ldi	r22, 0x07	; 7
    2e92:	41 e0       	ldi	r20, 0x01	; 1
    2e94:	0e 94 35 13 	call	0x266a	; 0x266a <DIO_VidSetPinValue>
    2e98:	80 e0       	ldi	r24, 0x00	; 0
    2e9a:	90 e0       	ldi	r25, 0x00	; 0
    2e9c:	a0 e2       	ldi	r26, 0x20	; 32
    2e9e:	b1 e4       	ldi	r27, 0x41	; 65
    2ea0:	8d 8b       	std	Y+21, r24	; 0x15
    2ea2:	9e 8b       	std	Y+22, r25	; 0x16
    2ea4:	af 8b       	std	Y+23, r26	; 0x17
    2ea6:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2ea8:	6d 89       	ldd	r22, Y+21	; 0x15
    2eaa:	7e 89       	ldd	r23, Y+22	; 0x16
    2eac:	8f 89       	ldd	r24, Y+23	; 0x17
    2eae:	98 8d       	ldd	r25, Y+24	; 0x18
    2eb0:	2b ea       	ldi	r18, 0xAB	; 171
    2eb2:	3a ea       	ldi	r19, 0xAA	; 170
    2eb4:	4a e2       	ldi	r20, 0x2A	; 42
    2eb6:	50 e4       	ldi	r21, 0x40	; 64
    2eb8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ebc:	dc 01       	movw	r26, r24
    2ebe:	cb 01       	movw	r24, r22
    2ec0:	89 8b       	std	Y+17, r24	; 0x11
    2ec2:	9a 8b       	std	Y+18, r25	; 0x12
    2ec4:	ab 8b       	std	Y+19, r26	; 0x13
    2ec6:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    2ec8:	69 89       	ldd	r22, Y+17	; 0x11
    2eca:	7a 89       	ldd	r23, Y+18	; 0x12
    2ecc:	8b 89       	ldd	r24, Y+19	; 0x13
    2ece:	9c 89       	ldd	r25, Y+20	; 0x14
    2ed0:	20 e0       	ldi	r18, 0x00	; 0
    2ed2:	30 e0       	ldi	r19, 0x00	; 0
    2ed4:	40 e8       	ldi	r20, 0x80	; 128
    2ed6:	5f e3       	ldi	r21, 0x3F	; 63
    2ed8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2edc:	88 23       	and	r24, r24
    2ede:	1c f4       	brge	.+6      	; 0x2ee6 <UltraSonic_f64Read+0x98>
		__ticks = 1;
    2ee0:	81 e0       	ldi	r24, 0x01	; 1
    2ee2:	88 8b       	std	Y+16, r24	; 0x10
    2ee4:	91 c0       	rjmp	.+290    	; 0x3008 <UltraSonic_f64Read+0x1ba>
	else if (__tmp > 255)
    2ee6:	69 89       	ldd	r22, Y+17	; 0x11
    2ee8:	7a 89       	ldd	r23, Y+18	; 0x12
    2eea:	8b 89       	ldd	r24, Y+19	; 0x13
    2eec:	9c 89       	ldd	r25, Y+20	; 0x14
    2eee:	20 e0       	ldi	r18, 0x00	; 0
    2ef0:	30 e0       	ldi	r19, 0x00	; 0
    2ef2:	4f e7       	ldi	r20, 0x7F	; 127
    2ef4:	53 e4       	ldi	r21, 0x43	; 67
    2ef6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2efa:	18 16       	cp	r1, r24
    2efc:	0c f0       	brlt	.+2      	; 0x2f00 <UltraSonic_f64Read+0xb2>
    2efe:	7b c0       	rjmp	.+246    	; 0x2ff6 <UltraSonic_f64Read+0x1a8>
	{
		_delay_ms(__us / 1000.0);
    2f00:	6d 89       	ldd	r22, Y+21	; 0x15
    2f02:	7e 89       	ldd	r23, Y+22	; 0x16
    2f04:	8f 89       	ldd	r24, Y+23	; 0x17
    2f06:	98 8d       	ldd	r25, Y+24	; 0x18
    2f08:	20 e0       	ldi	r18, 0x00	; 0
    2f0a:	30 e0       	ldi	r19, 0x00	; 0
    2f0c:	4a e7       	ldi	r20, 0x7A	; 122
    2f0e:	54 e4       	ldi	r21, 0x44	; 68
    2f10:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2f14:	dc 01       	movw	r26, r24
    2f16:	cb 01       	movw	r24, r22
    2f18:	8c 87       	std	Y+12, r24	; 0x0c
    2f1a:	9d 87       	std	Y+13, r25	; 0x0d
    2f1c:	ae 87       	std	Y+14, r26	; 0x0e
    2f1e:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f20:	6c 85       	ldd	r22, Y+12	; 0x0c
    2f22:	7d 85       	ldd	r23, Y+13	; 0x0d
    2f24:	8e 85       	ldd	r24, Y+14	; 0x0e
    2f26:	9f 85       	ldd	r25, Y+15	; 0x0f
    2f28:	20 e0       	ldi	r18, 0x00	; 0
    2f2a:	30 e0       	ldi	r19, 0x00	; 0
    2f2c:	4a ef       	ldi	r20, 0xFA	; 250
    2f2e:	54 e4       	ldi	r21, 0x44	; 68
    2f30:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f34:	dc 01       	movw	r26, r24
    2f36:	cb 01       	movw	r24, r22
    2f38:	88 87       	std	Y+8, r24	; 0x08
    2f3a:	99 87       	std	Y+9, r25	; 0x09
    2f3c:	aa 87       	std	Y+10, r26	; 0x0a
    2f3e:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    2f40:	68 85       	ldd	r22, Y+8	; 0x08
    2f42:	79 85       	ldd	r23, Y+9	; 0x09
    2f44:	8a 85       	ldd	r24, Y+10	; 0x0a
    2f46:	9b 85       	ldd	r25, Y+11	; 0x0b
    2f48:	20 e0       	ldi	r18, 0x00	; 0
    2f4a:	30 e0       	ldi	r19, 0x00	; 0
    2f4c:	40 e8       	ldi	r20, 0x80	; 128
    2f4e:	5f e3       	ldi	r21, 0x3F	; 63
    2f50:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2f54:	88 23       	and	r24, r24
    2f56:	2c f4       	brge	.+10     	; 0x2f62 <UltraSonic_f64Read+0x114>
		__ticks = 1;
    2f58:	81 e0       	ldi	r24, 0x01	; 1
    2f5a:	90 e0       	ldi	r25, 0x00	; 0
    2f5c:	9f 83       	std	Y+7, r25	; 0x07
    2f5e:	8e 83       	std	Y+6, r24	; 0x06
    2f60:	3f c0       	rjmp	.+126    	; 0x2fe0 <UltraSonic_f64Read+0x192>
	else if (__tmp > 65535)
    2f62:	68 85       	ldd	r22, Y+8	; 0x08
    2f64:	79 85       	ldd	r23, Y+9	; 0x09
    2f66:	8a 85       	ldd	r24, Y+10	; 0x0a
    2f68:	9b 85       	ldd	r25, Y+11	; 0x0b
    2f6a:	20 e0       	ldi	r18, 0x00	; 0
    2f6c:	3f ef       	ldi	r19, 0xFF	; 255
    2f6e:	4f e7       	ldi	r20, 0x7F	; 127
    2f70:	57 e4       	ldi	r21, 0x47	; 71
    2f72:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2f76:	18 16       	cp	r1, r24
    2f78:	4c f5       	brge	.+82     	; 0x2fcc <UltraSonic_f64Read+0x17e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f7a:	6c 85       	ldd	r22, Y+12	; 0x0c
    2f7c:	7d 85       	ldd	r23, Y+13	; 0x0d
    2f7e:	8e 85       	ldd	r24, Y+14	; 0x0e
    2f80:	9f 85       	ldd	r25, Y+15	; 0x0f
    2f82:	20 e0       	ldi	r18, 0x00	; 0
    2f84:	30 e0       	ldi	r19, 0x00	; 0
    2f86:	40 e2       	ldi	r20, 0x20	; 32
    2f88:	51 e4       	ldi	r21, 0x41	; 65
    2f8a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f8e:	dc 01       	movw	r26, r24
    2f90:	cb 01       	movw	r24, r22
    2f92:	bc 01       	movw	r22, r24
    2f94:	cd 01       	movw	r24, r26
    2f96:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f9a:	dc 01       	movw	r26, r24
    2f9c:	cb 01       	movw	r24, r22
    2f9e:	9f 83       	std	Y+7, r25	; 0x07
    2fa0:	8e 83       	std	Y+6, r24	; 0x06
    2fa2:	0f c0       	rjmp	.+30     	; 0x2fc2 <UltraSonic_f64Read+0x174>
    2fa4:	88 ec       	ldi	r24, 0xC8	; 200
    2fa6:	90 e0       	ldi	r25, 0x00	; 0
    2fa8:	9d 83       	std	Y+5, r25	; 0x05
    2faa:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2fac:	8c 81       	ldd	r24, Y+4	; 0x04
    2fae:	9d 81       	ldd	r25, Y+5	; 0x05
    2fb0:	01 97       	sbiw	r24, 0x01	; 1
    2fb2:	f1 f7       	brne	.-4      	; 0x2fb0 <UltraSonic_f64Read+0x162>
    2fb4:	9d 83       	std	Y+5, r25	; 0x05
    2fb6:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2fb8:	8e 81       	ldd	r24, Y+6	; 0x06
    2fba:	9f 81       	ldd	r25, Y+7	; 0x07
    2fbc:	01 97       	sbiw	r24, 0x01	; 1
    2fbe:	9f 83       	std	Y+7, r25	; 0x07
    2fc0:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2fc2:	8e 81       	ldd	r24, Y+6	; 0x06
    2fc4:	9f 81       	ldd	r25, Y+7	; 0x07
    2fc6:	00 97       	sbiw	r24, 0x00	; 0
    2fc8:	69 f7       	brne	.-38     	; 0x2fa4 <UltraSonic_f64Read+0x156>
    2fca:	24 c0       	rjmp	.+72     	; 0x3014 <UltraSonic_f64Read+0x1c6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2fcc:	68 85       	ldd	r22, Y+8	; 0x08
    2fce:	79 85       	ldd	r23, Y+9	; 0x09
    2fd0:	8a 85       	ldd	r24, Y+10	; 0x0a
    2fd2:	9b 85       	ldd	r25, Y+11	; 0x0b
    2fd4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fd8:	dc 01       	movw	r26, r24
    2fda:	cb 01       	movw	r24, r22
    2fdc:	9f 83       	std	Y+7, r25	; 0x07
    2fde:	8e 83       	std	Y+6, r24	; 0x06
    2fe0:	8e 81       	ldd	r24, Y+6	; 0x06
    2fe2:	9f 81       	ldd	r25, Y+7	; 0x07
    2fe4:	9b 83       	std	Y+3, r25	; 0x03
    2fe6:	8a 83       	std	Y+2, r24	; 0x02
    2fe8:	8a 81       	ldd	r24, Y+2	; 0x02
    2fea:	9b 81       	ldd	r25, Y+3	; 0x03
    2fec:	01 97       	sbiw	r24, 0x01	; 1
    2fee:	f1 f7       	brne	.-4      	; 0x2fec <UltraSonic_f64Read+0x19e>
    2ff0:	9b 83       	std	Y+3, r25	; 0x03
    2ff2:	8a 83       	std	Y+2, r24	; 0x02
    2ff4:	0f c0       	rjmp	.+30     	; 0x3014 <UltraSonic_f64Read+0x1c6>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2ff6:	69 89       	ldd	r22, Y+17	; 0x11
    2ff8:	7a 89       	ldd	r23, Y+18	; 0x12
    2ffa:	8b 89       	ldd	r24, Y+19	; 0x13
    2ffc:	9c 89       	ldd	r25, Y+20	; 0x14
    2ffe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3002:	dc 01       	movw	r26, r24
    3004:	cb 01       	movw	r24, r22
    3006:	88 8b       	std	Y+16, r24	; 0x10
    3008:	88 89       	ldd	r24, Y+16	; 0x10
    300a:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    300c:	89 81       	ldd	r24, Y+1	; 0x01
    300e:	8a 95       	dec	r24
    3010:	f1 f7       	brne	.-4      	; 0x300e <UltraSonic_f64Read+0x1c0>
    3012:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(10);
	DIO_VidSetPinValue(UltraSonic_Port,TRIGGER_Pin,low);
    3014:	85 e0       	ldi	r24, 0x05	; 5
    3016:	67 e0       	ldi	r22, 0x07	; 7
    3018:	40 e0       	ldi	r20, 0x00	; 0
    301a:	0e 94 35 13 	call	0x266a	; 0x266a <DIO_VidSetPinValue>

	/* Capture on rising edge */
	Timer1_voidIcuCaptureOn(Enable_rising_edge_trigger);
    301e:	81 e0       	ldi	r24, 0x01	; 1
    3020:	0e 94 66 0d 	call	0x1acc	; 0x1acc <Timer1_voidIcuCaptureOn>

	/* clear the timer over flow counter */
	Global_u16TimerOverFlowCounter = 0;
    3024:	10 92 db 01 	sts	0x01DB, r1
    3028:	10 92 da 01 	sts	0x01DA, r1

	/* Clear timer 1 counter register */
	Timer1_voidWriteTCTN1(0);
    302c:	80 e0       	ldi	r24, 0x00	; 0
    302e:	90 e0       	ldi	r25, 0x00	; 0
    3030:	0e 94 d7 0b 	call	0x17ae	; 0x17ae <Timer1_voidWriteTCTN1>

	/* Clear Input Capture Flag */
	Timer_voidClearFlag(Timer1_ICU_Flag);
    3034:	85 e0       	ldi	r24, 0x05	; 5
    3036:	0e 94 95 0e 	call	0x1d2a	; 0x1d2a <Timer_voidClearFlag>

	/* wait for the rising edge */
	WaitForFlagOfICU();
    303a:	0e 94 56 0d 	call	0x1aac	; 0x1aac <WaitForFlagOfICU>

	/* Capture on falling edge */
		Timer1_voidIcuCaptureOn(Enable_falling_edge_trigger);
    303e:	82 e0       	ldi	r24, 0x02	; 2
    3040:	0e 94 66 0d 	call	0x1acc	; 0x1acc <Timer1_voidIcuCaptureOn>
	/* Clear timer 1 counter register */
	Timer1_voidWriteTCTN1(0);
    3044:	80 e0       	ldi	r24, 0x00	; 0
    3046:	90 e0       	ldi	r25, 0x00	; 0
    3048:	0e 94 d7 0b 	call	0x17ae	; 0x17ae <Timer1_voidWriteTCTN1>

	/* Clear Input Capture Flag */
	Timer_voidClearFlag(Timer1_ICU_Flag);
    304c:	85 e0       	ldi	r24, 0x05	; 5
    304e:	0e 94 95 0e 	call	0x1d2a	; 0x1d2a <Timer_voidClearFlag>

	/* wait for the falling edge */
	WaitForFlagOfICU();
    3052:	0e 94 56 0d 	call	0x1aac	; 0x1aac <WaitForFlagOfICU>

	/* get the ICU value  */
	Local_u16ICU = GetCaptureUnit();
    3056:	0e 94 4b 0d 	call	0x1a96	; 0x1a96 <GetCaptureUnit>
    305a:	9a 8f       	std	Y+26, r25	; 0x1a
    305c:	89 8f       	std	Y+25, r24	; 0x19

	/* get the number of counts */
	Local_u64TimerCountValue = (f64)Local_u16ICU +(f64) (65535 * Global_u16TimerOverFlowCounter);
    305e:	89 8d       	ldd	r24, Y+25	; 0x19
    3060:	9a 8d       	ldd	r25, Y+26	; 0x1a
    3062:	cc 01       	movw	r24, r24
    3064:	a0 e0       	ldi	r26, 0x00	; 0
    3066:	b0 e0       	ldi	r27, 0x00	; 0
    3068:	bc 01       	movw	r22, r24
    306a:	cd 01       	movw	r24, r26
    306c:	0e 94 07 05 	call	0xa0e	; 0xa0e <__floatunsisf>
    3070:	7b 01       	movw	r14, r22
    3072:	8c 01       	movw	r16, r24
    3074:	80 91 da 01 	lds	r24, 0x01DA
    3078:	90 91 db 01 	lds	r25, 0x01DB
    307c:	cc 01       	movw	r24, r24
    307e:	a0 e0       	ldi	r26, 0x00	; 0
    3080:	b0 e0       	ldi	r27, 0x00	; 0
    3082:	2f ef       	ldi	r18, 0xFF	; 255
    3084:	3f ef       	ldi	r19, 0xFF	; 255
    3086:	40 e0       	ldi	r20, 0x00	; 0
    3088:	50 e0       	ldi	r21, 0x00	; 0
    308a:	bc 01       	movw	r22, r24
    308c:	cd 01       	movw	r24, r26
    308e:	0e 94 b8 1f 	call	0x3f70	; 0x3f70 <__mulsi3>
    3092:	dc 01       	movw	r26, r24
    3094:	cb 01       	movw	r24, r22
    3096:	bc 01       	movw	r22, r24
    3098:	cd 01       	movw	r24, r26
    309a:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    309e:	9b 01       	movw	r18, r22
    30a0:	ac 01       	movw	r20, r24
    30a2:	c8 01       	movw	r24, r16
    30a4:	b7 01       	movw	r22, r14
    30a6:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    30aa:	dc 01       	movw	r26, r24
    30ac:	cb 01       	movw	r24, r22
    30ae:	8f 8f       	std	Y+31, r24	; 0x1f
    30b0:	98 a3       	std	Y+32, r25	; 0x20
    30b2:	a9 a3       	std	Y+33, r26	; 0x21
    30b4:	ba a3       	std	Y+34, r27	; 0x22
	/* 8MHz Timer freq, sound speed =343 m/s */
	Local_f64Distance = Local_u64TimerCountValue * (f64) 0.00214375;
    30b6:	6f 8d       	ldd	r22, Y+31	; 0x1f
    30b8:	78 a1       	ldd	r23, Y+32	; 0x20
    30ba:	89 a1       	ldd	r24, Y+33	; 0x21
    30bc:	9a a1       	ldd	r25, Y+34	; 0x22
    30be:	28 e2       	ldi	r18, 0x28	; 40
    30c0:	3e e7       	ldi	r19, 0x7E	; 126
    30c2:	4c e0       	ldi	r20, 0x0C	; 12
    30c4:	5b e3       	ldi	r21, 0x3B	; 59
    30c6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30ca:	dc 01       	movw	r26, r24
    30cc:	cb 01       	movw	r24, r22
    30ce:	8b 8f       	std	Y+27, r24	; 0x1b
    30d0:	9c 8f       	std	Y+28, r25	; 0x1c
    30d2:	ad 8f       	std	Y+29, r26	; 0x1d
    30d4:	be 8f       	std	Y+30, r27	; 0x1e

	/* clear the ICU flAG */
	Timer_voidClearFlag(Timer1_ICU_Flag);
    30d6:	85 e0       	ldi	r24, 0x05	; 5
    30d8:	0e 94 95 0e 	call	0x1d2a	; 0x1d2a <Timer_voidClearFlag>

	/* return the distance */
	return Local_f64Distance;
    30dc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    30de:	9c 8d       	ldd	r25, Y+28	; 0x1c
    30e0:	ad 8d       	ldd	r26, Y+29	; 0x1d
    30e2:	be 8d       	ldd	r27, Y+30	; 0x1e
}
    30e4:	bc 01       	movw	r22, r24
    30e6:	cd 01       	movw	r24, r26
    30e8:	a2 96       	adiw	r28, 0x22	; 34
    30ea:	0f b6       	in	r0, 0x3f	; 63
    30ec:	f8 94       	cli
    30ee:	de bf       	out	0x3e, r29	; 62
    30f0:	0f be       	out	0x3f, r0	; 63
    30f2:	cd bf       	out	0x3d, r28	; 61
    30f4:	cf 91       	pop	r28
    30f6:	df 91       	pop	r29
    30f8:	1f 91       	pop	r17
    30fa:	0f 91       	pop	r16
    30fc:	ff 90       	pop	r15
    30fe:	ef 90       	pop	r14
    3100:	08 95       	ret

00003102 <KPD_u8GetPresssedKey>:
#include "../../MCAL/DIO/DIO_interface.h"
#include "KPD_config.h"
#include "KPD_interface.h"

u8 KPD_u8GetPresssedKey(void)
{
    3102:	df 93       	push	r29
    3104:	cf 93       	push	r28
    3106:	cd b7       	in	r28, 0x3d	; 61
    3108:	de b7       	in	r29, 0x3e	; 62
    310a:	a2 97       	sbiw	r28, 0x22	; 34
    310c:	0f b6       	in	r0, 0x3f	; 63
    310e:	f8 94       	cli
    3110:	de bf       	out	0x3e, r29	; 62
    3112:	0f be       	out	0x3f, r0	; 63
    3114:	cd bf       	out	0x3d, r28	; 61
	u8 Local_u8KeyPressed = NOT_PRESSED;
    3116:	85 e6       	ldi	r24, 0x65	; 101
    3118:	8b 83       	std	Y+3, r24	; 0x03
	u8 Local_u8KPDARR [4][4] = KPD_U8ARR;
    311a:	ce 01       	movw	r24, r28
    311c:	04 96       	adiw	r24, 0x04	; 4
    311e:	9f 8f       	std	Y+31, r25	; 0x1f
    3120:	8e 8f       	std	Y+30, r24	; 0x1e
    3122:	ed ea       	ldi	r30, 0xAD	; 173
    3124:	f1 e0       	ldi	r31, 0x01	; 1
    3126:	f9 a3       	std	Y+33, r31	; 0x21
    3128:	e8 a3       	std	Y+32, r30	; 0x20
    312a:	f0 e1       	ldi	r31, 0x10	; 16
    312c:	fa a3       	std	Y+34, r31	; 0x22
    312e:	e8 a1       	ldd	r30, Y+32	; 0x20
    3130:	f9 a1       	ldd	r31, Y+33	; 0x21
    3132:	00 80       	ld	r0, Z
    3134:	88 a1       	ldd	r24, Y+32	; 0x20
    3136:	99 a1       	ldd	r25, Y+33	; 0x21
    3138:	01 96       	adiw	r24, 0x01	; 1
    313a:	99 a3       	std	Y+33, r25	; 0x21
    313c:	88 a3       	std	Y+32, r24	; 0x20
    313e:	ee 8d       	ldd	r30, Y+30	; 0x1e
    3140:	ff 8d       	ldd	r31, Y+31	; 0x1f
    3142:	00 82       	st	Z, r0
    3144:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3146:	9f 8d       	ldd	r25, Y+31	; 0x1f
    3148:	01 96       	adiw	r24, 0x01	; 1
    314a:	9f 8f       	std	Y+31, r25	; 0x1f
    314c:	8e 8f       	std	Y+30, r24	; 0x1e
    314e:	9a a1       	ldd	r25, Y+34	; 0x22
    3150:	91 50       	subi	r25, 0x01	; 1
    3152:	9a a3       	std	Y+34, r25	; 0x22
    3154:	ea a1       	ldd	r30, Y+34	; 0x22
    3156:	ee 23       	and	r30, r30
    3158:	51 f7       	brne	.-44     	; 0x312e <KPD_u8GetPresssedKey+0x2c>
	u8 Local_u8ColumnIdx = 0;
    315a:	1a 82       	std	Y+2, r1	; 0x02
	u8 Local_u8RowIdx = 0;
    315c:	19 82       	std	Y+1, r1	; 0x01
	u8 Local_u8State =1;
    315e:	81 e0       	ldi	r24, 0x01	; 1
    3160:	8c 8b       	std	Y+20, r24	; 0x14

	u8 Local_u8ColumnArr []={KPD_u8COLUMN0_PIN, KPD_u8COLUMN1_PIN, KPD_u8COLUMN2_PIN, KPD_u8COLUMN3_PIN};
    3162:	1d 8a       	std	Y+21, r1	; 0x15
    3164:	81 e0       	ldi	r24, 0x01	; 1
    3166:	8e 8b       	std	Y+22, r24	; 0x16
    3168:	82 e0       	ldi	r24, 0x02	; 2
    316a:	8f 8b       	std	Y+23, r24	; 0x17
    316c:	83 e0       	ldi	r24, 0x03	; 3
    316e:	88 8f       	std	Y+24, r24	; 0x18

	u8 Local_u8RowArr []= {KPD_u8ROW0_PIN, KPD_u8ROW1_PIN, KPD_u8ROW2_PIN, KPD_u8ROW3_PIN};
    3170:	84 e0       	ldi	r24, 0x04	; 4
    3172:	89 8f       	std	Y+25, r24	; 0x19
    3174:	85 e0       	ldi	r24, 0x05	; 5
    3176:	8a 8f       	std	Y+26, r24	; 0x1a
    3178:	86 e0       	ldi	r24, 0x06	; 6
    317a:	8b 8f       	std	Y+27, r24	; 0x1b
    317c:	87 e0       	ldi	r24, 0x07	; 7
    317e:	8c 8f       	std	Y+28, r24	; 0x1c

	/* LOOP THROUGH THE COLUMNS */
	for(Local_u8ColumnIdx = 0; Local_u8ColumnIdx < 4; Local_u8ColumnIdx++)
    3180:	1a 82       	std	Y+2, r1	; 0x02
    3182:	76 c0       	rjmp	.+236    	; 0x3270 <KPD_u8GetPresssedKey+0x16e>
	{
		/* Set one column with LOW */
		DIO_VidSetPinValue(KPD_u8PORT, Local_u8ColumnArr[Local_u8ColumnIdx], low);
    3184:	8a 81       	ldd	r24, Y+2	; 0x02
    3186:	28 2f       	mov	r18, r24
    3188:	30 e0       	ldi	r19, 0x00	; 0
    318a:	ce 01       	movw	r24, r28
    318c:	45 96       	adiw	r24, 0x15	; 21
    318e:	fc 01       	movw	r30, r24
    3190:	e2 0f       	add	r30, r18
    3192:	f3 1f       	adc	r31, r19
    3194:	90 81       	ld	r25, Z
    3196:	84 e0       	ldi	r24, 0x04	; 4
    3198:	69 2f       	mov	r22, r25
    319a:	40 e0       	ldi	r20, 0x00	; 0
    319c:	0e 94 35 13 	call	0x266a	; 0x266a <DIO_VidSetPinValue>

		/* Iterate through the column element by element */
		for(Local_u8RowIdx =0; Local_u8RowIdx < 4; Local_u8RowIdx++)
    31a0:	19 82       	std	Y+1, r1	; 0x01
    31a2:	51 c0       	rjmp	.+162    	; 0x3246 <KPD_u8GetPresssedKey+0x144>
		{
			/* Check each pin by identifying its column and row */
			DIO_VidGetPinValue(KPD_u8PORT, Local_u8RowArr[Local_u8RowIdx], &Local_u8State);
    31a4:	89 81       	ldd	r24, Y+1	; 0x01
    31a6:	28 2f       	mov	r18, r24
    31a8:	30 e0       	ldi	r19, 0x00	; 0
    31aa:	ce 01       	movw	r24, r28
    31ac:	49 96       	adiw	r24, 0x19	; 25
    31ae:	fc 01       	movw	r30, r24
    31b0:	e2 0f       	add	r30, r18
    31b2:	f3 1f       	adc	r31, r19
    31b4:	90 81       	ld	r25, Z
    31b6:	9e 01       	movw	r18, r28
    31b8:	2c 5e       	subi	r18, 0xEC	; 236
    31ba:	3f 4f       	sbci	r19, 0xFF	; 255
    31bc:	84 e0       	ldi	r24, 0x04	; 4
    31be:	69 2f       	mov	r22, r25
    31c0:	a9 01       	movw	r20, r18
    31c2:	0e 94 39 15 	call	0x2a72	; 0x2a72 <DIO_VidGetPinValue>

			if(Local_u8State == low)       /*KEY IS PRESSED */
    31c6:	8c 89       	ldd	r24, Y+20	; 0x14
    31c8:	88 23       	and	r24, r24
    31ca:	d1 f5       	brne	.+116    	; 0x3240 <KPD_u8GetPresssedKey+0x13e>
			{
				/* GET THE NUMBER THE COLUMN AND ROW REPRESENT */
				Local_u8KeyPressed = Local_u8KPDARR [Local_u8ColumnIdx] [Local_u8RowIdx];
    31cc:	8a 81       	ldd	r24, Y+2	; 0x02
    31ce:	28 2f       	mov	r18, r24
    31d0:	30 e0       	ldi	r19, 0x00	; 0
    31d2:	89 81       	ldd	r24, Y+1	; 0x01
    31d4:	48 2f       	mov	r20, r24
    31d6:	50 e0       	ldi	r21, 0x00	; 0
    31d8:	22 0f       	add	r18, r18
    31da:	33 1f       	adc	r19, r19
    31dc:	22 0f       	add	r18, r18
    31de:	33 1f       	adc	r19, r19
    31e0:	ce 01       	movw	r24, r28
    31e2:	01 96       	adiw	r24, 0x01	; 1
    31e4:	82 0f       	add	r24, r18
    31e6:	93 1f       	adc	r25, r19
    31e8:	84 0f       	add	r24, r20
    31ea:	95 1f       	adc	r25, r21
    31ec:	fc 01       	movw	r30, r24
    31ee:	33 96       	adiw	r30, 0x03	; 3
    31f0:	80 81       	ld	r24, Z
    31f2:	8b 83       	std	Y+3, r24	; 0x03
    31f4:	11 c0       	rjmp	.+34     	; 0x3218 <KPD_u8GetPresssedKey+0x116>
				/* wait until the key is released to return its value */
				while(Local_u8State == low)
				{
					DIO_VidGetPinValue(KPD_u8PORT, Local_u8RowArr[Local_u8RowIdx], &Local_u8State);
    31f6:	89 81       	ldd	r24, Y+1	; 0x01
    31f8:	28 2f       	mov	r18, r24
    31fa:	30 e0       	ldi	r19, 0x00	; 0
    31fc:	ce 01       	movw	r24, r28
    31fe:	49 96       	adiw	r24, 0x19	; 25
    3200:	fc 01       	movw	r30, r24
    3202:	e2 0f       	add	r30, r18
    3204:	f3 1f       	adc	r31, r19
    3206:	90 81       	ld	r25, Z
    3208:	9e 01       	movw	r18, r28
    320a:	2c 5e       	subi	r18, 0xEC	; 236
    320c:	3f 4f       	sbci	r19, 0xFF	; 255
    320e:	84 e0       	ldi	r24, 0x04	; 4
    3210:	69 2f       	mov	r22, r25
    3212:	a9 01       	movw	r20, r18
    3214:	0e 94 39 15 	call	0x2a72	; 0x2a72 <DIO_VidGetPinValue>
			if(Local_u8State == low)       /*KEY IS PRESSED */
			{
				/* GET THE NUMBER THE COLUMN AND ROW REPRESENT */
				Local_u8KeyPressed = Local_u8KPDARR [Local_u8ColumnIdx] [Local_u8RowIdx];
				/* wait until the key is released to return its value */
				while(Local_u8State == low)
    3218:	8c 89       	ldd	r24, Y+20	; 0x14
    321a:	88 23       	and	r24, r24
    321c:	61 f3       	breq	.-40     	; 0x31f6 <KPD_u8GetPresssedKey+0xf4>
				{
					DIO_VidGetPinValue(KPD_u8PORT, Local_u8RowArr[Local_u8RowIdx], &Local_u8State);
				}
				DIO_VidSetPinValue(KPD_u8PORT, Local_u8ColumnArr[Local_u8ColumnIdx], high);
    321e:	8a 81       	ldd	r24, Y+2	; 0x02
    3220:	28 2f       	mov	r18, r24
    3222:	30 e0       	ldi	r19, 0x00	; 0
    3224:	ce 01       	movw	r24, r28
    3226:	45 96       	adiw	r24, 0x15	; 21
    3228:	fc 01       	movw	r30, r24
    322a:	e2 0f       	add	r30, r18
    322c:	f3 1f       	adc	r31, r19
    322e:	90 81       	ld	r25, Z
    3230:	84 e0       	ldi	r24, 0x04	; 4
    3232:	69 2f       	mov	r22, r25
    3234:	41 e0       	ldi	r20, 0x01	; 1
    3236:	0e 94 35 13 	call	0x266a	; 0x266a <DIO_VidSetPinValue>
				return Local_u8KeyPressed;
    323a:	fb 81       	ldd	r31, Y+3	; 0x03
    323c:	fd 8f       	std	Y+29, r31	; 0x1d
    323e:	1e c0       	rjmp	.+60     	; 0x327c <KPD_u8GetPresssedKey+0x17a>
	{
		/* Set one column with LOW */
		DIO_VidSetPinValue(KPD_u8PORT, Local_u8ColumnArr[Local_u8ColumnIdx], low);

		/* Iterate through the column element by element */
		for(Local_u8RowIdx =0; Local_u8RowIdx < 4; Local_u8RowIdx++)
    3240:	89 81       	ldd	r24, Y+1	; 0x01
    3242:	8f 5f       	subi	r24, 0xFF	; 255
    3244:	89 83       	std	Y+1, r24	; 0x01
    3246:	89 81       	ldd	r24, Y+1	; 0x01
    3248:	84 30       	cpi	r24, 0x04	; 4
    324a:	08 f4       	brcc	.+2      	; 0x324e <KPD_u8GetPresssedKey+0x14c>
    324c:	ab cf       	rjmp	.-170    	; 0x31a4 <KPD_u8GetPresssedKey+0xa2>
				DIO_VidSetPinValue(KPD_u8PORT, Local_u8ColumnArr[Local_u8ColumnIdx], high);
				return Local_u8KeyPressed;
			}
		}

		DIO_VidSetPinValue(KPD_u8PORT, Local_u8ColumnArr[Local_u8ColumnIdx], high);
    324e:	8a 81       	ldd	r24, Y+2	; 0x02
    3250:	28 2f       	mov	r18, r24
    3252:	30 e0       	ldi	r19, 0x00	; 0
    3254:	ce 01       	movw	r24, r28
    3256:	45 96       	adiw	r24, 0x15	; 21
    3258:	fc 01       	movw	r30, r24
    325a:	e2 0f       	add	r30, r18
    325c:	f3 1f       	adc	r31, r19
    325e:	90 81       	ld	r25, Z
    3260:	84 e0       	ldi	r24, 0x04	; 4
    3262:	69 2f       	mov	r22, r25
    3264:	41 e0       	ldi	r20, 0x01	; 1
    3266:	0e 94 35 13 	call	0x266a	; 0x266a <DIO_VidSetPinValue>
	u8 Local_u8ColumnArr []={KPD_u8COLUMN0_PIN, KPD_u8COLUMN1_PIN, KPD_u8COLUMN2_PIN, KPD_u8COLUMN3_PIN};

	u8 Local_u8RowArr []= {KPD_u8ROW0_PIN, KPD_u8ROW1_PIN, KPD_u8ROW2_PIN, KPD_u8ROW3_PIN};

	/* LOOP THROUGH THE COLUMNS */
	for(Local_u8ColumnIdx = 0; Local_u8ColumnIdx < 4; Local_u8ColumnIdx++)
    326a:	8a 81       	ldd	r24, Y+2	; 0x02
    326c:	8f 5f       	subi	r24, 0xFF	; 255
    326e:	8a 83       	std	Y+2, r24	; 0x02
    3270:	8a 81       	ldd	r24, Y+2	; 0x02
    3272:	84 30       	cpi	r24, 0x04	; 4
    3274:	08 f4       	brcc	.+2      	; 0x3278 <KPD_u8GetPresssedKey+0x176>
    3276:	86 cf       	rjmp	.-244    	; 0x3184 <KPD_u8GetPresssedKey+0x82>
			}
		}

		DIO_VidSetPinValue(KPD_u8PORT, Local_u8ColumnArr[Local_u8ColumnIdx], high);
	}
	return Local_u8KeyPressed;
    3278:	8b 81       	ldd	r24, Y+3	; 0x03
    327a:	8d 8f       	std	Y+29, r24	; 0x1d
    327c:	8d 8d       	ldd	r24, Y+29	; 0x1d
}
    327e:	a2 96       	adiw	r28, 0x22	; 34
    3280:	0f b6       	in	r0, 0x3f	; 63
    3282:	f8 94       	cli
    3284:	de bf       	out	0x3e, r29	; 62
    3286:	0f be       	out	0x3f, r0	; 63
    3288:	cd bf       	out	0x3d, r28	; 61
    328a:	cf 91       	pop	r28
    328c:	df 91       	pop	r29
    328e:	08 95       	ret

00003290 <CLCD_VidSendCommand>:
#include "../../MCAL/DIO/DIO_interface.h"
#include "CLCD_config.h"
#include <util/delay.h>

void CLCD_VidSendCommand(u8 Copy_u8Command)
{
    3290:	df 93       	push	r29
    3292:	cf 93       	push	r28
    3294:	cd b7       	in	r28, 0x3d	; 61
    3296:	de b7       	in	r29, 0x3e	; 62
    3298:	2f 97       	sbiw	r28, 0x0f	; 15
    329a:	0f b6       	in	r0, 0x3f	; 63
    329c:	f8 94       	cli
    329e:	de bf       	out	0x3e, r29	; 62
    32a0:	0f be       	out	0x3f, r0	; 63
    32a2:	cd bf       	out	0x3d, r28	; 61
    32a4:	8f 87       	std	Y+15, r24	; 0x0f
	/* Set RS pin as Low */
	DIO_VidSetPinValue(CLCD_CCTRL_PORT,CLCD_RS_PIN,low);
    32a6:	85 e0       	ldi	r24, 0x05	; 5
    32a8:	63 e0       	ldi	r22, 0x03	; 3
    32aa:	40 e0       	ldi	r20, 0x00	; 0
    32ac:	0e 94 35 13 	call	0x266a	; 0x266a <DIO_VidSetPinValue>

	/* Set RW pin as Low to write*/
	DIO_VidGetPinValue(CLCD_CCTRL_PORT,CLCD_RW_PIN,low);
    32b0:	85 e0       	ldi	r24, 0x05	; 5
    32b2:	64 e0       	ldi	r22, 0x04	; 4
    32b4:	40 e0       	ldi	r20, 0x00	; 0
    32b6:	50 e0       	ldi	r21, 0x00	; 0
    32b8:	0e 94 39 15 	call	0x2a72	; 0x2a72 <DIO_VidGetPinValue>

	/* Send command to pins D0 to D7*/
	DIO_VidSetPortValue(CLCD_DATA_PORT,Copy_u8Command);
    32bc:	82 e0       	ldi	r24, 0x02	; 2
    32be:	6f 85       	ldd	r22, Y+15	; 0x0f
    32c0:	0e 94 bd 15 	call	0x2b7a	; 0x2b7a <DIO_VidSetPortValue>

	/* Set enable pin */
	DIO_VidSetPinValue(CLCD_CCTRL_PORT,CLCD_E_PIN,high);
    32c4:	85 e0       	ldi	r24, 0x05	; 5
    32c6:	65 e0       	ldi	r22, 0x05	; 5
    32c8:	41 e0       	ldi	r20, 0x01	; 1
    32ca:	0e 94 35 13 	call	0x266a	; 0x266a <DIO_VidSetPinValue>
    32ce:	80 e0       	ldi	r24, 0x00	; 0
    32d0:	90 e0       	ldi	r25, 0x00	; 0
    32d2:	a0 e4       	ldi	r26, 0x40	; 64
    32d4:	b0 e4       	ldi	r27, 0x40	; 64
    32d6:	8b 87       	std	Y+11, r24	; 0x0b
    32d8:	9c 87       	std	Y+12, r25	; 0x0c
    32da:	ad 87       	std	Y+13, r26	; 0x0d
    32dc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    32de:	6b 85       	ldd	r22, Y+11	; 0x0b
    32e0:	7c 85       	ldd	r23, Y+12	; 0x0c
    32e2:	8d 85       	ldd	r24, Y+13	; 0x0d
    32e4:	9e 85       	ldd	r25, Y+14	; 0x0e
    32e6:	20 e0       	ldi	r18, 0x00	; 0
    32e8:	30 e0       	ldi	r19, 0x00	; 0
    32ea:	4a ef       	ldi	r20, 0xFA	; 250
    32ec:	54 e4       	ldi	r21, 0x44	; 68
    32ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32f2:	dc 01       	movw	r26, r24
    32f4:	cb 01       	movw	r24, r22
    32f6:	8f 83       	std	Y+7, r24	; 0x07
    32f8:	98 87       	std	Y+8, r25	; 0x08
    32fa:	a9 87       	std	Y+9, r26	; 0x09
    32fc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    32fe:	6f 81       	ldd	r22, Y+7	; 0x07
    3300:	78 85       	ldd	r23, Y+8	; 0x08
    3302:	89 85       	ldd	r24, Y+9	; 0x09
    3304:	9a 85       	ldd	r25, Y+10	; 0x0a
    3306:	20 e0       	ldi	r18, 0x00	; 0
    3308:	30 e0       	ldi	r19, 0x00	; 0
    330a:	40 e8       	ldi	r20, 0x80	; 128
    330c:	5f e3       	ldi	r21, 0x3F	; 63
    330e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3312:	88 23       	and	r24, r24
    3314:	2c f4       	brge	.+10     	; 0x3320 <CLCD_VidSendCommand+0x90>
		__ticks = 1;
    3316:	81 e0       	ldi	r24, 0x01	; 1
    3318:	90 e0       	ldi	r25, 0x00	; 0
    331a:	9e 83       	std	Y+6, r25	; 0x06
    331c:	8d 83       	std	Y+5, r24	; 0x05
    331e:	3f c0       	rjmp	.+126    	; 0x339e <CLCD_VidSendCommand+0x10e>
	else if (__tmp > 65535)
    3320:	6f 81       	ldd	r22, Y+7	; 0x07
    3322:	78 85       	ldd	r23, Y+8	; 0x08
    3324:	89 85       	ldd	r24, Y+9	; 0x09
    3326:	9a 85       	ldd	r25, Y+10	; 0x0a
    3328:	20 e0       	ldi	r18, 0x00	; 0
    332a:	3f ef       	ldi	r19, 0xFF	; 255
    332c:	4f e7       	ldi	r20, 0x7F	; 127
    332e:	57 e4       	ldi	r21, 0x47	; 71
    3330:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3334:	18 16       	cp	r1, r24
    3336:	4c f5       	brge	.+82     	; 0x338a <CLCD_VidSendCommand+0xfa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3338:	6b 85       	ldd	r22, Y+11	; 0x0b
    333a:	7c 85       	ldd	r23, Y+12	; 0x0c
    333c:	8d 85       	ldd	r24, Y+13	; 0x0d
    333e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3340:	20 e0       	ldi	r18, 0x00	; 0
    3342:	30 e0       	ldi	r19, 0x00	; 0
    3344:	40 e2       	ldi	r20, 0x20	; 32
    3346:	51 e4       	ldi	r21, 0x41	; 65
    3348:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    334c:	dc 01       	movw	r26, r24
    334e:	cb 01       	movw	r24, r22
    3350:	bc 01       	movw	r22, r24
    3352:	cd 01       	movw	r24, r26
    3354:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3358:	dc 01       	movw	r26, r24
    335a:	cb 01       	movw	r24, r22
    335c:	9e 83       	std	Y+6, r25	; 0x06
    335e:	8d 83       	std	Y+5, r24	; 0x05
    3360:	0f c0       	rjmp	.+30     	; 0x3380 <CLCD_VidSendCommand+0xf0>
    3362:	88 ec       	ldi	r24, 0xC8	; 200
    3364:	90 e0       	ldi	r25, 0x00	; 0
    3366:	9c 83       	std	Y+4, r25	; 0x04
    3368:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    336a:	8b 81       	ldd	r24, Y+3	; 0x03
    336c:	9c 81       	ldd	r25, Y+4	; 0x04
    336e:	01 97       	sbiw	r24, 0x01	; 1
    3370:	f1 f7       	brne	.-4      	; 0x336e <CLCD_VidSendCommand+0xde>
    3372:	9c 83       	std	Y+4, r25	; 0x04
    3374:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3376:	8d 81       	ldd	r24, Y+5	; 0x05
    3378:	9e 81       	ldd	r25, Y+6	; 0x06
    337a:	01 97       	sbiw	r24, 0x01	; 1
    337c:	9e 83       	std	Y+6, r25	; 0x06
    337e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3380:	8d 81       	ldd	r24, Y+5	; 0x05
    3382:	9e 81       	ldd	r25, Y+6	; 0x06
    3384:	00 97       	sbiw	r24, 0x00	; 0
    3386:	69 f7       	brne	.-38     	; 0x3362 <CLCD_VidSendCommand+0xd2>
    3388:	14 c0       	rjmp	.+40     	; 0x33b2 <CLCD_VidSendCommand+0x122>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    338a:	6f 81       	ldd	r22, Y+7	; 0x07
    338c:	78 85       	ldd	r23, Y+8	; 0x08
    338e:	89 85       	ldd	r24, Y+9	; 0x09
    3390:	9a 85       	ldd	r25, Y+10	; 0x0a
    3392:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3396:	dc 01       	movw	r26, r24
    3398:	cb 01       	movw	r24, r22
    339a:	9e 83       	std	Y+6, r25	; 0x06
    339c:	8d 83       	std	Y+5, r24	; 0x05
    339e:	8d 81       	ldd	r24, Y+5	; 0x05
    33a0:	9e 81       	ldd	r25, Y+6	; 0x06
    33a2:	9a 83       	std	Y+2, r25	; 0x02
    33a4:	89 83       	std	Y+1, r24	; 0x01
    33a6:	89 81       	ldd	r24, Y+1	; 0x01
    33a8:	9a 81       	ldd	r25, Y+2	; 0x02
    33aa:	01 97       	sbiw	r24, 0x01	; 1
    33ac:	f1 f7       	brne	.-4      	; 0x33aa <CLCD_VidSendCommand+0x11a>
    33ae:	9a 83       	std	Y+2, r25	; 0x02
    33b0:	89 83       	std	Y+1, r24	; 0x01

	/* delay */
	_delay_ms(3);

	/* Clear enable pin */
	DIO_VidSetPinValue(CLCD_CCTRL_PORT,CLCD_E_PIN,low);
    33b2:	85 e0       	ldi	r24, 0x05	; 5
    33b4:	65 e0       	ldi	r22, 0x05	; 5
    33b6:	40 e0       	ldi	r20, 0x00	; 0
    33b8:	0e 94 35 13 	call	0x266a	; 0x266a <DIO_VidSetPinValue>
}
    33bc:	2f 96       	adiw	r28, 0x0f	; 15
    33be:	0f b6       	in	r0, 0x3f	; 63
    33c0:	f8 94       	cli
    33c2:	de bf       	out	0x3e, r29	; 62
    33c4:	0f be       	out	0x3f, r0	; 63
    33c6:	cd bf       	out	0x3d, r28	; 61
    33c8:	cf 91       	pop	r28
    33ca:	df 91       	pop	r29
    33cc:	08 95       	ret

000033ce <CLCD_VidSendData>:
void CLCD_VidSendData(u8 Copy_u8Command)
{
    33ce:	df 93       	push	r29
    33d0:	cf 93       	push	r28
    33d2:	cd b7       	in	r28, 0x3d	; 61
    33d4:	de b7       	in	r29, 0x3e	; 62
    33d6:	2f 97       	sbiw	r28, 0x0f	; 15
    33d8:	0f b6       	in	r0, 0x3f	; 63
    33da:	f8 94       	cli
    33dc:	de bf       	out	0x3e, r29	; 62
    33de:	0f be       	out	0x3f, r0	; 63
    33e0:	cd bf       	out	0x3d, r28	; 61
    33e2:	8f 87       	std	Y+15, r24	; 0x0f
	/* Set RS pin as high */
	DIO_VidSetPinValue(CLCD_CCTRL_PORT,CLCD_RS_PIN,high);
    33e4:	85 e0       	ldi	r24, 0x05	; 5
    33e6:	63 e0       	ldi	r22, 0x03	; 3
    33e8:	41 e0       	ldi	r20, 0x01	; 1
    33ea:	0e 94 35 13 	call	0x266a	; 0x266a <DIO_VidSetPinValue>

	/* Set RW pin as Low to write*/
	DIO_VidGetPinValue(CLCD_CCTRL_PORT,CLCD_RW_PIN,low);
    33ee:	85 e0       	ldi	r24, 0x05	; 5
    33f0:	64 e0       	ldi	r22, 0x04	; 4
    33f2:	40 e0       	ldi	r20, 0x00	; 0
    33f4:	50 e0       	ldi	r21, 0x00	; 0
    33f6:	0e 94 39 15 	call	0x2a72	; 0x2a72 <DIO_VidGetPinValue>

	/* Send command to pins D0 to D7*/
	DIO_VidSetPortValue(CLCD_DATA_PORT,Copy_u8Command);
    33fa:	82 e0       	ldi	r24, 0x02	; 2
    33fc:	6f 85       	ldd	r22, Y+15	; 0x0f
    33fe:	0e 94 bd 15 	call	0x2b7a	; 0x2b7a <DIO_VidSetPortValue>

	/* Set enable pin */
	DIO_VidSetPinValue(CLCD_CCTRL_PORT,CLCD_E_PIN,high);
    3402:	85 e0       	ldi	r24, 0x05	; 5
    3404:	65 e0       	ldi	r22, 0x05	; 5
    3406:	41 e0       	ldi	r20, 0x01	; 1
    3408:	0e 94 35 13 	call	0x266a	; 0x266a <DIO_VidSetPinValue>
    340c:	80 e0       	ldi	r24, 0x00	; 0
    340e:	90 e0       	ldi	r25, 0x00	; 0
    3410:	a0 e4       	ldi	r26, 0x40	; 64
    3412:	b0 e4       	ldi	r27, 0x40	; 64
    3414:	8b 87       	std	Y+11, r24	; 0x0b
    3416:	9c 87       	std	Y+12, r25	; 0x0c
    3418:	ad 87       	std	Y+13, r26	; 0x0d
    341a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    341c:	6b 85       	ldd	r22, Y+11	; 0x0b
    341e:	7c 85       	ldd	r23, Y+12	; 0x0c
    3420:	8d 85       	ldd	r24, Y+13	; 0x0d
    3422:	9e 85       	ldd	r25, Y+14	; 0x0e
    3424:	20 e0       	ldi	r18, 0x00	; 0
    3426:	30 e0       	ldi	r19, 0x00	; 0
    3428:	4a ef       	ldi	r20, 0xFA	; 250
    342a:	54 e4       	ldi	r21, 0x44	; 68
    342c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3430:	dc 01       	movw	r26, r24
    3432:	cb 01       	movw	r24, r22
    3434:	8f 83       	std	Y+7, r24	; 0x07
    3436:	98 87       	std	Y+8, r25	; 0x08
    3438:	a9 87       	std	Y+9, r26	; 0x09
    343a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    343c:	6f 81       	ldd	r22, Y+7	; 0x07
    343e:	78 85       	ldd	r23, Y+8	; 0x08
    3440:	89 85       	ldd	r24, Y+9	; 0x09
    3442:	9a 85       	ldd	r25, Y+10	; 0x0a
    3444:	20 e0       	ldi	r18, 0x00	; 0
    3446:	30 e0       	ldi	r19, 0x00	; 0
    3448:	40 e8       	ldi	r20, 0x80	; 128
    344a:	5f e3       	ldi	r21, 0x3F	; 63
    344c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3450:	88 23       	and	r24, r24
    3452:	2c f4       	brge	.+10     	; 0x345e <CLCD_VidSendData+0x90>
		__ticks = 1;
    3454:	81 e0       	ldi	r24, 0x01	; 1
    3456:	90 e0       	ldi	r25, 0x00	; 0
    3458:	9e 83       	std	Y+6, r25	; 0x06
    345a:	8d 83       	std	Y+5, r24	; 0x05
    345c:	3f c0       	rjmp	.+126    	; 0x34dc <CLCD_VidSendData+0x10e>
	else if (__tmp > 65535)
    345e:	6f 81       	ldd	r22, Y+7	; 0x07
    3460:	78 85       	ldd	r23, Y+8	; 0x08
    3462:	89 85       	ldd	r24, Y+9	; 0x09
    3464:	9a 85       	ldd	r25, Y+10	; 0x0a
    3466:	20 e0       	ldi	r18, 0x00	; 0
    3468:	3f ef       	ldi	r19, 0xFF	; 255
    346a:	4f e7       	ldi	r20, 0x7F	; 127
    346c:	57 e4       	ldi	r21, 0x47	; 71
    346e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3472:	18 16       	cp	r1, r24
    3474:	4c f5       	brge	.+82     	; 0x34c8 <CLCD_VidSendData+0xfa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3476:	6b 85       	ldd	r22, Y+11	; 0x0b
    3478:	7c 85       	ldd	r23, Y+12	; 0x0c
    347a:	8d 85       	ldd	r24, Y+13	; 0x0d
    347c:	9e 85       	ldd	r25, Y+14	; 0x0e
    347e:	20 e0       	ldi	r18, 0x00	; 0
    3480:	30 e0       	ldi	r19, 0x00	; 0
    3482:	40 e2       	ldi	r20, 0x20	; 32
    3484:	51 e4       	ldi	r21, 0x41	; 65
    3486:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    348a:	dc 01       	movw	r26, r24
    348c:	cb 01       	movw	r24, r22
    348e:	bc 01       	movw	r22, r24
    3490:	cd 01       	movw	r24, r26
    3492:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3496:	dc 01       	movw	r26, r24
    3498:	cb 01       	movw	r24, r22
    349a:	9e 83       	std	Y+6, r25	; 0x06
    349c:	8d 83       	std	Y+5, r24	; 0x05
    349e:	0f c0       	rjmp	.+30     	; 0x34be <CLCD_VidSendData+0xf0>
    34a0:	88 ec       	ldi	r24, 0xC8	; 200
    34a2:	90 e0       	ldi	r25, 0x00	; 0
    34a4:	9c 83       	std	Y+4, r25	; 0x04
    34a6:	8b 83       	std	Y+3, r24	; 0x03
    34a8:	8b 81       	ldd	r24, Y+3	; 0x03
    34aa:	9c 81       	ldd	r25, Y+4	; 0x04
    34ac:	01 97       	sbiw	r24, 0x01	; 1
    34ae:	f1 f7       	brne	.-4      	; 0x34ac <CLCD_VidSendData+0xde>
    34b0:	9c 83       	std	Y+4, r25	; 0x04
    34b2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    34b4:	8d 81       	ldd	r24, Y+5	; 0x05
    34b6:	9e 81       	ldd	r25, Y+6	; 0x06
    34b8:	01 97       	sbiw	r24, 0x01	; 1
    34ba:	9e 83       	std	Y+6, r25	; 0x06
    34bc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    34be:	8d 81       	ldd	r24, Y+5	; 0x05
    34c0:	9e 81       	ldd	r25, Y+6	; 0x06
    34c2:	00 97       	sbiw	r24, 0x00	; 0
    34c4:	69 f7       	brne	.-38     	; 0x34a0 <CLCD_VidSendData+0xd2>
    34c6:	14 c0       	rjmp	.+40     	; 0x34f0 <CLCD_VidSendData+0x122>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    34c8:	6f 81       	ldd	r22, Y+7	; 0x07
    34ca:	78 85       	ldd	r23, Y+8	; 0x08
    34cc:	89 85       	ldd	r24, Y+9	; 0x09
    34ce:	9a 85       	ldd	r25, Y+10	; 0x0a
    34d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    34d4:	dc 01       	movw	r26, r24
    34d6:	cb 01       	movw	r24, r22
    34d8:	9e 83       	std	Y+6, r25	; 0x06
    34da:	8d 83       	std	Y+5, r24	; 0x05
    34dc:	8d 81       	ldd	r24, Y+5	; 0x05
    34de:	9e 81       	ldd	r25, Y+6	; 0x06
    34e0:	9a 83       	std	Y+2, r25	; 0x02
    34e2:	89 83       	std	Y+1, r24	; 0x01
    34e4:	89 81       	ldd	r24, Y+1	; 0x01
    34e6:	9a 81       	ldd	r25, Y+2	; 0x02
    34e8:	01 97       	sbiw	r24, 0x01	; 1
    34ea:	f1 f7       	brne	.-4      	; 0x34e8 <CLCD_VidSendData+0x11a>
    34ec:	9a 83       	std	Y+2, r25	; 0x02
    34ee:	89 83       	std	Y+1, r24	; 0x01

	/* delay */
	_delay_ms(3);

	/* Clear enable pin */
	DIO_VidSetPinValue(CLCD_CCTRL_PORT,CLCD_E_PIN,low);
    34f0:	85 e0       	ldi	r24, 0x05	; 5
    34f2:	65 e0       	ldi	r22, 0x05	; 5
    34f4:	40 e0       	ldi	r20, 0x00	; 0
    34f6:	0e 94 35 13 	call	0x266a	; 0x266a <DIO_VidSetPinValue>
}
    34fa:	2f 96       	adiw	r28, 0x0f	; 15
    34fc:	0f b6       	in	r0, 0x3f	; 63
    34fe:	f8 94       	cli
    3500:	de bf       	out	0x3e, r29	; 62
    3502:	0f be       	out	0x3f, r0	; 63
    3504:	cd bf       	out	0x3d, r28	; 61
    3506:	cf 91       	pop	r28
    3508:	df 91       	pop	r29
    350a:	08 95       	ret

0000350c <CLCD_VidInit>:
void CLCD_VidInit()
{
    350c:	df 93       	push	r29
    350e:	cf 93       	push	r28
    3510:	cd b7       	in	r28, 0x3d	; 61
    3512:	de b7       	in	r29, 0x3e	; 62
    3514:	2e 97       	sbiw	r28, 0x0e	; 14
    3516:	0f b6       	in	r0, 0x3f	; 63
    3518:	f8 94       	cli
    351a:	de bf       	out	0x3e, r29	; 62
    351c:	0f be       	out	0x3f, r0	; 63
    351e:	cd bf       	out	0x3d, r28	; 61
	DIO_VidSetPortDirection(CLCD_DATA_PORT,output);
    3520:	82 e0       	ldi	r24, 0x02	; 2
    3522:	61 e0       	ldi	r22, 0x01	; 1
    3524:	0e 94 ff 15 	call	0x2bfe	; 0x2bfe <DIO_VidSetPortDirection>
	DIO_VidSetPinDirection(CLCD_CCTRL_PORT,CLCD_RS_PIN,output);
    3528:	85 e0       	ldi	r24, 0x05	; 5
    352a:	63 e0       	ldi	r22, 0x03	; 3
    352c:	41 e0       	ldi	r20, 0x01	; 1
    352e:	0e 94 37 14 	call	0x286e	; 0x286e <DIO_VidSetPinDirection>
	DIO_VidSetPinDirection(CLCD_CCTRL_PORT,CLCD_RW_PIN,output);
    3532:	85 e0       	ldi	r24, 0x05	; 5
    3534:	64 e0       	ldi	r22, 0x04	; 4
    3536:	41 e0       	ldi	r20, 0x01	; 1
    3538:	0e 94 37 14 	call	0x286e	; 0x286e <DIO_VidSetPinDirection>
	DIO_VidSetPinDirection(CLCD_CCTRL_PORT,CLCD_E_PIN,output);
    353c:	85 e0       	ldi	r24, 0x05	; 5
    353e:	65 e0       	ldi	r22, 0x05	; 5
    3540:	41 e0       	ldi	r20, 0x01	; 1
    3542:	0e 94 37 14 	call	0x286e	; 0x286e <DIO_VidSetPinDirection>
    3546:	80 e0       	ldi	r24, 0x00	; 0
    3548:	90 e0       	ldi	r25, 0x00	; 0
    354a:	a0 e2       	ldi	r26, 0x20	; 32
    354c:	b2 e4       	ldi	r27, 0x42	; 66
    354e:	8b 87       	std	Y+11, r24	; 0x0b
    3550:	9c 87       	std	Y+12, r25	; 0x0c
    3552:	ad 87       	std	Y+13, r26	; 0x0d
    3554:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3556:	6b 85       	ldd	r22, Y+11	; 0x0b
    3558:	7c 85       	ldd	r23, Y+12	; 0x0c
    355a:	8d 85       	ldd	r24, Y+13	; 0x0d
    355c:	9e 85       	ldd	r25, Y+14	; 0x0e
    355e:	20 e0       	ldi	r18, 0x00	; 0
    3560:	30 e0       	ldi	r19, 0x00	; 0
    3562:	4a ef       	ldi	r20, 0xFA	; 250
    3564:	54 e4       	ldi	r21, 0x44	; 68
    3566:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    356a:	dc 01       	movw	r26, r24
    356c:	cb 01       	movw	r24, r22
    356e:	8f 83       	std	Y+7, r24	; 0x07
    3570:	98 87       	std	Y+8, r25	; 0x08
    3572:	a9 87       	std	Y+9, r26	; 0x09
    3574:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3576:	6f 81       	ldd	r22, Y+7	; 0x07
    3578:	78 85       	ldd	r23, Y+8	; 0x08
    357a:	89 85       	ldd	r24, Y+9	; 0x09
    357c:	9a 85       	ldd	r25, Y+10	; 0x0a
    357e:	20 e0       	ldi	r18, 0x00	; 0
    3580:	30 e0       	ldi	r19, 0x00	; 0
    3582:	40 e8       	ldi	r20, 0x80	; 128
    3584:	5f e3       	ldi	r21, 0x3F	; 63
    3586:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    358a:	88 23       	and	r24, r24
    358c:	2c f4       	brge	.+10     	; 0x3598 <CLCD_VidInit+0x8c>
		__ticks = 1;
    358e:	81 e0       	ldi	r24, 0x01	; 1
    3590:	90 e0       	ldi	r25, 0x00	; 0
    3592:	9e 83       	std	Y+6, r25	; 0x06
    3594:	8d 83       	std	Y+5, r24	; 0x05
    3596:	3f c0       	rjmp	.+126    	; 0x3616 <CLCD_VidInit+0x10a>
	else if (__tmp > 65535)
    3598:	6f 81       	ldd	r22, Y+7	; 0x07
    359a:	78 85       	ldd	r23, Y+8	; 0x08
    359c:	89 85       	ldd	r24, Y+9	; 0x09
    359e:	9a 85       	ldd	r25, Y+10	; 0x0a
    35a0:	20 e0       	ldi	r18, 0x00	; 0
    35a2:	3f ef       	ldi	r19, 0xFF	; 255
    35a4:	4f e7       	ldi	r20, 0x7F	; 127
    35a6:	57 e4       	ldi	r21, 0x47	; 71
    35a8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    35ac:	18 16       	cp	r1, r24
    35ae:	4c f5       	brge	.+82     	; 0x3602 <CLCD_VidInit+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    35b0:	6b 85       	ldd	r22, Y+11	; 0x0b
    35b2:	7c 85       	ldd	r23, Y+12	; 0x0c
    35b4:	8d 85       	ldd	r24, Y+13	; 0x0d
    35b6:	9e 85       	ldd	r25, Y+14	; 0x0e
    35b8:	20 e0       	ldi	r18, 0x00	; 0
    35ba:	30 e0       	ldi	r19, 0x00	; 0
    35bc:	40 e2       	ldi	r20, 0x20	; 32
    35be:	51 e4       	ldi	r21, 0x41	; 65
    35c0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    35c4:	dc 01       	movw	r26, r24
    35c6:	cb 01       	movw	r24, r22
    35c8:	bc 01       	movw	r22, r24
    35ca:	cd 01       	movw	r24, r26
    35cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35d0:	dc 01       	movw	r26, r24
    35d2:	cb 01       	movw	r24, r22
    35d4:	9e 83       	std	Y+6, r25	; 0x06
    35d6:	8d 83       	std	Y+5, r24	; 0x05
    35d8:	0f c0       	rjmp	.+30     	; 0x35f8 <CLCD_VidInit+0xec>
    35da:	88 ec       	ldi	r24, 0xC8	; 200
    35dc:	90 e0       	ldi	r25, 0x00	; 0
    35de:	9c 83       	std	Y+4, r25	; 0x04
    35e0:	8b 83       	std	Y+3, r24	; 0x03
    35e2:	8b 81       	ldd	r24, Y+3	; 0x03
    35e4:	9c 81       	ldd	r25, Y+4	; 0x04
    35e6:	01 97       	sbiw	r24, 0x01	; 1
    35e8:	f1 f7       	brne	.-4      	; 0x35e6 <CLCD_VidInit+0xda>
    35ea:	9c 83       	std	Y+4, r25	; 0x04
    35ec:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    35ee:	8d 81       	ldd	r24, Y+5	; 0x05
    35f0:	9e 81       	ldd	r25, Y+6	; 0x06
    35f2:	01 97       	sbiw	r24, 0x01	; 1
    35f4:	9e 83       	std	Y+6, r25	; 0x06
    35f6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    35f8:	8d 81       	ldd	r24, Y+5	; 0x05
    35fa:	9e 81       	ldd	r25, Y+6	; 0x06
    35fc:	00 97       	sbiw	r24, 0x00	; 0
    35fe:	69 f7       	brne	.-38     	; 0x35da <CLCD_VidInit+0xce>
    3600:	14 c0       	rjmp	.+40     	; 0x362a <CLCD_VidInit+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3602:	6f 81       	ldd	r22, Y+7	; 0x07
    3604:	78 85       	ldd	r23, Y+8	; 0x08
    3606:	89 85       	ldd	r24, Y+9	; 0x09
    3608:	9a 85       	ldd	r25, Y+10	; 0x0a
    360a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    360e:	dc 01       	movw	r26, r24
    3610:	cb 01       	movw	r24, r22
    3612:	9e 83       	std	Y+6, r25	; 0x06
    3614:	8d 83       	std	Y+5, r24	; 0x05
    3616:	8d 81       	ldd	r24, Y+5	; 0x05
    3618:	9e 81       	ldd	r25, Y+6	; 0x06
    361a:	9a 83       	std	Y+2, r25	; 0x02
    361c:	89 83       	std	Y+1, r24	; 0x01
    361e:	89 81       	ldd	r24, Y+1	; 0x01
    3620:	9a 81       	ldd	r25, Y+2	; 0x02
    3622:	01 97       	sbiw	r24, 0x01	; 1
    3624:	f1 f7       	brne	.-4      	; 0x3622 <CLCD_VidInit+0x116>
    3626:	9a 83       	std	Y+2, r25	; 0x02
    3628:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(40);
	/* Function Set command */
	CLCD_VidSendCommand(0b00111111);
    362a:	8f e3       	ldi	r24, 0x3F	; 63
    362c:	0e 94 48 19 	call	0x3290	; 0x3290 <CLCD_VidSendCommand>

	/* Display ON/OFF command */
	CLCD_VidSendCommand(0b00001100);
    3630:	8c e0       	ldi	r24, 0x0C	; 12
    3632:	0e 94 48 19 	call	0x3290	; 0x3290 <CLCD_VidSendCommand>

	/* Display clear */
	CLCD_VidSendCommand(1);
    3636:	81 e0       	ldi	r24, 0x01	; 1
    3638:	0e 94 48 19 	call	0x3290	; 0x3290 <CLCD_VidSendCommand>
}
    363c:	2e 96       	adiw	r28, 0x0e	; 14
    363e:	0f b6       	in	r0, 0x3f	; 63
    3640:	f8 94       	cli
    3642:	de bf       	out	0x3e, r29	; 62
    3644:	0f be       	out	0x3f, r0	; 63
    3646:	cd bf       	out	0x3d, r28	; 61
    3648:	cf 91       	pop	r28
    364a:	df 91       	pop	r29
    364c:	08 95       	ret

0000364e <CLCD_VidGoToXY>:
void CLCD_VidGoToXY(u8 Copy_u8XPos,u8 Copy_u8YPos)
{
    364e:	df 93       	push	r29
    3650:	cf 93       	push	r28
    3652:	00 d0       	rcall	.+0      	; 0x3654 <CLCD_VidGoToXY+0x6>
    3654:	0f 92       	push	r0
    3656:	cd b7       	in	r28, 0x3d	; 61
    3658:	de b7       	in	r29, 0x3e	; 62
    365a:	8a 83       	std	Y+2, r24	; 0x02
    365c:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8address=0;
    365e:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8XPos == 0) /* first line */
    3660:	8a 81       	ldd	r24, Y+2	; 0x02
    3662:	88 23       	and	r24, r24
    3664:	19 f4       	brne	.+6      	; 0x366c <CLCD_VidGoToXY+0x1e>
	{
		Local_u8address= Copy_u8YPos;
    3666:	8b 81       	ldd	r24, Y+3	; 0x03
    3668:	89 83       	std	Y+1, r24	; 0x01
    366a:	06 c0       	rjmp	.+12     	; 0x3678 <CLCD_VidGoToXY+0x2a>
	}
	else if(Copy_u8XPos == 1) /* second line */
    366c:	8a 81       	ldd	r24, Y+2	; 0x02
    366e:	81 30       	cpi	r24, 0x01	; 1
    3670:	19 f4       	brne	.+6      	; 0x3678 <CLCD_VidGoToXY+0x2a>
	{
		Local_u8address= 0x40 + Copy_u8YPos;
    3672:	8b 81       	ldd	r24, Y+3	; 0x03
    3674:	80 5c       	subi	r24, 0xC0	; 192
    3676:	89 83       	std	Y+1, r24	; 0x01
	}
	CLCD_VidSendCommand(Local_u8address + 128); /* 0b10000000 -->> 128 */
    3678:	89 81       	ldd	r24, Y+1	; 0x01
    367a:	80 58       	subi	r24, 0x80	; 128
    367c:	0e 94 48 19 	call	0x3290	; 0x3290 <CLCD_VidSendCommand>
}
    3680:	0f 90       	pop	r0
    3682:	0f 90       	pop	r0
    3684:	0f 90       	pop	r0
    3686:	cf 91       	pop	r28
    3688:	df 91       	pop	r29
    368a:	08 95       	ret

0000368c <CLCD_VidWriteSpecialCharacter>:

void CLCD_VidWriteSpecialCharacter( u8 * Copy_pu8Pattern, u8 Copy_u8PatternNumber, u8 Copy_u8XPos, u8 Copy_u8YPos)
{
    368c:	df 93       	push	r29
    368e:	cf 93       	push	r28
    3690:	cd b7       	in	r28, 0x3d	; 61
    3692:	de b7       	in	r29, 0x3e	; 62
    3694:	27 97       	sbiw	r28, 0x07	; 7
    3696:	0f b6       	in	r0, 0x3f	; 63
    3698:	f8 94       	cli
    369a:	de bf       	out	0x3e, r29	; 62
    369c:	0f be       	out	0x3f, r0	; 63
    369e:	cd bf       	out	0x3d, r28	; 61
    36a0:	9c 83       	std	Y+4, r25	; 0x04
    36a2:	8b 83       	std	Y+3, r24	; 0x03
    36a4:	6d 83       	std	Y+5, r22	; 0x05
    36a6:	4e 83       	std	Y+6, r20	; 0x06
    36a8:	2f 83       	std	Y+7, r18	; 0x07
	u8 Local_u8Address= 8 * Copy_u8PatternNumber;
    36aa:	8d 81       	ldd	r24, Y+5	; 0x05
    36ac:	88 2f       	mov	r24, r24
    36ae:	90 e0       	ldi	r25, 0x00	; 0
    36b0:	88 0f       	add	r24, r24
    36b2:	99 1f       	adc	r25, r25
    36b4:	88 0f       	add	r24, r24
    36b6:	99 1f       	adc	r25, r25
    36b8:	88 0f       	add	r24, r24
    36ba:	99 1f       	adc	r25, r25
    36bc:	8a 83       	std	Y+2, r24	; 0x02
	/* Writing in CGRAM */
	CLCD_VidSendCommand(64+Local_u8Address);
    36be:	8a 81       	ldd	r24, Y+2	; 0x02
    36c0:	80 5c       	subi	r24, 0xC0	; 192
    36c2:	0e 94 48 19 	call	0x3290	; 0x3290 <CLCD_VidSendCommand>
	/* Saving the rows bytes for writing the character  */
	for(u8 i=0; i<8; i++)
    36c6:	19 82       	std	Y+1, r1	; 0x01
    36c8:	0e c0       	rjmp	.+28     	; 0x36e6 <CLCD_VidWriteSpecialCharacter+0x5a>
	{
		CLCD_VidSendData(Copy_pu8Pattern[i]);
    36ca:	89 81       	ldd	r24, Y+1	; 0x01
    36cc:	28 2f       	mov	r18, r24
    36ce:	30 e0       	ldi	r19, 0x00	; 0
    36d0:	8b 81       	ldd	r24, Y+3	; 0x03
    36d2:	9c 81       	ldd	r25, Y+4	; 0x04
    36d4:	fc 01       	movw	r30, r24
    36d6:	e2 0f       	add	r30, r18
    36d8:	f3 1f       	adc	r31, r19
    36da:	80 81       	ld	r24, Z
    36dc:	0e 94 e7 19 	call	0x33ce	; 0x33ce <CLCD_VidSendData>
{
	u8 Local_u8Address= 8 * Copy_u8PatternNumber;
	/* Writing in CGRAM */
	CLCD_VidSendCommand(64+Local_u8Address);
	/* Saving the rows bytes for writing the character  */
	for(u8 i=0; i<8; i++)
    36e0:	89 81       	ldd	r24, Y+1	; 0x01
    36e2:	8f 5f       	subi	r24, 0xFF	; 255
    36e4:	89 83       	std	Y+1, r24	; 0x01
    36e6:	89 81       	ldd	r24, Y+1	; 0x01
    36e8:	88 30       	cpi	r24, 0x08	; 8
    36ea:	78 f3       	brcs	.-34     	; 0x36ca <CLCD_VidWriteSpecialCharacter+0x3e>
	{
		CLCD_VidSendData(Copy_pu8Pattern[i]);
	}
	/* Going to any position on the screen*/
	CLCD_VidGoToXY(Copy_u8XPos,Copy_u8YPos);
    36ec:	8e 81       	ldd	r24, Y+6	; 0x06
    36ee:	6f 81       	ldd	r22, Y+7	; 0x07
    36f0:	0e 94 27 1b 	call	0x364e	; 0x364e <CLCD_VidGoToXY>
	/* Printing the character */
	CLCD_VidSendData(Copy_u8PatternNumber);
    36f4:	8d 81       	ldd	r24, Y+5	; 0x05
    36f6:	0e 94 e7 19 	call	0x33ce	; 0x33ce <CLCD_VidSendData>
}
    36fa:	27 96       	adiw	r28, 0x07	; 7
    36fc:	0f b6       	in	r0, 0x3f	; 63
    36fe:	f8 94       	cli
    3700:	de bf       	out	0x3e, r29	; 62
    3702:	0f be       	out	0x3f, r0	; 63
    3704:	cd bf       	out	0x3d, r28	; 61
    3706:	cf 91       	pop	r28
    3708:	df 91       	pop	r29
    370a:	08 95       	ret

0000370c <CLCD_VidWriteString>:

void CLCD_VidWriteString(u8 * Copy_pu8Array) /* function to send a string */
{
    370c:	df 93       	push	r29
    370e:	cf 93       	push	r28
    3710:	00 d0       	rcall	.+0      	; 0x3712 <CLCD_VidWriteString+0x6>
    3712:	0f 92       	push	r0
    3714:	cd b7       	in	r28, 0x3d	; 61
    3716:	de b7       	in	r29, 0x3e	; 62
    3718:	9b 83       	std	Y+3, r25	; 0x03
    371a:	8a 83       	std	Y+2, r24	; 0x02
	u8 i=0;
    371c:	19 82       	std	Y+1, r1	; 0x01
    371e:	0e c0       	rjmp	.+28     	; 0x373c <CLCD_VidWriteString+0x30>
		while(Copy_pu8Array[i] != '\0') /* the defined string will have 10 characters maximum */
		{
			CLCD_VidSendData(Copy_pu8Array[i]); /* send character by character */
    3720:	89 81       	ldd	r24, Y+1	; 0x01
    3722:	28 2f       	mov	r18, r24
    3724:	30 e0       	ldi	r19, 0x00	; 0
    3726:	8a 81       	ldd	r24, Y+2	; 0x02
    3728:	9b 81       	ldd	r25, Y+3	; 0x03
    372a:	fc 01       	movw	r30, r24
    372c:	e2 0f       	add	r30, r18
    372e:	f3 1f       	adc	r31, r19
    3730:	80 81       	ld	r24, Z
    3732:	0e 94 e7 19 	call	0x33ce	; 0x33ce <CLCD_VidSendData>
			i++;
    3736:	89 81       	ldd	r24, Y+1	; 0x01
    3738:	8f 5f       	subi	r24, 0xFF	; 255
    373a:	89 83       	std	Y+1, r24	; 0x01
}

void CLCD_VidWriteString(u8 * Copy_pu8Array) /* function to send a string */
{
	u8 i=0;
		while(Copy_pu8Array[i] != '\0') /* the defined string will have 10 characters maximum */
    373c:	89 81       	ldd	r24, Y+1	; 0x01
    373e:	28 2f       	mov	r18, r24
    3740:	30 e0       	ldi	r19, 0x00	; 0
    3742:	8a 81       	ldd	r24, Y+2	; 0x02
    3744:	9b 81       	ldd	r25, Y+3	; 0x03
    3746:	fc 01       	movw	r30, r24
    3748:	e2 0f       	add	r30, r18
    374a:	f3 1f       	adc	r31, r19
    374c:	80 81       	ld	r24, Z
    374e:	88 23       	and	r24, r24
    3750:	39 f7       	brne	.-50     	; 0x3720 <CLCD_VidWriteString+0x14>
		{
			CLCD_VidSendData(Copy_pu8Array[i]); /* send character by character */
			i++;
		}
}
    3752:	0f 90       	pop	r0
    3754:	0f 90       	pop	r0
    3756:	0f 90       	pop	r0
    3758:	cf 91       	pop	r28
    375a:	df 91       	pop	r29
    375c:	08 95       	ret

0000375e <SPI_IntReceive>:
u8 * Global_u8SPIPointerToData = 0;
u8 Global_u8SmallDistanceFlag=0;

/*****************************************************************************************/
void SPI_IntReceive(void)
{
    375e:	df 93       	push	r29
    3760:	cf 93       	push	r28
    3762:	cd b7       	in	r28, 0x3d	; 61
    3764:	de b7       	in	r29, 0x3e	; 62
	Globla_u8SPIData = *Global_u8SPIPointerToData;
    3766:	e0 91 de 01 	lds	r30, 0x01DE
    376a:	f0 91 df 01 	lds	r31, 0x01DF
    376e:	80 81       	ld	r24, Z
    3770:	80 93 dd 01 	sts	0x01DD, r24

	if (Globla_u8SPIData == 70 && Global_u8SmallDistanceFlag==1 )
    3774:	80 91 dd 01 	lds	r24, 0x01DD
    3778:	86 34       	cpi	r24, 0x46	; 70
    377a:	41 f4       	brne	.+16     	; 0x378c <SPI_IntReceive+0x2e>
    377c:	80 91 e0 01 	lds	r24, 0x01E0
    3780:	81 30       	cpi	r24, 0x01	; 1
    3782:	21 f4       	brne	.+8      	; 0x378c <SPI_IntReceive+0x2e>
		{
		/* if 70 is received, then velocity is high
		 * If the velocity is high and the distance is close: open the airbag
		 *  send 65 to let the master know it needs to open the air bag */
			SPI_u8_TransmitReceive(65);
    3784:	81 e4       	ldi	r24, 0x41	; 65
    3786:	0e 94 86 11 	call	0x230c	; 0x230c <SPI_u8_TransmitReceive>
    378a:	03 c0       	rjmp	.+6      	; 0x3792 <SPI_IntReceive+0x34>
		}
	else
	{
		SPI_u8_TransmitReceive(1);
    378c:	81 e0       	ldi	r24, 0x01	; 1
    378e:	0e 94 86 11 	call	0x230c	; 0x230c <SPI_u8_TransmitReceive>
	}
}
    3792:	cf 91       	pop	r28
    3794:	df 91       	pop	r29
    3796:	08 95       	ret

00003798 <ExternalInterupt>:
/* *******************************************************************************************/

void ExternalInterupt()
{
    3798:	df 93       	push	r29
    379a:	cf 93       	push	r28
    379c:	00 d0       	rcall	.+0      	; 0x379e <ExternalInterupt+0x6>
    379e:	cd b7       	in	r28, 0x3d	; 61
    37a0:	de b7       	in	r29, 0x3e	; 62
	switch (key_u8Value)
    37a2:	80 91 dc 01 	lds	r24, 0x01DC
    37a6:	28 2f       	mov	r18, r24
    37a8:	30 e0       	ldi	r19, 0x00	; 0
    37aa:	3a 83       	std	Y+2, r19	; 0x02
    37ac:	29 83       	std	Y+1, r18	; 0x01
    37ae:	89 81       	ldd	r24, Y+1	; 0x01
    37b0:	9a 81       	ldd	r25, Y+2	; 0x02
    37b2:	82 33       	cpi	r24, 0x32	; 50
    37b4:	91 05       	cpc	r25, r1
    37b6:	c1 f0       	breq	.+48     	; 0x37e8 <ExternalInterupt+0x50>
    37b8:	29 81       	ldd	r18, Y+1	; 0x01
    37ba:	3a 81       	ldd	r19, Y+2	; 0x02
    37bc:	23 33       	cpi	r18, 0x33	; 51
    37be:	31 05       	cpc	r19, r1
    37c0:	09 f1       	breq	.+66     	; 0x3804 <ExternalInterupt+0x6c>
    37c2:	89 81       	ldd	r24, Y+1	; 0x01
    37c4:	9a 81       	ldd	r25, Y+2	; 0x02
    37c6:	81 33       	cpi	r24, 0x31	; 49
    37c8:	91 05       	cpc	r25, r1
    37ca:	49 f5       	brne	.+82     	; 0x381e <ExternalInterupt+0x86>
	{
		case '1':
		/* if key '1' is pressed : turn on the left lamps  */
			DIO_VidSetPinValue(Port_B,Pin_0,high);
    37cc:	83 e0       	ldi	r24, 0x03	; 3
    37ce:	60 e0       	ldi	r22, 0x00	; 0
    37d0:	41 e0       	ldi	r20, 0x01	; 1
    37d2:	0e 94 35 13 	call	0x266a	; 0x266a <DIO_VidSetPinValue>
			CLCD_VidGoToXY(1,10);
    37d6:	81 e0       	ldi	r24, 0x01	; 1
    37d8:	6a e0       	ldi	r22, 0x0A	; 10
    37da:	0e 94 27 1b 	call	0x364e	; 0x364e <CLCD_VidGoToXY>
		/* print left direction symbol on the screen */
			CLCD_VidWriteString(left_u8String);
    37de:	88 ea       	ldi	r24, 0xA8	; 168
    37e0:	91 e0       	ldi	r25, 0x01	; 1
    37e2:	0e 94 86 1b 	call	0x370c	; 0x370c <CLCD_VidWriteString>
    37e6:	1b c0       	rjmp	.+54     	; 0x381e <ExternalInterupt+0x86>
			break;
		case '2':
		/* if key '2' is pressed : turn on the right lamps  */
			DIO_VidSetPinValue(Port_B,Pin_1,high);
    37e8:	83 e0       	ldi	r24, 0x03	; 3
    37ea:	61 e0       	ldi	r22, 0x01	; 1
    37ec:	41 e0       	ldi	r20, 0x01	; 1
    37ee:	0e 94 35 13 	call	0x266a	; 0x266a <DIO_VidSetPinValue>
		/* print right direction symbol on the screen */
			CLCD_VidGoToXY(1,10);
    37f2:	81 e0       	ldi	r24, 0x01	; 1
    37f4:	6a e0       	ldi	r22, 0x0A	; 10
    37f6:	0e 94 27 1b 	call	0x364e	; 0x364e <CLCD_VidGoToXY>
			CLCD_VidWriteString(right_u8String);
    37fa:	83 ea       	ldi	r24, 0xA3	; 163
    37fc:	91 e0       	ldi	r25, 0x01	; 1
    37fe:	0e 94 86 1b 	call	0x370c	; 0x370c <CLCD_VidWriteString>
    3802:	0d c0       	rjmp	.+26     	; 0x381e <ExternalInterupt+0x86>
			break;
		case '3':
		/* if key '3' is pressed : turn off the lamps  */
			DIO_VidSetPinValue(Port_B,Pin_0,low);
    3804:	83 e0       	ldi	r24, 0x03	; 3
    3806:	60 e0       	ldi	r22, 0x00	; 0
    3808:	40 e0       	ldi	r20, 0x00	; 0
    380a:	0e 94 35 13 	call	0x266a	; 0x266a <DIO_VidSetPinValue>
			DIO_VidSetPinValue(Port_B,Pin_1,low);
    380e:	83 e0       	ldi	r24, 0x03	; 3
    3810:	61 e0       	ldi	r22, 0x01	; 1
    3812:	40 e0       	ldi	r20, 0x00	; 0
    3814:	0e 94 35 13 	call	0x266a	; 0x266a <DIO_VidSetPinValue>
		/* Clear LCD screen */
			CLCD_VidSendCommand(1);
    3818:	81 e0       	ldi	r24, 0x01	; 1
    381a:	0e 94 48 19 	call	0x3290	; 0x3290 <CLCD_VidSendCommand>
			break;
	}
}
    381e:	0f 90       	pop	r0
    3820:	0f 90       	pop	r0
    3822:	cf 91       	pop	r28
    3824:	df 91       	pop	r29
    3826:	08 95       	ret

00003828 <main>:

int main()
{
    3828:	af 92       	push	r10
    382a:	bf 92       	push	r11
    382c:	cf 92       	push	r12
    382e:	df 92       	push	r13
    3830:	ef 92       	push	r14
    3832:	ff 92       	push	r15
    3834:	0f 93       	push	r16
    3836:	1f 93       	push	r17
    3838:	df 93       	push	r29
    383a:	cf 93       	push	r28
    383c:	cd b7       	in	r28, 0x3d	; 61
    383e:	de b7       	in	r29, 0x3e	; 62
    3840:	c0 56       	subi	r28, 0x60	; 96
    3842:	d0 40       	sbci	r29, 0x00	; 0
    3844:	0f b6       	in	r0, 0x3f	; 63
    3846:	f8 94       	cli
    3848:	de bf       	out	0x3e, r29	; 62
    384a:	0f be       	out	0x3f, r0	; 63
    384c:	cd bf       	out	0x3d, r28	; 61
	/* variable to control the sense control of the external interrupt 0 */
	u8 Sense_u8Control =0;
    384e:	1d 82       	std	Y+5, r1	; 0x05
	/* local variable to save the distance value */
	u32 Local_u32Distance;

	/* warning string in case the car is close to hit */
	u8 warning_string[]="Too Close. Stop!";
    3850:	ce 01       	movw	r24, r28
    3852:	06 96       	adiw	r24, 0x06	; 6
    3854:	29 96       	adiw	r28, 0x09	; 9
    3856:	9f af       	std	Y+63, r25	; 0x3f
    3858:	8e af       	std	Y+62, r24	; 0x3e
    385a:	29 97       	sbiw	r28, 0x09	; 9
    385c:	a0 e6       	ldi	r26, 0x60	; 96
    385e:	b0 e0       	ldi	r27, 0x00	; 0
    3860:	2b 96       	adiw	r28, 0x0b	; 11
    3862:	bf af       	std	Y+63, r27	; 0x3f
    3864:	ae af       	std	Y+62, r26	; 0x3e
    3866:	2b 97       	sbiw	r28, 0x0b	; 11
    3868:	b1 e1       	ldi	r27, 0x11	; 17
    386a:	2c 96       	adiw	r28, 0x0c	; 12
    386c:	bf af       	std	Y+63, r27	; 0x3f
    386e:	2c 97       	sbiw	r28, 0x0c	; 12
    3870:	2b 96       	adiw	r28, 0x0b	; 11
    3872:	ee ad       	ldd	r30, Y+62	; 0x3e
    3874:	ff ad       	ldd	r31, Y+63	; 0x3f
    3876:	2b 97       	sbiw	r28, 0x0b	; 11
    3878:	00 80       	ld	r0, Z
    387a:	2b 96       	adiw	r28, 0x0b	; 11
    387c:	8e ad       	ldd	r24, Y+62	; 0x3e
    387e:	9f ad       	ldd	r25, Y+63	; 0x3f
    3880:	2b 97       	sbiw	r28, 0x0b	; 11
    3882:	01 96       	adiw	r24, 0x01	; 1
    3884:	2b 96       	adiw	r28, 0x0b	; 11
    3886:	9f af       	std	Y+63, r25	; 0x3f
    3888:	8e af       	std	Y+62, r24	; 0x3e
    388a:	2b 97       	sbiw	r28, 0x0b	; 11
    388c:	29 96       	adiw	r28, 0x09	; 9
    388e:	ae ad       	ldd	r26, Y+62	; 0x3e
    3890:	bf ad       	ldd	r27, Y+63	; 0x3f
    3892:	29 97       	sbiw	r28, 0x09	; 9
    3894:	0c 92       	st	X, r0
    3896:	29 96       	adiw	r28, 0x09	; 9
    3898:	ee ad       	ldd	r30, Y+62	; 0x3e
    389a:	ff ad       	ldd	r31, Y+63	; 0x3f
    389c:	29 97       	sbiw	r28, 0x09	; 9
    389e:	31 96       	adiw	r30, 0x01	; 1
    38a0:	29 96       	adiw	r28, 0x09	; 9
    38a2:	ff af       	std	Y+63, r31	; 0x3f
    38a4:	ee af       	std	Y+62, r30	; 0x3e
    38a6:	29 97       	sbiw	r28, 0x09	; 9
    38a8:	2c 96       	adiw	r28, 0x0c	; 12
    38aa:	ff ad       	ldd	r31, Y+63	; 0x3f
    38ac:	2c 97       	sbiw	r28, 0x0c	; 12
    38ae:	f1 50       	subi	r31, 0x01	; 1
    38b0:	2c 96       	adiw	r28, 0x0c	; 12
    38b2:	ff af       	std	Y+63, r31	; 0x3f
    38b4:	2c 97       	sbiw	r28, 0x0c	; 12
    38b6:	2c 96       	adiw	r28, 0x0c	; 12
    38b8:	8f ad       	ldd	r24, Y+63	; 0x3f
    38ba:	2c 97       	sbiw	r28, 0x0c	; 12
    38bc:	88 23       	and	r24, r24
    38be:	c1 f6       	brne	.-80     	; 0x3870 <main+0x48>
	/* safety string in case the car is in an acceptable range before hitting */
	u8 Safe_u8String[]="still safe      ";
    38c0:	de 01       	movw	r26, r28
    38c2:	57 96       	adiw	r26, 0x17	; 23
    38c4:	2e 96       	adiw	r28, 0x0e	; 14
    38c6:	bf af       	std	Y+63, r27	; 0x3f
    38c8:	ae af       	std	Y+62, r26	; 0x3e
    38ca:	2e 97       	sbiw	r28, 0x0e	; 14
    38cc:	e1 e7       	ldi	r30, 0x71	; 113
    38ce:	f0 e0       	ldi	r31, 0x00	; 0
    38d0:	60 96       	adiw	r28, 0x10	; 16
    38d2:	ff af       	std	Y+63, r31	; 0x3f
    38d4:	ee af       	std	Y+62, r30	; 0x3e
    38d6:	60 97       	sbiw	r28, 0x10	; 16
    38d8:	f1 e1       	ldi	r31, 0x11	; 17
    38da:	61 96       	adiw	r28, 0x11	; 17
    38dc:	ff af       	std	Y+63, r31	; 0x3f
    38de:	61 97       	sbiw	r28, 0x11	; 17
    38e0:	60 96       	adiw	r28, 0x10	; 16
    38e2:	ae ad       	ldd	r26, Y+62	; 0x3e
    38e4:	bf ad       	ldd	r27, Y+63	; 0x3f
    38e6:	60 97       	sbiw	r28, 0x10	; 16
    38e8:	0c 90       	ld	r0, X
    38ea:	60 96       	adiw	r28, 0x10	; 16
    38ec:	ee ad       	ldd	r30, Y+62	; 0x3e
    38ee:	ff ad       	ldd	r31, Y+63	; 0x3f
    38f0:	60 97       	sbiw	r28, 0x10	; 16
    38f2:	31 96       	adiw	r30, 0x01	; 1
    38f4:	60 96       	adiw	r28, 0x10	; 16
    38f6:	ff af       	std	Y+63, r31	; 0x3f
    38f8:	ee af       	std	Y+62, r30	; 0x3e
    38fa:	60 97       	sbiw	r28, 0x10	; 16
    38fc:	2e 96       	adiw	r28, 0x0e	; 14
    38fe:	ae ad       	ldd	r26, Y+62	; 0x3e
    3900:	bf ad       	ldd	r27, Y+63	; 0x3f
    3902:	2e 97       	sbiw	r28, 0x0e	; 14
    3904:	0c 92       	st	X, r0
    3906:	2e 96       	adiw	r28, 0x0e	; 14
    3908:	ee ad       	ldd	r30, Y+62	; 0x3e
    390a:	ff ad       	ldd	r31, Y+63	; 0x3f
    390c:	2e 97       	sbiw	r28, 0x0e	; 14
    390e:	31 96       	adiw	r30, 0x01	; 1
    3910:	2e 96       	adiw	r28, 0x0e	; 14
    3912:	ff af       	std	Y+63, r31	; 0x3f
    3914:	ee af       	std	Y+62, r30	; 0x3e
    3916:	2e 97       	sbiw	r28, 0x0e	; 14
    3918:	61 96       	adiw	r28, 0x11	; 17
    391a:	ff ad       	ldd	r31, Y+63	; 0x3f
    391c:	61 97       	sbiw	r28, 0x11	; 17
    391e:	f1 50       	subi	r31, 0x01	; 1
    3920:	61 96       	adiw	r28, 0x11	; 17
    3922:	ff af       	std	Y+63, r31	; 0x3f
    3924:	61 97       	sbiw	r28, 0x11	; 17
    3926:	61 96       	adiw	r28, 0x11	; 17
    3928:	8f ad       	ldd	r24, Y+63	; 0x3f
    392a:	61 97       	sbiw	r28, 0x11	; 17
    392c:	88 23       	and	r24, r24
    392e:	c1 f6       	brne	.-80     	; 0x38e0 <main+0xb8>
	/* string to print "cm" after the distance number */
	u8 Cm_u8String[]="cm";
    3930:	de 01       	movw	r26, r28
    3932:	98 96       	adiw	r26, 0x28	; 40
    3934:	63 96       	adiw	r28, 0x13	; 19
    3936:	bf af       	std	Y+63, r27	; 0x3f
    3938:	ae af       	std	Y+62, r26	; 0x3e
    393a:	63 97       	sbiw	r28, 0x13	; 19
    393c:	e2 e8       	ldi	r30, 0x82	; 130
    393e:	f0 e0       	ldi	r31, 0x00	; 0
    3940:	65 96       	adiw	r28, 0x15	; 21
    3942:	ff af       	std	Y+63, r31	; 0x3f
    3944:	ee af       	std	Y+62, r30	; 0x3e
    3946:	65 97       	sbiw	r28, 0x15	; 21
    3948:	f3 e0       	ldi	r31, 0x03	; 3
    394a:	66 96       	adiw	r28, 0x16	; 22
    394c:	ff af       	std	Y+63, r31	; 0x3f
    394e:	66 97       	sbiw	r28, 0x16	; 22
    3950:	65 96       	adiw	r28, 0x15	; 21
    3952:	ae ad       	ldd	r26, Y+62	; 0x3e
    3954:	bf ad       	ldd	r27, Y+63	; 0x3f
    3956:	65 97       	sbiw	r28, 0x15	; 21
    3958:	0c 90       	ld	r0, X
    395a:	65 96       	adiw	r28, 0x15	; 21
    395c:	ee ad       	ldd	r30, Y+62	; 0x3e
    395e:	ff ad       	ldd	r31, Y+63	; 0x3f
    3960:	65 97       	sbiw	r28, 0x15	; 21
    3962:	31 96       	adiw	r30, 0x01	; 1
    3964:	65 96       	adiw	r28, 0x15	; 21
    3966:	ff af       	std	Y+63, r31	; 0x3f
    3968:	ee af       	std	Y+62, r30	; 0x3e
    396a:	65 97       	sbiw	r28, 0x15	; 21
    396c:	63 96       	adiw	r28, 0x13	; 19
    396e:	ae ad       	ldd	r26, Y+62	; 0x3e
    3970:	bf ad       	ldd	r27, Y+63	; 0x3f
    3972:	63 97       	sbiw	r28, 0x13	; 19
    3974:	0c 92       	st	X, r0
    3976:	63 96       	adiw	r28, 0x13	; 19
    3978:	ee ad       	ldd	r30, Y+62	; 0x3e
    397a:	ff ad       	ldd	r31, Y+63	; 0x3f
    397c:	63 97       	sbiw	r28, 0x13	; 19
    397e:	31 96       	adiw	r30, 0x01	; 1
    3980:	63 96       	adiw	r28, 0x13	; 19
    3982:	ff af       	std	Y+63, r31	; 0x3f
    3984:	ee af       	std	Y+62, r30	; 0x3e
    3986:	63 97       	sbiw	r28, 0x13	; 19
    3988:	66 96       	adiw	r28, 0x16	; 22
    398a:	ff ad       	ldd	r31, Y+63	; 0x3f
    398c:	66 97       	sbiw	r28, 0x16	; 22
    398e:	f1 50       	subi	r31, 0x01	; 1
    3990:	66 96       	adiw	r28, 0x16	; 22
    3992:	ff af       	std	Y+63, r31	; 0x3f
    3994:	66 97       	sbiw	r28, 0x16	; 22
    3996:	66 96       	adiw	r28, 0x16	; 22
    3998:	8f ad       	ldd	r24, Y+63	; 0x3f
    399a:	66 97       	sbiw	r28, 0x16	; 22
    399c:	88 23       	and	r24, r24
    399e:	c1 f6       	brne	.-80     	; 0x3950 <main+0x128>
	/* strings to clear the LCD without clearing the lamp symbol  */
	u8 Empty_u8String1[]="     ";
    39a0:	de 01       	movw	r26, r28
    39a2:	9b 96       	adiw	r26, 0x2b	; 43
    39a4:	68 96       	adiw	r28, 0x18	; 24
    39a6:	bf af       	std	Y+63, r27	; 0x3f
    39a8:	ae af       	std	Y+62, r26	; 0x3e
    39aa:	68 97       	sbiw	r28, 0x18	; 24
    39ac:	e5 e8       	ldi	r30, 0x85	; 133
    39ae:	f0 e0       	ldi	r31, 0x00	; 0
    39b0:	6a 96       	adiw	r28, 0x1a	; 26
    39b2:	ff af       	std	Y+63, r31	; 0x3f
    39b4:	ee af       	std	Y+62, r30	; 0x3e
    39b6:	6a 97       	sbiw	r28, 0x1a	; 26
    39b8:	f6 e0       	ldi	r31, 0x06	; 6
    39ba:	6b 96       	adiw	r28, 0x1b	; 27
    39bc:	ff af       	std	Y+63, r31	; 0x3f
    39be:	6b 97       	sbiw	r28, 0x1b	; 27
    39c0:	6a 96       	adiw	r28, 0x1a	; 26
    39c2:	ae ad       	ldd	r26, Y+62	; 0x3e
    39c4:	bf ad       	ldd	r27, Y+63	; 0x3f
    39c6:	6a 97       	sbiw	r28, 0x1a	; 26
    39c8:	0c 90       	ld	r0, X
    39ca:	6a 96       	adiw	r28, 0x1a	; 26
    39cc:	ee ad       	ldd	r30, Y+62	; 0x3e
    39ce:	ff ad       	ldd	r31, Y+63	; 0x3f
    39d0:	6a 97       	sbiw	r28, 0x1a	; 26
    39d2:	31 96       	adiw	r30, 0x01	; 1
    39d4:	6a 96       	adiw	r28, 0x1a	; 26
    39d6:	ff af       	std	Y+63, r31	; 0x3f
    39d8:	ee af       	std	Y+62, r30	; 0x3e
    39da:	6a 97       	sbiw	r28, 0x1a	; 26
    39dc:	68 96       	adiw	r28, 0x18	; 24
    39de:	ae ad       	ldd	r26, Y+62	; 0x3e
    39e0:	bf ad       	ldd	r27, Y+63	; 0x3f
    39e2:	68 97       	sbiw	r28, 0x18	; 24
    39e4:	0c 92       	st	X, r0
    39e6:	68 96       	adiw	r28, 0x18	; 24
    39e8:	ee ad       	ldd	r30, Y+62	; 0x3e
    39ea:	ff ad       	ldd	r31, Y+63	; 0x3f
    39ec:	68 97       	sbiw	r28, 0x18	; 24
    39ee:	31 96       	adiw	r30, 0x01	; 1
    39f0:	68 96       	adiw	r28, 0x18	; 24
    39f2:	ff af       	std	Y+63, r31	; 0x3f
    39f4:	ee af       	std	Y+62, r30	; 0x3e
    39f6:	68 97       	sbiw	r28, 0x18	; 24
    39f8:	6b 96       	adiw	r28, 0x1b	; 27
    39fa:	ff ad       	ldd	r31, Y+63	; 0x3f
    39fc:	6b 97       	sbiw	r28, 0x1b	; 27
    39fe:	f1 50       	subi	r31, 0x01	; 1
    3a00:	6b 96       	adiw	r28, 0x1b	; 27
    3a02:	ff af       	std	Y+63, r31	; 0x3f
    3a04:	6b 97       	sbiw	r28, 0x1b	; 27
    3a06:	6b 96       	adiw	r28, 0x1b	; 27
    3a08:	8f ad       	ldd	r24, Y+63	; 0x3f
    3a0a:	6b 97       	sbiw	r28, 0x1b	; 27
    3a0c:	88 23       	and	r24, r24
    3a0e:	c1 f6       	brne	.-80     	; 0x39c0 <main+0x198>
	u8 Empty_u8String2[]="               ";
    3a10:	de 01       	movw	r26, r28
    3a12:	d1 96       	adiw	r26, 0x31	; 49
    3a14:	6d 96       	adiw	r28, 0x1d	; 29
    3a16:	bf af       	std	Y+63, r27	; 0x3f
    3a18:	ae af       	std	Y+62, r26	; 0x3e
    3a1a:	6d 97       	sbiw	r28, 0x1d	; 29
    3a1c:	eb e8       	ldi	r30, 0x8B	; 139
    3a1e:	f0 e0       	ldi	r31, 0x00	; 0
    3a20:	6f 96       	adiw	r28, 0x1f	; 31
    3a22:	ff af       	std	Y+63, r31	; 0x3f
    3a24:	ee af       	std	Y+62, r30	; 0x3e
    3a26:	6f 97       	sbiw	r28, 0x1f	; 31
    3a28:	f0 e1       	ldi	r31, 0x10	; 16
    3a2a:	a0 96       	adiw	r28, 0x20	; 32
    3a2c:	ff af       	std	Y+63, r31	; 0x3f
    3a2e:	a0 97       	sbiw	r28, 0x20	; 32
    3a30:	6f 96       	adiw	r28, 0x1f	; 31
    3a32:	ae ad       	ldd	r26, Y+62	; 0x3e
    3a34:	bf ad       	ldd	r27, Y+63	; 0x3f
    3a36:	6f 97       	sbiw	r28, 0x1f	; 31
    3a38:	0c 90       	ld	r0, X
    3a3a:	6f 96       	adiw	r28, 0x1f	; 31
    3a3c:	ee ad       	ldd	r30, Y+62	; 0x3e
    3a3e:	ff ad       	ldd	r31, Y+63	; 0x3f
    3a40:	6f 97       	sbiw	r28, 0x1f	; 31
    3a42:	31 96       	adiw	r30, 0x01	; 1
    3a44:	6f 96       	adiw	r28, 0x1f	; 31
    3a46:	ff af       	std	Y+63, r31	; 0x3f
    3a48:	ee af       	std	Y+62, r30	; 0x3e
    3a4a:	6f 97       	sbiw	r28, 0x1f	; 31
    3a4c:	6d 96       	adiw	r28, 0x1d	; 29
    3a4e:	ae ad       	ldd	r26, Y+62	; 0x3e
    3a50:	bf ad       	ldd	r27, Y+63	; 0x3f
    3a52:	6d 97       	sbiw	r28, 0x1d	; 29
    3a54:	0c 92       	st	X, r0
    3a56:	6d 96       	adiw	r28, 0x1d	; 29
    3a58:	ee ad       	ldd	r30, Y+62	; 0x3e
    3a5a:	ff ad       	ldd	r31, Y+63	; 0x3f
    3a5c:	6d 97       	sbiw	r28, 0x1d	; 29
    3a5e:	31 96       	adiw	r30, 0x01	; 1
    3a60:	6d 96       	adiw	r28, 0x1d	; 29
    3a62:	ff af       	std	Y+63, r31	; 0x3f
    3a64:	ee af       	std	Y+62, r30	; 0x3e
    3a66:	6d 97       	sbiw	r28, 0x1d	; 29
    3a68:	a0 96       	adiw	r28, 0x20	; 32
    3a6a:	ff ad       	ldd	r31, Y+63	; 0x3f
    3a6c:	a0 97       	sbiw	r28, 0x20	; 32
    3a6e:	f1 50       	subi	r31, 0x01	; 1
    3a70:	a0 96       	adiw	r28, 0x20	; 32
    3a72:	ff af       	std	Y+63, r31	; 0x3f
    3a74:	a0 97       	sbiw	r28, 0x20	; 32
    3a76:	a0 96       	adiw	r28, 0x20	; 32
    3a78:	8f ad       	ldd	r24, Y+63	; 0x3f
    3a7a:	a0 97       	sbiw	r28, 0x20	; 32
    3a7c:	88 23       	and	r24, r24
    3a7e:	c1 f6       	brne	.-80     	; 0x3a30 <main+0x208>

	/* set the car lamps pins as outputs */
	DIO_VidSetPinDirection(Port_B,Pin_0,output);
    3a80:	83 e0       	ldi	r24, 0x03	; 3
    3a82:	60 e0       	ldi	r22, 0x00	; 0
    3a84:	41 e0       	ldi	r20, 0x01	; 1
    3a86:	0e 94 37 14 	call	0x286e	; 0x286e <DIO_VidSetPinDirection>
	DIO_VidSetPinDirection(Port_B,Pin_1,output);
    3a8a:	83 e0       	ldi	r24, 0x03	; 3
    3a8c:	61 e0       	ldi	r22, 0x01	; 1
    3a8e:	41 e0       	ldi	r20, 0x01	; 1
    3a90:	0e 94 37 14 	call	0x286e	; 0x286e <DIO_VidSetPinDirection>
	/* initially turn off the lamps */
	DIO_VidSetPinValue(Port_B,Pin_0,low);
    3a94:	83 e0       	ldi	r24, 0x03	; 3
    3a96:	60 e0       	ldi	r22, 0x00	; 0
    3a98:	40 e0       	ldi	r20, 0x00	; 0
    3a9a:	0e 94 35 13 	call	0x266a	; 0x266a <DIO_VidSetPinValue>
	DIO_VidSetPinValue(Port_B,Pin_1,low);
    3a9e:	83 e0       	ldi	r24, 0x03	; 3
    3aa0:	61 e0       	ldi	r22, 0x01	; 1
    3aa2:	40 e0       	ldi	r20, 0x00	; 0
    3aa4:	0e 94 35 13 	call	0x266a	; 0x266a <DIO_VidSetPinValue>

	/* set the external interrupt 0 pin as input */
	DIO_VidSetPinDirection(Port_D,Pin_2,input);
    3aa8:	85 e0       	ldi	r24, 0x05	; 5
    3aaa:	62 e0       	ldi	r22, 0x02	; 2
    3aac:	40 e0       	ldi	r20, 0x00	; 0
    3aae:	0e 94 37 14 	call	0x286e	; 0x286e <DIO_VidSetPinDirection>
	/* set the pin 3 on port as output to use it to trigger the external interrupt */
	DIO_VidSetPinDirection(Port_B,Pin_3,output);
    3ab2:	83 e0       	ldi	r24, 0x03	; 3
    3ab4:	63 e0       	ldi	r22, 0x03	; 3
    3ab6:	41 e0       	ldi	r20, 0x01	; 1
    3ab8:	0e 94 37 14 	call	0x286e	; 0x286e <DIO_VidSetPinDirection>

	/* set the directions of the keypad pins */
	DIO_VidSetPortDirection(KPD_u8PORT,0b00001111);
    3abc:	84 e0       	ldi	r24, 0x04	; 4
    3abe:	6f e0       	ldi	r22, 0x0F	; 15
    3ac0:	0e 94 ff 15 	call	0x2bfe	; 0x2bfe <DIO_VidSetPortDirection>
	/* Necessary action: activating internal pull up resistors for keypad pins by writing high on them */
	DIO_VidSetPinValue(KPD_u8PORT,KPD_u8ROW0_PIN,high);
    3ac4:	84 e0       	ldi	r24, 0x04	; 4
    3ac6:	64 e0       	ldi	r22, 0x04	; 4
    3ac8:	41 e0       	ldi	r20, 0x01	; 1
    3aca:	0e 94 35 13 	call	0x266a	; 0x266a <DIO_VidSetPinValue>
	DIO_VidSetPinValue(KPD_u8PORT,KPD_u8ROW1_PIN,high);
    3ace:	84 e0       	ldi	r24, 0x04	; 4
    3ad0:	65 e0       	ldi	r22, 0x05	; 5
    3ad2:	41 e0       	ldi	r20, 0x01	; 1
    3ad4:	0e 94 35 13 	call	0x266a	; 0x266a <DIO_VidSetPinValue>
	DIO_VidSetPinValue(KPD_u8PORT,KPD_u8ROW2_PIN,high);
    3ad8:	84 e0       	ldi	r24, 0x04	; 4
    3ada:	66 e0       	ldi	r22, 0x06	; 6
    3adc:	41 e0       	ldi	r20, 0x01	; 1
    3ade:	0e 94 35 13 	call	0x266a	; 0x266a <DIO_VidSetPinValue>
	DIO_VidSetPinValue(KPD_u8PORT,KPD_u8ROW3_PIN,high);
    3ae2:	84 e0       	ldi	r24, 0x04	; 4
    3ae4:	67 e0       	ldi	r22, 0x07	; 7
    3ae6:	41 e0       	ldi	r20, 0x01	; 1
    3ae8:	0e 94 35 13 	call	0x266a	; 0x266a <DIO_VidSetPinValue>


	/*set the task of external interrupt 0 ISR */
	EXTI_INT0_Call_Back(ExternalInterupt);
    3aec:	8c ec       	ldi	r24, 0xCC	; 204
    3aee:	9b e1       	ldi	r25, 0x1B	; 27
    3af0:	0e 94 66 12 	call	0x24cc	; 0x24cc <EXTI_INT0_Call_Back>

	/*set the task of SPI communication protocol ISR */
	SPI_INT_Call_Back(SPI_IntReceive,Global_u8SPIPointerToData);
    3af4:	20 91 de 01 	lds	r18, 0x01DE
    3af8:	30 91 df 01 	lds	r19, 0x01DF
    3afc:	8f ea       	ldi	r24, 0xAF	; 175
    3afe:	9b e1       	ldi	r25, 0x1B	; 27
    3b00:	b9 01       	movw	r22, r18
    3b02:	0e 94 aa 11 	call	0x2354	; 0x2354 <SPI_INT_Call_Back>

	/* initialize LCD */
	CLCD_VidInit();
    3b06:	0e 94 86 1a 	call	0x350c	; 0x350c <CLCD_VidInit>

	/* initialize SPI communication protocol : slave mode */
	SPI_Void_Init_Slave();
    3b0a:	0e 94 44 11 	call	0x2288	; 0x2288 <SPI_Void_Init_Slave>

	/* initialize ultra sonic sensor */

	UltraSonic_voidInit();
    3b0e:	0e 94 0e 17 	call	0x2e1c	; 0x2e1c <UltraSonic_voidInit>
	/* enable external interrupt 0 to control the lightening system */
	EXTI0_Vid_Init();
    3b12:	0e 94 20 12 	call	0x2440	; 0x2440 <EXTI0_Vid_Init>

	/* global enable for the interrupts */
	GIE_Vid_Enable();
    3b16:	0e 94 04 12 	call	0x2408	; 0x2408 <GIE_Vid_Enable>


	while(1)
	{
		/* get the distance in cm from ultra-sonic */
		Local_u32Distance= (u16)UltraSonic_f64Read();
    3b1a:	0e 94 27 17 	call	0x2e4e	; 0x2e4e <UltraSonic_f64Read>
    3b1e:	dc 01       	movw	r26, r24
    3b20:	cb 01       	movw	r24, r22
    3b22:	bc 01       	movw	r22, r24
    3b24:	cd 01       	movw	r24, r26
    3b26:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b2a:	dc 01       	movw	r26, r24
    3b2c:	cb 01       	movw	r24, r22
    3b2e:	cc 01       	movw	r24, r24
    3b30:	a0 e0       	ldi	r26, 0x00	; 0
    3b32:	b0 e0       	ldi	r27, 0x00	; 0
    3b34:	89 83       	std	Y+1, r24	; 0x01
    3b36:	9a 83       	std	Y+2, r25	; 0x02
    3b38:	ab 83       	std	Y+3, r26	; 0x03
    3b3a:	bc 83       	std	Y+4, r27	; 0x04

		/* map the given value in a range of 0 to 100 cm */
		Local_u32Distance= Map_u16Function(Local_u32Distance,100,1120,0,100);
    3b3c:	00 d0       	rcall	.+0      	; 0x3b3e <main+0x316>
    3b3e:	00 d0       	rcall	.+0      	; 0x3b40 <main+0x318>
    3b40:	ed b7       	in	r30, 0x3d	; 61
    3b42:	fe b7       	in	r31, 0x3e	; 62
    3b44:	31 96       	adiw	r30, 0x01	; 1
    3b46:	29 81       	ldd	r18, Y+1	; 0x01
    3b48:	3a 81       	ldd	r19, Y+2	; 0x02
    3b4a:	4b 81       	ldd	r20, Y+3	; 0x03
    3b4c:	5c 81       	ldd	r21, Y+4	; 0x04
    3b4e:	84 e6       	ldi	r24, 0x64	; 100
    3b50:	90 e0       	ldi	r25, 0x00	; 0
    3b52:	a0 e0       	ldi	r26, 0x00	; 0
    3b54:	b0 e0       	ldi	r27, 0x00	; 0
    3b56:	80 83       	st	Z, r24
    3b58:	91 83       	std	Z+1, r25	; 0x01
    3b5a:	a2 83       	std	Z+2, r26	; 0x02
    3b5c:	b3 83       	std	Z+3, r27	; 0x03
    3b5e:	ca 01       	movw	r24, r20
    3b60:	b9 01       	movw	r22, r18
    3b62:	24 e6       	ldi	r18, 0x64	; 100
    3b64:	30 e0       	ldi	r19, 0x00	; 0
    3b66:	40 e0       	ldi	r20, 0x00	; 0
    3b68:	50 e0       	ldi	r21, 0x00	; 0
    3b6a:	0f 2e       	mov	r0, r31
    3b6c:	f0 e6       	ldi	r31, 0x60	; 96
    3b6e:	ef 2e       	mov	r14, r31
    3b70:	f4 e0       	ldi	r31, 0x04	; 4
    3b72:	ff 2e       	mov	r15, r31
    3b74:	f0 e0       	ldi	r31, 0x00	; 0
    3b76:	0f 2f       	mov	r16, r31
    3b78:	f0 e0       	ldi	r31, 0x00	; 0
    3b7a:	1f 2f       	mov	r17, r31
    3b7c:	f0 2d       	mov	r31, r0
    3b7e:	aa 24       	eor	r10, r10
    3b80:	bb 24       	eor	r11, r11
    3b82:	65 01       	movw	r12, r10
    3b84:	0e 94 59 1e 	call	0x3cb2	; 0x3cb2 <Map_u16Function>
    3b88:	0f 90       	pop	r0
    3b8a:	0f 90       	pop	r0
    3b8c:	0f 90       	pop	r0
    3b8e:	0f 90       	pop	r0
    3b90:	dc 01       	movw	r26, r24
    3b92:	cb 01       	movw	r24, r22
    3b94:	89 83       	std	Y+1, r24	; 0x01
    3b96:	9a 83       	std	Y+2, r25	; 0x02
    3b98:	ab 83       	std	Y+3, r26	; 0x03
    3b9a:	bc 83       	std	Y+4, r27	; 0x04

		/* convert the distance number to string to print on LCD */
		u8 Distance_u8String[6]={0};
    3b9c:	86 e0       	ldi	r24, 0x06	; 6
    3b9e:	fe 01       	movw	r30, r28
    3ba0:	ef 5b       	subi	r30, 0xBF	; 191
    3ba2:	ff 4f       	sbci	r31, 0xFF	; 255
    3ba4:	df 01       	movw	r26, r30
    3ba6:	98 2f       	mov	r25, r24
    3ba8:	1d 92       	st	X+, r1
    3baa:	9a 95       	dec	r25
    3bac:	e9 f7       	brne	.-6      	; 0x3ba8 <main+0x380>
		intTo_u16Str(Local_u32Distance,Distance_u8String,2);
    3bae:	89 81       	ldd	r24, Y+1	; 0x01
    3bb0:	9a 81       	ldd	r25, Y+2	; 0x02
    3bb2:	9e 01       	movw	r18, r28
    3bb4:	2f 5b       	subi	r18, 0xBF	; 191
    3bb6:	3f 4f       	sbci	r19, 0xFF	; 255
    3bb8:	b9 01       	movw	r22, r18
    3bba:	42 e0       	ldi	r20, 0x02	; 2
    3bbc:	50 e0       	ldi	r21, 0x00	; 0
    3bbe:	0e 94 52 1f 	call	0x3ea4	; 0x3ea4 <intTo_u16Str>

		/* print the distance on the first line */
		if((Local_u32Distance < 35) && (Local_u32Distance >= 0))
    3bc2:	89 81       	ldd	r24, Y+1	; 0x01
    3bc4:	9a 81       	ldd	r25, Y+2	; 0x02
    3bc6:	ab 81       	ldd	r26, Y+3	; 0x03
    3bc8:	bc 81       	ldd	r27, Y+4	; 0x04
    3bca:	83 32       	cpi	r24, 0x23	; 35
    3bcc:	91 05       	cpc	r25, r1
    3bce:	a1 05       	cpc	r26, r1
    3bd0:	b1 05       	cpc	r27, r1
    3bd2:	e8 f4       	brcc	.+58     	; 0x3c0e <main+0x3e6>
		{
			/* the car is too close to collide */
			Global_u8SmallDistanceFlag =1;
    3bd4:	81 e0       	ldi	r24, 0x01	; 1
    3bd6:	80 93 e0 01 	sts	0x01E0, r24
			/* print warning string on the first line */
			CLCD_VidGoToXY(0,0);
    3bda:	80 e0       	ldi	r24, 0x00	; 0
    3bdc:	60 e0       	ldi	r22, 0x00	; 0
    3bde:	0e 94 27 1b 	call	0x364e	; 0x364e <CLCD_VidGoToXY>
			CLCD_VidWriteString(warning_string);
    3be2:	ce 01       	movw	r24, r28
    3be4:	06 96       	adiw	r24, 0x06	; 6
    3be6:	0e 94 86 1b 	call	0x370c	; 0x370c <CLCD_VidWriteString>
			/* print the distance on the second line */
			CLCD_VidGoToXY(1,0);
    3bea:	81 e0       	ldi	r24, 0x01	; 1
    3bec:	60 e0       	ldi	r22, 0x00	; 0
    3bee:	0e 94 27 1b 	call	0x364e	; 0x364e <CLCD_VidGoToXY>
			CLCD_VidWriteString(Distance_u8String);
    3bf2:	ce 01       	movw	r24, r28
    3bf4:	8f 5b       	subi	r24, 0xBF	; 191
    3bf6:	9f 4f       	sbci	r25, 0xFF	; 255
    3bf8:	0e 94 86 1b 	call	0x370c	; 0x370c <CLCD_VidWriteString>
			/* print "cm" after the distance */
			CLCD_VidGoToXY(1,3);
    3bfc:	81 e0       	ldi	r24, 0x01	; 1
    3bfe:	63 e0       	ldi	r22, 0x03	; 3
    3c00:	0e 94 27 1b 	call	0x364e	; 0x364e <CLCD_VidGoToXY>
			CLCD_VidWriteString(Cm_u8String);
    3c04:	ce 01       	movw	r24, r28
    3c06:	88 96       	adiw	r24, 0x28	; 40
    3c08:	0e 94 86 1b 	call	0x370c	; 0x370c <CLCD_VidWriteString>
    3c0c:	35 c0       	rjmp	.+106    	; 0x3c78 <main+0x450>
		}
		else if(Local_u32Distance < 99)
    3c0e:	89 81       	ldd	r24, Y+1	; 0x01
    3c10:	9a 81       	ldd	r25, Y+2	; 0x02
    3c12:	ab 81       	ldd	r26, Y+3	; 0x03
    3c14:	bc 81       	ldd	r27, Y+4	; 0x04
    3c16:	83 36       	cpi	r24, 0x63	; 99
    3c18:	91 05       	cpc	r25, r1
    3c1a:	a1 05       	cpc	r26, r1
    3c1c:	b1 05       	cpc	r27, r1
    3c1e:	e0 f4       	brcc	.+56     	; 0x3c58 <main+0x430>
		{
			Global_u8SmallDistanceFlag =0;
    3c20:	10 92 e0 01 	sts	0x01E0, r1
			/* print safety string on the first line */
			CLCD_VidGoToXY(0,0);
    3c24:	80 e0       	ldi	r24, 0x00	; 0
    3c26:	60 e0       	ldi	r22, 0x00	; 0
    3c28:	0e 94 27 1b 	call	0x364e	; 0x364e <CLCD_VidGoToXY>
			CLCD_VidWriteString(Safe_u8String);
    3c2c:	ce 01       	movw	r24, r28
    3c2e:	47 96       	adiw	r24, 0x17	; 23
    3c30:	0e 94 86 1b 	call	0x370c	; 0x370c <CLCD_VidWriteString>
			/* print the distance on the second line */
			CLCD_VidGoToXY(1,0);
    3c34:	81 e0       	ldi	r24, 0x01	; 1
    3c36:	60 e0       	ldi	r22, 0x00	; 0
    3c38:	0e 94 27 1b 	call	0x364e	; 0x364e <CLCD_VidGoToXY>
			CLCD_VidWriteString(Distance_u8String);
    3c3c:	ce 01       	movw	r24, r28
    3c3e:	8f 5b       	subi	r24, 0xBF	; 191
    3c40:	9f 4f       	sbci	r25, 0xFF	; 255
    3c42:	0e 94 86 1b 	call	0x370c	; 0x370c <CLCD_VidWriteString>
			/* print "cm" after the distance */
			CLCD_VidGoToXY(1,3);
    3c46:	81 e0       	ldi	r24, 0x01	; 1
    3c48:	63 e0       	ldi	r22, 0x03	; 3
    3c4a:	0e 94 27 1b 	call	0x364e	; 0x364e <CLCD_VidGoToXY>
			CLCD_VidWriteString(Cm_u8String);
    3c4e:	ce 01       	movw	r24, r28
    3c50:	88 96       	adiw	r24, 0x28	; 40
    3c52:	0e 94 86 1b 	call	0x370c	; 0x370c <CLCD_VidWriteString>
    3c56:	10 c0       	rjmp	.+32     	; 0x3c78 <main+0x450>
		}
		else
		{
			/* print no strings or distance if you are away from the surroundings by 1 meter or more */
			CLCD_VidGoToXY(0,0);
    3c58:	80 e0       	ldi	r24, 0x00	; 0
    3c5a:	60 e0       	ldi	r22, 0x00	; 0
    3c5c:	0e 94 27 1b 	call	0x364e	; 0x364e <CLCD_VidGoToXY>
			CLCD_VidWriteString(Empty_u8String2);
    3c60:	ce 01       	movw	r24, r28
    3c62:	c1 96       	adiw	r24, 0x31	; 49
    3c64:	0e 94 86 1b 	call	0x370c	; 0x370c <CLCD_VidWriteString>
			CLCD_VidGoToXY(1,0);
    3c68:	81 e0       	ldi	r24, 0x01	; 1
    3c6a:	60 e0       	ldi	r22, 0x00	; 0
    3c6c:	0e 94 27 1b 	call	0x364e	; 0x364e <CLCD_VidGoToXY>
			CLCD_VidWriteString(Empty_u8String1);
    3c70:	ce 01       	movw	r24, r28
    3c72:	8b 96       	adiw	r24, 0x2b	; 43
    3c74:	0e 94 86 1b 	call	0x370c	; 0x370c <CLCD_VidWriteString>
		}
		 	 /* check if a key is pressed on keypad */
		key_u8Value = KPD_u8GetPresssedKey();
    3c78:	0e 94 81 18 	call	0x3102	; 0x3102 <KPD_u8GetPresssedKey>
    3c7c:	80 93 dc 01 	sts	0x01DC, r24
		if(key_u8Value != NOT_PRESSED)
    3c80:	80 91 dc 01 	lds	r24, 0x01DC
    3c84:	85 36       	cpi	r24, 0x65	; 101
    3c86:	09 f4       	brne	.+2      	; 0x3c8a <main+0x462>
    3c88:	48 cf       	rjmp	.-368    	; 0x3b1a <main+0x2f2>
		{
			/* trigger the external interrupt by making a change in the pulse */
			Sense_u8Control = ! Sense_u8Control;
    3c8a:	a1 96       	adiw	r28, 0x21	; 33
    3c8c:	1f ae       	std	Y+63, r1	; 0x3f
    3c8e:	a1 97       	sbiw	r28, 0x21	; 33
    3c90:	8d 81       	ldd	r24, Y+5	; 0x05
    3c92:	88 23       	and	r24, r24
    3c94:	21 f4       	brne	.+8      	; 0x3c9e <main+0x476>
    3c96:	a1 e0       	ldi	r26, 0x01	; 1
    3c98:	a1 96       	adiw	r28, 0x21	; 33
    3c9a:	af af       	std	Y+63, r26	; 0x3f
    3c9c:	a1 97       	sbiw	r28, 0x21	; 33
    3c9e:	a1 96       	adiw	r28, 0x21	; 33
    3ca0:	bf ad       	ldd	r27, Y+63	; 0x3f
    3ca2:	a1 97       	sbiw	r28, 0x21	; 33
    3ca4:	bd 83       	std	Y+5, r27	; 0x05
			DIO_VidSetPinValue(Port_B,Pin_3,Sense_u8Control);
    3ca6:	83 e0       	ldi	r24, 0x03	; 3
    3ca8:	63 e0       	ldi	r22, 0x03	; 3
    3caa:	4d 81       	ldd	r20, Y+5	; 0x05
    3cac:	0e 94 35 13 	call	0x266a	; 0x266a <DIO_VidSetPinValue>
    3cb0:	34 cf       	rjmp	.-408    	; 0x3b1a <main+0x2f2>

00003cb2 <Map_u16Function>:
#include "lib/STD_TYPES.h"
#include "lib/BIT_MATH.h"

/* mapping function that gives the corresponding value of a number in different domain */
u32 Map_u16Function(u32 Copy_u32GivenValue, u32 Copy_u32FromMin, u32 Copy_u32FromMax, u32 Copy_u32NewMin, u32 Copy_u32NewMax)
{
    3cb2:	af 92       	push	r10
    3cb4:	bf 92       	push	r11
    3cb6:	cf 92       	push	r12
    3cb8:	df 92       	push	r13
    3cba:	ef 92       	push	r14
    3cbc:	ff 92       	push	r15
    3cbe:	0f 93       	push	r16
    3cc0:	1f 93       	push	r17
    3cc2:	df 93       	push	r29
    3cc4:	cf 93       	push	r28
    3cc6:	cd b7       	in	r28, 0x3d	; 61
    3cc8:	de b7       	in	r29, 0x3e	; 62
    3cca:	60 97       	sbiw	r28, 0x10	; 16
    3ccc:	0f b6       	in	r0, 0x3f	; 63
    3cce:	f8 94       	cli
    3cd0:	de bf       	out	0x3e, r29	; 62
    3cd2:	0f be       	out	0x3f, r0	; 63
    3cd4:	cd bf       	out	0x3d, r28	; 61
    3cd6:	69 83       	std	Y+1, r22	; 0x01
    3cd8:	7a 83       	std	Y+2, r23	; 0x02
    3cda:	8b 83       	std	Y+3, r24	; 0x03
    3cdc:	9c 83       	std	Y+4, r25	; 0x04
    3cde:	2d 83       	std	Y+5, r18	; 0x05
    3ce0:	3e 83       	std	Y+6, r19	; 0x06
    3ce2:	4f 83       	std	Y+7, r20	; 0x07
    3ce4:	58 87       	std	Y+8, r21	; 0x08
    3ce6:	e9 86       	std	Y+9, r14	; 0x09
    3ce8:	fa 86       	std	Y+10, r15	; 0x0a
    3cea:	0b 87       	std	Y+11, r16	; 0x0b
    3cec:	1c 87       	std	Y+12, r17	; 0x0c
    3cee:	ad 86       	std	Y+13, r10	; 0x0d
    3cf0:	be 86       	std	Y+14, r11	; 0x0e
    3cf2:	cf 86       	std	Y+15, r12	; 0x0f
    3cf4:	d8 8a       	std	Y+16, r13	; 0x10
	Copy_u32GivenValue = (100UL*(Copy_u32GivenValue-Copy_u32FromMin));
    3cf6:	29 81       	ldd	r18, Y+1	; 0x01
    3cf8:	3a 81       	ldd	r19, Y+2	; 0x02
    3cfa:	4b 81       	ldd	r20, Y+3	; 0x03
    3cfc:	5c 81       	ldd	r21, Y+4	; 0x04
    3cfe:	8d 81       	ldd	r24, Y+5	; 0x05
    3d00:	9e 81       	ldd	r25, Y+6	; 0x06
    3d02:	af 81       	ldd	r26, Y+7	; 0x07
    3d04:	b8 85       	ldd	r27, Y+8	; 0x08
    3d06:	79 01       	movw	r14, r18
    3d08:	8a 01       	movw	r16, r20
    3d0a:	e8 1a       	sub	r14, r24
    3d0c:	f9 0a       	sbc	r15, r25
    3d0e:	0a 0b       	sbc	r16, r26
    3d10:	1b 0b       	sbc	r17, r27
    3d12:	d8 01       	movw	r26, r16
    3d14:	c7 01       	movw	r24, r14
    3d16:	24 e6       	ldi	r18, 0x64	; 100
    3d18:	30 e0       	ldi	r19, 0x00	; 0
    3d1a:	40 e0       	ldi	r20, 0x00	; 0
    3d1c:	50 e0       	ldi	r21, 0x00	; 0
    3d1e:	bc 01       	movw	r22, r24
    3d20:	cd 01       	movw	r24, r26
    3d22:	0e 94 b8 1f 	call	0x3f70	; 0x3f70 <__mulsi3>
    3d26:	dc 01       	movw	r26, r24
    3d28:	cb 01       	movw	r24, r22
    3d2a:	89 83       	std	Y+1, r24	; 0x01
    3d2c:	9a 83       	std	Y+2, r25	; 0x02
    3d2e:	ab 83       	std	Y+3, r26	; 0x03
    3d30:	bc 83       	std	Y+4, r27	; 0x04
	Copy_u32GivenValue /= (Copy_u32FromMax-Copy_u32FromMin);
    3d32:	29 85       	ldd	r18, Y+9	; 0x09
    3d34:	3a 85       	ldd	r19, Y+10	; 0x0a
    3d36:	4b 85       	ldd	r20, Y+11	; 0x0b
    3d38:	5c 85       	ldd	r21, Y+12	; 0x0c
    3d3a:	8d 81       	ldd	r24, Y+5	; 0x05
    3d3c:	9e 81       	ldd	r25, Y+6	; 0x06
    3d3e:	af 81       	ldd	r26, Y+7	; 0x07
    3d40:	b8 85       	ldd	r27, Y+8	; 0x08
    3d42:	28 1b       	sub	r18, r24
    3d44:	39 0b       	sbc	r19, r25
    3d46:	4a 0b       	sbc	r20, r26
    3d48:	5b 0b       	sbc	r21, r27
    3d4a:	89 81       	ldd	r24, Y+1	; 0x01
    3d4c:	9a 81       	ldd	r25, Y+2	; 0x02
    3d4e:	ab 81       	ldd	r26, Y+3	; 0x03
    3d50:	bc 81       	ldd	r27, Y+4	; 0x04
    3d52:	bc 01       	movw	r22, r24
    3d54:	cd 01       	movw	r24, r26
    3d56:	0e 94 eb 1f 	call	0x3fd6	; 0x3fd6 <__udivmodsi4>
    3d5a:	da 01       	movw	r26, r20
    3d5c:	c9 01       	movw	r24, r18
    3d5e:	89 83       	std	Y+1, r24	; 0x01
    3d60:	9a 83       	std	Y+2, r25	; 0x02
    3d62:	ab 83       	std	Y+3, r26	; 0x03
    3d64:	bc 83       	std	Y+4, r27	; 0x04
	Copy_u32GivenValue =  ((Copy_u32GivenValue)*(Copy_u32NewMax - Copy_u32NewMin));
    3d66:	2d 8d       	ldd	r18, Y+29	; 0x1d
    3d68:	3e 8d       	ldd	r19, Y+30	; 0x1e
    3d6a:	4f 8d       	ldd	r20, Y+31	; 0x1f
    3d6c:	58 a1       	ldd	r21, Y+32	; 0x20
    3d6e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3d70:	9e 85       	ldd	r25, Y+14	; 0x0e
    3d72:	af 85       	ldd	r26, Y+15	; 0x0f
    3d74:	b8 89       	ldd	r27, Y+16	; 0x10
    3d76:	28 1b       	sub	r18, r24
    3d78:	39 0b       	sbc	r19, r25
    3d7a:	4a 0b       	sbc	r20, r26
    3d7c:	5b 0b       	sbc	r21, r27
    3d7e:	89 81       	ldd	r24, Y+1	; 0x01
    3d80:	9a 81       	ldd	r25, Y+2	; 0x02
    3d82:	ab 81       	ldd	r26, Y+3	; 0x03
    3d84:	bc 81       	ldd	r27, Y+4	; 0x04
    3d86:	bc 01       	movw	r22, r24
    3d88:	cd 01       	movw	r24, r26
    3d8a:	0e 94 b8 1f 	call	0x3f70	; 0x3f70 <__mulsi3>
    3d8e:	dc 01       	movw	r26, r24
    3d90:	cb 01       	movw	r24, r22
    3d92:	89 83       	std	Y+1, r24	; 0x01
    3d94:	9a 83       	std	Y+2, r25	; 0x02
    3d96:	ab 83       	std	Y+3, r26	; 0x03
    3d98:	bc 83       	std	Y+4, r27	; 0x04
	Copy_u32GivenValue /=	100UL;
    3d9a:	89 81       	ldd	r24, Y+1	; 0x01
    3d9c:	9a 81       	ldd	r25, Y+2	; 0x02
    3d9e:	ab 81       	ldd	r26, Y+3	; 0x03
    3da0:	bc 81       	ldd	r27, Y+4	; 0x04
    3da2:	24 e6       	ldi	r18, 0x64	; 100
    3da4:	30 e0       	ldi	r19, 0x00	; 0
    3da6:	40 e0       	ldi	r20, 0x00	; 0
    3da8:	50 e0       	ldi	r21, 0x00	; 0
    3daa:	bc 01       	movw	r22, r24
    3dac:	cd 01       	movw	r24, r26
    3dae:	0e 94 eb 1f 	call	0x3fd6	; 0x3fd6 <__udivmodsi4>
    3db2:	da 01       	movw	r26, r20
    3db4:	c9 01       	movw	r24, r18
    3db6:	89 83       	std	Y+1, r24	; 0x01
    3db8:	9a 83       	std	Y+2, r25	; 0x02
    3dba:	ab 83       	std	Y+3, r26	; 0x03
    3dbc:	bc 83       	std	Y+4, r27	; 0x04
	Copy_u32GivenValue += Copy_u32NewMin;
    3dbe:	29 81       	ldd	r18, Y+1	; 0x01
    3dc0:	3a 81       	ldd	r19, Y+2	; 0x02
    3dc2:	4b 81       	ldd	r20, Y+3	; 0x03
    3dc4:	5c 81       	ldd	r21, Y+4	; 0x04
    3dc6:	8d 85       	ldd	r24, Y+13	; 0x0d
    3dc8:	9e 85       	ldd	r25, Y+14	; 0x0e
    3dca:	af 85       	ldd	r26, Y+15	; 0x0f
    3dcc:	b8 89       	ldd	r27, Y+16	; 0x10
    3dce:	82 0f       	add	r24, r18
    3dd0:	93 1f       	adc	r25, r19
    3dd2:	a4 1f       	adc	r26, r20
    3dd4:	b5 1f       	adc	r27, r21
    3dd6:	89 83       	std	Y+1, r24	; 0x01
    3dd8:	9a 83       	std	Y+2, r25	; 0x02
    3dda:	ab 83       	std	Y+3, r26	; 0x03
    3ddc:	bc 83       	std	Y+4, r27	; 0x04
	return Copy_u32GivenValue;
    3dde:	89 81       	ldd	r24, Y+1	; 0x01
    3de0:	9a 81       	ldd	r25, Y+2	; 0x02
    3de2:	ab 81       	ldd	r26, Y+3	; 0x03
    3de4:	bc 81       	ldd	r27, Y+4	; 0x04
}
    3de6:	bc 01       	movw	r22, r24
    3de8:	cd 01       	movw	r24, r26
    3dea:	60 96       	adiw	r28, 0x10	; 16
    3dec:	0f b6       	in	r0, 0x3f	; 63
    3dee:	f8 94       	cli
    3df0:	de bf       	out	0x3e, r29	; 62
    3df2:	0f be       	out	0x3f, r0	; 63
    3df4:	cd bf       	out	0x3d, r28	; 61
    3df6:	cf 91       	pop	r28
    3df8:	df 91       	pop	r29
    3dfa:	1f 91       	pop	r17
    3dfc:	0f 91       	pop	r16
    3dfe:	ff 90       	pop	r15
    3e00:	ef 90       	pop	r14
    3e02:	df 90       	pop	r13
    3e04:	cf 90       	pop	r12
    3e06:	bf 90       	pop	r11
    3e08:	af 90       	pop	r10
    3e0a:	08 95       	ret

00003e0c <Reverse_voidString>:

/* function that reverse elements of string */
void Reverse_voidString(u8* Copy_u8StringArray, u16 Copy_u16StringLength)
{
    3e0c:	df 93       	push	r29
    3e0e:	cf 93       	push	r28
    3e10:	cd b7       	in	r28, 0x3d	; 61
    3e12:	de b7       	in	r29, 0x3e	; 62
    3e14:	27 97       	sbiw	r28, 0x07	; 7
    3e16:	0f b6       	in	r0, 0x3f	; 63
    3e18:	f8 94       	cli
    3e1a:	de bf       	out	0x3e, r29	; 62
    3e1c:	0f be       	out	0x3f, r0	; 63
    3e1e:	cd bf       	out	0x3d, r28	; 61
    3e20:	9d 83       	std	Y+5, r25	; 0x05
    3e22:	8c 83       	std	Y+4, r24	; 0x04
    3e24:	7f 83       	std	Y+7, r23	; 0x07
    3e26:	6e 83       	std	Y+6, r22	; 0x06
	u8 i = 0, j = (Copy_u16StringLength - 1) , temp;
    3e28:	1b 82       	std	Y+3, r1	; 0x03
    3e2a:	8e 81       	ldd	r24, Y+6	; 0x06
    3e2c:	81 50       	subi	r24, 0x01	; 1
    3e2e:	8a 83       	std	Y+2, r24	; 0x02
    3e30:	2c c0       	rjmp	.+88     	; 0x3e8a <Reverse_voidString+0x7e>
	while (i < j) {
		temp = Copy_u8StringArray[i];
    3e32:	8b 81       	ldd	r24, Y+3	; 0x03
    3e34:	28 2f       	mov	r18, r24
    3e36:	30 e0       	ldi	r19, 0x00	; 0
    3e38:	8c 81       	ldd	r24, Y+4	; 0x04
    3e3a:	9d 81       	ldd	r25, Y+5	; 0x05
    3e3c:	fc 01       	movw	r30, r24
    3e3e:	e2 0f       	add	r30, r18
    3e40:	f3 1f       	adc	r31, r19
    3e42:	80 81       	ld	r24, Z
    3e44:	89 83       	std	Y+1, r24	; 0x01
		Copy_u8StringArray[i] = Copy_u8StringArray[j];
    3e46:	8b 81       	ldd	r24, Y+3	; 0x03
    3e48:	28 2f       	mov	r18, r24
    3e4a:	30 e0       	ldi	r19, 0x00	; 0
    3e4c:	8c 81       	ldd	r24, Y+4	; 0x04
    3e4e:	9d 81       	ldd	r25, Y+5	; 0x05
    3e50:	dc 01       	movw	r26, r24
    3e52:	a2 0f       	add	r26, r18
    3e54:	b3 1f       	adc	r27, r19
    3e56:	8a 81       	ldd	r24, Y+2	; 0x02
    3e58:	28 2f       	mov	r18, r24
    3e5a:	30 e0       	ldi	r19, 0x00	; 0
    3e5c:	8c 81       	ldd	r24, Y+4	; 0x04
    3e5e:	9d 81       	ldd	r25, Y+5	; 0x05
    3e60:	fc 01       	movw	r30, r24
    3e62:	e2 0f       	add	r30, r18
    3e64:	f3 1f       	adc	r31, r19
    3e66:	80 81       	ld	r24, Z
    3e68:	8c 93       	st	X, r24
		Copy_u8StringArray[j] = temp;
    3e6a:	8a 81       	ldd	r24, Y+2	; 0x02
    3e6c:	28 2f       	mov	r18, r24
    3e6e:	30 e0       	ldi	r19, 0x00	; 0
    3e70:	8c 81       	ldd	r24, Y+4	; 0x04
    3e72:	9d 81       	ldd	r25, Y+5	; 0x05
    3e74:	fc 01       	movw	r30, r24
    3e76:	e2 0f       	add	r30, r18
    3e78:	f3 1f       	adc	r31, r19
    3e7a:	89 81       	ldd	r24, Y+1	; 0x01
    3e7c:	80 83       	st	Z, r24
		i++;
    3e7e:	8b 81       	ldd	r24, Y+3	; 0x03
    3e80:	8f 5f       	subi	r24, 0xFF	; 255
    3e82:	8b 83       	std	Y+3, r24	; 0x03
		j--;
    3e84:	8a 81       	ldd	r24, Y+2	; 0x02
    3e86:	81 50       	subi	r24, 0x01	; 1
    3e88:	8a 83       	std	Y+2, r24	; 0x02

/* function that reverse elements of string */
void Reverse_voidString(u8* Copy_u8StringArray, u16 Copy_u16StringLength)
{
	u8 i = 0, j = (Copy_u16StringLength - 1) , temp;
	while (i < j) {
    3e8a:	9b 81       	ldd	r25, Y+3	; 0x03
    3e8c:	8a 81       	ldd	r24, Y+2	; 0x02
    3e8e:	98 17       	cp	r25, r24
    3e90:	80 f2       	brcs	.-96     	; 0x3e32 <Reverse_voidString+0x26>
		Copy_u8StringArray[i] = Copy_u8StringArray[j];
		Copy_u8StringArray[j] = temp;
		i++;
		j--;
	}
}
    3e92:	27 96       	adiw	r28, 0x07	; 7
    3e94:	0f b6       	in	r0, 0x3f	; 63
    3e96:	f8 94       	cli
    3e98:	de bf       	out	0x3e, r29	; 62
    3e9a:	0f be       	out	0x3f, r0	; 63
    3e9c:	cd bf       	out	0x3d, r28	; 61
    3e9e:	cf 91       	pop	r28
    3ea0:	df 91       	pop	r29
    3ea2:	08 95       	ret

00003ea4 <intTo_u16Str>:

/* function that converts an integer number to string */
u16 intTo_u16Str(u16 Copy_u16IntegerNumber, u8 Copy_u8StringArray[], u16 Copy_u16NumberOfDigits)
{
    3ea4:	df 93       	push	r29
    3ea6:	cf 93       	push	r28
    3ea8:	cd b7       	in	r28, 0x3d	; 61
    3eaa:	de b7       	in	r29, 0x3e	; 62
    3eac:	28 97       	sbiw	r28, 0x08	; 8
    3eae:	0f b6       	in	r0, 0x3f	; 63
    3eb0:	f8 94       	cli
    3eb2:	de bf       	out	0x3e, r29	; 62
    3eb4:	0f be       	out	0x3f, r0	; 63
    3eb6:	cd bf       	out	0x3d, r28	; 61
    3eb8:	9c 83       	std	Y+4, r25	; 0x04
    3eba:	8b 83       	std	Y+3, r24	; 0x03
    3ebc:	7e 83       	std	Y+6, r23	; 0x06
    3ebe:	6d 83       	std	Y+5, r22	; 0x05
    3ec0:	58 87       	std	Y+8, r21	; 0x08
    3ec2:	4f 83       	std	Y+7, r20	; 0x07
	u16 i = 0;
    3ec4:	1a 82       	std	Y+2, r1	; 0x02
    3ec6:	19 82       	std	Y+1, r1	; 0x01
    3ec8:	1f c0       	rjmp	.+62     	; 0x3f08 <intTo_u16Str+0x64>
	while (Copy_u16IntegerNumber)
	{
		Copy_u8StringArray[i++] = (Copy_u16IntegerNumber % 10) + '0';
    3eca:	2d 81       	ldd	r18, Y+5	; 0x05
    3ecc:	3e 81       	ldd	r19, Y+6	; 0x06
    3ece:	89 81       	ldd	r24, Y+1	; 0x01
    3ed0:	9a 81       	ldd	r25, Y+2	; 0x02
    3ed2:	f9 01       	movw	r30, r18
    3ed4:	e8 0f       	add	r30, r24
    3ed6:	f9 1f       	adc	r31, r25
    3ed8:	8b 81       	ldd	r24, Y+3	; 0x03
    3eda:	9c 81       	ldd	r25, Y+4	; 0x04
    3edc:	2a e0       	ldi	r18, 0x0A	; 10
    3ede:	30 e0       	ldi	r19, 0x00	; 0
    3ee0:	b9 01       	movw	r22, r18
    3ee2:	0e 94 d7 1f 	call	0x3fae	; 0x3fae <__udivmodhi4>
    3ee6:	80 5d       	subi	r24, 0xD0	; 208
    3ee8:	80 83       	st	Z, r24
    3eea:	89 81       	ldd	r24, Y+1	; 0x01
    3eec:	9a 81       	ldd	r25, Y+2	; 0x02
    3eee:	01 96       	adiw	r24, 0x01	; 1
    3ef0:	9a 83       	std	Y+2, r25	; 0x02
    3ef2:	89 83       	std	Y+1, r24	; 0x01
		Copy_u16IntegerNumber = Copy_u16IntegerNumber / 10;
    3ef4:	8b 81       	ldd	r24, Y+3	; 0x03
    3ef6:	9c 81       	ldd	r25, Y+4	; 0x04
    3ef8:	2a e0       	ldi	r18, 0x0A	; 10
    3efa:	30 e0       	ldi	r19, 0x00	; 0
    3efc:	b9 01       	movw	r22, r18
    3efe:	0e 94 d7 1f 	call	0x3fae	; 0x3fae <__udivmodhi4>
    3f02:	cb 01       	movw	r24, r22
    3f04:	9c 83       	std	Y+4, r25	; 0x04
    3f06:	8b 83       	std	Y+3, r24	; 0x03

/* function that converts an integer number to string */
u16 intTo_u16Str(u16 Copy_u16IntegerNumber, u8 Copy_u8StringArray[], u16 Copy_u16NumberOfDigits)
{
	u16 i = 0;
	while (Copy_u16IntegerNumber)
    3f08:	8b 81       	ldd	r24, Y+3	; 0x03
    3f0a:	9c 81       	ldd	r25, Y+4	; 0x04
    3f0c:	00 97       	sbiw	r24, 0x00	; 0
    3f0e:	e9 f6       	brne	.-70     	; 0x3eca <intTo_u16Str+0x26>
    3f10:	0e c0       	rjmp	.+28     	; 0x3f2e <intTo_u16Str+0x8a>
	}

	/* If number of digits required is more, then
	 add 0s at the beginning */
	while (i < Copy_u16NumberOfDigits)
		{Copy_u8StringArray[i++] = '0';}
    3f12:	2d 81       	ldd	r18, Y+5	; 0x05
    3f14:	3e 81       	ldd	r19, Y+6	; 0x06
    3f16:	89 81       	ldd	r24, Y+1	; 0x01
    3f18:	9a 81       	ldd	r25, Y+2	; 0x02
    3f1a:	f9 01       	movw	r30, r18
    3f1c:	e8 0f       	add	r30, r24
    3f1e:	f9 1f       	adc	r31, r25
    3f20:	80 e3       	ldi	r24, 0x30	; 48
    3f22:	80 83       	st	Z, r24
    3f24:	89 81       	ldd	r24, Y+1	; 0x01
    3f26:	9a 81       	ldd	r25, Y+2	; 0x02
    3f28:	01 96       	adiw	r24, 0x01	; 1
    3f2a:	9a 83       	std	Y+2, r25	; 0x02
    3f2c:	89 83       	std	Y+1, r24	; 0x01
		Copy_u16IntegerNumber = Copy_u16IntegerNumber / 10;
	}

	/* If number of digits required is more, then
	 add 0s at the beginning */
	while (i < Copy_u16NumberOfDigits)
    3f2e:	29 81       	ldd	r18, Y+1	; 0x01
    3f30:	3a 81       	ldd	r19, Y+2	; 0x02
    3f32:	8f 81       	ldd	r24, Y+7	; 0x07
    3f34:	98 85       	ldd	r25, Y+8	; 0x08
    3f36:	28 17       	cp	r18, r24
    3f38:	39 07       	cpc	r19, r25
    3f3a:	58 f3       	brcs	.-42     	; 0x3f12 <intTo_u16Str+0x6e>
		{Copy_u8StringArray[i++] = '0';}

	Reverse_voidString(Copy_u8StringArray, i);
    3f3c:	8d 81       	ldd	r24, Y+5	; 0x05
    3f3e:	9e 81       	ldd	r25, Y+6	; 0x06
    3f40:	29 81       	ldd	r18, Y+1	; 0x01
    3f42:	3a 81       	ldd	r19, Y+2	; 0x02
    3f44:	b9 01       	movw	r22, r18
    3f46:	0e 94 06 1f 	call	0x3e0c	; 0x3e0c <Reverse_voidString>
	Copy_u8StringArray[i] = '\0';
    3f4a:	2d 81       	ldd	r18, Y+5	; 0x05
    3f4c:	3e 81       	ldd	r19, Y+6	; 0x06
    3f4e:	89 81       	ldd	r24, Y+1	; 0x01
    3f50:	9a 81       	ldd	r25, Y+2	; 0x02
    3f52:	f9 01       	movw	r30, r18
    3f54:	e8 0f       	add	r30, r24
    3f56:	f9 1f       	adc	r31, r25
    3f58:	10 82       	st	Z, r1
	return i;
    3f5a:	89 81       	ldd	r24, Y+1	; 0x01
    3f5c:	9a 81       	ldd	r25, Y+2	; 0x02
}
    3f5e:	28 96       	adiw	r28, 0x08	; 8
    3f60:	0f b6       	in	r0, 0x3f	; 63
    3f62:	f8 94       	cli
    3f64:	de bf       	out	0x3e, r29	; 62
    3f66:	0f be       	out	0x3f, r0	; 63
    3f68:	cd bf       	out	0x3d, r28	; 61
    3f6a:	cf 91       	pop	r28
    3f6c:	df 91       	pop	r29
    3f6e:	08 95       	ret

00003f70 <__mulsi3>:
    3f70:	62 9f       	mul	r22, r18
    3f72:	d0 01       	movw	r26, r0
    3f74:	73 9f       	mul	r23, r19
    3f76:	f0 01       	movw	r30, r0
    3f78:	82 9f       	mul	r24, r18
    3f7a:	e0 0d       	add	r30, r0
    3f7c:	f1 1d       	adc	r31, r1
    3f7e:	64 9f       	mul	r22, r20
    3f80:	e0 0d       	add	r30, r0
    3f82:	f1 1d       	adc	r31, r1
    3f84:	92 9f       	mul	r25, r18
    3f86:	f0 0d       	add	r31, r0
    3f88:	83 9f       	mul	r24, r19
    3f8a:	f0 0d       	add	r31, r0
    3f8c:	74 9f       	mul	r23, r20
    3f8e:	f0 0d       	add	r31, r0
    3f90:	65 9f       	mul	r22, r21
    3f92:	f0 0d       	add	r31, r0
    3f94:	99 27       	eor	r25, r25
    3f96:	72 9f       	mul	r23, r18
    3f98:	b0 0d       	add	r27, r0
    3f9a:	e1 1d       	adc	r30, r1
    3f9c:	f9 1f       	adc	r31, r25
    3f9e:	63 9f       	mul	r22, r19
    3fa0:	b0 0d       	add	r27, r0
    3fa2:	e1 1d       	adc	r30, r1
    3fa4:	f9 1f       	adc	r31, r25
    3fa6:	bd 01       	movw	r22, r26
    3fa8:	cf 01       	movw	r24, r30
    3faa:	11 24       	eor	r1, r1
    3fac:	08 95       	ret

00003fae <__udivmodhi4>:
    3fae:	aa 1b       	sub	r26, r26
    3fb0:	bb 1b       	sub	r27, r27
    3fb2:	51 e1       	ldi	r21, 0x11	; 17
    3fb4:	07 c0       	rjmp	.+14     	; 0x3fc4 <__udivmodhi4_ep>

00003fb6 <__udivmodhi4_loop>:
    3fb6:	aa 1f       	adc	r26, r26
    3fb8:	bb 1f       	adc	r27, r27
    3fba:	a6 17       	cp	r26, r22
    3fbc:	b7 07       	cpc	r27, r23
    3fbe:	10 f0       	brcs	.+4      	; 0x3fc4 <__udivmodhi4_ep>
    3fc0:	a6 1b       	sub	r26, r22
    3fc2:	b7 0b       	sbc	r27, r23

00003fc4 <__udivmodhi4_ep>:
    3fc4:	88 1f       	adc	r24, r24
    3fc6:	99 1f       	adc	r25, r25
    3fc8:	5a 95       	dec	r21
    3fca:	a9 f7       	brne	.-22     	; 0x3fb6 <__udivmodhi4_loop>
    3fcc:	80 95       	com	r24
    3fce:	90 95       	com	r25
    3fd0:	bc 01       	movw	r22, r24
    3fd2:	cd 01       	movw	r24, r26
    3fd4:	08 95       	ret

00003fd6 <__udivmodsi4>:
    3fd6:	a1 e2       	ldi	r26, 0x21	; 33
    3fd8:	1a 2e       	mov	r1, r26
    3fda:	aa 1b       	sub	r26, r26
    3fdc:	bb 1b       	sub	r27, r27
    3fde:	fd 01       	movw	r30, r26
    3fe0:	0d c0       	rjmp	.+26     	; 0x3ffc <__udivmodsi4_ep>

00003fe2 <__udivmodsi4_loop>:
    3fe2:	aa 1f       	adc	r26, r26
    3fe4:	bb 1f       	adc	r27, r27
    3fe6:	ee 1f       	adc	r30, r30
    3fe8:	ff 1f       	adc	r31, r31
    3fea:	a2 17       	cp	r26, r18
    3fec:	b3 07       	cpc	r27, r19
    3fee:	e4 07       	cpc	r30, r20
    3ff0:	f5 07       	cpc	r31, r21
    3ff2:	20 f0       	brcs	.+8      	; 0x3ffc <__udivmodsi4_ep>
    3ff4:	a2 1b       	sub	r26, r18
    3ff6:	b3 0b       	sbc	r27, r19
    3ff8:	e4 0b       	sbc	r30, r20
    3ffa:	f5 0b       	sbc	r31, r21

00003ffc <__udivmodsi4_ep>:
    3ffc:	66 1f       	adc	r22, r22
    3ffe:	77 1f       	adc	r23, r23
    4000:	88 1f       	adc	r24, r24
    4002:	99 1f       	adc	r25, r25
    4004:	1a 94       	dec	r1
    4006:	69 f7       	brne	.-38     	; 0x3fe2 <__udivmodsi4_loop>
    4008:	60 95       	com	r22
    400a:	70 95       	com	r23
    400c:	80 95       	com	r24
    400e:	90 95       	com	r25
    4010:	9b 01       	movw	r18, r22
    4012:	ac 01       	movw	r20, r24
    4014:	bd 01       	movw	r22, r26
    4016:	cf 01       	movw	r24, r30
    4018:	08 95       	ret

0000401a <__prologue_saves__>:
    401a:	2f 92       	push	r2
    401c:	3f 92       	push	r3
    401e:	4f 92       	push	r4
    4020:	5f 92       	push	r5
    4022:	6f 92       	push	r6
    4024:	7f 92       	push	r7
    4026:	8f 92       	push	r8
    4028:	9f 92       	push	r9
    402a:	af 92       	push	r10
    402c:	bf 92       	push	r11
    402e:	cf 92       	push	r12
    4030:	df 92       	push	r13
    4032:	ef 92       	push	r14
    4034:	ff 92       	push	r15
    4036:	0f 93       	push	r16
    4038:	1f 93       	push	r17
    403a:	cf 93       	push	r28
    403c:	df 93       	push	r29
    403e:	cd b7       	in	r28, 0x3d	; 61
    4040:	de b7       	in	r29, 0x3e	; 62
    4042:	ca 1b       	sub	r28, r26
    4044:	db 0b       	sbc	r29, r27
    4046:	0f b6       	in	r0, 0x3f	; 63
    4048:	f8 94       	cli
    404a:	de bf       	out	0x3e, r29	; 62
    404c:	0f be       	out	0x3f, r0	; 63
    404e:	cd bf       	out	0x3d, r28	; 61
    4050:	09 94       	ijmp

00004052 <__epilogue_restores__>:
    4052:	2a 88       	ldd	r2, Y+18	; 0x12
    4054:	39 88       	ldd	r3, Y+17	; 0x11
    4056:	48 88       	ldd	r4, Y+16	; 0x10
    4058:	5f 84       	ldd	r5, Y+15	; 0x0f
    405a:	6e 84       	ldd	r6, Y+14	; 0x0e
    405c:	7d 84       	ldd	r7, Y+13	; 0x0d
    405e:	8c 84       	ldd	r8, Y+12	; 0x0c
    4060:	9b 84       	ldd	r9, Y+11	; 0x0b
    4062:	aa 84       	ldd	r10, Y+10	; 0x0a
    4064:	b9 84       	ldd	r11, Y+9	; 0x09
    4066:	c8 84       	ldd	r12, Y+8	; 0x08
    4068:	df 80       	ldd	r13, Y+7	; 0x07
    406a:	ee 80       	ldd	r14, Y+6	; 0x06
    406c:	fd 80       	ldd	r15, Y+5	; 0x05
    406e:	0c 81       	ldd	r16, Y+4	; 0x04
    4070:	1b 81       	ldd	r17, Y+3	; 0x03
    4072:	aa 81       	ldd	r26, Y+2	; 0x02
    4074:	b9 81       	ldd	r27, Y+1	; 0x01
    4076:	ce 0f       	add	r28, r30
    4078:	d1 1d       	adc	r29, r1
    407a:	0f b6       	in	r0, 0x3f	; 63
    407c:	f8 94       	cli
    407e:	de bf       	out	0x3e, r29	; 62
    4080:	0f be       	out	0x3f, r0	; 63
    4082:	cd bf       	out	0x3d, r28	; 61
    4084:	ed 01       	movw	r28, r26
    4086:	08 95       	ret

00004088 <_exit>:
    4088:	f8 94       	cli

0000408a <__stop_program>:
    408a:	ff cf       	rjmp	.-2      	; 0x408a <__stop_program>
